(lp0
(lp1
S'ResetPostClassify'
p2
aS'CheckPostClass'
p3
aS'CheckPCRhythm'
p4
aS'QRSDet'
p5
aS'Peak'
p6
aS'mean'
p7
aS'thresh'
p8
aS'BLSCheck'
p9
aS'QRSDet'
p10
aS'Peak'
p11
aS'mean'
p12
aS'thresh'
p13
aS'BLSCheck'
p14
aS'Classify'
p15
aS'HFNoiseCheck'
p16
aS'DomMonitor'
p17
aS'GetNewDominantType'
p18
aS'GetDomRhythm'
p19
aS'AdjustDomData'
p20
aS'CombineDomData'
p21
aS'main'
p22
aS'NextSample'
p23
aS'gcd'
p24
aS'IsoCheck'
p25
aS'AnalyzeBeat'
p26
aS'ResetBDAC'
p27
aS'BeatDetectAndClassify'
p28
aS'DownSampleBeat'
p29
aS'QRSFilter'
p30
aS'lpfilt'
p31
aS'testfunction'
p32
aS'hpfilt'
p33
aS'deriv1'
p34
aS'deriv2'
p35
aS'mvwint'
p36
aS'main'
p37
aS'getref'
p38
aS'gettest'
p39
aS'rpann'
p40
aS'tpann'
p41
aS'pair'
p42
aS'pstat'
p43
aS'sstat'
p44
aS'init'
p45
aS'print_results'
p46
aS'help'
p47
aS'genxcmp'
p48
aS'NewInit'
p49
aS'NewPrintResults'
p50
aS'ResetMatch'
p51
aS'CompareBeats'
p52
aS'CompareBeats2'
p53
aS'UpdateBeat'
p54
aS'GetTypesCount'
p55
aS'GetBeatTypeCount'
p56
aS'GetBeatWidth'
p57
aS'GetBeatCenter'
p58
aS'GetBeatClass'
p59
aS'SetBeatClass'
p60
aS'NewBeatType'
p61
aS'BestMorphMatch'
p62
aS'UpdateBeatType'
p63
aS'GetDominantType'
p64
aS'ClearLastNewType'
p65
aS'GetBeatBegin'
p66
aS'GetBeatEnd'
p67
aS'GetBeatAmp'
p68
aS'DomCompare2'
p69
aS'DomCompare'
p70
aS'BeatCopy'
p71
aS'MinimumBeatVariation'
p72
aS'WideBeatVariation'
p73
aS'GetNoiseEstimate'
p74
aS'NoiseCheck'
p75
aS'abs'
p76
aa(lp77
(dp78
S'in file'
p79
S'POSTCLAS.CPP'
p80
sS'costs'
p81
(dp82
S'baseline'
p83
(dp84
S'division'
p85
I0
sS'return'
p86
I0
sS'addition'
p87
I0
sS'varassignment'
p88
I1
sS'bitshift'
p89
I0
sS'amount'
p90
I1
sS'multiplication'
p91
I0
sS'incrementation'
p92
I0
ssS'for'
p93
(lp94
(dp95
S'bodycost'
p96
(dp97
g79
g80
sg81
(dp98
g83
(dp99
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp100
(dp101
g96
(dp102
g79
g80
sg81
(dp103
g83
(dp104
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp105
sS'while'
p106
(lp107
sS'switch'
p108
(lp109
sS'other_functions'
p110
(dp111
sS'if'
p112
(lp113
ssS'name'
p114
S'ResetPostClassify for: 1 for: 1'
p115
sS'finalcost'
p116
(dp117
S'division'
p118
I0
sS'return'
p119
I0
sS'addition'
p120
I0
sS'varassignment'
p121
I2
sS'bitshift'
p122
I0
sS'multiplication'
p123
I0
sS'incrementation'
p124
I0
sS'if'
p125
I0
sssS'numloops'
p126
F8.0
sS'default'
p127
S'no'
p128
sg116
(dp129
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F17.0
sg122
F0.0
sg123
F0.0
sg124
F8.0
sg125
F8.0
ssS'conditions'
p130
S'tor (j = 0; j < 8; ++j)'
p131
sS'optioncost'
p132
(dp133
g79
g80
sg81
(dp134
g83
(dp135
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp136
sg106
(lp137
sg108
(lp138
sg110
(dp139
sg112
(lp140
ssg114
S'for conditions'
p141
sg116
(dp142
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp143
sg108
(lp144
sg110
(dp145
sg112
(lp146
ssg114
S'ResetPostClassify for: 1'
p147
sg116
(dp148
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F17.0
sg122
F0.0
sg123
F0.0
sg124
F8.0
sg125
F8.0
sssg126
I8
sg127
g128
sg116
(dp149
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F137.0
sg122
F0.0
sg123
F0.0
sg124
F72.0
sg125
F72.0
ssg130
S'tor (i = 0; i < MAXTYPES; ++i)'
p150
sg132
(dp151
g79
g80
sg81
(dp152
g83
(dp153
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp154
sg106
(lp155
sg108
(lp156
sg110
(dp157
sg112
(lp158
ssg114
g141
sg116
(dp159
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp160
sg108
(lp161
sg110
(dp162
sg112
(lp163
ssg114
g2
sg116
(dp164
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F138.0
sg122
F0.0
sg123
F0.0
sg124
F72.0
sg125
F72.0
ssa(dp165
g79
g80
sg81
(dp166
g83
(dp167
g85
I0
sg86
I1
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp168
(dp169
g96
(dp170
g79
g80
sg81
(dp171
g83
(dp172
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp173
sg106
(lp174
sg108
(lp175
sg110
(dp176
sg112
(lp177
(dp178
S'options'
p179
(lp180
(dp181
g79
g80
sg81
(dp182
g83
(dp183
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp184
sg106
(lp185
sg108
(lp186
sg110
(dp187
sg112
(lp188
ssg114
S'CheckPostClass for: 1 if: 1 option: 1'
p189
sg116
(dp190
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasS'condition'
p191
S'if (PostClass[type][i] == PVC)'
p192
sassg114
S'CheckPostClass for: 1'
p193
sg116
(dp194
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I1
sssg126
F4.0
sg127
g128
sg116
(dp195
g118
F0.0
sg119
F0.0
sg120
F8.0
sg121
F1.0
sg122
F0.0
sg123
F0.0
sg124
F4.0
sg125
F8.0
ssg130
S'tor (i = 0; i < 4; ++i)'
p196
sg132
(dp197
g79
g80
sg81
(dp198
g83
(dp199
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp200
sg106
(lp201
sg108
(lp202
sg110
(dp203
sg112
(lp204
ssg114
g141
sg116
(dp205
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp206
g96
(dp207
g79
g80
sg81
(dp208
g83
(dp209
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp210
sg106
(lp211
sg108
(lp212
sg110
(dp213
sg112
(lp214
(dp215
g179
(lp216
(dp217
g79
g80
sg81
(dp218
g83
(dp219
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp220
sg106
(lp221
sg108
(lp222
sg110
(dp223
sg112
(lp224
ssg114
S'CheckPostClass for: 2 if: 1 option: 1'
p225
sg116
(dp226
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (PostClass[type][i] == PVC)'
p227
sassg114
S'CheckPostClass for: 2'
p228
sg116
(dp229
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I1
sssg126
F4.0
sg127
g128
sg116
(dp230
g118
F0.0
sg119
F0.0
sg120
F8.0
sg121
F1.0
sg122
F0.0
sg123
F0.0
sg124
F4.0
sg125
F8.0
ssg130
S'tor (pvcs8 = pvcs4; i < 8; ++i)'
p231
sg132
(dp232
g79
g80
sg81
(dp233
g83
(dp234
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp235
sg106
(lp236
sg108
(lp237
sg110
(dp238
sg112
(lp239
ssg114
g141
sg116
(dp240
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp241
sg108
(lp242
sg110
(dp243
sg112
(lp244
(dp245
g179
(lp246
(dp247
g79
g80
sg81
(dp248
g83
(dp249
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp250
sg106
(lp251
sg108
(lp252
sg110
(dp253
sg112
(lp254
ssg114
S'CheckPostClass if: 1 option: 1'
p255
sg116
(dp256
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (type == MAXTYPES)'
p257
sa(dp258
g179
(lp259
(dp260
g79
g80
sg81
(dp261
g83
(dp262
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp263
sg106
(lp264
sg108
(lp265
sg110
(dp266
sg112
(lp267
ssg114
S'CheckPostClass if: 2 option: 1'
p268
sg116
(dp269
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp270
g79
g80
sg81
(dp271
g83
(dp272
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp273
sg106
(lp274
sg108
(lp275
sg110
(dp276
sg112
(lp277
ssg114
S'CheckPostClass if: 2 option: 2'
p278
sg116
(dp279
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((pvcs4 >= 3) || (pvcs8 >= 6))'
p280
sassg114
g3
sg116
(dp281
g118
F0.0
sg119
F1.0
sg120
F16.0
sg121
F3.0
sg122
F0.0
sg123
F0.0
sg124
F8.0
sg125
F20.0
ssa(dp282
g79
g80
sg81
(dp283
g83
(dp284
g85
I0
sg86
I1
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp285
(dp286
g96
(dp287
g79
g80
sg81
(dp288
g83
(dp289
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp290
sg106
(lp291
sg108
(lp292
sg110
(dp293
sg112
(lp294
(dp295
g179
(lp296
(dp297
g79
g80
sg81
(dp298
g83
(dp299
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp300
sg106
(lp301
sg108
(lp302
sg110
(dp303
sg112
(lp304
ssg114
S'CheckPCRhythm for: 1 if: 1 option: 1'
p305
sg116
(dp306
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (PCRhythm[type][i] == NORMAL)'
p307
sassg114
S'CheckPCRhythm for: 1'
p308
sg116
(dp309
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I1
sssg126
I8
sg127
g128
sg116
(dp310
g118
I0
sg119
I0
sg120
I16
sg121
I2
sg122
I0
sg123
I0
sg124
I8
sg125
I16
ssg130
S'tor (i = normCount = 0; i < n; ++i)'
p311
sg132
(dp312
g79
g80
sg81
(dp313
g83
(dp314
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp315
sg106
(lp316
sg108
(lp317
sg110
(dp318
sg112
(lp319
ssg114
g141
sg116
(dp320
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp321
sg108
(lp322
sg110
(dp323
g56
I1
ssg112
(lp324
(dp325
g179
(lp326
(dp327
g79
g80
sg81
(dp328
g83
(dp329
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp330
sg106
(lp331
sg108
(lp332
sg110
(dp333
sg112
(lp334
ssg114
S'CheckPCRhythm if: 1 option: 1'
p335
sg116
(dp336
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (type == MAXTYPES)'
p337
sa(dp338
g179
(lp339
(dp340
g79
g80
sg81
(dp341
g83
(dp342
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp343
sg106
(lp344
sg108
(lp345
sg110
(dp346
sg112
(lp347
ssg114
S'CheckPCRhythm if: 2 option: 1'
p348
sg116
(dp349
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp350
g79
g80
sg81
(dp351
g83
(dp352
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp353
sg106
(lp354
sg108
(lp355
sg110
(dp356
sg112
(lp357
ssg114
S'CheckPCRhythm if: 2 option: 2'
p358
sg116
(dp359
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (GetBeatTypeCount(type) < 9)'
p360
sa(dp361
g179
(lp362
(dp363
g79
g80
sg81
(dp364
g83
(dp365
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp366
sg106
(lp367
sg108
(lp368
sg110
(dp369
sg112
(lp370
ssg114
S'CheckPCRhythm if: 3 option: 1'
p371
sg116
(dp372
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (normCount >= 7)'
p373
sa(dp374
g179
(lp375
(dp376
g79
g80
sg81
(dp377
g83
(dp378
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp379
sg106
(lp380
sg108
(lp381
sg110
(dp382
sg112
(lp383
ssg114
S'CheckPCRhythm if: 4 option: 1'
p384
sg116
(dp385
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (((normCount == 0) && (n < 4)) || ((normCount <= 1) && (n >= 4) && (n < 7))|| ((normCount <= 2) && (n >= 7)))'
p386
sassg114
g4
sg116
(dp387
g118
I0
sg119
I2
sg120
I17
sg121
I4
sg122
I0
sg123
I0
sg124
I8
sg125
I27
ssa(dp388
g79
S'QRSDET2.CPP'
p389
sg81
(dp390
g83
(dp391
g85
I0
sg86
I1
sg87
I1
sg88
I9
sg89
I1
sg90
I1
sg91
I0
sg92
I2
ssg93
(lp392
sg106
(lp393
sg108
(lp394
sg110
(dp395
g30
I1
sg6
I2
sg34
I1
ssg112
(lp396
(dp397
g179
(lp398
(dp399
g79
g389
sg81
(dp400
g83
(dp401
g85
I0
sg86
I0
sg87
I0
sg88
I10
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp402
(dp403
g96
(dp404
g79
g389
sg81
(dp405
g83
(dp406
g85
I0
sg86
I0
sg87
I2
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp407
sg106
(lp408
sg108
(lp409
sg110
(dp410
sg112
(lp411
ssg114
S'QRSDet if: 1 option: 1 for: 1'
p412
sg116
(dp413
g118
I0
sg119
I0
sg120
I2
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
F8.0
sg127
g128
sg116
(dp414
g118
F0.0
sg119
F0.0
sg120
F16.0
sg121
F17.0
sg122
F0.0
sg123
F0.0
sg124
F8.0
sg125
F8.0
ssg130
S'tor (i = 0; i < 8; ++i)'
p415
sg132
(dp416
g79
g389
sg81
(dp417
g83
(dp418
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp419
sg106
(lp420
sg108
(lp421
sg110
(dp422
sg112
(lp423
ssg114
g141
sg116
(dp424
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp425
sg108
(lp426
sg110
(dp427
g6
I2
sg30
I1
ssg112
(lp428
ssg114
S'QRSDet if: 1 option: 1'
p429
sg116
(dp430
g118
F18.0
sg119
F16.0
sg120
F49.0
sg121
F267.0
sg122
F6.0
sg123
F3.0
sg124
F125.0
sg125
F159.0
ssasg191
S'if (init)'
p431
sa(dp432
g179
(lp433
(dp434
g79
g389
sg81
(dp435
g83
(dp436
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp437
sg106
(lp438
sg108
(lp439
sg110
(dp440
sg112
(lp441
ssg114
S'QRSDet if: 2 option: 1'
p442
sg116
(dp443
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (aPeak < MIN_PEAK_AMP)'
p444
sa(dp445
g179
(lp446
(dp447
g79
g389
sg81
(dp448
g83
(dp449
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp450
sg106
(lp451
sg108
(lp452
sg110
(dp453
sg112
(lp454
ssg114
S'QRSDet if: 3 option: 1'
p455
sg116
(dp456
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (aPeak && !preBlankCnt) '
p457
sa(dp458
g179
(lp459
(dp460
g79
g389
sg81
(dp461
g83
(dp462
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp463
sg106
(lp464
sg108
(lp465
sg110
(dp466
sg112
(lp467
(dp468
g179
(lp469
(dp470
g79
g389
sg81
(dp471
g83
(dp472
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp473
sg106
(lp474
sg108
(lp475
sg110
(dp476
sg112
(lp477
ssg114
S'QRSDet if: 4 option: 1 if: 1 option: 1'
p478
sg116
(dp479
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (--preBlankCnt == 0)'
p480
sassg114
S'QRSDet if: 4 option: 1'
p481
sg116
(dp482
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I1
ssasg191
S'else if (!aPeak && preBlankCnt) '
p483
sa(dp484
g179
(lp485
(dp486
g79
g389
sg81
(dp487
g83
(dp488
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp489
sg106
(lp490
sg108
(lp491
sg110
(dp492
sg112
(lp493
(dp494
g179
(lp495
(dp496
g79
g389
sg81
(dp497
g83
(dp498
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp499
sg106
(lp500
sg108
(lp501
sg110
(dp502
sg112
(lp503
ssg114
S'QRSDet if: 5 option: 1 if: 1 option: 1'
p504
sg116
(dp505
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp506
g79
g389
sg81
(dp507
g83
(dp508
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp509
sg106
(lp510
sg108
(lp511
sg110
(dp512
sg112
(lp513
ssg114
S'QRSDet if: 5 option: 1 if: 1 option: 2'
p514
sg116
(dp515
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (aPeak > tempPeak) '
p516
sassg114
S'QRSDet if: 5 option: 1'
p517
sg116
(dp518
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I2
ssasg191
S'else if (aPeak) '
p519
sa(dp520
g179
(lp521
(dp522
g79
g389
sg81
(dp523
g83
(dp524
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp525
sg106
(lp526
sg108
(lp527
sg110
(dp528
sg112
(lp529
ssg114
S'QRSDet if: 6 option: 1'
p530
sg116
(dp531
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++DDPtr == DER_DELAY)'
p532
sa(dp533
g179
(lp534
(dp535
g79
g389
sg81
(dp536
g83
(dp537
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I2
ssg93
(lp538
sg106
(lp539
sg108
(lp540
sg110
(dp541
sg112
(lp542
(dp543
g179
(lp544
(dp545
g79
g389
sg81
(dp546
g83
(dp547
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp548
sg106
(lp549
sg108
(lp550
sg110
(dp551
sg112
(lp552
ssg114
S'QRSDet if: 7 option: 1 if: 1 option: 1'
p553
sg116
(dp554
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (newPeak > 0)'
p555
sa(dp556
g179
(lp557
(dp558
g79
g389
sg81
(dp559
g83
(dp560
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp561
sg106
(lp562
sg108
(lp563
sg110
(dp564
sg112
(lp565
(dp566
g179
(lp567
(dp568
g79
g389
sg81
(dp569
g83
(dp570
g85
I0
sg86
I0
sg87
I1
sg88
I5
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp571
sg106
(lp572
sg108
(lp573
sg110
(dp574
g8
I2
sg7
I2
ssg112
(lp575
ssg114
S'QRSDet if: 7 option: 1 if: 2 option: 1 if: 1 option: 1'
p576
sg116
(dp577
g118
I2
sg119
I4
sg120
I21
sg121
I37
sg122
I0
sg123
I4
sg124
I16
sg125
I16
ssasg191
S'if (qpkcnt == 8)'
p578
sassg114
S'QRSDet if: 7 option: 1 if: 2 option: 1'
p579
sg116
(dp580
g118
I2
sg119
I4
sg120
I21
sg121
I40
sg122
I0
sg123
I4
sg124
I17
sg125
I17
ssasg191
S'if (++initBlank == MS1000)'
p581
sa(dp582
g179
(lp583
(dp584
g79
g389
sg81
(dp585
g83
(dp586
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp587
sg106
(lp588
sg108
(lp589
sg110
(dp590
sg112
(lp591
ssg114
S'QRSDet if: 7 option: 1 if: 3 option: 1'
p592
sg116
(dp593
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (newPeak > initMax)'
p594
sassg114
S'QRSDet if: 7 option: 1'
p595
sg116
(dp596
g118
I2
sg119
I4
sg120
I21
sg121
I42
sg122
I0
sg123
I4
sg124
I19
sg125
I20
ssasg191
S'if (qpkcnt < 8)'
p597
sa(dp598
g179
(lp599
(dp600
g79
g389
sg81
(dp601
g83
(dp602
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp603
sg106
(lp604
sg108
(lp605
sg110
(dp606
g9
I2
ssg112
(lp607
(dp608
g179
(lp609
(dp610
g79
g389
sg81
(dp611
g83
(dp612
g85
I0
sg86
I0
sg87
I1
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp613
sg106
(lp614
sg108
(lp615
sg110
(dp616
g8
I2
sg7
I2
ssg112
(lp617
(dp618
g179
(lp619
(dp620
g79
g389
sg81
(dp621
g83
(dp622
g85
I0
sg86
I0
sg87
I4
sg88
I14
sg89
I1
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp623
sg106
(lp624
sg108
(lp625
sg110
(dp626
g8
I2
sg7
I4
ssg112
(lp627
ssg114
S'QRSDet if: 8 option: 1 if: 1 option: 1 if: 1 option: 1'
p628
sg116
(dp629
g118
I4
sg119
I6
sg120
I40
sg121
I68
sg122
I1
sg123
I4
sg124
I32
sg125
I32
ssasg191
S'if (newPeak > det_thresh)'
p630
sa(dp631
g179
(lp632
(dp633
g79
g389
sg81
(dp634
g83
(dp635
g85
I0
sg86
I0
sg87
I1
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp636
sg106
(lp637
sg108
(lp638
sg110
(dp639
sg112
(lp640
ssg114
S'QRSDet if: 8 option: 1 if: 1 option: 1 if: 2 option: 1'
p641
sg116
(dp642
g118
I0
sg119
I0
sg120
I1
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((newPeak > sbpeak) && ((count - WINDOW_WIDTH) >= MS360))'
p643
sassg114
S'QRSDet if: 8 option: 1 if: 1 option: 1'
p644
sg116
(dp645
g118
I6
sg119
I10
sg120
I62
sg121
I105
sg122
I1
sg123
I8
sg124
I48
sg125
I51
ssasg191
S'if (!BLSCheck(DDBuffer, DDPtr, &maxder))'
p646
sassg114
S'QRSDet if: 8 option: 1'
p647
sg116
(dp648
g118
I6
sg119
I14
sg120
I67
sg121
I467
sg122
I5
sg123
I12
sg124
I224
sg125
I414
ssasg191
S'if (newPeak > 0)'
p649
sa(dp650
g179
(lp651
(dp652
g79
g389
sg81
(dp653
g83
(dp654
g85
I0
sg86
I0
sg87
I4
sg88
I15
sg89
I1
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp655
sg106
(lp656
sg108
(lp657
sg110
(dp658
g8
I2
sg7
I4
ssg112
(lp659
ssg114
S'QRSDet if: 9 option: 1'
p660
sg116
(dp661
g118
I4
sg119
I6
sg120
I40
sg121
I69
sg122
I1
sg123
I4
sg124
I32
sg125
I32
ssasg191
S'if ((count > sbcount) && (sbpeak > (det_thresh >> 1)))'
p662
sa(dp663
g179
(lp664
(dp665
g79
g389
sg81
(dp666
g83
(dp667
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp668
sg106
(lp669
sg108
(lp670
sg110
(dp671
sg112
(lp672
(dp673
g179
(lp674
(dp675
g79
g389
sg81
(dp676
g83
(dp677
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp678
sg106
(lp679
sg108
(lp680
sg110
(dp681
sg112
(lp682
(dp683
g179
(lp684
(dp685
g79
g389
sg81
(dp686
g83
(dp687
g85
I0
sg86
I0
sg87
I1
sg88
I8
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp688
(dp689
g96
(dp690
g79
g389
sg81
(dp691
g83
(dp692
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp693
sg106
(lp694
sg108
(lp695
sg110
(dp696
sg112
(lp697
ssg114
S'QRSDet if: 10 option: 1 if: 1 option: 1 if: 1 option: 1 for: 1'
p698
sg116
(dp699
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
F8.0
sg127
g128
sg116
(dp700
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F17.0
sg122
F0.0
sg123
F0.0
sg124
F8.0
sg125
F8.0
ssg130
S'tor (i = 0; i < 8; ++i)'
p701
sg132
(dp702
g79
g389
sg81
(dp703
g83
(dp704
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp705
sg106
(lp706
sg108
(lp707
sg110
(dp708
sg112
(lp709
ssg114
g141
sg116
(dp710
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp711
sg108
(lp712
sg110
(dp713
g8
I2
sg7
I2
ssg112
(lp714
ssg114
S'QRSDet if: 10 option: 1 if: 1 option: 1 if: 1 option: 1'
p715
sg116
(dp716
g118
F2.0
sg119
F4.0
sg120
F21.0
sg121
F57.0
sg122
F0.0
sg123
F4.0
sg124
F24.0
sg125
F24.0
ssasg191
S'if (rsetCount == 8)'
p717
sassg114
S'QRSDet if: 10 option: 1 if: 1 option: 1'
p718
sg116
(dp719
g118
F2.0
sg119
F4.0
sg120
F21.0
sg121
F60.0
sg122
F0.0
sg123
F4.0
sg124
F25.0
sg125
F25.0
ssasg191
S'if (++initBlank == MS1000)'
p720
sa(dp721
g179
(lp722
(dp723
g79
g389
sg81
(dp724
g83
(dp725
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp726
sg106
(lp727
sg108
(lp728
sg110
(dp729
sg112
(lp730
ssg114
S'QRSDet if: 10 option: 1 if: 2 option: 1'
p731
sg116
(dp732
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (newPeak > initMax)'
p733
sassg114
S'QRSDet if: 10 option: 1'
p734
sg116
(dp735
g118
F2.0
sg119
F4.0
sg120
F21.0
sg121
F61.0
sg122
F0.0
sg123
F4.0
sg124
F26.0
sg125
F27.0
ssasg191
S'if (qpkcnt == 8)'
p736
sassg114
g5
sg116
(dp737
g118
F50.0
sg119
F63.0
sg120
F233.0
sg121
F1171.0
sg122
F19.0
sg123
F30.0
sg124
F549.0
sg125
F823.0
ssa(dp738
g79
g389
sg81
(dp739
g83
(dp740
g85
I0
sg86
I1
sg87
I0
sg88
I4
sg89
I1
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp741
sg106
(lp742
sg108
(lp743
sg110
(dp744
sg112
(lp745
(dp746
g179
(lp747
(dp748
g79
g389
sg81
(dp749
g83
(dp750
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp751
sg106
(lp752
sg108
(lp753
sg110
(dp754
sg112
(lp755
ssg114
S'Peak if: 1 option: 1'
p756
sg116
(dp757
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (init)'
p758
sa(dp759
g179
(lp760
(dp761
g79
g389
sg81
(dp762
g83
(dp763
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp764
sg106
(lp765
sg108
(lp766
sg110
(dp767
sg112
(lp768
ssg114
S'Peak if: 2 option: 1'
p769
sg116
(dp770
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (timeSinceMax > 0)'
p771
sa(dp772
g179
(lp773
(dp774
g79
g389
sg81
(dp775
g83
(dp776
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp777
sg106
(lp778
sg108
(lp779
sg110
(dp780
sg112
(lp781
(dp782
g179
(lp783
(dp784
g79
g389
sg81
(dp785
g83
(dp786
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp787
sg106
(lp788
sg108
(lp789
sg110
(dp790
sg112
(lp791
ssg114
S'Peak if: 3 option: 1 if: 1 option: 1'
p792
sg116
(dp793
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (max > 2)'
p794
sassg114
S'Peak if: 3 option: 1'
p795
sg116
(dp796
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I1
ssasg191
S'if ((datum > lastDatum) && (datum > max))'
p797
sa(dp798
g179
(lp799
(dp800
g79
g389
sg81
(dp801
g83
(dp802
g85
I0
sg86
I0
sg87
I0
sg88
I4
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp803
sg106
(lp804
sg108
(lp805
sg110
(dp806
sg112
(lp807
ssg114
S'Peak if: 4 option: 1'
p808
sg116
(dp809
g118
I0
sg119
I0
sg120
I0
sg121
I4
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'else if (datum < (max >> 1))'
p810
sa(dp811
g179
(lp812
(dp813
g79
g389
sg81
(dp814
g83
(dp815
g85
I0
sg86
I0
sg87
I0
sg88
I4
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp816
sg106
(lp817
sg108
(lp818
sg110
(dp819
sg112
(lp820
ssg114
S'Peak if: 5 option: 1'
p821
sg116
(dp822
g118
I0
sg119
I0
sg120
I0
sg121
I4
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'else if (timeSinceMax > MS95)'
p823
sassg114
g6
sg116
(dp824
g118
I0
sg119
I1
sg120
I2
sg121
I16
sg122
I1
sg123
I0
sg124
I0
sg125
I7
ssa(dp825
g79
g389
sg81
(dp826
g83
(dp827
g85
I1
sg86
I1
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp828
(dp829
g96
(dp830
g79
g389
sg81
(dp831
g83
(dp832
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp833
sg106
(lp834
sg108
(lp835
sg110
(dp836
sg112
(lp837
ssg114
S'mean for: 1'
p838
sg116
(dp839
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I8
sg127
g128
sg116
(dp840
g118
I0
sg119
I0
sg120
I8
sg121
I10
sg122
I0
sg123
I0
sg124
I8
sg125
I8
ssg130
S'tor (i = 0, sum = 0; i < datnum; ++i)'
p841
sg132
(dp842
g79
g389
sg81
(dp843
g83
(dp844
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp845
sg106
(lp846
sg108
(lp847
sg110
(dp848
sg112
(lp849
ssg114
g141
sg116
(dp850
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp851
sg108
(lp852
sg110
(dp853
sg112
(lp854
ssg114
g7
sg116
(dp855
g118
I1
sg119
I1
sg120
I8
sg121
I11
sg122
I0
sg123
I0
sg124
I8
sg125
I8
ssa(dp856
g79
g389
sg81
(dp857
g83
(dp858
g85
I0
sg86
I1
sg87
I2
sg88
I5
sg89
I0
sg90
I1
sg91
I2
sg92
I0
ssg93
(lp859
sg106
(lp860
sg108
(lp861
sg110
(dp862
sg112
(lp863
ssg114
g8
sg116
(dp864
g118
I0
sg119
I1
sg120
I2
sg121
I5
sg122
I0
sg123
I2
sg124
I0
sg125
I0
ssa(dp865
g79
g389
sg81
(dp866
g83
(dp867
g85
I0
sg86
I1
sg87
I2
sg88
I4
sg89
I2
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp868
(dp869
g96
(dp870
g79
g389
sg81
(dp871
g83
(dp872
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp873
sg106
(lp874
sg108
(lp875
sg110
(dp876
sg112
(lp877
(dp878
g179
(lp879
(dp880
g79
g389
sg81
(dp881
g83
(dp882
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp883
sg106
(lp884
sg108
(lp885
sg110
(dp886
sg112
(lp887
ssg114
S'BLSCheck for: 1 if: 1 option: 1'
p888
sg116
(dp889
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp890
g79
g389
sg81
(dp891
g83
(dp892
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp893
sg106
(lp894
sg108
(lp895
sg110
(dp896
sg112
(lp897
ssg114
S'BLSCheck for: 1 if: 1 option: 2'
p898
sg116
(dp899
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (x > max)'
p900
sa(dp901
g179
(lp902
(dp903
g79
g389
sg81
(dp904
g83
(dp905
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp906
sg106
(lp907
sg108
(lp908
sg110
(dp909
sg112
(lp910
ssg114
S'BLSCheck for: 1 if: 2 option: 1'
p911
sg116
(dp912
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++dbPtr == DER_DELAY)'
p913
sassg114
S'BLSCheck for: 1'
p914
sg116
(dp915
g118
I0
sg119
I0
sg120
I0
sg121
I4
sg122
I0
sg123
I0
sg124
I1
sg125
I3
sssg126
I44
sg127
g128
sg116
(dp916
g118
I0
sg119
I0
sg120
I0
sg121
I177
sg122
I0
sg123
I0
sg124
I88
sg125
I176
ssg130
S'tor (t = 0; t < MS220; ++t)'
p917
sg132
(dp918
g79
g389
sg81
(dp919
g83
(dp920
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp921
sg106
(lp922
sg108
(lp923
sg110
(dp924
sg112
(lp925
ssg114
g141
sg116
(dp926
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp927
sg108
(lp928
sg110
(dp929
g76
I1
ssg112
(lp930
(dp931
g179
(lp932
(dp933
g79
g389
sg81
(dp934
g83
(dp935
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp936
sg106
(lp937
sg108
(lp938
sg110
(dp939
sg112
(lp940
ssg114
S'BLSCheck if: 1 option: 1'
p941
sg116
(dp942
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((max > (min >> 3)) && (min > (max >> 3)) && (abs(maxt - mint) < MS150))'
p943
sassg114
g9
sg116
(dp944
g118
I0
sg119
I2
sg120
I2
sg121
I181
sg122
I2
sg123
I2
sg124
I88
sg125
I181
ssa(dp945
g79
g389
sg81
(dp946
g83
(dp947
g85
I0
sg86
I1
sg87
I1
sg88
I9
sg89
I1
sg90
I1
sg91
I0
sg92
I2
ssg93
(lp948
sg106
(lp949
sg108
(lp950
sg110
(dp951
g30
I1
sg6
I2
sg34
I1
ssg112
(lp952
(dp953
g179
(lp954
(dp955
g79
g389
sg81
(dp956
g83
(dp957
g85
I0
sg86
I0
sg87
I0
sg88
I10
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp958
(dp959
g96
(dp960
g79
g389
sg81
(dp961
g83
(dp962
g85
I0
sg86
I0
sg87
I2
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp963
sg106
(lp964
sg108
(lp965
sg110
(dp966
sg112
(lp967
ssg114
S'QRSDet if: 1 option: 1 for: 1'
p968
sg116
(dp969
g118
I0
sg119
I0
sg120
I2
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
F8.0
sg127
g128
sg116
(dp970
g118
F0.0
sg119
F0.0
sg120
F16.0
sg121
F17.0
sg122
F0.0
sg123
F0.0
sg124
F8.0
sg125
F8.0
ssg130
S'tor (i = 0; i < 8; ++i)'
p971
sg132
(dp972
g79
g389
sg81
(dp973
g83
(dp974
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp975
sg106
(lp976
sg108
(lp977
sg110
(dp978
sg112
(lp979
ssg114
g141
sg116
(dp980
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp981
sg108
(lp982
sg110
(dp983
g6
I2
sg30
I1
ssg112
(lp984
ssg114
S'QRSDet if: 1 option: 1'
p985
sg116
(dp986
g118
F18.0
sg119
F16.0
sg120
F49.0
sg121
F267.0
sg122
F6.0
sg123
F3.0
sg124
F125.0
sg125
F159.0
ssasg191
S'if (init)'
p987
sa(dp988
g179
(lp989
(dp990
g79
g389
sg81
(dp991
g83
(dp992
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp993
sg106
(lp994
sg108
(lp995
sg110
(dp996
sg112
(lp997
ssg114
S'QRSDet if: 2 option: 1'
p998
sg116
(dp999
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (aPeak < MIN_PEAK_AMP)'
p1000
sa(dp1001
g179
(lp1002
(dp1003
g79
g389
sg81
(dp1004
g83
(dp1005
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1006
sg106
(lp1007
sg108
(lp1008
sg110
(dp1009
sg112
(lp1010
ssg114
S'QRSDet if: 3 option: 1'
p1011
sg116
(dp1012
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (aPeak && !preBlankCnt) '
p1013
sa(dp1014
g179
(lp1015
(dp1016
g79
g389
sg81
(dp1017
g83
(dp1018
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1019
sg106
(lp1020
sg108
(lp1021
sg110
(dp1022
sg112
(lp1023
(dp1024
g179
(lp1025
(dp1026
g79
g389
sg81
(dp1027
g83
(dp1028
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1029
sg106
(lp1030
sg108
(lp1031
sg110
(dp1032
sg112
(lp1033
ssg114
S'QRSDet if: 4 option: 1 if: 1 option: 1'
p1034
sg116
(dp1035
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (--preBlankCnt == 0)'
p1036
sassg114
S'QRSDet if: 4 option: 1'
p1037
sg116
(dp1038
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I1
ssasg191
S'else if (!aPeak && preBlankCnt) '
p1039
sa(dp1040
g179
(lp1041
(dp1042
g79
g389
sg81
(dp1043
g83
(dp1044
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1045
sg106
(lp1046
sg108
(lp1047
sg110
(dp1048
sg112
(lp1049
(dp1050
g179
(lp1051
(dp1052
g79
g389
sg81
(dp1053
g83
(dp1054
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1055
sg106
(lp1056
sg108
(lp1057
sg110
(dp1058
sg112
(lp1059
ssg114
S'QRSDet if: 5 option: 1 if: 1 option: 1'
p1060
sg116
(dp1061
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp1062
g79
g389
sg81
(dp1063
g83
(dp1064
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1065
sg106
(lp1066
sg108
(lp1067
sg110
(dp1068
sg112
(lp1069
ssg114
S'QRSDet if: 5 option: 1 if: 1 option: 2'
p1070
sg116
(dp1071
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (aPeak > tempPeak) '
p1072
sassg114
S'QRSDet if: 5 option: 1'
p1073
sg116
(dp1074
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I2
ssasg191
S'else if (aPeak) '
p1075
sa(dp1076
g179
(lp1077
(dp1078
g79
g389
sg81
(dp1079
g83
(dp1080
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1081
sg106
(lp1082
sg108
(lp1083
sg110
(dp1084
sg112
(lp1085
ssg114
S'QRSDet if: 6 option: 1'
p1086
sg116
(dp1087
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++DDPtr == DER_DELAY)'
p1088
sa(dp1089
g179
(lp1090
(dp1091
g79
g389
sg81
(dp1092
g83
(dp1093
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I2
ssg93
(lp1094
sg106
(lp1095
sg108
(lp1096
sg110
(dp1097
sg112
(lp1098
(dp1099
g179
(lp1100
(dp1101
g79
g389
sg81
(dp1102
g83
(dp1103
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1104
sg106
(lp1105
sg108
(lp1106
sg110
(dp1107
sg112
(lp1108
ssg114
S'QRSDet if: 7 option: 1 if: 1 option: 1'
p1109
sg116
(dp1110
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (newPeak > 0)'
p1111
sa(dp1112
g179
(lp1113
(dp1114
g79
g389
sg81
(dp1115
g83
(dp1116
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1117
sg106
(lp1118
sg108
(lp1119
sg110
(dp1120
sg112
(lp1121
(dp1122
g179
(lp1123
(dp1124
g79
g389
sg81
(dp1125
g83
(dp1126
g85
I0
sg86
I0
sg87
I1
sg88
I5
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1127
sg106
(lp1128
sg108
(lp1129
sg110
(dp1130
g8
I2
sg7
I2
ssg112
(lp1131
ssg114
S'QRSDet if: 7 option: 1 if: 2 option: 1 if: 1 option: 1'
p1132
sg116
(dp1133
g118
I2
sg119
I4
sg120
I21
sg121
I37
sg122
I0
sg123
I4
sg124
I16
sg125
I16
ssasg191
S'if (qpkcnt == 8)'
p1134
sassg114
S'QRSDet if: 7 option: 1 if: 2 option: 1'
p1135
sg116
(dp1136
g118
I2
sg119
I4
sg120
I21
sg121
I40
sg122
I0
sg123
I4
sg124
I17
sg125
I17
ssasg191
S'if (++initBlank == MS1000)'
p1137
sa(dp1138
g179
(lp1139
(dp1140
g79
g389
sg81
(dp1141
g83
(dp1142
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1143
sg106
(lp1144
sg108
(lp1145
sg110
(dp1146
sg112
(lp1147
ssg114
S'QRSDet if: 7 option: 1 if: 3 option: 1'
p1148
sg116
(dp1149
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (newPeak > initMax)'
p1150
sassg114
S'QRSDet if: 7 option: 1'
p1151
sg116
(dp1152
g118
I2
sg119
I4
sg120
I21
sg121
I42
sg122
I0
sg123
I4
sg124
I19
sg125
I20
ssasg191
S'if (qpkcnt < 8)'
p1153
sa(dp1154
g179
(lp1155
(dp1156
g79
g389
sg81
(dp1157
g83
(dp1158
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1159
sg106
(lp1160
sg108
(lp1161
sg110
(dp1162
g9
I2
ssg112
(lp1163
(dp1164
g179
(lp1165
(dp1166
g79
g389
sg81
(dp1167
g83
(dp1168
g85
I0
sg86
I0
sg87
I1
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1169
sg106
(lp1170
sg108
(lp1171
sg110
(dp1172
g8
I2
sg7
I2
ssg112
(lp1173
(dp1174
g179
(lp1175
(dp1176
g79
g389
sg81
(dp1177
g83
(dp1178
g85
I0
sg86
I0
sg87
I4
sg88
I14
sg89
I1
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1179
sg106
(lp1180
sg108
(lp1181
sg110
(dp1182
g8
I2
sg7
I4
ssg112
(lp1183
ssg114
S'QRSDet if: 8 option: 1 if: 1 option: 1 if: 1 option: 1'
p1184
sg116
(dp1185
g118
I4
sg119
I6
sg120
I40
sg121
I68
sg122
I1
sg123
I4
sg124
I32
sg125
I32
ssasg191
S'if (newPeak > det_thresh)'
p1186
sa(dp1187
g179
(lp1188
(dp1189
g79
g389
sg81
(dp1190
g83
(dp1191
g85
I0
sg86
I0
sg87
I1
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1192
sg106
(lp1193
sg108
(lp1194
sg110
(dp1195
sg112
(lp1196
ssg114
S'QRSDet if: 8 option: 1 if: 1 option: 1 if: 2 option: 1'
p1197
sg116
(dp1198
g118
I0
sg119
I0
sg120
I1
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((newPeak > sbpeak) && ((count - WINDOW_WIDTH) >= MS360))'
p1199
sassg114
S'QRSDet if: 8 option: 1 if: 1 option: 1'
p1200
sg116
(dp1201
g118
I6
sg119
I10
sg120
I62
sg121
I105
sg122
I1
sg123
I8
sg124
I48
sg125
I51
ssasg191
S'if (!BLSCheck(DDBuffer, DDPtr, &maxder))'
p1202
sassg114
S'QRSDet if: 8 option: 1'
p1203
sg116
(dp1204
g118
I6
sg119
I14
sg120
I67
sg121
I467
sg122
I5
sg123
I12
sg124
I224
sg125
I414
ssasg191
S'if (newPeak > 0)'
p1205
sa(dp1206
g179
(lp1207
(dp1208
g79
g389
sg81
(dp1209
g83
(dp1210
g85
I0
sg86
I0
sg87
I4
sg88
I15
sg89
I1
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1211
sg106
(lp1212
sg108
(lp1213
sg110
(dp1214
g8
I2
sg7
I4
ssg112
(lp1215
ssg114
S'QRSDet if: 9 option: 1'
p1216
sg116
(dp1217
g118
I4
sg119
I6
sg120
I40
sg121
I69
sg122
I1
sg123
I4
sg124
I32
sg125
I32
ssasg191
S'if ((count > sbcount) && (sbpeak > (det_thresh >> 1)))'
p1218
sa(dp1219
g179
(lp1220
(dp1221
g79
g389
sg81
(dp1222
g83
(dp1223
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1224
sg106
(lp1225
sg108
(lp1226
sg110
(dp1227
sg112
(lp1228
(dp1229
g179
(lp1230
(dp1231
g79
g389
sg81
(dp1232
g83
(dp1233
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1234
sg106
(lp1235
sg108
(lp1236
sg110
(dp1237
sg112
(lp1238
(dp1239
g179
(lp1240
(dp1241
g79
g389
sg81
(dp1242
g83
(dp1243
g85
I0
sg86
I0
sg87
I1
sg88
I8
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1244
(dp1245
g96
(dp1246
g79
g389
sg81
(dp1247
g83
(dp1248
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1249
sg106
(lp1250
sg108
(lp1251
sg110
(dp1252
sg112
(lp1253
ssg114
S'QRSDet if: 10 option: 1 if: 1 option: 1 if: 1 option: 1 for: 1'
p1254
sg116
(dp1255
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
F8.0
sg127
g128
sg116
(dp1256
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F17.0
sg122
F0.0
sg123
F0.0
sg124
F8.0
sg125
F8.0
ssg130
S'tor (i = 0; i < 8; ++i)'
p1257
sg132
(dp1258
g79
g389
sg81
(dp1259
g83
(dp1260
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1261
sg106
(lp1262
sg108
(lp1263
sg110
(dp1264
sg112
(lp1265
ssg114
g141
sg116
(dp1266
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp1267
sg108
(lp1268
sg110
(dp1269
g8
I2
sg7
I2
ssg112
(lp1270
ssg114
S'QRSDet if: 10 option: 1 if: 1 option: 1 if: 1 option: 1'
p1271
sg116
(dp1272
g118
F2.0
sg119
F4.0
sg120
F21.0
sg121
F57.0
sg122
F0.0
sg123
F4.0
sg124
F24.0
sg125
F24.0
ssasg191
S'if (rsetCount == 8)'
p1273
sassg114
S'QRSDet if: 10 option: 1 if: 1 option: 1'
p1274
sg116
(dp1275
g118
F2.0
sg119
F4.0
sg120
F21.0
sg121
F60.0
sg122
F0.0
sg123
F4.0
sg124
F25.0
sg125
F25.0
ssasg191
S'if (++initBlank == MS1000)'
p1276
sa(dp1277
g179
(lp1278
(dp1279
g79
g389
sg81
(dp1280
g83
(dp1281
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1282
sg106
(lp1283
sg108
(lp1284
sg110
(dp1285
sg112
(lp1286
ssg114
S'QRSDet if: 10 option: 1 if: 2 option: 1'
p1287
sg116
(dp1288
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (newPeak > initMax)'
p1289
sassg114
S'QRSDet if: 10 option: 1'
p1290
sg116
(dp1291
g118
F2.0
sg119
F4.0
sg120
F21.0
sg121
F61.0
sg122
F0.0
sg123
F4.0
sg124
F26.0
sg125
F27.0
ssasg191
S'if (qpkcnt == 8)'
p1292
sassg114
g10
sg116
(dp1293
g118
F50.0
sg119
F63.0
sg120
F233.0
sg121
F1171.0
sg122
F19.0
sg123
F30.0
sg124
F549.0
sg125
F823.0
ssa(dp1294
g79
g389
sg81
(dp1295
g83
(dp1296
g85
I0
sg86
I1
sg87
I0
sg88
I4
sg89
I1
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1297
sg106
(lp1298
sg108
(lp1299
sg110
(dp1300
sg112
(lp1301
(dp1302
g179
(lp1303
(dp1304
g79
g389
sg81
(dp1305
g83
(dp1306
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1307
sg106
(lp1308
sg108
(lp1309
sg110
(dp1310
sg112
(lp1311
ssg114
S'Peak if: 1 option: 1'
p1312
sg116
(dp1313
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (init)'
p1314
sa(dp1315
g179
(lp1316
(dp1317
g79
g389
sg81
(dp1318
g83
(dp1319
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1320
sg106
(lp1321
sg108
(lp1322
sg110
(dp1323
sg112
(lp1324
ssg114
S'Peak if: 2 option: 1'
p1325
sg116
(dp1326
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (timeSinceMax > 0)'
p1327
sa(dp1328
g179
(lp1329
(dp1330
g79
g389
sg81
(dp1331
g83
(dp1332
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1333
sg106
(lp1334
sg108
(lp1335
sg110
(dp1336
sg112
(lp1337
(dp1338
g179
(lp1339
(dp1340
g79
g389
sg81
(dp1341
g83
(dp1342
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1343
sg106
(lp1344
sg108
(lp1345
sg110
(dp1346
sg112
(lp1347
ssg114
S'Peak if: 3 option: 1 if: 1 option: 1'
p1348
sg116
(dp1349
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (max > 2)'
p1350
sassg114
S'Peak if: 3 option: 1'
p1351
sg116
(dp1352
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I1
ssasg191
S'if ((datum > lastDatum) && (datum > max))'
p1353
sa(dp1354
g179
(lp1355
(dp1356
g79
g389
sg81
(dp1357
g83
(dp1358
g85
I0
sg86
I0
sg87
I0
sg88
I4
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1359
sg106
(lp1360
sg108
(lp1361
sg110
(dp1362
sg112
(lp1363
ssg114
S'Peak if: 4 option: 1'
p1364
sg116
(dp1365
g118
I0
sg119
I0
sg120
I0
sg121
I4
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'else if (datum < (max >> 1))'
p1366
sa(dp1367
g179
(lp1368
(dp1369
g79
g389
sg81
(dp1370
g83
(dp1371
g85
I0
sg86
I0
sg87
I0
sg88
I4
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1372
sg106
(lp1373
sg108
(lp1374
sg110
(dp1375
sg112
(lp1376
ssg114
S'Peak if: 5 option: 1'
p1377
sg116
(dp1378
g118
I0
sg119
I0
sg120
I0
sg121
I4
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'else if (timeSinceMax > MS95)'
p1379
sassg114
g11
sg116
(dp1380
g118
I0
sg119
I1
sg120
I2
sg121
I16
sg122
I1
sg123
I0
sg124
I0
sg125
I7
ssa(dp1381
g79
g389
sg81
(dp1382
g83
(dp1383
g85
I1
sg86
I1
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1384
(dp1385
g96
(dp1386
g79
g389
sg81
(dp1387
g83
(dp1388
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1389
sg106
(lp1390
sg108
(lp1391
sg110
(dp1392
sg112
(lp1393
ssg114
S'mean for: 1'
p1394
sg116
(dp1395
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I8
sg127
g128
sg116
(dp1396
g118
I0
sg119
I0
sg120
I8
sg121
I10
sg122
I0
sg123
I0
sg124
I8
sg125
I8
ssg130
S'tor (i = 0, sum = 0; i < datnum; ++i)'
p1397
sg132
(dp1398
g79
g389
sg81
(dp1399
g83
(dp1400
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1401
sg106
(lp1402
sg108
(lp1403
sg110
(dp1404
sg112
(lp1405
ssg114
g141
sg116
(dp1406
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp1407
sg108
(lp1408
sg110
(dp1409
sg112
(lp1410
ssg114
g12
sg116
(dp1411
g118
I1
sg119
I1
sg120
I8
sg121
I11
sg122
I0
sg123
I0
sg124
I8
sg125
I8
ssa(dp1412
g79
g389
sg81
(dp1413
g83
(dp1414
g85
I0
sg86
I1
sg87
I2
sg88
I5
sg89
I0
sg90
I1
sg91
I2
sg92
I0
ssg93
(lp1415
sg106
(lp1416
sg108
(lp1417
sg110
(dp1418
sg112
(lp1419
ssg114
g13
sg116
(dp1420
g118
I0
sg119
I1
sg120
I2
sg121
I5
sg122
I0
sg123
I2
sg124
I0
sg125
I0
ssa(dp1421
g79
g389
sg81
(dp1422
g83
(dp1423
g85
I0
sg86
I1
sg87
I2
sg88
I4
sg89
I2
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp1424
(dp1425
g96
(dp1426
g79
g389
sg81
(dp1427
g83
(dp1428
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1429
sg106
(lp1430
sg108
(lp1431
sg110
(dp1432
sg112
(lp1433
(dp1434
g179
(lp1435
(dp1436
g79
g389
sg81
(dp1437
g83
(dp1438
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1439
sg106
(lp1440
sg108
(lp1441
sg110
(dp1442
sg112
(lp1443
ssg114
S'BLSCheck for: 1 if: 1 option: 1'
p1444
sg116
(dp1445
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp1446
g79
g389
sg81
(dp1447
g83
(dp1448
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1449
sg106
(lp1450
sg108
(lp1451
sg110
(dp1452
sg112
(lp1453
ssg114
S'BLSCheck for: 1 if: 1 option: 2'
p1454
sg116
(dp1455
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (x > max)'
p1456
sa(dp1457
g179
(lp1458
(dp1459
g79
g389
sg81
(dp1460
g83
(dp1461
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1462
sg106
(lp1463
sg108
(lp1464
sg110
(dp1465
sg112
(lp1466
ssg114
S'BLSCheck for: 1 if: 2 option: 1'
p1467
sg116
(dp1468
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++dbPtr == DER_DELAY)'
p1469
sassg114
S'BLSCheck for: 1'
p1470
sg116
(dp1471
g118
I0
sg119
I0
sg120
I0
sg121
I4
sg122
I0
sg123
I0
sg124
I1
sg125
I3
sssg126
I44
sg127
g128
sg116
(dp1472
g118
I0
sg119
I0
sg120
I0
sg121
I177
sg122
I0
sg123
I0
sg124
I88
sg125
I176
ssg130
S'tor (t = 0; t < MS220; ++t)'
p1473
sg132
(dp1474
g79
g389
sg81
(dp1475
g83
(dp1476
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1477
sg106
(lp1478
sg108
(lp1479
sg110
(dp1480
sg112
(lp1481
ssg114
g141
sg116
(dp1482
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp1483
sg108
(lp1484
sg110
(dp1485
g76
I1
ssg112
(lp1486
(dp1487
g179
(lp1488
(dp1489
g79
g389
sg81
(dp1490
g83
(dp1491
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1492
sg106
(lp1493
sg108
(lp1494
sg110
(dp1495
sg112
(lp1496
ssg114
S'BLSCheck if: 1 option: 1'
p1497
sg116
(dp1498
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((max > (min >> 3)) && (min > (max >> 3)) && (abs(maxt - mint) < MS150))'
p1499
sassg114
g14
sg116
(dp1500
g118
I0
sg119
I2
sg120
I2
sg121
I181
sg122
I2
sg123
I2
sg124
I88
sg125
I181
ssa(dp1501
g79
S'CLASSIFY.CPP'
p1502
sg81
(dp1503
g83
(dp1504
g85
I1
sg86
I1
sg87
I4
sg88
I31
sg89
I0
sg90
I1
sg91
I2
sg92
I0
ssg93
(lp1505
(dp1506
g96
(dp1507
g79
g1502
sg81
(dp1508
g83
(dp1509
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1510
sg106
(lp1511
sg108
(lp1512
sg110
(dp1513
sg112
(lp1514
ssg114
S'Classify for: 1'
p1515
sg116
(dp1516
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I100
sg127
g128
sg116
(dp1517
g118
I0
sg119
I0
sg120
I100
sg121
I101
sg122
I0
sg123
I0
sg124
I100
sg125
I100
ssg130
S'tor (i = 0; i < BEATLGTH; ++i)'
p1518
sg132
(dp1519
g79
g1502
sg81
(dp1520
g83
(dp1521
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1522
sg106
(lp1523
sg108
(lp1524
sg110
(dp1525
sg112
(lp1526
ssg114
g141
sg116
(dp1527
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp1528
g96
(dp1529
g79
g1502
sg81
(dp1530
g83
(dp1531
g85
I0
sg86
I0
sg87
I2
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1532
sg106
(lp1533
sg108
(lp1534
sg110
(dp1535
sg112
(lp1536
ssg114
S'Classify for: 2'
p1537
sg116
(dp1538
g118
I0
sg119
I0
sg120
I2
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
F-7.0
sg127
g128
sg116
(dp1539
g118
F-0.0
sg119
F-0.0
sg120
F-14.0
sg121
F-13.0
sg122
F-0.0
sg123
F-0.0
sg124
F-7.0
sg125
F-7.0
ssg130
S'tor (i = 7; i > 0; --i)'
p1540
sg132
(dp1541
g79
g1502
sg81
(dp1542
g83
(dp1543
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1544
sg106
(lp1545
sg108
(lp1546
sg110
(dp1547
sg112
(lp1548
ssg114
g141
sg116
(dp1549
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp1550
sg108
(lp1551
sg110
(dp1552
g69
I1
sg26
I1
sg59
I1
sg16
I1
sg57
I1
sg17
I1
sg62
I1
sg3
I1
sg76
I1
sg72
I1
sg75
I1
sg63
I1
sg15
I1
ssg112
(lp1553
(dp1554
g179
(lp1555
(dp1556
g79
g1502
sg81
(dp1557
g83
(dp1558
g85
I0
sg86
I1
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1559
sg106
(lp1560
sg108
(lp1561
sg110
(dp1562
g2
I1
sg51
I1
sg17
I1
sg15
I1
ssg112
(lp1563
ssg114
S'Classify if: 1 option: 1'
p1564
sg116
(dp1565
g118
F305.0
sg119
F570.0
sg120
F61248.0
sg121
F17438.0
sg122
F53022.0
sg123
F1633.0
sg124
F37405.0
sg125
F49194.0
ssasg191
S'if (init)'
p1566
sa(dp1567
g179
(lp1568
(dp1569
g79
g1502
sg81
(dp1570
g83
(dp1571
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1572
sg106
(lp1573
sg108
(lp1574
sg110
(dp1575
sg112
(lp1576
ssg114
S'Classify if: 2 option: 1'
p1577
sg116
(dp1578
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((blShift > BL_SHIFT_LIMIT) && (lastBeatWasNew == 1) && (lastRhythmClass == NORMAL)&& (rhythmClass == NORMAL))'
p1579
sa(dp1580
g179
(lp1581
(dp1582
g79
g1502
sg81
(dp1583
g83
(dp1584
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1585
sg106
(lp1586
sg108
(lp1587
sg110
(dp1588
sg112
(lp1589
ssg114
S'Classify if: 3 option: 1'
p1590
sg116
(dp1591
g118
I0
sg119
I0
sg120
I0
sg121
I3
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (matchIndex < MATCH_NOISE_THRESHOLD)'
p1592
sa(dp1593
g179
(lp1594
(dp1595
g79
g1502
sg81
(dp1596
g83
(dp1597
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1598
sg106
(lp1599
sg108
(lp1600
sg110
(dp1601
g61
I1
ssg112
(lp1602
ssg114
S'Classify if: 4 option: 1'
p1603
sg116
(dp1604
g118
I2
sg119
I82
sg120
I881
sg121
I556
sg122
I234
sg123
I302
sg124
I1063
sg125
I1299
ssasg191
S'if ((matchIndex < MATCH_LIMIT) && (rhythmClass == PVC) && MinimumBeatVariation(morphType)&& (mi2 > PVC_MATCH_WITH_AMP_LIMIT))'
p1605
sa(dp1606
g179
(lp1607
(dp1608
g79
g1502
sg81
(dp1609
g83
(dp1610
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1611
sg106
(lp1612
sg108
(lp1613
sg110
(dp1614
sg112
(lp1615
ssg114
S'Classify if: 5 option: 1'
p1616
sg116
(dp1617
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'else if ((matchIndex < MATCH_LIMIT) && (mi2 <= MATCH_WITH_AMP_LIMIT))UpdateBeatType(morphType, newBeat, mi2, shiftAdj);'
p1618
sa(dp1619
g179
(lp1620
(dp1621
g79
g1502
sg81
(dp1622
g83
(dp1623
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1624
sg106
(lp1625
sg108
(lp1626
sg110
(dp1627
g61
I1
ssg112
(lp1628
ssg114
S'Classify if: 6 option: 1'
p1629
sg116
(dp1630
g118
I2
sg119
I82
sg120
I881
sg121
I556
sg122
I234
sg123
I302
sg124
I1063
sg125
I1299
ssasg191
S'else if ((blShift < BL_SHIFT_LIMIT) && (noiseLevel < NEW_TYPE_NOISE_THRESHOLD)&& (hfNoise < NEW_TYPE_HF_NOISE_LIMIT))'
p1631
sa(dp1632
g179
(lp1633
(dp1634
g79
g1502
sg81
(dp1635
g83
(dp1636
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1637
sg106
(lp1638
sg108
(lp1639
sg110
(dp1640
g61
I1
ssg112
(lp1641
ssg114
S'Classify if: 7 option: 1'
p1642
sg116
(dp1643
g118
I2
sg119
I82
sg120
I881
sg121
I556
sg122
I234
sg123
I302
sg124
I1063
sg125
I1299
ssasg191
S'else if ((lastRhythmClass != NORMAL) || (rhythmClass != NORMAL))'
p1644
sa(dp1645
g179
(lp1646
(dp1647
g79
g1502
sg81
(dp1648
g83
(dp1649
g85
I0
sg86
I0
sg87
I2
sg88
I3
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp1650
sg106
(lp1651
sg108
(lp1652
sg110
(dp1653
g57
I1
sg59
I1
sg56
I1
sg58
I1
ssg112
(lp1654
(dp1655
g179
(lp1656
(dp1657
g79
g1502
sg81
(dp1658
g83
(dp1659
g85
I1
sg86
I0
sg87
I3
sg88
I2
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp1660
sg106
(lp1661
sg108
(lp1662
sg110
(dp1663
sg112
(lp1664
ssg114
S'Classify if: 8 option: 1 if: 1 option: 1'
p1665
sg116
(dp1666
g118
I1
sg119
I0
sg120
I3
sg121
I2
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssasg191
S'if ((beatWidth > offset - onset) && (GetBeatTypeCount(morphType) <= 4))'
p1667
sassg114
S'Classify if: 8 option: 1'
p1668
sg116
(dp1669
g118
I1
sg119
I4
sg120
I5
sg121
I5
sg122
I0
sg123
I2
sg124
I0
sg125
I3
ssasg191
S'if (morphType != MAXTYPES)'
p1670
sa(dp1671
g179
(lp1672
(dp1673
g79
g1502
sg81
(dp1674
g83
(dp1675
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1676
sg106
(lp1677
sg108
(lp1678
sg110
(dp1679
sg112
(lp1680
ssg114
S'Classify if: 9 option: 1'
p1681
sg116
(dp1682
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp1683
g79
g1502
sg81
(dp1684
g83
(dp1685
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1686
sg106
(lp1687
sg108
(lp1688
sg110
(dp1689
sg112
(lp1690
ssg114
S'Classify if: 9 option: 2'
p1691
sg116
(dp1692
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((morphType != domType) && (morphType != 8))'
p1693
sa(dp1694
g179
(lp1695
(dp1696
g79
g1502
sg81
(dp1697
g83
(dp1698
g85
I0
sg86
I0
sg87
I3
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1699
sg106
(lp1700
sg108
(lp1701
sg110
(dp1702
sg112
(lp1703
(dp1704
g179
(lp1705
(dp1706
g79
g1502
sg81
(dp1707
g83
(dp1708
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1709
sg106
(lp1710
sg108
(lp1711
sg110
(dp1712
sg112
(lp1713
ssg114
S'Classify if: 10 option: 1 if: 1 option: 1'
p1714
sg116
(dp1715
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((runCount >= 3) && (domType != -1) && (beatWidth < domWidth + BEAT_MS20))'
p1716
sa(dp1717
g179
(lp1718
(dp1719
g79
g1502
sg81
(dp1720
g83
(dp1721
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1722
sg106
(lp1723
sg108
(lp1724
sg110
(dp1725
sg112
(lp1726
ssg114
S'Classify if: 10 option: 1 if: 2 option: 1'
p1727
sg116
(dp1728
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'else if ((runCount >= 6) && (domType == -1))'
p1729
sa(dp1730
g179
(lp1731
(dp1732
g79
g1502
sg81
(dp1733
g83
(dp1734
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1735
sg106
(lp1736
sg108
(lp1737
sg110
(dp1738
g60
I1
ssg112
(lp1739
(dp1740
g179
(lp1741
(dp1742
g79
g1502
sg81
(dp1743
g83
(dp1744
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1745
sg106
(lp1746
sg108
(lp1747
sg110
(dp1748
sg112
(lp1749
ssg114
S'Classify if: 10 option: 1 if: 3 option: 1 if: 1 option: 1'
p1750
sg116
(dp1751
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp1752
g79
g1502
sg81
(dp1753
g83
(dp1754
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1755
sg106
(lp1756
sg108
(lp1757
sg110
(dp1758
sg112
(lp1759
ssg114
S'Classify if: 10 option: 1 if: 3 option: 1 if: 1 option: 2'
p1760
sg116
(dp1761
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((rhythmClass == PVC) && (beatWidth > BEAT_MS100))'
p1762
sassg114
S'Classify if: 10 option: 1 if: 3 option: 1'
p1763
sg116
(dp1764
g118
I0
sg119
I0
sg120
I0
sg121
I3
sg122
I0
sg123
I0
sg124
I0
sg125
I3
ssasg191
S'else if (IsBigeminy() == 1)'
p1765
sassg114
S'Classify if: 10 option: 1'
p1766
sg116
(dp1767
g118
I0
sg119
I0
sg120
I3
sg121
I5
sg122
I0
sg123
I0
sg124
I0
sg125
I9
ssasg191
S'if ((beatClass == UNKNOWN) && (morphType < MAXTYPES))'
p1768
sa(dp1769
g179
(lp1770
(dp1771
g79
g1502
sg81
(dp1772
g83
(dp1773
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1774
sg106
(lp1775
sg108
(lp1776
sg110
(dp1777
sg112
(lp1778
ssg114
S'Classify if: 11 option: 1'
p1779
sg116
(dp1780
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (beatClass != UNKNOWN)'
p1781
sa(dp1782
g179
(lp1783
(dp1784
g79
g1502
sg81
(dp1785
g83
(dp1786
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1787
sg106
(lp1788
sg108
(lp1789
sg110
(dp1790
sg112
(lp1791
ssg114
S'Classify if: 12 option: 1'
p1792
sg116
(dp1793
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (CheckPostClass(morphType) == PVC)'
p1794
sassg114
g15
sg116
(dp1795
g118
F614.0
sg119
F1378.0
sg120
F125035.0
sg121
F35983.0
sg122
F106746.0
sg123
F4173.0
sg124
F77721.0
sg125
F101971.0
ssa(dp1796
g79
g1502
sg81
(dp1797
g83
(dp1798
g85
I0
sg86
I1
sg87
I1
sg88
I5
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1799
(dp1800
g96
(dp1801
g79
g1502
sg81
(dp1802
g83
(dp1803
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1804
sg106
(lp1805
sg108
(lp1806
sg110
(dp1807
sg112
(lp1808
(dp1809
g179
(lp1810
(dp1811
g79
g1502
sg81
(dp1812
g83
(dp1813
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1814
sg106
(lp1815
sg108
(lp1816
sg110
(dp1817
sg112
(lp1818
ssg114
S'HFNoiseCheck for: 1 if: 1 option: 1'
p1819
sg116
(dp1820
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp1821
g79
g1502
sg81
(dp1822
g83
(dp1823
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1824
sg106
(lp1825
sg108
(lp1826
sg110
(dp1827
sg112
(lp1828
ssg114
S'HFNoiseCheck for: 1 if: 1 option: 2'
p1829
sg116
(dp1830
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (beat[i] > qrsMax)'
p1831
sassg114
S'HFNoiseCheck for: 1'
p1832
sg116
(dp1833
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I2
sssg126
I15
sg127
g128
sg116
(dp1834
g118
I0
sg119
I0
sg120
I30
sg121
I31
sg122
I0
sg123
I0
sg124
I15
sg125
I45
ssg130
S'tor (i = FIDMARK - BEAT_MS70; i < FIDMARK + BEAT_MS80; ++i)'
p1835
sg132
(dp1836
g79
g1502
sg81
(dp1837
g83
(dp1838
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1839
sg106
(lp1840
sg108
(lp1841
sg110
(dp1842
sg112
(lp1843
ssg114
g141
sg116
(dp1844
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp1845
g96
(dp1846
g79
g1502
sg81
(dp1847
g83
(dp1848
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1849
sg106
(lp1850
sg108
(lp1851
sg110
(dp1852
sg112
(lp1853
ssg114
S'HFNoiseCheck for: 2'
p1854
sg116
(dp1855
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I5
sg127
g128
sg116
(dp1856
g118
I0
sg119
I0
sg120
I0
sg121
I6
sg122
I0
sg123
I0
sg124
I5
sg125
I5
ssg130
S'tor (i = 0; i < AVELENGTH; ++i)'
p1857
sg132
(dp1858
g79
g1502
sg81
(dp1859
g83
(dp1860
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1861
sg106
(lp1862
sg108
(lp1863
sg110
(dp1864
sg112
(lp1865
ssg114
g141
sg116
(dp1866
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp1867
g96
(dp1868
g79
g1502
sg81
(dp1869
g83
(dp1870
g85
I0
sg86
I0
sg87
I8
sg88
I4
sg89
I1
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp1871
sg106
(lp1872
sg108
(lp1873
sg110
(dp1874
g76
I1
ssg112
(lp1875
(dp1876
g179
(lp1877
(dp1878
g79
g1502
sg81
(dp1879
g83
(dp1880
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1881
sg106
(lp1882
sg108
(lp1883
sg110
(dp1884
sg112
(lp1885
ssg114
S'HFNoiseCheck for: 3 if: 1 option: 1'
p1886
sg116
(dp1887
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++avePtr == AVELENGTH)'
p1888
sa(dp1889
g179
(lp1890
(dp1891
g79
g1502
sg81
(dp1892
g83
(dp1893
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1894
sg106
(lp1895
sg108
(lp1896
sg110
(dp1897
sg112
(lp1898
ssg114
S'HFNoiseCheck for: 3 if: 2 option: 1'
p1899
sg116
(dp1900
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((i < (FIDMARK - BEAT_MS50)) || (i > (FIDMARK + BEAT_MS110)))'
p1901
sassg114
S'HFNoiseCheck for: 3'
p1902
sg116
(dp1903
g118
I0
sg119
I1
sg120
I8
sg121
I5
sg122
I1
sg123
I2
sg124
I1
sg125
I5
sssg126
I56
sg127
g128
sg116
(dp1904
g118
I0
sg119
I56
sg120
I560
sg121
I281
sg122
I56
sg123
I112
sg124
I112
sg125
I336
ssg130
S'tor (i = FIDMARK - BEAT_MS280; i < FIDMARK + BEAT_MS280; ++i)'
p1905
sg132
(dp1906
g79
g1502
sg81
(dp1907
g83
(dp1908
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1909
sg106
(lp1910
sg108
(lp1911
sg110
(dp1912
sg112
(lp1913
ssg114
g141
sg116
(dp1914
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp1915
sg108
(lp1916
sg110
(dp1917
sg112
(lp1918
(dp1919
g179
(lp1920
(dp1921
g79
g1502
sg81
(dp1922
g83
(dp1923
g85
I2
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp1924
sg106
(lp1925
sg108
(lp1926
sg110
(dp1927
sg112
(lp1928
ssg114
S'HFNoiseCheck if: 1 option: 1'
p1929
sg116
(dp1930
g118
I2
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssa(dp1931
g79
g1502
sg81
(dp1932
g83
(dp1933
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1934
sg106
(lp1935
sg108
(lp1936
sg110
(dp1937
sg112
(lp1938
ssg114
S'HFNoiseCheck if: 1 option: 2'
p1939
sg116
(dp1940
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((qrsMax - qrsMin) >= 4)'
p1941
sassg114
g16
sg116
(dp1942
g118
I2
sg119
I57
sg120
I592
sg121
I323
sg122
I56
sg123
I113
sg124
I132
sg125
I388
ssa(dp1943
g79
g1502
sg81
(dp1944
g83
(dp1945
g85
I2
sg86
I1
sg87
I3
sg88
I12
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1946
(dp1947
g96
(dp1948
g79
g1502
sg81
(dp1949
g83
(dp1950
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1951
sg106
(lp1952
sg108
(lp1953
sg110
(dp1954
sg112
(lp1955
(dp1956
g179
(lp1957
(dp1958
g79
g1502
sg81
(dp1959
g83
(dp1960
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1961
sg106
(lp1962
sg108
(lp1963
sg110
(dp1964
sg112
(lp1965
ssg114
S'DomMonitor for: 1 if: 1 option: 1'
p1966
sg116
(dp1967
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (DMNormCounts[i] > DMNormCounts[dom])'
p1968
sassg114
S'DomMonitor for: 1'
p1969
sg116
(dp1970
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I1
sssg126
F7.0
sg127
g128
sg116
(dp1971
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F8.0
sg122
F0.0
sg123
F0.0
sg124
F7.0
sg125
F14.0
ssg130
S'tor (i = 1; i < 8; ++i)'
p1972
sg132
(dp1973
g79
g1502
sg81
(dp1974
g83
(dp1975
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp1976
sg106
(lp1977
sg108
(lp1978
sg110
(dp1979
sg112
(lp1980
ssg114
g141
sg116
(dp1981
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp1982
g96
(dp1983
g79
g1502
sg81
(dp1984
g83
(dp1985
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1986
sg106
(lp1987
sg108
(lp1988
sg110
(dp1989
sg112
(lp1990
(dp1991
g179
(lp1992
(dp1993
g79
g1502
sg81
(dp1994
g83
(dp1995
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp1996
sg106
(lp1997
sg108
(lp1998
sg110
(dp1999
sg112
(lp2000
ssg114
S'DomMonitor for: 2 if: 1 option: 1'
p2001
sg116
(dp2002
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (DMBeatCounts[i] > DMBeatCounts[max])'
p2003
sassg114
S'DomMonitor for: 2'
p2004
sg116
(dp2005
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I1
sssg126
F7.0
sg127
g128
sg116
(dp2006
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F8.0
sg122
F0.0
sg123
F0.0
sg124
F7.0
sg125
F14.0
ssg130
S'tor (i = 1; i < 8; ++i)'
p2007
sg132
(dp2008
g79
g1502
sg81
(dp2009
g83
(dp2010
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2011
sg106
(lp2012
sg108
(lp2013
sg110
(dp2014
sg112
(lp2015
ssg114
g141
sg116
(dp2016
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp2017
g96
(dp2018
g79
g1502
sg81
(dp2019
g83
(dp2020
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2021
sg106
(lp2022
sg108
(lp2023
sg110
(dp2024
g59
I1
ssg112
(lp2025
(dp2026
g179
(lp2027
(dp2028
g79
g1502
sg81
(dp2029
g83
(dp2030
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2031
sg106
(lp2032
sg108
(lp2033
sg110
(dp2034
sg112
(lp2035
ssg114
S'DomMonitor for: 3 if: 1 option: 1'
p2036
sg116
(dp2037
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((DMBeatCounts[i] > 10) && (DMNormCounts[i] == 0) && (i != dom)  && (GetBeatClass(i) == NORMAL))'
p2038
sassg114
S'DomMonitor for: 3'
p2039
sg116
(dp2040
g118
I0
sg119
I1
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I5
sssg126
F8.0
sg127
g128
sg116
(dp2041
g118
F0.0
sg119
F8.0
sg120
F0.0
sg121
F9.0
sg122
F0.0
sg123
F0.0
sg124
F8.0
sg125
F48.0
ssg130
S'tor (i = 0; i < 8; ++i)'
p2042
sg132
(dp2043
g79
g1502
sg81
(dp2044
g83
(dp2045
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2046
sg106
(lp2047
sg108
(lp2048
sg110
(dp2049
sg112
(lp2050
ssg114
g141
sg116
(dp2051
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp2052
sg108
(lp2053
sg110
(dp2054
sg112
(lp2055
(dp2056
g179
(lp2057
(dp2058
g79
g1502
sg81
(dp2059
g83
(dp2060
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2061
sg106
(lp2062
sg108
(lp2063
sg110
(dp2064
sg112
(lp2065
ssg114
S'DomMonitor if: 1 option: 1'
p2066
sg116
(dp2067
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (i < 0)'
p2068
sa(dp2069
g179
(lp2070
(dp2071
g79
g1502
sg81
(dp2072
g83
(dp2073
g85
I0
sg86
I1
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2074
(dp2075
g96
(dp2076
g79
g1502
sg81
(dp2077
g83
(dp2078
g85
I0
sg86
I0
sg87
I1
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2079
sg106
(lp2080
sg108
(lp2081
sg110
(dp2082
sg112
(lp2083
ssg114
S'DomMonitor if: 2 option: 1 for: 1'
p2084
sg116
(dp2085
g118
I0
sg119
I0
sg120
I1
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I180
sg127
g128
sg116
(dp2086
g118
I0
sg119
I0
sg120
I180
sg121
I361
sg122
I0
sg123
I0
sg124
I180
sg125
I180
ssg130
S'tor (i = 0; i < DM_BUFFER_LENGTH; ++i)'
p2087
sg132
(dp2088
g79
g1502
sg81
(dp2089
g83
(dp2090
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2091
sg106
(lp2092
sg108
(lp2093
sg110
(dp2094
sg112
(lp2095
ssg114
g141
sg116
(dp2096
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp2097
g96
(dp2098
g79
g1502
sg81
(dp2099
g83
(dp2100
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2101
sg106
(lp2102
sg108
(lp2103
sg110
(dp2104
sg112
(lp2105
ssg114
S'DomMonitor if: 2 option: 1 for: 2'
p2106
sg116
(dp2107
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
F8.0
sg127
g128
sg116
(dp2108
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F17.0
sg122
F0.0
sg123
F0.0
sg124
F8.0
sg125
F8.0
ssg130
S'tor (i = 0; i < 8; ++i)'
p2109
sg132
(dp2110
g79
g1502
sg81
(dp2111
g83
(dp2112
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2113
sg106
(lp2114
sg108
(lp2115
sg110
(dp2116
sg112
(lp2117
ssg114
g141
sg116
(dp2118
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp2119
sg108
(lp2120
sg110
(dp2121
sg112
(lp2122
ssg114
S'DomMonitor if: 2 option: 1'
p2123
sg116
(dp2124
g118
F0.0
sg119
F1.0
sg120
F180.0
sg121
F379.0
sg122
F0.0
sg123
F0.0
sg124
F188.0
sg125
F188.0
ssasg191
S'if (reset != 0)'
p2125
sa(dp2126
g179
(lp2127
(dp2128
g79
g1502
sg81
(dp2129
g83
(dp2130
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2131
sg106
(lp2132
sg108
(lp2133
sg110
(dp2134
sg112
(lp2135
(dp2136
g179
(lp2137
(dp2138
g79
g1502
sg81
(dp2139
g83
(dp2140
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2141
sg106
(lp2142
sg108
(lp2143
sg110
(dp2144
sg112
(lp2145
ssg114
S'DomMonitor if: 3 option: 1 if: 1 option: 1'
p2146
sg116
(dp2147
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (DMBeatRhythms[brIndex] == UNKNOWN)'
p2148
sassg114
S'DomMonitor if: 3 option: 1'
p2149
sg116
(dp2150
g118
I0
sg119
I0
sg120
I3
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I1
ssasg191
S'if ((DMBeatTypes[brIndex] != -1) && (DMBeatTypes[brIndex] != MAXTYPES))'
p2151
sa(dp2152
g179
(lp2153
(dp2154
g79
g1502
sg81
(dp2155
g83
(dp2156
g85
I1
sg86
I0
sg87
I2
sg88
I4
sg89
I0
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp2157
(dp2158
g96
(dp2159
g79
g1502
sg81
(dp2160
g83
(dp2161
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2162
sg106
(lp2163
sg108
(lp2164
sg110
(dp2165
sg112
(lp2166
(dp2167
g179
(lp2168
(dp2169
g79
g1502
sg81
(dp2170
g83
(dp2171
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2172
sg106
(lp2173
sg108
(lp2174
sg110
(dp2175
sg112
(lp2176
ssg114
S'DomMonitor if: 4 option: 1 for: 1 if: 1 option: 1'
p2177
sg116
(dp2178
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (--i < 0)'
p2179
sassg114
S'DomMonitor if: 4 option: 1 for: 1'
p2180
sg116
(dp2181
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I1
sssg126
I6
sg127
g128
sg116
(dp2182
g118
I0
sg119
I0
sg120
I6
sg121
I7
sg122
I0
sg123
I0
sg124
I12
sg125
I18
ssg130
S'tor (runCount = 0; (DMBeatTypes[i] == morphType) && (runCount < 6); ++runCount)'
p2183
sg132
(dp2184
g79
g1502
sg81
(dp2185
g83
(dp2186
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2187
sg106
(lp2188
sg108
(lp2189
sg110
(dp2190
sg112
(lp2191
ssg114
g141
sg116
(dp2192
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp2193
sg108
(lp2194
sg110
(dp2195
g66
I1
ssg112
(lp2196
(dp2197
g179
(lp2198
(dp2199
g79
g1502
sg81
(dp2200
g83
(dp2201
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2202
sg106
(lp2203
sg108
(lp2204
sg110
(dp2205
sg112
(lp2206
ssg114
S'DomMonitor if: 4 option: 1 if: 1 option: 1'
p2207
sg116
(dp2208
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (rhythmClass == UNKNOWN)'
p2209
sa(dp2210
g179
(lp2211
(dp2212
g79
g1502
sg81
(dp2213
g83
(dp2214
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2215
sg106
(lp2216
sg108
(lp2217
sg110
(dp2218
sg112
(lp2219
ssg114
S'DomMonitor if: 4 option: 1 if: 2 option: 1'
p2220
sg116
(dp2221
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (i < 0)'
p2222
sa(dp2223
g179
(lp2224
(dp2225
g79
g1502
sg81
(dp2226
g83
(dp2227
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2228
sg106
(lp2229
sg108
(lp2230
sg110
(dp2231
sg112
(lp2232
ssg114
S'DomMonitor if: 4 option: 1 if: 3 option: 1'
p2233
sg116
(dp2234
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssasg191
S'if ((rhythmClass == NORMAL) && (beatWidth < BEAT_MS130) && (runCount >= 1))'
p2235
sa(dp2236
g179
(lp2237
(dp2238
g79
g1502
sg81
(dp2239
g83
(dp2240
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2241
sg106
(lp2242
sg108
(lp2243
sg110
(dp2244
sg112
(lp2245
ssg114
S'DomMonitor if: 4 option: 1 if: 4 option: 1'
p2246
sg116
(dp2247
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssasg191
S'else if (rr < ((FIDMARK - GetBeatBegin(morphType)) * SAMPLE_RATE / BEAT_SAMPLE_RATE) && (oldType == morphType))'
p2248
sassg114
S'DomMonitor if: 4 option: 1'
p2249
sg116
(dp2250
g118
I1
sg119
I1
sg120
I11
sg121
I14
sg122
I0
sg123
I1
sg124
I15
sg125
I25
ssasg191
S'if (morphType != 8)'
p2251
sa(dp2252
g179
(lp2253
(dp2254
g79
g1502
sg81
(dp2255
g83
(dp2256
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2257
sg106
(lp2258
sg108
(lp2259
sg110
(dp2260
sg112
(lp2261
ssg114
S'DomMonitor if: 5 option: 1'
p2262
sg116
(dp2263
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++brIndex == DM_BUFFER_LENGTH)'
p2264
sa(dp2265
g179
(lp2266
(dp2267
g79
g1502
sg81
(dp2268
g83
(dp2269
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2270
sg106
(lp2271
sg108
(lp2272
sg110
(dp2273
sg112
(lp2274
ssg114
S'DomMonitor if: 6 option: 1'
p2275
sg116
(dp2276
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((DMNormCounts[dom] == 0) || (DMBeatCounts[max] / DMBeatCounts[dom] >= 2)) '
p2277
sa(dp2278
g179
(lp2279
(dp2280
g79
g1502
sg81
(dp2281
g83
(dp2282
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2283
sg106
(lp2284
sg108
(lp2285
sg110
(dp2286
sg112
(lp2287
ssg114
S'DomMonitor if: 7 option: 1'
p2288
sg116
(dp2289
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'else if (DMBeatCounts[dom] / DMNormCounts[dom] >= 2)'
p2290
sassg114
g17
sg116
(dp2291
g118
F3.0
sg119
F11.0
sg120
F198.0
sg121
F435.0
sg122
F0.0
sg123
F1.0
sg124
F227.0
sg125
F299.0
ssa(dp2292
g79
g1502
sg81
(dp2293
g83
(dp2294
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2295
sg106
(lp2296
sg108
(lp2297
sg110
(dp2298
sg112
(lp2299
ssg114
g18
sg116
(dp2300
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp2301
g79
g1502
sg81
(dp2302
g83
(dp2303
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2304
sg106
(lp2305
sg108
(lp2306
sg110
(dp2307
sg112
(lp2308
(dp2309
g179
(lp2310
(dp2311
g79
g1502
sg81
(dp2312
g83
(dp2313
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2314
sg106
(lp2315
sg108
(lp2316
sg110
(dp2317
sg112
(lp2318
ssg114
S'GetDomRhythm if: 1 option: 1'
p2319
sg116
(dp2320
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp2321
g79
g1502
sg81
(dp2322
g83
(dp2323
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2324
sg106
(lp2325
sg108
(lp2326
sg110
(dp2327
sg112
(lp2328
ssg114
S'GetDomRhythm if: 1 option: 2'
p2329
sg116
(dp2330
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (DMIrregCount > IRREG_RR_LIMIT)'
p2331
sassg114
g19
sg116
(dp2332
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I2
ssa(dp2333
g79
g1502
sg81
(dp2334
g83
(dp2335
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2336
(dp2337
g96
(dp2338
g79
g1502
sg81
(dp2339
g83
(dp2340
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2341
sg106
(lp2342
sg108
(lp2343
sg110
(dp2344
sg112
(lp2345
(dp2346
g179
(lp2347
(dp2348
g79
g1502
sg81
(dp2349
g83
(dp2350
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2351
sg106
(lp2352
sg108
(lp2353
sg110
(dp2354
sg112
(lp2355
ssg114
S'AdjustDomData for: 1 if: 1 option: 1'
p2356
sg116
(dp2357
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (DMBeatTypes[i] == oldType)'
p2358
sassg114
S'AdjustDomData for: 1'
p2359
sg116
(dp2360
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I1
sssg126
I180
sg127
g128
sg116
(dp2361
g118
I0
sg119
I0
sg120
I0
sg121
I181
sg122
I0
sg123
I0
sg124
I180
sg125
I360
ssg130
S'tor (i = 0; i < DM_BUFFER_LENGTH; ++i)'
p2362
sg132
(dp2363
g79
g1502
sg81
(dp2364
g83
(dp2365
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2366
sg106
(lp2367
sg108
(lp2368
sg110
(dp2369
sg112
(lp2370
ssg114
g141
sg116
(dp2371
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp2372
sg108
(lp2373
sg110
(dp2374
sg112
(lp2375
(dp2376
g179
(lp2377
(dp2378
g79
g1502
sg81
(dp2379
g83
(dp2380
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2381
sg106
(lp2382
sg108
(lp2383
sg110
(dp2384
sg112
(lp2385
ssg114
S'AdjustDomData if: 1 option: 1'
p2386
sg116
(dp2387
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (newType != MAXTYPES)'
p2388
sassg114
g20
sg116
(dp2389
g118
I0
sg119
I0
sg120
I0
sg121
I186
sg122
I0
sg123
I0
sg124
I180
sg125
I361
ssa(dp2390
g79
g1502
sg81
(dp2391
g83
(dp2392
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2393
(dp2394
g96
(dp2395
g79
g1502
sg81
(dp2396
g83
(dp2397
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2398
sg106
(lp2399
sg108
(lp2400
sg110
(dp2401
sg112
(lp2402
(dp2403
g179
(lp2404
(dp2405
g79
g1502
sg81
(dp2406
g83
(dp2407
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2408
sg106
(lp2409
sg108
(lp2410
sg110
(dp2411
sg112
(lp2412
ssg114
S'CombineDomData for: 1 if: 1 option: 1'
p2413
sg116
(dp2414
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (DMBeatTypes[i] == oldType)'
p2415
sassg114
S'CombineDomData for: 1'
p2416
sg116
(dp2417
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I1
sssg126
I180
sg127
g128
sg116
(dp2418
g118
I0
sg119
I0
sg120
I0
sg121
I181
sg122
I0
sg123
I0
sg124
I180
sg125
I360
ssg130
S'tor (i = 0; i < DM_BUFFER_LENGTH; ++i)'
p2419
sg132
(dp2420
g79
g1502
sg81
(dp2421
g83
(dp2422
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2423
sg106
(lp2424
sg108
(lp2425
sg110
(dp2426
sg112
(lp2427
ssg114
g141
sg116
(dp2428
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp2429
sg108
(lp2430
sg110
(dp2431
sg112
(lp2432
(dp2433
g179
(lp2434
(dp2435
g79
g1502
sg81
(dp2436
g83
(dp2437
g85
I0
sg86
I0
sg87
I2
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2438
sg106
(lp2439
sg108
(lp2440
sg110
(dp2441
sg112
(lp2442
ssg114
S'CombineDomData if: 1 option: 1'
p2443
sg116
(dp2444
g118
I0
sg119
I0
sg120
I2
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (newType != MAXTYPES)'
p2445
sassg114
g21
sg116
(dp2446
g118
I0
sg119
I0
sg120
I2
sg121
I186
sg122
I0
sg123
I0
sg124
I180
sg125
I361
ssa(dp2447
g79
S'EASYTEST.CPP'
p2448
sg81
(dp2449
g83
(dp2450
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I2
sg92
I0
ssg93
(lp2451
(dp2452
g96
(dp2453
g79
g2448
sg81
(dp2454
g83
(dp2455
g85
I0
sg86
I0
sg87
I0
sg88
I8
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2456
sg106
(lp2457
(dp2458
g96
(dp2459
g79
g2448
sg81
(dp2460
g83
(dp2461
g85
I1
sg86
I0
sg87
I1
sg88
I6
sg89
I0
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp2462
sg106
(lp2463
sg108
(lp2464
sg110
(dp2465
g15
I1
sg28
I1
ssg112
(lp2466
(dp2467
g179
(lp2468
(dp2469
g79
g2448
sg81
(dp2470
g83
(dp2471
g85
I1
sg86
I0
sg87
I1
sg88
I6
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp2472
sg106
(lp2473
sg108
(lp2474
sg110
(dp2475
sg112
(lp2476
ssg114
S'main for: 1 while: 1 if: 1 option: 1'
p2477
sg116
(dp2478
g118
I1
sg119
I0
sg120
I1
sg121
I6
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssasg191
S'if (delay != 0)'
p2479
sassg114
S'main for: 1 while: 1'
p2480
sg116
(dp2481
g118
F1538.0
sg119
F2890.0
sg120
F250890.0
sg121
F75215.0
sg122
F213830.0
sg123
F8620.0
sg124
F157278.0
sg125
F206558.0
sssg126
I5
sg127
S'yes'
p2482
sg116
(dp2483
g118
F7725.0
sg119
F14460.0
sg120
F1254630.0
sg121
F376075.0
sg122
F1069150.0
sg123
F43130.0
sg124
F786540.0
sg125
F1032795.0
ssg130
S'vhile (NextSample(ecg, 2, InputFileSampleFrequency, SAMPLE_RATE, 0) >= 0)'
p2484
sg132
(dp2485
g79
g2448
sg81
(dp2486
g83
(dp2487
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2488
sg106
(lp2489
sg108
(lp2490
sg110
(dp2491
g23
I1
ssg112
(lp2492
ssg114
S'while conditions'
p2493
sg116
(dp2494
g118
I7
sg119
I2
sg120
I36
sg121
I75
sg122
I0
sg123
I6
sg124
I30
sg125
I56
sssa(dp2495
g96
(dp2496
g79
g2448
sg81
(dp2497
g83
(dp2498
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2499
sg106
(lp2500
sg108
(lp2501
sg110
(dp2502
sg112
(lp2503
ssg114
S'main for: 1 while: 2'
p2504
sg116
(dp2505
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I5
sg127
g2482
sg116
(dp2506
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I5
ssg130
S'vhile (fread(&byte, sizeof(char), 1, newAnn0) == 1)'
p2507
sg132
(dp2508
g79
g2448
sg81
(dp2509
g83
(dp2510
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2511
sg106
(lp2512
sg108
(lp2513
sg110
(dp2514
sg112
(lp2515
ssg114
g2493
sg116
(dp2516
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssasg108
(lp2517
sg110
(dp2518
g27
I1
sg23
I1
ssg112
(lp2519
(dp2520
g179
(lp2521
(dp2522
g79
g2448
sg81
(dp2523
g83
(dp2524
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2525
sg106
(lp2526
sg108
(lp2527
sg110
(dp2528
sg112
(lp2529
ssg114
S'main for: 1 if: 1 option: 1'
p2530
sg116
(dp2531
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (isigopen(record, s, 2) < 1)'
p2532
sa(dp2533
g179
(lp2534
(dp2535
g79
g2448
sg81
(dp2536
g83
(dp2537
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2538
sg106
(lp2539
sg108
(lp2540
sg110
(dp2541
sg112
(lp2542
ssg114
S'main for: 1 if: 2 option: 1'
p2543
sg116
(dp2544
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (annopen(record, a, 1) < 0)'
p2545
sassg114
S'main for: 1'
p2546
sg116
(dp2547
g118
F8446.0
sg119
F15967.0
sg120
F1380167.0
sg121
F414486.0
sg122
F1175934.0
sg123
F47369.0
sg124
F865389.0
sg125
F1136475.0
sssg126
I48
sg127
g128
sg116
(dp2548
g118
F405408.0
sg119
F766416.0
sg120
F66248016.0
sg121
F19895329.0
sg122
F56444832.0
sg123
F2273712.0
sg124
F41538720.0
sg125
F54550848.0
ssg130
S'tor (recNum = 0; recNum < REC_COUNT; ++recNum)'
p2549
sg132
(dp2550
g79
g2448
sg81
(dp2551
g83
(dp2552
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2553
sg106
(lp2554
sg108
(lp2555
sg110
(dp2556
sg112
(lp2557
ssg114
g141
sg116
(dp2558
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp2559
sg108
(lp2560
sg110
(dp2561
sg112
(lp2562
ssg114
g22
sg116
(dp2563
g118
F405408.0
sg119
F766416.0
sg120
F66248016.0
sg121
F19895330.0
sg122
F56444832.0
sg123
F2273714.0
sg124
F41538720.0
sg125
F54550848.0
ssa(dp2564
g79
g2448
sg81
(dp2565
g83
(dp2566
g85
I0
sg86
I1
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2567
(dp2568
g96
(dp2569
g79
g2448
sg81
(dp2570
g83
(dp2571
g85
I1
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp2572
sg106
(lp2573
sg108
(lp2574
sg110
(dp2575
sg112
(lp2576
ssg114
S'NextSample for: 1'
p2577
sg116
(dp2578
g118
I1
sg119
I0
sg120
I2
sg121
I1
sg122
I0
sg123
I1
sg124
I0
sg125
I0
sssg126
I2
sg127
S'no'
p2579
sg116
(dp2580
g118
I5
sg119
I0
sg120
I10
sg121
I6
sg122
I0
sg123
I5
sg124
I5
sg125
I5
ssg130
S'tor (i = 0; i < nosig; ++i)'
p2581
sg132
(dp2582
g79
g2448
sg81
(dp2583
g83
(dp2584
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2585
sg106
(lp2586
sg108
(lp2587
sg110
(dp2588
sg112
(lp2589
ssg114
g141
sg116
(dp2590
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp2591
(dp2592
g96
(dp2593
g79
g2448
sg81
(dp2594
g83
(dp2595
g85
I0
sg86
I0
sg87
I1
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2596
(dp2597
g96
(dp2598
g79
g2448
sg81
(dp2599
g83
(dp2600
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2601
sg106
(lp2602
sg108
(lp2603
sg110
(dp2604
sg112
(lp2605
ssg114
S'NextSample while: 1 for: 1'
p2606
sg116
(dp2607
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I5
sg127
g2482
sg116
(dp2608
g118
I0
sg119
I0
sg120
I0
sg121
I6
sg122
I0
sg123
I0
sg124
I5
sg125
I5
ssg130
S'tor (i = 0; i < nosig; ++i)'
p2609
sg132
(dp2610
g79
g2448
sg81
(dp2611
g83
(dp2612
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2613
sg106
(lp2614
sg108
(lp2615
sg110
(dp2616
sg112
(lp2617
ssg114
g141
sg116
(dp2618
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp2619
sg108
(lp2620
sg110
(dp2621
sg112
(lp2622
(dp2623
g179
(lp2624
(dp2625
g79
g2448
sg81
(dp2626
g83
(dp2627
g85
I0
sg86
I0
sg87
I2
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2628
sg106
(lp2629
sg108
(lp2630
sg110
(dp2631
sg112
(lp2632
ssg114
S'NextSample while: 1 if: 1 option: 1'
p2633
sg116
(dp2634
g118
I0
sg119
I0
sg120
I2
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (it > mn)'
p2635
sassg114
S'NextSample while: 1'
p2636
sg116
(dp2637
g118
I0
sg119
I0
sg120
I3
sg121
I10
sg122
I0
sg123
I0
sg124
I5
sg125
I6
sssg126
I5
sg127
g2482
sg116
(dp2638
g118
I0
sg119
I0
sg120
I15
sg121
I50
sg122
I0
sg123
I0
sg124
I25
sg125
I35
ssg130
S'vhile (ot > it)'
p2639
sg132
(dp2640
g79
g2448
sg81
(dp2641
g83
(dp2642
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2643
sg106
(lp2644
sg108
(lp2645
sg110
(dp2646
sg112
(lp2647
ssg114
g2493
sg116
(dp2648
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssasg108
(lp2649
sg110
(dp2650
sg112
(lp2651
(dp2652
g179
(lp2653
(dp2654
g79
g2448
sg81
(dp2655
g83
(dp2656
g85
I2
sg86
I0
sg87
I0
sg88
I7
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp2657
sg106
(lp2658
sg108
(lp2659
sg110
(dp2660
g24
I1
ssg112
(lp2661
ssg114
S'NextSample if: 1 option: 1'
p2662
sg116
(dp2663
g118
I2
sg119
I1
sg120
I10
sg121
I18
sg122
I0
sg123
I1
sg124
I0
sg125
I15
ssasg191
S'if (init)'
p2664
sassg114
g23
sg116
(dp2665
g118
I7
sg119
I2
sg120
I36
sg121
I75
sg122
I0
sg123
I6
sg124
I30
sg125
I56
ssa(dp2666
g79
g2448
sg81
(dp2667
g83
(dp2668
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2669
sg106
(lp2670
(dp2671
g96
(dp2672
g79
g2448
sg81
(dp2673
g83
(dp2674
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2675
sg106
(lp2676
sg108
(lp2677
sg110
(dp2678
sg112
(lp2679
(dp2680
g179
(lp2681
(dp2682
g79
g2448
sg81
(dp2683
g83
(dp2684
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2685
sg106
(lp2686
sg108
(lp2687
sg110
(dp2688
sg112
(lp2689
ssg114
S'gcd while: 1 if: 1 option: 1'
p2690
sg116
(dp2691
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp2692
g79
g2448
sg81
(dp2693
g83
(dp2694
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2695
sg106
(lp2696
sg108
(lp2697
sg110
(dp2698
sg112
(lp2699
ssg114
S'gcd while: 1 if: 1 option: 2'
p2700
sg116
(dp2701
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (x > y)'
p2702
sassg114
S'gcd while: 1'
p2703
sg116
(dp2704
g118
I0
sg119
I0
sg120
I2
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I2
sssg126
I5
sg127
g2482
sg116
(dp2705
g118
I0
sg119
I0
sg120
I10
sg121
I11
sg122
I0
sg123
I0
sg124
I0
sg125
I15
ssg130
S'vhile (x != y)'
p2706
sg132
(dp2707
g79
g2448
sg81
(dp2708
g83
(dp2709
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2710
sg106
(lp2711
sg108
(lp2712
sg110
(dp2713
sg112
(lp2714
ssg114
g2493
sg116
(dp2715
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssasg108
(lp2716
sg110
(dp2717
sg112
(lp2718
ssg114
g24
sg116
(dp2719
g118
I0
sg119
I1
sg120
I10
sg121
I11
sg122
I0
sg123
I0
sg124
I0
sg125
I15
ssa(dp2720
g79
S'ANALBEAT.CPP'
p2721
sg81
(dp2722
g83
(dp2723
g85
I0
sg86
I1
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2724
(dp2725
g96
(dp2726
g79
g2721
sg81
(dp2727
g83
(dp2728
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2729
sg106
(lp2730
sg108
(lp2731
sg110
(dp2732
sg112
(lp2733
(dp2734
g179
(lp2735
(dp2736
g79
g2721
sg81
(dp2737
g83
(dp2738
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2739
sg106
(lp2740
sg108
(lp2741
sg110
(dp2742
sg112
(lp2743
ssg114
S'IsoCheck for: 1 if: 1 option: 1'
p2744
sg116
(dp2745
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp2746
g79
g2721
sg81
(dp2747
g83
(dp2748
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2749
sg106
(lp2750
sg108
(lp2751
sg110
(dp2752
sg112
(lp2753
ssg114
S'IsoCheck for: 1 if: 1 option: 2'
p2754
sg116
(dp2755
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (data[i] > max)'
p2756
sassg114
S'IsoCheck for: 1'
p2757
sg116
(dp2758
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I2
sssg126
I8
sg127
g2579
sg116
(dp2759
g118
I0
sg119
I0
sg120
I0
sg121
I13
sg122
I0
sg123
I0
sg124
I5
sg125
I15
ssg130
S'tor (i = 1, max = min = data[0]; i < isoLength; ++i)'
p2760
sg132
(dp2761
g79
g2721
sg81
(dp2762
g83
(dp2763
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2764
sg106
(lp2765
sg108
(lp2766
sg110
(dp2767
sg112
(lp2768
ssg114
g141
sg116
(dp2769
g118
I0
sg119
I0
sg120
I0
sg121
I3
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp2770
sg108
(lp2771
sg110
(dp2772
sg112
(lp2773
(dp2774
g179
(lp2775
(dp2776
g79
g2721
sg81
(dp2777
g83
(dp2778
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2779
sg106
(lp2780
sg108
(lp2781
sg110
(dp2782
sg112
(lp2783
ssg114
S'IsoCheck if: 1 option: 1'
p2784
sg116
(dp2785
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (max - min < ISO_LIMIT)'
p2786
sassg114
g25
sg116
(dp2787
g118
I0
sg119
I1
sg120
I1
sg121
I13
sg122
I0
sg123
I0
sg124
I5
sg125
I16
ssa(dp2788
g79
g2721
sg81
(dp2789
g83
(dp2790
g85
I0
sg86
I0
sg87
I21
sg88
I19
sg89
I2
sg90
I1
sg91
I20
sg92
I0
ssg93
(lp2791
(dp2792
g96
(dp2793
g79
g2721
sg81
(dp2794
g83
(dp2795
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2796
sg106
(lp2797
sg108
(lp2798
sg110
(dp2799
sg112
(lp2800
ssg114
S'AnalyzeBeat for: 1'
p2801
sg116
(dp2802
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I32
sg127
g2579
sg116
(dp2803
g118
I0
sg119
I5
sg120
I10
sg121
I1
sg122
I0
sg123
I0
sg124
I30
sg125
I10
ssg130
S'tor (i = FIDMARK - ISO_LENGTH2; (i > 0) && (IsoCheck(&beat[i], ISO_LENGTH2) == 0); --i)'
p2804
sg132
(dp2805
g79
g2721
sg81
(dp2806
g83
(dp2807
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2808
sg106
(lp2809
sg108
(lp2810
sg110
(dp2811
g25
I1
ssg112
(lp2812
ssg114
g141
sg116
(dp2813
g118
I0
sg119
I1
sg120
I2
sg121
I14
sg122
I0
sg123
I0
sg124
I6
sg125
I16
sssa(dp2814
g96
(dp2815
g79
g2721
sg81
(dp2816
g83
(dp2817
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2818
sg106
(lp2819
sg108
(lp2820
sg110
(dp2821
sg112
(lp2822
ssg114
S'AnalyzeBeat for: 2'
p2823
sg116
(dp2824
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I60
sg127
g2579
sg116
(dp2825
g118
I0
sg119
I5
sg120
I5
sg121
I1
sg122
I0
sg123
I0
sg124
I30
sg125
I10
ssg130
S'tor (i = FIDMARK; (i < BEATLGTH) && (IsoCheck(&beat[i], ISO_LENGTH1) == 0); ++i)'
p2826
sg132
(dp2827
g79
g2721
sg81
(dp2828
g83
(dp2829
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2830
sg106
(lp2831
sg108
(lp2832
sg110
(dp2833
g25
I1
ssg112
(lp2834
ssg114
g141
sg116
(dp2835
g118
I0
sg119
I1
sg120
I1
sg121
I14
sg122
I0
sg123
I0
sg124
I6
sg125
I16
sssa(dp2836
g96
(dp2837
g79
g2721
sg81
(dp2838
g83
(dp2839
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2840
sg106
(lp2841
sg108
(lp2842
sg110
(dp2843
sg112
(lp2844
(dp2845
g179
(lp2846
(dp2847
g79
g2721
sg81
(dp2848
g83
(dp2849
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2850
sg106
(lp2851
sg108
(lp2852
sg110
(dp2853
sg112
(lp2854
ssg114
S'AnalyzeBeat for: 3 if: 1 option: 1'
p2855
sg116
(dp2856
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp2857
g79
g2721
sg81
(dp2858
g83
(dp2859
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2860
sg106
(lp2861
sg108
(lp2862
sg110
(dp2863
sg112
(lp2864
ssg114
S'AnalyzeBeat for: 3 if: 1 option: 2'
p2865
sg116
(dp2866
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (slope > maxSlope)'
p2867
sassg114
S'AnalyzeBeat for: 3'
p2868
sg116
(dp2869
g118
I0
sg119
I0
sg120
I2
sg121
I3
sg122
I0
sg123
I0
sg124
I0
sg125
I2
sssg126
I30
sg127
g2579
sg116
(dp2870
g118
I0
sg119
I0
sg120
I15
sg121
I15
sg122
I0
sg123
I0
sg124
I5
sg125
I15
ssg130
S'tor (; i < FIDMARK + BEAT_MS150; ++i)'
p2871
sg132
(dp2872
g79
g2721
sg81
(dp2873
g83
(dp2874
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2875
sg106
(lp2876
sg108
(lp2877
sg110
(dp2878
sg112
(lp2879
ssg114
g141
sg116
(dp2880
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp2881
g96
(dp2882
g79
g2721
sg81
(dp2883
g83
(dp2884
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2885
sg106
(lp2886
sg108
(lp2887
sg110
(dp2888
sg112
(lp2889
ssg114
S'AnalyzeBeat for: 4'
p2890
sg116
(dp2891
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I100
sg127
g2579
sg116
(dp2892
g118
I0
sg119
I0
sg120
I10
sg121
I1
sg122
I5
sg123
I0
sg124
I5
sg125
I10
ssg130
S'tor (i = minSlopeI; (i > 0) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); --i)'
p2893
sg132
(dp2894
g79
g2721
sg81
(dp2895
g83
(dp2896
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2897
sg106
(lp2898
sg108
(lp2899
sg110
(dp2900
sg112
(lp2901
ssg114
g141
sg116
(dp2902
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I1
sg123
I0
sg124
I1
sg125
I0
sssa(dp2903
g96
(dp2904
g79
g2721
sg81
(dp2905
g83
(dp2906
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2907
sg106
(lp2908
sg108
(lp2909
sg110
(dp2910
sg112
(lp2911
ssg114
S'AnalyzeBeat for: 5'
p2912
sg116
(dp2913
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp2914
g118
I0
sg119
I0
sg120
I15
sg121
I0
sg122
I5
sg123
I5
sg124
I5
sg125
I10
ssg130
S'tor (; (i > *onset - INF_CHK_N) && ((beat[i] - beat[i - 1]) >= (minSlope >> 2)); --i)'
p2915
sg132
(dp2916
g79
g2721
sg81
(dp2917
g83
(dp2918
g85
I0
sg86
I0
sg87
I3
sg88
I0
sg89
I1
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp2919
sg106
(lp2920
sg108
(lp2921
sg110
(dp2922
sg112
(lp2923
ssg114
g141
sg116
(dp2924
g118
I0
sg119
I0
sg120
I3
sg121
I0
sg122
I1
sg123
I1
sg124
I1
sg125
I0
sssa(dp2925
g96
(dp2926
g79
g2721
sg81
(dp2927
g83
(dp2928
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2929
sg106
(lp2930
sg108
(lp2931
sg110
(dp2932
sg112
(lp2933
ssg114
S'AnalyzeBeat for: 6'
p2934
sg116
(dp2935
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp2936
g118
I0
sg119
I0
sg120
I15
sg121
I0
sg122
I5
sg123
I5
sg124
I5
sg125
I10
ssg130
S'tor (; (i > *onset - INF_CHK_N) && ((beat[i - 1] - beat[i]) > (minSlope >> 2)); --i)'
p2937
sg132
(dp2938
g79
g2721
sg81
(dp2939
g83
(dp2940
g85
I0
sg86
I0
sg87
I3
sg88
I0
sg89
I1
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp2941
sg106
(lp2942
sg108
(lp2943
sg110
(dp2944
sg112
(lp2945
ssg114
g141
sg116
(dp2946
g118
I0
sg119
I0
sg120
I3
sg121
I0
sg122
I1
sg123
I1
sg124
I1
sg125
I0
sssa(dp2947
g96
(dp2948
g79
g2721
sg81
(dp2949
g83
(dp2950
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2951
sg106
(lp2952
sg108
(lp2953
sg110
(dp2954
sg112
(lp2955
ssg114
S'AnalyzeBeat for: 7'
p2956
sg116
(dp2957
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I100
sg127
g2579
sg116
(dp2958
g118
I0
sg119
I0
sg120
I10
sg121
I1
sg122
I5
sg123
I0
sg124
I5
sg125
I10
ssg130
S'tor (i = maxSlopeI; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); ++i)'
p2959
sg132
(dp2960
g79
g2721
sg81
(dp2961
g83
(dp2962
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp2963
sg106
(lp2964
sg108
(lp2965
sg110
(dp2966
sg112
(lp2967
ssg114
g141
sg116
(dp2968
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I1
sg123
I0
sg124
I1
sg125
I0
sssa(dp2969
g96
(dp2970
g79
g2721
sg81
(dp2971
g83
(dp2972
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2973
sg106
(lp2974
sg108
(lp2975
sg110
(dp2976
sg112
(lp2977
ssg114
S'AnalyzeBeat for: 8'
p2978
sg116
(dp2979
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp2980
g118
I0
sg119
I0
sg120
I15
sg121
I0
sg122
I5
sg123
I5
sg124
I5
sg125
I10
ssg130
S'tor (; (i < *offset + INF_CHK_N) && ((beat[i] - beat[i - 1]) <= (maxSlope >> 2)); ++i)'
p2981
sg132
(dp2982
g79
g2721
sg81
(dp2983
g83
(dp2984
g85
I0
sg86
I0
sg87
I3
sg88
I0
sg89
I1
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp2985
sg106
(lp2986
sg108
(lp2987
sg110
(dp2988
sg112
(lp2989
ssg114
g141
sg116
(dp2990
g118
I0
sg119
I0
sg120
I3
sg121
I0
sg122
I1
sg123
I1
sg124
I1
sg125
I0
sssa(dp2991
g96
(dp2992
g79
g2721
sg81
(dp2993
g83
(dp2994
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp2995
sg106
(lp2996
sg108
(lp2997
sg110
(dp2998
sg112
(lp2999
ssg114
S'AnalyzeBeat for: 9'
p3000
sg116
(dp3001
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3002
g118
I0
sg119
I0
sg120
I15
sg121
I0
sg122
I5
sg123
I5
sg124
I5
sg125
I10
ssg130
S'tor (; (i < *offset + BEAT_MS40) && ((beat[i - 1] - beat[i]) < (maxSlope >> 2)); ++i)'
p3003
sg132
(dp3004
g79
g2721
sg81
(dp3005
g83
(dp3006
g85
I0
sg86
I0
sg87
I3
sg88
I0
sg89
I1
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp3007
sg106
(lp3008
sg108
(lp3009
sg110
(dp3010
sg112
(lp3011
ssg114
g141
sg116
(dp3012
g118
I0
sg119
I0
sg120
I3
sg121
I0
sg122
I1
sg123
I1
sg124
I1
sg125
I0
sssa(dp3013
g96
(dp3014
g79
g2721
sg81
(dp3015
g83
(dp3016
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3017
sg106
(lp3018
sg108
(lp3019
sg110
(dp3020
sg112
(lp3021
(dp3022
g179
(lp3023
(dp3024
g79
g2721
sg81
(dp3025
g83
(dp3026
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3027
sg106
(lp3028
sg108
(lp3029
sg110
(dp3030
sg112
(lp3031
ssg114
S'AnalyzeBeat for: 10 if: 1 option: 1'
p3032
sg116
(dp3033
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp3034
g79
g2721
sg81
(dp3035
g83
(dp3036
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3037
sg106
(lp3038
sg108
(lp3039
sg110
(dp3040
sg112
(lp3041
ssg114
S'AnalyzeBeat for: 10 if: 1 option: 2'
p3042
sg116
(dp3043
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (beat[i] > maxV)'
p3044
sassg114
S'AnalyzeBeat for: 10'
p3045
sg116
(dp3046
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I2
sssg126
I1
sg127
g2579
sg116
(dp3047
g118
I0
sg119
I0
sg120
I0
sg121
I13
sg122
I0
sg123
I15
sg124
I5
sg125
I15
ssg130
S'tor (i = *onset, maxV = minV = beat[*onset]; i < *offset; ++i)'
p3048
sg132
(dp3049
g79
g2721
sg81
(dp3050
g83
(dp3051
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I3
sg92
I1
ssg93
(lp3052
sg106
(lp3053
sg108
(lp3054
sg110
(dp3055
sg112
(lp3056
ssg114
g141
sg116
(dp3057
g118
I0
sg119
I0
sg120
I0
sg121
I3
sg122
I0
sg123
I3
sg124
I1
sg125
I0
sssa(dp3058
g96
(dp3059
g79
g2721
sg81
(dp3060
g83
(dp3061
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3062
sg106
(lp3063
sg108
(lp3064
sg110
(dp3065
sg112
(lp3066
ssg114
S'AnalyzeBeat for: 11'
p3067
sg116
(dp3068
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I7
sg127
g2579
sg116
(dp3069
g118
I0
sg119
I5
sg120
I15
sg121
I1
sg122
I0
sg123
I0
sg124
I30
sg125
I10
ssg130
S'tor (i = FIDMARK - BEAT_MS250;(i >= BEAT_MS80) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 0); --i)'
p3070
sg132
(dp3071
g79
g2721
sg81
(dp3072
g83
(dp3073
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3074
sg106
(lp3075
sg108
(lp3076
sg110
(dp3077
g25
I1
ssg112
(lp3078
ssg114
g141
sg116
(dp3079
g118
I0
sg119
I1
sg120
I3
sg121
I14
sg122
I0
sg123
I0
sg124
I6
sg125
I16
sssa(dp3080
g96
(dp3081
g79
g2721
sg81
(dp3082
g83
(dp3083
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3084
sg106
(lp3085
sg108
(lp3086
sg110
(dp3087
sg112
(lp3088
ssg114
S'AnalyzeBeat for: 12'
p3089
sg116
(dp3090
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I30
sg127
g2579
sg116
(dp3091
g118
I0
sg119
I5
sg120
I10
sg121
I1
sg122
I0
sg123
I0
sg124
I30
sg125
I10
ssg130
S'tor (i = FIDMARK + BEAT_MS300; (i < BEATLGTH) && (IsoCheck(&beat[i], BEAT_MS80) == 0); ++i)'
p3092
sg132
(dp3093
g79
g2721
sg81
(dp3094
g83
(dp3095
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3096
sg106
(lp3097
sg108
(lp3098
sg110
(dp3099
g25
I1
ssg112
(lp3100
ssg114
g141
sg116
(dp3101
g118
I0
sg119
I1
sg120
I2
sg121
I14
sg122
I0
sg123
I0
sg124
I6
sg125
I16
sssa(dp3102
g96
(dp3103
g79
g2721
sg81
(dp3104
g83
(dp3105
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3106
sg106
(lp3107
sg108
(lp3108
sg110
(dp3109
sg112
(lp3110
(dp3111
g179
(lp3112
(dp3113
g79
g2721
sg81
(dp3114
g83
(dp3115
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3116
sg106
(lp3117
sg108
(lp3118
sg110
(dp3119
sg112
(lp3120
ssg114
S'AnalyzeBeat for: 13 if: 1 option: 1'
p3121
sg116
(dp3122
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp3123
g79
g2721
sg81
(dp3124
g83
(dp3125
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3126
sg106
(lp3127
sg108
(lp3128
sg110
(dp3129
sg112
(lp3130
ssg114
S'AnalyzeBeat for: 13 if: 1 option: 2'
p3131
sg116
(dp3132
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (beat[i] > maxV)'
p3133
sassg114
S'AnalyzeBeat for: 13'
p3134
sg116
(dp3135
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I2
sssg126
I1
sg127
g2579
sg116
(dp3136
g118
I0
sg119
I0
sg120
I0
sg121
I11
sg122
I0
sg123
I10
sg124
I5
sg125
I15
ssg130
S'tor (i = *onset; i < *offset; ++i)'
p3137
sg132
(dp3138
g79
g2721
sg81
(dp3139
g83
(dp3140
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I2
sg92
I1
ssg93
(lp3141
sg106
(lp3142
sg108
(lp3143
sg110
(dp3144
sg112
(lp3145
ssg114
g141
sg116
(dp3146
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I2
sg124
I1
sg125
I0
sssasg106
(lp3147
sg108
(lp3148
sg110
(dp3149
sg112
(lp3150
(dp3151
g179
(lp3152
(dp3153
g79
g2721
sg81
(dp3154
g83
(dp3155
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3156
(dp3157
g96
(dp3158
g79
g2721
sg81
(dp3159
g83
(dp3160
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3161
sg106
(lp3162
sg108
(lp3163
sg110
(dp3164
sg112
(lp3165
ssg114
S'AnalyzeBeat if: 1 option: 1 for: 1'
p3166
sg116
(dp3167
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I32
sg127
g2579
sg116
(dp3168
g118
I0
sg119
I5
sg120
I10
sg121
I1
sg122
I0
sg123
I0
sg124
I30
sg125
I10
ssg130
S'tor (i = FIDMARK - ISO_LENGTH1; (i > 0) && (IsoCheck(&beat[i], ISO_LENGTH1) == 0); --i)'
p3169
sg132
(dp3170
g79
g2721
sg81
(dp3171
g83
(dp3172
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3173
sg106
(lp3174
sg108
(lp3175
sg110
(dp3176
g25
I1
ssg112
(lp3177
ssg114
g141
sg116
(dp3178
g118
I0
sg119
I1
sg120
I2
sg121
I14
sg122
I0
sg123
I0
sg124
I6
sg125
I16
sssasg106
(lp3179
sg108
(lp3180
sg110
(dp3181
sg112
(lp3182
ssg114
S'AnalyzeBeat if: 1 option: 1'
p3183
sg116
(dp3184
g118
I0
sg119
I5
sg120
I12
sg121
I2
sg122
I0
sg123
I0
sg124
I30
sg125
I10
ssa(dp3185
g79
g2721
sg81
(dp3186
g83
(dp3187
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3188
sg106
(lp3189
sg108
(lp3190
sg110
(dp3191
sg112
(lp3192
ssg114
S'AnalyzeBeat if: 1 option: 2'
p3193
sg116
(dp3194
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (i == 0)'
p3195
sa(dp3196
g179
(lp3197
(dp3198
g79
g2721
sg81
(dp3199
g83
(dp3200
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3201
sg106
(lp3202
sg108
(lp3203
sg110
(dp3204
sg112
(lp3205
ssg114
S'AnalyzeBeat if: 2 option: 1'
p3206
sg116
(dp3207
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp3208
g79
g2721
sg81
(dp3209
g83
(dp3210
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3211
sg106
(lp3212
sg108
(lp3213
sg110
(dp3214
sg112
(lp3215
ssg114
S'AnalyzeBeat if: 2 option: 2'
p3216
sg116
(dp3217
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (maxSlope > -minSlope)'
p3218
sa(dp3219
g179
(lp3220
(dp3221
g79
g2721
sg81
(dp3222
g83
(dp3223
g85
I0
sg86
I0
sg87
I6
sg88
I4
sg89
I0
sg90
I1
sg91
I8
sg92
I0
ssg93
(lp3224
(dp3225
g96
(dp3226
g79
g2721
sg81
(dp3227
g83
(dp3228
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3229
sg106
(lp3230
sg108
(lp3231
sg110
(dp3232
sg112
(lp3233
ssg114
S'AnalyzeBeat if: 3 option: 1 for: 1'
p3234
sg116
(dp3235
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I100
sg127
g2579
sg116
(dp3236
g118
I0
sg119
I0
sg120
I10
sg121
I1
sg122
I5
sg123
I0
sg124
I5
sg125
I10
ssg130
S'tor (i = maxSlopeI; (i > 0) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); --i)'
p3237
sg132
(dp3238
g79
g2721
sg81
(dp3239
g83
(dp3240
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3241
sg106
(lp3242
sg108
(lp3243
sg110
(dp3244
sg112
(lp3245
ssg114
g141
sg116
(dp3246
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I1
sg123
I0
sg124
I1
sg125
I0
sssa(dp3247
g96
(dp3248
g79
g2721
sg81
(dp3249
g83
(dp3250
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3251
sg106
(lp3252
sg108
(lp3253
sg110
(dp3254
sg112
(lp3255
ssg114
S'AnalyzeBeat if: 3 option: 1 for: 2'
p3256
sg116
(dp3257
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3258
g118
I0
sg119
I0
sg120
I15
sg121
I0
sg122
I5
sg123
I5
sg124
I5
sg125
I10
ssg130
S'tor (; (i > *onset - INF_CHK_N) && ((beat[i] - beat[i - 1]) <= (maxSlope >> 2)); --i)'
p3259
sg132
(dp3260
g79
g2721
sg81
(dp3261
g83
(dp3262
g85
I0
sg86
I0
sg87
I3
sg88
I0
sg89
I1
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp3263
sg106
(lp3264
sg108
(lp3265
sg110
(dp3266
sg112
(lp3267
ssg114
g141
sg116
(dp3268
g118
I0
sg119
I0
sg120
I3
sg121
I0
sg122
I1
sg123
I1
sg124
I1
sg125
I0
sssa(dp3269
g96
(dp3270
g79
g2721
sg81
(dp3271
g83
(dp3272
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3273
sg106
(lp3274
sg108
(lp3275
sg110
(dp3276
sg112
(lp3277
ssg114
S'AnalyzeBeat if: 3 option: 1 for: 3'
p3278
sg116
(dp3279
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3280
g118
I0
sg119
I0
sg120
I15
sg121
I0
sg122
I5
sg123
I5
sg124
I5
sg125
I10
ssg130
S'tor (; (i > *onset - INF_CHK_N) && ((beat[i - 1] - beat[i]) < (maxSlope >> 2)); --i)'
p3281
sg132
(dp3282
g79
g2721
sg81
(dp3283
g83
(dp3284
g85
I0
sg86
I0
sg87
I3
sg88
I0
sg89
I1
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp3285
sg106
(lp3286
sg108
(lp3287
sg110
(dp3288
sg112
(lp3289
ssg114
g141
sg116
(dp3290
g118
I0
sg119
I0
sg120
I3
sg121
I0
sg122
I1
sg123
I1
sg124
I1
sg125
I0
sssa(dp3291
g96
(dp3292
g79
g2721
sg81
(dp3293
g83
(dp3294
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3295
sg106
(lp3296
sg108
(lp3297
sg110
(dp3298
sg112
(lp3299
ssg114
S'AnalyzeBeat if: 3 option: 1 for: 4'
p3300
sg116
(dp3301
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I100
sg127
g2579
sg116
(dp3302
g118
I0
sg119
I0
sg120
I10
sg121
I1
sg122
I5
sg123
I0
sg124
I5
sg125
I10
ssg130
S'tor (i = minSlopeI; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); ++i)'
p3303
sg132
(dp3304
g79
g2721
sg81
(dp3305
g83
(dp3306
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3307
sg106
(lp3308
sg108
(lp3309
sg110
(dp3310
sg112
(lp3311
ssg114
g141
sg116
(dp3312
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I1
sg123
I0
sg124
I1
sg125
I0
sssa(dp3313
g96
(dp3314
g79
g2721
sg81
(dp3315
g83
(dp3316
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3317
sg106
(lp3318
sg108
(lp3319
sg110
(dp3320
sg112
(lp3321
ssg114
S'AnalyzeBeat if: 3 option: 1 for: 5'
p3322
sg116
(dp3323
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3324
g118
I0
sg119
I0
sg120
I15
sg121
I0
sg122
I5
sg123
I5
sg124
I5
sg125
I10
ssg130
S'tor (; (i < *offset + INF_CHK_N) && ((beat[i] - beat[i - 1]) >= (minSlope >> 2)); ++i)'
p3325
sg132
(dp3326
g79
g2721
sg81
(dp3327
g83
(dp3328
g85
I0
sg86
I0
sg87
I3
sg88
I0
sg89
I1
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp3329
sg106
(lp3330
sg108
(lp3331
sg110
(dp3332
sg112
(lp3333
ssg114
g141
sg116
(dp3334
g118
I0
sg119
I0
sg120
I3
sg121
I0
sg122
I1
sg123
I1
sg124
I1
sg125
I0
sssa(dp3335
g96
(dp3336
g79
g2721
sg81
(dp3337
g83
(dp3338
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3339
sg106
(lp3340
sg108
(lp3341
sg110
(dp3342
sg112
(lp3343
ssg114
S'AnalyzeBeat if: 3 option: 1 for: 6'
p3344
sg116
(dp3345
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3346
g118
I0
sg119
I0
sg120
I15
sg121
I0
sg122
I5
sg123
I5
sg124
I5
sg125
I10
ssg130
S'tor (; (i < *offset + BEAT_MS40) && ((beat[i - 1] - beat[i]) > (minSlope >> 2)); ++i)'
p3347
sg132
(dp3348
g79
g2721
sg81
(dp3349
g83
(dp3350
g85
I0
sg86
I0
sg87
I3
sg88
I0
sg89
I1
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp3351
sg106
(lp3352
sg108
(lp3353
sg110
(dp3354
sg112
(lp3355
ssg114
g141
sg116
(dp3356
g118
I0
sg119
I0
sg120
I3
sg121
I0
sg122
I1
sg123
I1
sg124
I1
sg125
I0
sssasg106
(lp3357
sg108
(lp3358
sg110
(dp3359
sg112
(lp3360
(dp3361
g179
(lp3362
(dp3363
g79
g2721
sg81
(dp3364
g83
(dp3365
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3366
(dp3367
g96
(dp3368
g79
g2721
sg81
(dp3369
g83
(dp3370
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3371
sg106
(lp3372
sg108
(lp3373
sg110
(dp3374
sg112
(lp3375
ssg114
S'AnalyzeBeat if: 3 option: 1 if: 1 option: 1 for: 1'
p3376
sg116
(dp3377
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3378
g118
I0
sg119
I0
sg120
I10
sg121
I0
sg122
I5
sg123
I0
sg124
I5
sg125
I10
ssg130
S'tor (; (i > 0) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); --i)'
p3379
sg132
(dp3380
g79
g2721
sg81
(dp3381
g83
(dp3382
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3383
sg106
(lp3384
sg108
(lp3385
sg110
(dp3386
sg112
(lp3387
ssg114
g141
sg116
(dp3388
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I1
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp3389
sg108
(lp3390
sg110
(dp3391
sg112
(lp3392
ssg114
S'AnalyzeBeat if: 3 option: 1 if: 1 option: 1'
p3393
sg116
(dp3394
g118
I0
sg119
I0
sg120
I11
sg121
I1
sg122
I5
sg123
I1
sg124
I5
sg125
I10
ssasg191
S'if (i > *onset - INF_CHK_N)'
p3395
sa(dp3396
g179
(lp3397
(dp3398
g79
g2721
sg81
(dp3399
g83
(dp3400
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3401
(dp3402
g96
(dp3403
g79
g2721
sg81
(dp3404
g83
(dp3405
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3406
sg106
(lp3407
sg108
(lp3408
sg110
(dp3409
sg112
(lp3410
ssg114
S'AnalyzeBeat if: 3 option: 1 if: 2 option: 1 for: 1'
p3411
sg116
(dp3412
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3413
g118
I0
sg119
I0
sg120
I10
sg121
I0
sg122
I5
sg123
I0
sg124
I5
sg125
I10
ssg130
S'tor (; (i > 0) && ((beat[i - 1] - beat[i]) > (maxSlope >> 2)); --i)'
p3414
sg132
(dp3415
g79
g2721
sg81
(dp3416
g83
(dp3417
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3418
sg106
(lp3419
sg108
(lp3420
sg110
(dp3421
sg112
(lp3422
ssg114
g141
sg116
(dp3423
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I1
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp3424
sg108
(lp3425
sg110
(dp3426
sg112
(lp3427
ssg114
S'AnalyzeBeat if: 3 option: 1 if: 2 option: 1'
p3428
sg116
(dp3429
g118
I0
sg119
I0
sg120
I11
sg121
I1
sg122
I5
sg123
I1
sg124
I5
sg125
I10
ssasg191
S'if (i > *onset - INF_CHK_N)'
p3430
sa(dp3431
g179
(lp3432
(dp3433
g79
g2721
sg81
(dp3434
g83
(dp3435
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3436
(dp3437
g96
(dp3438
g79
g2721
sg81
(dp3439
g83
(dp3440
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3441
sg106
(lp3442
sg108
(lp3443
sg110
(dp3444
sg112
(lp3445
ssg114
S'AnalyzeBeat if: 3 option: 1 if: 3 option: 1 for: 1'
p3446
sg116
(dp3447
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3448
g118
I0
sg119
I0
sg120
I10
sg121
I0
sg122
I5
sg123
I0
sg124
I5
sg125
I10
ssg130
S'tor (; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); ++i)'
p3449
sg132
(dp3450
g79
g2721
sg81
(dp3451
g83
(dp3452
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3453
sg106
(lp3454
sg108
(lp3455
sg110
(dp3456
sg112
(lp3457
ssg114
g141
sg116
(dp3458
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I1
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp3459
sg108
(lp3460
sg110
(dp3461
sg112
(lp3462
ssg114
S'AnalyzeBeat if: 3 option: 1 if: 3 option: 1'
p3463
sg116
(dp3464
g118
I0
sg119
I0
sg120
I10
sg121
I1
sg122
I5
sg123
I1
sg124
I5
sg125
I10
ssasg191
S'if (i < *offset + INF_CHK_N)'
p3465
sa(dp3466
g179
(lp3467
(dp3468
g79
g2721
sg81
(dp3469
g83
(dp3470
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I2
sg92
I0
ssg93
(lp3471
(dp3472
g96
(dp3473
g79
g2721
sg81
(dp3474
g83
(dp3475
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3476
sg106
(lp3477
sg108
(lp3478
sg110
(dp3479
sg112
(lp3480
ssg114
S'AnalyzeBeat if: 3 option: 1 if: 4 option: 1 for: 1'
p3481
sg116
(dp3482
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3483
g118
I0
sg119
I0
sg120
I10
sg121
I0
sg122
I5
sg123
I0
sg124
I5
sg125
I10
ssg130
S'tor (; (i < BEATLGTH) && ((beat[i - 1] - beat[i]) < (minSlope >> 2)); ++i)'
p3484
sg132
(dp3485
g79
g2721
sg81
(dp3486
g83
(dp3487
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3488
sg106
(lp3489
sg108
(lp3490
sg110
(dp3491
sg112
(lp3492
ssg114
g141
sg116
(dp3493
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I1
sg123
I0
sg124
I1
sg125
I0
sssa(dp3494
g96
(dp3495
g79
g2721
sg81
(dp3496
g83
(dp3497
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3498
sg106
(lp3499
sg108
(lp3500
sg110
(dp3501
sg112
(lp3502
ssg114
S'AnalyzeBeat if: 3 option: 1 if: 4 option: 1 for: 2'
p3503
sg116
(dp3504
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3505
g118
I0
sg119
I0
sg120
I15
sg121
I0
sg122
I5
sg123
I5
sg124
I5
sg125
I10
ssg130
S'tor (; (i < *offset + BEAT_MS60) && (beat[i] - beat[i - 1] > (minSlope >> 2)); ++i)'
p3506
sg132
(dp3507
g79
g2721
sg81
(dp3508
g83
(dp3509
g85
I0
sg86
I0
sg87
I3
sg88
I0
sg89
I1
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp3510
sg106
(lp3511
sg108
(lp3512
sg110
(dp3513
sg112
(lp3514
ssg114
g141
sg116
(dp3515
g118
I0
sg119
I0
sg120
I3
sg121
I0
sg122
I1
sg123
I1
sg124
I1
sg125
I0
sssasg106
(lp3516
sg108
(lp3517
sg110
(dp3518
sg112
(lp3519
(dp3520
g179
(lp3521
(dp3522
g79
g2721
sg81
(dp3523
g83
(dp3524
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3525
(dp3526
g96
(dp3527
g79
g2721
sg81
(dp3528
g83
(dp3529
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3530
sg106
(lp3531
sg108
(lp3532
sg110
(dp3533
sg112
(lp3534
ssg114
S'AnalyzeBeat if: 3 option: 1 if: 4 option: 1 if: 1 option: 1 for: 1'
p3535
sg116
(dp3536
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3537
g118
I0
sg119
I0
sg120
I10
sg121
I0
sg122
I5
sg123
I0
sg124
I5
sg125
I10
ssg130
S'tor (; (i < BEATLGTH) && (beat[i] - beat[i - 1] < (minSlope >> 2)); ++i)'
p3538
sg132
(dp3539
g79
g2721
sg81
(dp3540
g83
(dp3541
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3542
sg106
(lp3543
sg108
(lp3544
sg110
(dp3545
sg112
(lp3546
ssg114
g141
sg116
(dp3547
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I1
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp3548
sg108
(lp3549
sg110
(dp3550
sg112
(lp3551
ssg114
S'AnalyzeBeat if: 3 option: 1 if: 4 option: 1 if: 1 option: 1'
p3552
sg116
(dp3553
g118
I0
sg119
I0
sg120
I10
sg121
I1
sg122
I5
sg123
I1
sg124
I5
sg125
I10
ssasg191
S'if (i < *offset + BEAT_MS60)'
p3554
sassg114
S'AnalyzeBeat if: 3 option: 1 if: 4 option: 1'
p3555
sg116
(dp3556
g118
I0
sg119
I0
sg120
I36
sg121
I2
sg122
I15
sg123
I8
sg124
I15
sg125
I31
ssasg191
S'if (i < *offset + BEAT_MS40)'
p3557
sassg114
S'AnalyzeBeat if: 3 option: 1'
p3558
sg116
(dp3559
g118
I0
sg119
I0
sg120
I154
sg121
I11
sg122
I60
sg123
I39
sg124
I60
sg125
I125
ssasg191
S'if (maxSlopeI < minSlopeI)'
p3560
sa(dp3561
g179
(lp3562
(dp3563
g79
g2721
sg81
(dp3564
g83
(dp3565
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3566
(dp3567
g96
(dp3568
g79
g2721
sg81
(dp3569
g83
(dp3570
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3571
sg106
(lp3572
sg108
(lp3573
sg110
(dp3574
sg112
(lp3575
ssg114
S'AnalyzeBeat if: 4 option: 1 for: 1'
p3576
sg116
(dp3577
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3578
g118
I0
sg119
I0
sg120
I10
sg121
I0
sg122
I5
sg123
I0
sg124
I5
sg125
I10
ssg130
S'tor (; (i > 0) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); --i)'
p3579
sg132
(dp3580
g79
g2721
sg81
(dp3581
g83
(dp3582
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3583
sg106
(lp3584
sg108
(lp3585
sg110
(dp3586
sg112
(lp3587
ssg114
g141
sg116
(dp3588
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I1
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp3589
sg108
(lp3590
sg110
(dp3591
sg112
(lp3592
ssg114
S'AnalyzeBeat if: 4 option: 1'
p3593
sg116
(dp3594
g118
I0
sg119
I0
sg120
I11
sg121
I1
sg122
I5
sg123
I1
sg124
I5
sg125
I10
ssasg191
S'if (i > *onset - INF_CHK_N)'
p3595
sa(dp3596
g179
(lp3597
(dp3598
g79
g2721
sg81
(dp3599
g83
(dp3600
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3601
(dp3602
g96
(dp3603
g79
g2721
sg81
(dp3604
g83
(dp3605
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3606
sg106
(lp3607
sg108
(lp3608
sg110
(dp3609
sg112
(lp3610
ssg114
S'AnalyzeBeat if: 5 option: 1 for: 1'
p3611
sg116
(dp3612
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3613
g118
I0
sg119
I0
sg120
I10
sg121
I0
sg122
I5
sg123
I0
sg124
I5
sg125
I10
ssg130
S'tor (; (i > 0) && ((beat[i - 1] - beat[i]) < (minSlope >> 2)); --i)'
p3614
sg132
(dp3615
g79
g2721
sg81
(dp3616
g83
(dp3617
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3618
sg106
(lp3619
sg108
(lp3620
sg110
(dp3621
sg112
(lp3622
ssg114
g141
sg116
(dp3623
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I1
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp3624
sg108
(lp3625
sg110
(dp3626
sg112
(lp3627
ssg114
S'AnalyzeBeat if: 5 option: 1'
p3628
sg116
(dp3629
g118
I0
sg119
I0
sg120
I11
sg121
I1
sg122
I5
sg123
I1
sg124
I5
sg125
I10
ssasg191
S'if (i > *onset - INF_CHK_N)'
p3630
sa(dp3631
g179
(lp3632
(dp3633
g79
g2721
sg81
(dp3634
g83
(dp3635
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3636
(dp3637
g96
(dp3638
g79
g2721
sg81
(dp3639
g83
(dp3640
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3641
sg106
(lp3642
sg108
(lp3643
sg110
(dp3644
sg112
(lp3645
ssg114
S'AnalyzeBeat if: 6 option: 1 for: 1'
p3646
sg116
(dp3647
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3648
g118
I0
sg119
I0
sg120
I10
sg121
I0
sg122
I5
sg123
I0
sg124
I5
sg125
I10
ssg130
S'tor (; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); ++i)'
p3649
sg132
(dp3650
g79
g2721
sg81
(dp3651
g83
(dp3652
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3653
sg106
(lp3654
sg108
(lp3655
sg110
(dp3656
sg112
(lp3657
ssg114
g141
sg116
(dp3658
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I1
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp3659
sg108
(lp3660
sg110
(dp3661
sg112
(lp3662
ssg114
S'AnalyzeBeat if: 6 option: 1'
p3663
sg116
(dp3664
g118
I0
sg119
I0
sg120
I10
sg121
I1
sg122
I5
sg123
I1
sg124
I5
sg125
I10
ssasg191
S'if (i < *offset + INF_CHK_N)'
p3665
sa(dp3666
g179
(lp3667
(dp3668
g79
g2721
sg81
(dp3669
g83
(dp3670
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3671
(dp3672
g96
(dp3673
g79
g2721
sg81
(dp3674
g83
(dp3675
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3676
sg106
(lp3677
sg108
(lp3678
sg110
(dp3679
sg112
(lp3680
ssg114
S'AnalyzeBeat if: 7 option: 1 for: 1'
p3681
sg116
(dp3682
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3683
g118
I0
sg119
I0
sg120
I10
sg121
I0
sg122
I5
sg123
I0
sg124
I5
sg125
I10
ssg130
S'tor (; (i < BEATLGTH) && ((beat[i - 1] - beat[i]) > (maxSlope >> 2)); ++i)'
p3684
sg132
(dp3685
g79
g2721
sg81
(dp3686
g83
(dp3687
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3688
sg106
(lp3689
sg108
(lp3690
sg110
(dp3691
sg112
(lp3692
ssg114
g141
sg116
(dp3693
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I1
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp3694
sg108
(lp3695
sg110
(dp3696
sg112
(lp3697
ssg114
S'AnalyzeBeat if: 7 option: 1'
p3698
sg116
(dp3699
g118
I0
sg119
I0
sg120
I10
sg121
I1
sg122
I5
sg123
I1
sg124
I5
sg125
I10
ssasg191
S'if (i < *offset + BEAT_MS40)'
p3700
sa(dp3701
g179
(lp3702
(dp3703
g79
g2721
sg81
(dp3704
g83
(dp3705
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3706
sg106
(lp3707
sg108
(lp3708
sg110
(dp3709
sg112
(lp3710
ssg114
S'AnalyzeBeat if: 8 option: 1'
p3711
sg116
(dp3712
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssasg191
S'if ((isoStart == ISO_LENGTH1 - 1) && (*onset > isoStart)) '
p3713
sa(dp3714
g179
(lp3715
(dp3716
g79
g2721
sg81
(dp3717
g83
(dp3718
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3719
sg106
(lp3720
sg108
(lp3721
sg110
(dp3722
sg112
(lp3723
ssg114
S'AnalyzeBeat if: 9 option: 1'
p3724
sg116
(dp3725
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssasg191
S'else if (*onset - isoStart < BEAT_MS50)'
p3726
sa(dp3727
g179
(lp3728
(dp3729
g79
g2721
sg81
(dp3730
g83
(dp3731
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3732
sg106
(lp3733
sg108
(lp3734
sg110
(dp3735
sg112
(lp3736
ssg114
S'AnalyzeBeat if: 10 option: 1'
p3737
sg116
(dp3738
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssasg191
S'if (isoEnd - *offset < BEAT_MS50)'
p3739
sa(dp3740
g179
(lp3741
(dp3742
g79
g2721
sg81
(dp3743
g83
(dp3744
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3745
(dp3746
g96
(dp3747
g79
g2721
sg81
(dp3748
g83
(dp3749
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3750
sg106
(lp3751
sg108
(lp3752
sg110
(dp3753
sg112
(lp3754
(dp3755
g179
(lp3756
(dp3757
g79
g2721
sg81
(dp3758
g83
(dp3759
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3760
sg106
(lp3761
sg108
(lp3762
sg110
(dp3763
sg112
(lp3764
ssg114
S'AnalyzeBeat if: 11 option: 1 for: 1 if: 1 option: 1'
p3765
sg116
(dp3766
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (slope > maxSlope)'
p3767
sassg114
S'AnalyzeBeat if: 11 option: 1 for: 1'
p3768
sg116
(dp3769
g118
I0
sg119
I0
sg120
I2
sg121
I3
sg122
I0
sg123
I0
sg124
I0
sg125
I1
sssg126
I10
sg127
g2579
sg116
(dp3770
g118
I0
sg119
I0
sg120
I25
sg121
I18
sg122
I0
sg123
I20
sg124
I5
sg125
I15
ssg130
S'tor (i = maxSlopeI = *offset, maxSlope = beat[*offset] - beat[*offset - 1];(i < *offset + BEAT_MS100) && (i < BEATLGTH); ++i)'
p3771
sg132
(dp3772
g79
g2721
sg81
(dp3773
g83
(dp3774
g85
I0
sg86
I0
sg87
I3
sg88
I3
sg89
I0
sg90
I1
sg91
I4
sg92
I1
ssg93
(lp3775
sg106
(lp3776
sg108
(lp3777
sg110
(dp3778
sg112
(lp3779
ssg114
g141
sg116
(dp3780
g118
I0
sg119
I0
sg120
I3
sg121
I3
sg122
I0
sg123
I4
sg124
I1
sg125
I0
sssasg106
(lp3781
sg108
(lp3782
sg110
(dp3783
sg112
(lp3784
(dp3785
g179
(lp3786
(dp3787
g79
g2721
sg81
(dp3788
g83
(dp3789
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3790
(dp3791
g96
(dp3792
g79
g2721
sg81
(dp3793
g83
(dp3794
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3795
sg106
(lp3796
sg108
(lp3797
sg110
(dp3798
sg112
(lp3799
ssg114
S'AnalyzeBeat if: 11 option: 1 if: 1 option: 1 for: 1'
p3800
sg116
(dp3801
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I100
sg127
g2579
sg116
(dp3802
g118
I0
sg119
I0
sg120
I10
sg121
I1
sg122
I5
sg123
I0
sg124
I5
sg125
I10
ssg130
S'tor (i = maxSlopeI; (i < BEATLGTH) && (beat[i] - beat[i - 1] > (maxSlope >> 1)); ++i)'
p3803
sg132
(dp3804
g79
g2721
sg81
(dp3805
g83
(dp3806
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3807
sg106
(lp3808
sg108
(lp3809
sg110
(dp3810
sg112
(lp3811
ssg114
g141
sg116
(dp3812
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I1
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp3813
sg108
(lp3814
sg110
(dp3815
sg112
(lp3816
ssg114
S'AnalyzeBeat if: 11 option: 1 if: 1 option: 1'
p3817
sg116
(dp3818
g118
I0
sg119
I0
sg120
I10
sg121
I2
sg122
I5
sg123
I1
sg124
I5
sg125
I10
ssasg191
S'if (maxSlope > 0)'
p3819
sassg114
S'AnalyzeBeat if: 11 option: 1'
p3820
sg116
(dp3821
g118
I0
sg119
I0
sg120
I35
sg121
I20
sg122
I5
sg123
I21
sg124
I10
sg125
I26
ssasg191
S'if ((beat[*onset] - beat[*offset] > ((maxV - minV) >> 2) + ((maxV - minV) >> 3)))'
p3822
sa(dp3823
g179
(lp3824
(dp3825
g79
g2721
sg81
(dp3826
g83
(dp3827
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3828
(dp3829
g96
(dp3830
g79
g2721
sg81
(dp3831
g83
(dp3832
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3833
sg106
(lp3834
sg108
(lp3835
sg110
(dp3836
sg112
(lp3837
ssg114
S'AnalyzeBeat if: 12 option: 1 for: 1'
p3838
sg116
(dp3839
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3840
g118
I0
sg119
I5
sg120
I15
sg121
I0
sg122
I0
sg123
I5
sg124
I30
sg125
I10
ssg130
S'tor (; (i < *onset - BEAT_MS50) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 1); ++i)'
p3841
sg132
(dp3842
g79
g2721
sg81
(dp3843
g83
(dp3844
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I0
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp3845
sg106
(lp3846
sg108
(lp3847
sg110
(dp3848
g25
I1
ssg112
(lp3849
ssg114
g141
sg116
(dp3850
g118
I0
sg119
I1
sg120
I3
sg121
I13
sg122
I0
sg123
I1
sg124
I6
sg125
I16
sssasg106
(lp3851
sg108
(lp3852
sg110
(dp3853
sg112
(lp3854
ssg114
S'AnalyzeBeat if: 12 option: 1'
p3855
sg116
(dp3856
g118
I0
sg119
I5
sg120
I16
sg121
I1
sg122
I0
sg123
I6
sg124
I30
sg125
I10
ssasg191
S'if (*beatBegin == FIDMARK - BEAT_MS250)'
p3857
sa(dp3858
g179
(lp3859
(dp3860
g79
g2721
sg81
(dp3861
g83
(dp3862
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3863
(dp3864
g96
(dp3865
g79
g2721
sg81
(dp3866
g83
(dp3867
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3868
sg106
(lp3869
sg108
(lp3870
sg110
(dp3871
sg112
(lp3872
ssg114
S'AnalyzeBeat if: 13 option: 1 for: 1'
p3873
sg116
(dp3874
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3875
g118
I0
sg119
I5
sg120
I10
sg121
I0
sg122
I0
sg123
I5
sg124
I30
sg125
I10
ssg130
S'tor (; (i < *onset) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 0); ++i)'
p3876
sg132
(dp3877
g79
g2721
sg81
(dp3878
g83
(dp3879
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp3880
sg106
(lp3881
sg108
(lp3882
sg110
(dp3883
g25
I1
ssg112
(lp3884
ssg114
g141
sg116
(dp3885
g118
I0
sg119
I1
sg120
I2
sg121
I13
sg122
I0
sg123
I1
sg124
I6
sg125
I16
sssasg106
(lp3886
sg108
(lp3887
sg110
(dp3888
sg112
(lp3889
(dp3890
g179
(lp3891
(dp3892
g79
g2721
sg81
(dp3893
g83
(dp3894
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3895
(dp3896
g96
(dp3897
g79
g2721
sg81
(dp3898
g83
(dp3899
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3900
sg106
(lp3901
sg108
(lp3902
sg110
(dp3903
sg112
(lp3904
ssg114
S'AnalyzeBeat if: 13 option: 1 if: 1 option: 1 for: 1'
p3905
sg116
(dp3906
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I1
sg127
g2579
sg116
(dp3907
g118
I0
sg119
I5
sg120
I10
sg121
I0
sg122
I0
sg123
I5
sg124
I30
sg125
I10
ssg130
S'tor (; (i < *onset) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 1); ++i)'
p3908
sg132
(dp3909
g79
g2721
sg81
(dp3910
g83
(dp3911
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp3912
sg106
(lp3913
sg108
(lp3914
sg110
(dp3915
g25
I1
ssg112
(lp3916
ssg114
g141
sg116
(dp3917
g118
I0
sg119
I1
sg120
I2
sg121
I13
sg122
I0
sg123
I1
sg124
I6
sg125
I16
sssasg106
(lp3918
sg108
(lp3919
sg110
(dp3920
sg112
(lp3921
(dp3922
g179
(lp3923
(dp3924
g79
g2721
sg81
(dp3925
g83
(dp3926
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp3927
sg106
(lp3928
sg108
(lp3929
sg110
(dp3930
sg112
(lp3931
ssg114
S'AnalyzeBeat if: 13 option: 1 if: 1 option: 1 if: 1 option: 1'
p3932
sg116
(dp3933
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssasg191
S'if (i < *onset)'
p3934
sassg114
S'AnalyzeBeat if: 13 option: 1 if: 1 option: 1'
p3935
sg116
(dp3936
g118
I0
sg119
I5
sg120
I11
sg121
I1
sg122
I0
sg123
I7
sg124
I30
sg125
I11
ssasg191
S'if (i < *onset)'
p3937
sassg114
S'AnalyzeBeat if: 13 option: 1'
p3938
sg116
(dp3939
g118
I0
sg119
I10
sg120
I21
sg121
I1
sg122
I0
sg123
I13
sg124
I60
sg125
I22
ssasg191
S'else if (*beatBegin == BEAT_MS80 - 1)'
p3940
sassg114
g26
sg116
(dp3941
g118
I0
sg119
I40
sg120
I437
sg121
I107
sg122
I117
sg123
I151
sg124
I375
sg125
I394
ssa(dp3942
g79
S'BDAC.CPP'
p3943
sg81
(dp3944
g83
(dp3945
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3946
sg106
(lp3947
sg108
(lp3948
sg110
(dp3949
g5
I2
sg15
I1
ssg112
(lp3950
ssg114
g27
sg116
(dp3951
g118
F714.0
sg119
F1504.0
sg120
F125501.0
sg121
F38328.0
sg122
F106784.0
sg123
F4233.0
sg124
F78819.0
sg125
F103617.0
ssa(dp3952
g79
g3943
sg81
(dp3953
g83
(dp3954
g85
I4
sg86
I2
sg87
I7
sg88
I13
sg89
I0
sg90
I1
sg91
I6
sg92
I3
ssg93
(lp3955
(dp3956
g96
(dp3957
g79
g3943
sg81
(dp3958
g83
(dp3959
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3960
sg106
(lp3961
sg108
(lp3962
sg110
(dp3963
sg112
(lp3964
ssg114
S'BeatDetectAndClassify for: 1'
p3965
sg116
(dp3966
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssg126
I5
sg127
g2579
sg116
(dp3967
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I10
sg125
I5
ssg130
S'tor (i = 0; i < BeatQueCount; ++i)'
p3968
sg132
(dp3969
g79
g3943
sg81
(dp3970
g83
(dp3971
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3972
sg106
(lp3973
sg108
(lp3974
sg110
(dp3975
sg112
(lp3976
ssg114
g141
sg116
(dp3977
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp3978
g96
(dp3979
g79
g3943
sg81
(dp3980
g83
(dp3981
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp3982
sg106
(lp3983
sg108
(lp3984
sg110
(dp3985
sg112
(lp3986
(dp3987
g179
(lp3988
(dp3989
g79
g3943
sg81
(dp3990
g83
(dp3991
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp3992
sg106
(lp3993
sg108
(lp3994
sg110
(dp3995
sg112
(lp3996
ssg114
S'BeatDetectAndClassify for: 2 if: 1 option: 1'
p3997
sg116
(dp3998
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++j == ECG_BUFFER_LENGTH)'
p3999
sassg114
S'BeatDetectAndClassify for: 2'
p4000
sg116
(dp4001
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I1
sg125
I1
sssg126
I200
sg127
g128
sg116
(dp4002
g118
I200
sg119
I0
sg120
I0
sg121
I401
sg122
I0
sg123
I200
sg124
I400
sg125
I400
ssg130
S'tor (i = 0; i < (SAMPLE_RATE / BEAT_SAMPLE_RATE) * BEATLGTH; ++i)'
p4003
sg132
(dp4004
g79
g3943
sg81
(dp4005
g83
(dp4006
g85
I1
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp4007
sg106
(lp4008
sg108
(lp4009
sg110
(dp4010
sg112
(lp4011
ssg114
g141
sg116
(dp4012
g118
I1
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I1
sg124
I1
sg125
I0
sssa(dp4013
g96
(dp4014
g79
g3943
sg81
(dp4015
g83
(dp4016
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4017
sg106
(lp4018
sg108
(lp4019
sg110
(dp4020
sg112
(lp4021
ssg114
S'BeatDetectAndClassify for: 3'
p4022
sg116
(dp4023
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I4
sg127
g2579
sg116
(dp4024
g118
I0
sg119
I0
sg120
I10
sg121
I6
sg122
I0
sg123
I0
sg124
I5
sg125
I5
ssg130
S'tor (i = 0; i < BeatQueCount - 1; ++i)'
p4025
sg132
(dp4026
g79
g3943
sg81
(dp4027
g83
(dp4028
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp4029
sg106
(lp4030
sg108
(lp4031
sg110
(dp4032
sg112
(lp4033
ssg114
g141
sg116
(dp4034
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp4035
sg108
(lp4036
sg110
(dp4037
g5
I2
sg64
I1
sg75
I2
sg15
I1
sg29
I1
ssg112
(lp4038
(dp4039
g179
(lp4040
(dp4041
g79
g3943
sg81
(dp4042
g83
(dp4043
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4044
sg106
(lp4045
sg108
(lp4046
sg110
(dp4047
sg112
(lp4048
ssg114
S'BeatDetectAndClassify if: 1 option: 1'
p4049
sg116
(dp4050
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++ECGBufferIndex == ECG_BUFFER_LENGTH)'
p4051
sa(dp4052
g179
(lp4053
(dp4054
g79
g3943
sg81
(dp4055
g83
(dp4056
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp4057
sg106
(lp4058
sg108
(lp4059
sg110
(dp4060
sg112
(lp4061
ssg114
S'BeatDetectAndClassify if: 2 option: 1'
p4062
sg116
(dp4063
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssasg191
S'if (detectDelay != 0)'
p4064
sa(dp4065
g179
(lp4066
(dp4067
g79
g3943
sg81
(dp4068
g83
(dp4069
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4070
sg106
(lp4071
sg108
(lp4072
sg110
(dp4073
sg112
(lp4074
ssg114
S'BeatDetectAndClassify if: 3 option: 1'
p4075
sg116
(dp4076
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((BeatQue[0] < (BEATLGTH - FIDMARK) * (SAMPLE_RATE / BEAT_SAMPLE_RATE))'
p4077
sa(dp4078
g179
(lp4079
(dp4080
g79
g3943
sg81
(dp4081
g83
(dp4082
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4083
sg106
(lp4084
sg108
(lp4085
sg110
(dp4086
sg112
(lp4087
ssg114
S'BeatDetectAndClassify if: 4 option: 1'
p4088
sg116
(dp4089
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp4090
g79
g3943
sg81
(dp4091
g83
(dp4092
g85
I2
sg86
I0
sg87
I2
sg88
I2
sg89
I0
sg90
I1
sg91
I2
sg92
I0
ssg93
(lp4093
sg106
(lp4094
sg108
(lp4095
sg110
(dp4096
g66
I1
sg67
I1
ssg112
(lp4097
ssg114
S'BeatDetectAndClassify if: 4 option: 2'
p4098
sg116
(dp4099
g118
I2
sg119
I2
sg120
I2
sg121
I2
sg122
I0
sg123
I2
sg124
I0
sg125
I0
ssasg191
S'if (domType == -1)'
p4100
sa(dp4101
g179
(lp4102
(dp4103
g79
g3943
sg81
(dp4104
g83
(dp4105
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4106
sg106
(lp4107
sg108
(lp4108
sg110
(dp4109
sg112
(lp4110
ssg114
S'BeatDetectAndClassify if: 5 option: 1'
p4111
sg116
(dp4112
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (j < 0)'
p4113
sa(dp4114
g179
(lp4115
(dp4116
g79
g3943
sg81
(dp4117
g83
(dp4118
g85
I0
sg86
I0
sg87
I0
sg88
I4
sg89
I0
sg90
I1
sg91
I2
sg92
I0
ssg93
(lp4119
sg106
(lp4120
sg108
(lp4121
sg110
(dp4122
sg112
(lp4123
ssg114
S'BeatDetectAndClassify if: 6 option: 1'
p4124
sg116
(dp4125
g118
I0
sg119
I0
sg120
I0
sg121
I4
sg122
I0
sg123
I2
sg124
I0
sg125
I0
ssasg191
S'if (InitBeatFlag)'
p4126
sa(dp4127
g179
(lp4128
(dp4129
g79
g3943
sg81
(dp4130
g83
(dp4131
g85
I0
sg86
I1
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4132
sg106
(lp4133
sg108
(lp4134
sg110
(dp4135
sg112
(lp4136
ssg114
S'BeatDetectAndClassify if: 7 option: 1'
p4137
sg116
(dp4138
g118
I0
sg119
I1
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (*beatType == 100)'
p4139
sa(dp4140
g179
(lp4141
(dp4142
g79
g3943
sg81
(dp4143
g83
(dp4144
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4145
sg106
(lp4146
sg108
(lp4147
sg110
(dp4148
sg112
(lp4149
ssg114
S'BeatDetectAndClassify if: 8 option: 1'
p4150
sg116
(dp4151
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp4152
g79
g3943
sg81
(dp4153
g83
(dp4154
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4155
sg106
(lp4156
sg108
(lp4157
sg110
(dp4158
sg112
(lp4159
ssg114
S'BeatDetectAndClassify if: 8 option: 2'
p4160
sg116
(dp4161
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (fidAdj > MS80)'
p4162
sassg114
g28
sg116
(dp4163
g118
F922.0
sg119
F1512.0
sg120
F125853.0
sg121
F39220.0
sg122
F107084.0
sg123
F4445.0
sg124
F79556.0
sg125
F104586.0
ssa(dp4164
g79
g3943
sg81
(dp4165
g83
(dp4166
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4167
(dp4168
g96
(dp4169
g79
g3943
sg81
(dp4170
g83
(dp4171
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I3
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4172
sg106
(lp4173
sg108
(lp4174
sg110
(dp4175
sg112
(lp4176
ssg114
S'DownSampleBeat for: 1'
p4177
sg116
(dp4178
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I3
sg123
I0
sg124
I0
sg125
I0
sssg126
I100
sg127
g128
sg116
(dp4179
g118
I0
sg119
I0
sg120
I200
sg121
I101
sg122
I300
sg123
I0
sg124
I100
sg125
I100
ssg130
S'tor (i = 0; i < BEATLGTH; ++i)'
p4180
sg132
(dp4181
g79
g3943
sg81
(dp4182
g83
(dp4183
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp4184
sg106
(lp4185
sg108
(lp4186
sg110
(dp4187
sg112
(lp4188
ssg114
g141
sg116
(dp4189
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp4190
sg108
(lp4191
sg110
(dp4192
sg112
(lp4193
ssg114
g29
sg116
(dp4194
g118
I0
sg119
I0
sg120
I200
sg121
I101
sg122
I300
sg123
I0
sg124
I100
sg125
I100
ssa(dp4195
g79
S'QRSFILT.CPP'
p4196
sg81
(dp4197
g83
(dp4198
g85
I0
sg86
I1
sg87
I0
sg88
I5
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4199
sg106
(lp4200
sg108
(lp4201
sg110
(dp4202
g31
I1
sg76
I1
sg35
I1
sg33
I1
sg36
I1
ssg112
(lp4203
(dp4204
g179
(lp4205
(dp4206
g79
g4196
sg81
(dp4207
g83
(dp4208
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4209
sg106
(lp4210
sg108
(lp4211
sg110
(dp4212
g36
I1
sg31
I1
sg35
I1
sg33
I1
sg34
I1
ssg112
(lp4213
ssg114
S'QRSFilter if: 1 option: 1'
p4214
sg116
(dp4215
g118
I9
sg119
I7
sg120
I15
sg121
I106
sg122
I2
sg123
I1
sg124
I60
sg125
I69
ssasg191
S'if (init)'
p4216
sassg114
g30
sg116
(dp4217
g118
I18
sg119
I14
sg120
I29
sg121
I208
sg122
I4
sg123
I3
sg124
I117
sg125
I137
ssa(dp4218
g79
g4196
sg81
(dp4219
g83
(dp4220
g85
I3
sg86
I1
sg87
I5
sg88
I9
sg89
I2
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp4221
sg106
(lp4222
sg108
(lp4223
sg110
(dp4224
sg112
(lp4225
(dp4226
g179
(lp4227
(dp4228
g79
g4196
sg81
(dp4229
g83
(dp4230
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4231
(dp4232
g96
(dp4233
g79
g4196
sg81
(dp4234
g83
(dp4235
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4236
sg106
(lp4237
sg108
(lp4238
sg110
(dp4239
sg112
(lp4240
ssg114
S'lpfilt if: 1 option: 1 for: 1'
p4241
sg116
(dp4242
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I10
sg127
g128
sg116
(dp4243
g118
I0
sg119
I0
sg120
I0
sg121
I11
sg122
I0
sg123
I0
sg124
I10
sg125
I10
ssg130
S'tor (ptr = 0; ptr < LPBUFFER_LGTH; ++ptr)'
p4244
sg132
(dp4245
g79
g4196
sg81
(dp4246
g83
(dp4247
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp4248
sg106
(lp4249
sg108
(lp4250
sg110
(dp4251
sg112
(lp4252
ssg114
g141
sg116
(dp4253
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp4254
sg108
(lp4255
sg110
(dp4256
sg112
(lp4257
ssg114
S'lpfilt if: 1 option: 1'
p4258
sg116
(dp4259
g118
I0
sg119
I0
sg120
I0
sg121
I14
sg122
I0
sg123
I0
sg124
I10
sg125
I10
ssasg191
S'if (init)'
p4260
sa(dp4261
g179
(lp4262
(dp4263
g79
g4196
sg81
(dp4264
g83
(dp4265
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4266
sg106
(lp4267
sg108
(lp4268
sg110
(dp4269
sg112
(lp4270
ssg114
S'lpfilt if: 2 option: 1'
p4271
sg116
(dp4272
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (halfPtr < 0) '
p4273
sa(dp4274
g179
(lp4275
(dp4276
g79
g4196
sg81
(dp4277
g83
(dp4278
g85
I2
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4279
sg106
(lp4280
sg108
(lp4281
sg110
(dp4282
sg112
(lp4283
ssg114
S'lpfilt if: 3 option: 1'
p4284
sg116
(dp4285
g118
I2
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++ptr == LPBUFFER_LGTH) '
p4286
sassg114
g31
sg116
(dp4287
g118
I5
sg119
I1
sg120
I6
sg121
I25
sg122
I2
sg123
I1
sg124
I11
sg125
I13
ssa(dp4288
g79
g4196
sg81
(dp4289
g83
(dp4290
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4291
(dp4292
g96
(dp4293
g79
g4196
sg81
(dp4294
g83
(dp4295
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4296
sg106
(lp4297
sg108
(lp4298
sg110
(dp4299
sg112
(lp4300
ssg114
S'testfunction for: 1'
p4301
sg116
(dp4302
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
F8.0
sg127
g128
sg116
(dp4303
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F9.0
sg122
F0.0
sg123
F0.0
sg124
F8.0
sg125
F8.0
ssg130
S'tor (int i = 0; i < 8; i++)'
p4304
sg132
(dp4305
g79
g4196
sg81
(dp4306
g83
(dp4307
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp4308
sg106
(lp4309
sg108
(lp4310
sg110
(dp4311
sg112
(lp4312
ssg114
g141
sg116
(dp4313
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp4314
sg108
(lp4315
sg110
(dp4316
sg112
(lp4317
ssg114
g32
sg116
(dp4318
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F9.0
sg122
F0.0
sg123
F0.0
sg124
F8.0
sg125
F8.0
ssa(dp4319
g79
g4196
sg81
(dp4320
g83
(dp4321
g85
I2
sg86
I1
sg87
I4
sg88
I6
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp4322
sg106
(lp4323
sg108
(lp4324
sg110
(dp4325
sg112
(lp4326
(dp4327
g179
(lp4328
(dp4329
g79
g4196
sg81
(dp4330
g83
(dp4331
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4332
(dp4333
g96
(dp4334
g79
g4196
sg81
(dp4335
g83
(dp4336
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4337
sg106
(lp4338
sg108
(lp4339
sg110
(dp4340
sg112
(lp4341
ssg114
S'hpfilt if: 1 option: 1 for: 1'
p4342
sg116
(dp4343
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I25
sg127
g128
sg116
(dp4344
g118
I0
sg119
I0
sg120
I0
sg121
I26
sg122
I0
sg123
I0
sg124
I25
sg125
I25
ssg130
S'tor (ptr = 0; ptr < HPBUFFER_LGTH; ++ptr)'
p4345
sg132
(dp4346
g79
g4196
sg81
(dp4347
g83
(dp4348
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp4349
sg106
(lp4350
sg108
(lp4351
sg110
(dp4352
sg112
(lp4353
ssg114
g141
sg116
(dp4354
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp4355
sg108
(lp4356
sg110
(dp4357
sg112
(lp4358
ssg114
S'hpfilt if: 1 option: 1'
p4359
sg116
(dp4360
g118
I0
sg119
I0
sg120
I0
sg121
I28
sg122
I0
sg123
I0
sg124
I25
sg125
I25
ssasg191
S'if (init)'
p4361
sa(dp4362
g179
(lp4363
(dp4364
g79
g4196
sg81
(dp4365
g83
(dp4366
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4367
sg106
(lp4368
sg108
(lp4369
sg110
(dp4370
sg112
(lp4371
ssg114
S'hpfilt if: 2 option: 1'
p4372
sg116
(dp4373
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (halfPtr < 0)'
p4374
sa(dp4375
g179
(lp4376
(dp4377
g79
g4196
sg81
(dp4378
g83
(dp4379
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4380
sg106
(lp4381
sg108
(lp4382
sg110
(dp4383
sg112
(lp4384
ssg114
S'hpfilt if: 3 option: 1'
p4385
sg116
(dp4386
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++ptr == HPBUFFER_LGTH)'
p4387
sassg114
g33
sg116
(dp4388
g118
I2
sg119
I1
sg120
I5
sg121
I36
sg122
I0
sg123
I0
sg124
I26
sg125
I28
ssa(dp4389
g79
g4196
sg81
(dp4390
g83
(dp4391
g85
I0
sg86
I1
sg87
I1
sg88
I4
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp4392
sg106
(lp4393
sg108
(lp4394
sg110
(dp4395
sg112
(lp4396
(dp4397
g179
(lp4398
(dp4399
g79
g4196
sg81
(dp4400
g83
(dp4401
g85
I0
sg86
I1
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4402
(dp4403
g96
(dp4404
g79
g4196
sg81
(dp4405
g83
(dp4406
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4407
sg106
(lp4408
sg108
(lp4409
sg110
(dp4410
sg112
(lp4411
ssg114
S'deriv1 if: 1 option: 1 for: 1'
p4412
sg116
(dp4413
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I2
sg127
g128
sg116
(dp4414
g118
I0
sg119
I0
sg120
I0
sg121
I3
sg122
I0
sg123
I0
sg124
I2
sg125
I2
ssg130
S'tor (derI = 0; derI < DERIV_LENGTH; ++derI)'
p4415
sg132
(dp4416
g79
g4196
sg81
(dp4417
g83
(dp4418
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp4419
sg106
(lp4420
sg108
(lp4421
sg110
(dp4422
sg112
(lp4423
ssg114
g141
sg116
(dp4424
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp4425
sg108
(lp4426
sg110
(dp4427
sg112
(lp4428
ssg114
S'deriv1 if: 1 option: 1'
p4429
sg116
(dp4430
g118
I0
sg119
I1
sg120
I0
sg121
I4
sg122
I0
sg123
I0
sg124
I2
sg125
I2
ssasg191
S'if (init != 0)'
p4431
sa(dp4432
g179
(lp4433
(dp4434
g79
g4196
sg81
(dp4435
g83
(dp4436
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4437
sg106
(lp4438
sg108
(lp4439
sg110
(dp4440
sg112
(lp4441
ssg114
S'deriv1 if: 2 option: 1'
p4442
sg116
(dp4443
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++derI == DERIV_LENGTH)'
p4444
sassg114
g34
sg116
(dp4445
g118
I0
sg119
I2
sg120
I1
sg121
I9
sg122
I0
sg123
I0
sg124
I3
sg125
I4
ssa(dp4446
g79
g4196
sg81
(dp4447
g83
(dp4448
g85
I0
sg86
I1
sg87
I1
sg88
I4
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp4449
sg106
(lp4450
sg108
(lp4451
sg110
(dp4452
sg112
(lp4453
(dp4454
g179
(lp4455
(dp4456
g79
g4196
sg81
(dp4457
g83
(dp4458
g85
I0
sg86
I1
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4459
(dp4460
g96
(dp4461
g79
g4196
sg81
(dp4462
g83
(dp4463
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4464
sg106
(lp4465
sg108
(lp4466
sg110
(dp4467
sg112
(lp4468
ssg114
S'deriv2 if: 1 option: 1 for: 1'
p4469
sg116
(dp4470
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I2
sg127
g128
sg116
(dp4471
g118
I0
sg119
I0
sg120
I0
sg121
I3
sg122
I0
sg123
I0
sg124
I2
sg125
I2
ssg130
S'tor (derI = 0; derI < DERIV_LENGTH; ++derI)'
p4472
sg132
(dp4473
g79
g4196
sg81
(dp4474
g83
(dp4475
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp4476
sg106
(lp4477
sg108
(lp4478
sg110
(dp4479
sg112
(lp4480
ssg114
g141
sg116
(dp4481
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp4482
sg108
(lp4483
sg110
(dp4484
sg112
(lp4485
ssg114
S'deriv2 if: 1 option: 1'
p4486
sg116
(dp4487
g118
I0
sg119
I1
sg120
I0
sg121
I4
sg122
I0
sg123
I0
sg124
I2
sg125
I2
ssasg191
S'if (init != 0)'
p4488
sa(dp4489
g179
(lp4490
(dp4491
g79
g4196
sg81
(dp4492
g83
(dp4493
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4494
sg106
(lp4495
sg108
(lp4496
sg110
(dp4497
sg112
(lp4498
ssg114
S'deriv2 if: 2 option: 1'
p4499
sg116
(dp4500
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++derI == DERIV_LENGTH)'
p4501
sassg114
g35
sg116
(dp4502
g118
I0
sg119
I2
sg120
I1
sg121
I9
sg122
I0
sg123
I0
sg124
I3
sg125
I4
ssa(dp4503
g79
g4196
sg81
(dp4504
g83
(dp4505
g85
I2
sg86
I1
sg87
I2
sg88
I6
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp4506
sg106
(lp4507
sg108
(lp4508
sg110
(dp4509
sg112
(lp4510
(dp4511
g179
(lp4512
(dp4513
g79
g4196
sg81
(dp4514
g83
(dp4515
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4516
(dp4517
g96
(dp4518
g79
g4196
sg81
(dp4519
g83
(dp4520
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4521
sg106
(lp4522
sg108
(lp4523
sg110
(dp4524
sg112
(lp4525
ssg114
S'mvwint if: 1 option: 1 for: 1'
p4526
sg116
(dp4527
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I16
sg127
g128
sg116
(dp4528
g118
I0
sg119
I0
sg120
I0
sg121
I17
sg122
I0
sg123
I0
sg124
I16
sg125
I16
ssg130
S'tor (ptr = 0; ptr < WINDOW_WIDTH; ++ptr)'
p4529
sg132
(dp4530
g79
g4196
sg81
(dp4531
g83
(dp4532
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp4533
sg106
(lp4534
sg108
(lp4535
sg110
(dp4536
sg112
(lp4537
ssg114
g141
sg116
(dp4538
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp4539
sg108
(lp4540
sg110
(dp4541
sg112
(lp4542
ssg114
S'mvwint if: 1 option: 1'
p4543
sg116
(dp4544
g118
I0
sg119
I0
sg120
I0
sg121
I19
sg122
I0
sg123
I0
sg124
I16
sg125
I16
ssasg191
S'if (init)'
p4545
sa(dp4546
g179
(lp4547
(dp4548
g79
g4196
sg81
(dp4549
g83
(dp4550
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4551
sg106
(lp4552
sg108
(lp4553
sg110
(dp4554
sg112
(lp4555
ssg114
S'mvwint if: 2 option: 1'
p4556
sg116
(dp4557
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++ptr == WINDOW_WIDTH)'
p4558
sa(dp4559
g179
(lp4560
(dp4561
g79
g4196
sg81
(dp4562
g83
(dp4563
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4564
sg106
(lp4565
sg108
(lp4566
sg110
(dp4567
sg112
(lp4568
ssg114
S'mvwint if: 3 option: 1'
p4569
sg116
(dp4570
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp4571
g79
g4196
sg81
(dp4572
g83
(dp4573
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4574
sg106
(lp4575
sg108
(lp4576
sg110
(dp4577
sg112
(lp4578
ssg114
S'mvwint if: 3 option: 2'
p4579
sg116
(dp4580
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((sum / WINDOW_WIDTH) > 32000)'
p4581
sassg114
g36
sg116
(dp4582
g118
I2
sg119
I1
sg120
I2
sg121
I27
sg122
I0
sg123
I0
sg124
I17
sg125
I20
ssa(dp4583
g79
S'BXB.CPP'
p4584
sg81
(dp4585
g83
(dp4586
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4587
(dp4588
g96
(dp4589
g79
g4584
sg81
(dp4590
g83
(dp4591
g85
I1
sg86
I0
sg87
I14
sg88
I5
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4592
sg106
(lp4593
(dp4594
g96
(dp4595
g79
g4584
sg81
(dp4596
g83
(dp4597
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4598
sg106
(lp4599
sg108
(lp4600
sg110
(dp4601
g38
I1
ssg112
(lp4602
ssg114
S'main for: 1do while: 1'
p4603
sg116
(dp4604
g118
I0
sg119
I35
sg120
I17
sg121
I153
sg122
I0
sg123
I31
sg124
I0
sg125
I127
sssg126
I5
sg127
g2482
sg116
(dp4605
g118
I0
sg119
I175
sg120
I85
sg121
I765
sg122
I0
sg123
I155
sg124
I0
sg125
I640
ssg130
S'vhile (T < start);'
p4606
sg132
(dp4607
g79
g4584
sg81
(dp4608
g83
(dp4609
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4610
sg106
(lp4611
sg108
(lp4612
sg110
(dp4613
sg112
(lp4614
ssg114
S'do while conditions'
p4615
sg116
(dp4616
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssa(dp4617
g96
(dp4618
g79
g4584
sg81
(dp4619
g83
(dp4620
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4621
sg106
(lp4622
sg108
(lp4623
sg110
(dp4624
g39
I1
ssg112
(lp4625
ssg114
S'main for: 1do while: 2'
p4626
sg116
(dp4627
g118
I0
sg119
I65
sg120
I53
sg121
I248
sg122
I0
sg123
I57
sg124
I0
sg125
I207
sssg126
I5
sg127
g2482
sg116
(dp4628
g118
I0
sg119
I325
sg120
I265
sg121
I1240
sg122
I0
sg123
I285
sg124
I0
sg125
I1040
ssg130
S'vhile (tprime < start);'
p4629
sg132
(dp4630
g79
g4584
sg81
(dp4631
g83
(dp4632
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4633
sg106
(lp4634
sg108
(lp4635
sg110
(dp4636
sg112
(lp4637
ssg114
g4615
sg116
(dp4638
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssa(dp4639
g96
(dp4640
g79
g4584
sg81
(dp4641
g83
(dp4642
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4643
sg106
(lp4644
sg108
(lp4645
sg110
(dp4646
sg112
(lp4647
(dp4648
g179
(lp4649
(dp4650
g79
g4584
sg81
(dp4651
g83
(dp4652
g85
I0
sg86
I0
sg87
I4
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4653
sg106
(lp4654
sg108
(lp4655
sg110
(dp4656
g42
I1
sg76
I1
sg40
I1
sg39
I1
ssg112
(lp4657
(dp4658
g179
(lp4659
(dp4660
g79
g4584
sg81
(dp4661
g83
(dp4662
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4663
sg106
(lp4664
sg108
(lp4665
sg110
(dp4666
g42
I1
sg38
I1
sg39
I1
ssg112
(lp4667
ssg114
S'main for: 1 while: 3 if: 1 option: 1 if: 1 option: 1'
p4668
sg116
(dp4669
g118
I3
sg119
I100
sg120
I74
sg121
I418
sg122
I0
sg123
I89
sg124
I2
sg125
I363
ssasg191
S'if (T - t <= match_dt && T - t < abs(T - tprime))'
p4670
sassg114
S'main for: 1 while: 3 if: 1 option: 1'
p4671
sg116
(dp4672
g118
I9
sg119
I170
sg120
I149
sg121
I708
sg122
I0
sg123
I152
sg124
I6
sg125
I640
ssa(dp4673
g79
g4584
sg81
(dp4674
g83
(dp4675
g85
I0
sg86
I0
sg87
I4
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4676
sg106
(lp4677
sg108
(lp4678
sg110
(dp4679
g41
I1
sg42
I1
sg76
I1
sg38
I1
ssg112
(lp4680
(dp4681
g179
(lp4682
(dp4683
g79
g4584
sg81
(dp4684
g83
(dp4685
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4686
sg106
(lp4687
sg108
(lp4688
sg110
(dp4689
g42
I1
sg38
I1
sg39
I1
ssg112
(lp4690
ssg114
S'main for: 1 while: 3 if: 1 option: 2 if: 1 option: 1'
p4691
sg116
(dp4692
g118
I3
sg119
I100
sg120
I74
sg121
I418
sg122
I0
sg123
I89
sg124
I2
sg125
I363
ssasg191
S'if (t - T <= match_dt && t - T < abs(t - Tprime))'
p4693
sassg114
S'main for: 1 while: 3 if: 1 option: 2'
p4694
sg116
(dp4695
g118
I6
sg119
I138
sg120
I106
sg121
I592
sg122
I0
sg123
I122
sg124
I4
sg125
I527
ssasg191
S'if (t < T)'
p4696
sassg114
S'main for: 1 while: 3'
p4697
sg116
(dp4698
g118
I9
sg119
I170
sg120
I149
sg121
I708
sg122
I0
sg123
I152
sg124
I6
sg125
I642
sssg126
I5
sg127
g2482
sg116
(dp4699
g118
I45
sg119
I850
sg120
I750
sg121
I3543
sg122
I0
sg123
I760
sg124
I30
sg125
I3250
ssg130
S'vhile ((end_time > 0L && (T <= end_time || t <= end_time))|| (end_time == -1L && T != huge_time)|| (end_time == 0L && T != huge_time && t != huge_time))'
p4700
sg132
(dp4701
g79
g4584
sg81
(dp4702
g83
(dp4703
g85
I0
sg86
I0
sg87
I1
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4704
sg106
(lp4705
sg108
(lp4706
sg110
(dp4707
sg112
(lp4708
ssg114
g2493
sg116
(dp4709
g118
I0
sg119
I0
sg120
I1
sg121
I3
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssasg108
(lp4710
sg110
(dp4711
g39
I1
sg49
I1
sg50
I1
sg76
I2
sg46
I1
ssg112
(lp4712
(dp4713
g179
(lp4714
(dp4715
g79
g4584
sg81
(dp4716
g83
(dp4717
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4718
sg106
(lp4719
sg108
(lp4720
sg110
(dp4721
g48
I1
ssg112
(lp4722
ssg114
S'main for: 1 if: 1 option: 1'
p4723
sg116
(dp4724
g118
I4
sg119
I101
sg120
I97
sg121
I436
sg122
I0
sg123
I102
sg124
I7
sg125
I375
ssasg191
S'if (Oflag)'
p4725
sa(dp4726
g179
(lp4727
(dp4728
g79
g4584
sg81
(dp4729
g83
(dp4730
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4731
sg106
(lp4732
sg108
(lp4733
sg110
(dp4734
g38
I1
sg39
I1
ssg112
(lp4735
(dp4736
g179
(lp4737
(dp4738
g79
g4584
sg81
(dp4739
g83
(dp4740
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4741
sg106
(lp4742
sg108
(lp4743
sg110
(dp4744
sg112
(lp4745
ssg114
S'main for: 1 if: 2 option: 1 if: 1 option: 1'
p4746
sg116
(dp4747
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (A != 0 || a != 0) /* false only if start = 0 */'
p4748
sassg114
S'main for: 1 if: 2 option: 1'
p4749
sg116
(dp4750
g118
I0
sg119
I100
sg120
I70
sg121
I404
sg122
I0
sg123
I88
sg124
I0
sg125
I336
ssasg191
S'if (T - t < abs(T - tprime) && T - t <= match_dt)'
p4751
sa(dp4752
g179
(lp4753
(dp4754
g79
g4584
sg81
(dp4755
g83
(dp4756
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4757
sg106
(lp4758
sg108
(lp4759
sg110
(dp4760
sg112
(lp4761
ssg114
S'main for: 1 if: 3 option: 1'
p4762
sg116
(dp4763
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (t - start <= match_dt && abs(T - tprime) < abs(T - t))'
p4764
sassg114
S'main for: 1'
p4765
sg116
(dp4766
g118
I82
sg119
I1618
sg120
I1583
sg121
I6723
sg122
I0
sg123
I1471
sg124
I37
sg125
I5979
sssg126
I48
sg127
g128
sg116
(dp4767
g118
I3936
sg119
I77664
sg120
I75984
sg121
I322705
sg122
I0
sg123
I70608
sg124
I1824
sg125
I287040
ssg130
S'tor (recNum = 0; recNum < REC_COUNT; ++recNum)'
p4768
sg132
(dp4769
g79
g4584
sg81
(dp4770
g83
(dp4771
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp4772
sg106
(lp4773
sg108
(lp4774
sg110
(dp4775
sg112
(lp4776
ssg114
g141
sg116
(dp4777
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp4778
sg108
(lp4779
sg110
(dp4780
g48
I1
sg45
I1
sg38
I1
sg39
I1
ssg112
(lp4781
ssg114
g37
sg116
(dp4782
g118
I3942
sg119
I77865
sg120
I76254
sg121
I323694
sg122
I0
sg123
I70808
sg124
I1942
sg125
I287865
ssa(dp4783
g79
g4584
sg81
(dp4784
g83
(dp4785
g85
I0
sg86
I0
sg87
I2
sg88
I6
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp4786
sg106
(lp4787
(dp4788
g96
(dp4789
g79
g4584
sg81
(dp4790
g83
(dp4791
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4792
sg106
(lp4793
sg108
(lp4794
sg110
(dp4795
sg112
(lp4796
(dp4797
g179
(lp4798
(dp4799
g79
g4584
sg81
(dp4800
g83
(dp4801
g85
I0
sg86
I1
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4802
sg106
(lp4803
sg108
(lp4804
sg110
(dp4805
sg112
(lp4806
ssg114
S'getref while: 1 if: 1 option: 1'
p4807
sg116
(dp4808
g118
I0
sg119
I1
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (isqrs(annot.anntyp) || Oflag)'
p4809
sa(dp4810
g179
(lp4811
(dp4812
g79
g4584
sg81
(dp4813
g83
(dp4814
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4815
sg106
(lp4816
sg108
(lp4817
sg110
(dp4818
sg112
(lp4819
(dp4820
g179
(lp4821
(dp4822
g79
g4584
sg81
(dp4823
g83
(dp4824
g85
I0
sg86
I0
sg87
I2
sg88
I6
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4825
sg106
(lp4826
sg108
(lp4827
sg110
(dp4828
sg112
(lp4829
(dp4830
g179
(lp4831
(dp4832
g79
g4584
sg81
(dp4833
g83
(dp4834
g85
I0
sg86
I1
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp4835
sg106
(lp4836
sg108
(lp4837
sg110
(dp4838
sg112
(lp4839
ssg114
S'getref while: 1 if: 2 option: 1 if: 1 option: 1 if: 1 option: 1'
p4840
sg116
(dp4841
g118
I0
sg119
I1
sg120
I0
sg121
I3
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssasg191
S'if (getann(0, &annot) < 0)'
p4842
sa(dp4843
g179
(lp4844
(dp4845
g79
g4584
sg81
(dp4846
g83
(dp4847
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4848
sg106
(lp4849
sg108
(lp4850
sg110
(dp4851
sg112
(lp4852
ssg114
S'getref while: 1 if: 2 option: 1 if: 1 option: 1 if: 2 option: 1'
p4853
sg116
(dp4854
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp4855
g79
g4584
sg81
(dp4856
g83
(dp4857
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4858
sg106
(lp4859
sg108
(lp4860
sg110
(dp4861
sg112
(lp4862
ssg114
S'getref while: 1 if: 2 option: 1 if: 1 option: 1 if: 2 option: 2'
p4863
sg116
(dp4864
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (annot.anntyp == NOISE && (annot.subtyp & 0x30) != 0x30)'
p4865
sa(dp4866
g179
(lp4867
(dp4868
g79
g4584
sg81
(dp4869
g83
(dp4870
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4871
sg106
(lp4872
sg108
(lp4873
sg110
(dp4874
sg112
(lp4875
ssg114
S'getref while: 1 if: 2 option: 1 if: 1 option: 1 if: 3 option: 1'
p4876
sg116
(dp4877
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp4878
g79
g4584
sg81
(dp4879
g83
(dp4880
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4881
sg106
(lp4882
sg108
(lp4883
sg110
(dp4884
sg112
(lp4885
ssg114
S'getref while: 1 if: 2 option: 1 if: 1 option: 1 if: 3 option: 2'
p4886
sg116
(dp4887
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (vfoffref > T)'
p4888
sa(dp4889
g179
(lp4890
(dp4891
g79
g4584
sg81
(dp4892
g83
(dp4893
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4894
sg106
(lp4895
sg108
(lp4896
sg110
(dp4897
sg112
(lp4898
ssg114
S'getref while: 1 if: 2 option: 1 if: 1 option: 1 if: 4 option: 1'
p4899
sg116
(dp4900
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (sdonref > sdoffref)'
p4901
sassg114
S'getref while: 1 if: 2 option: 1 if: 1 option: 1'
p4902
sg116
(dp4903
g118
I0
sg119
I1
sg120
I3
sg121
I12
sg122
I0
sg123
I1
sg124
I0
sg125
I7
ssasg191
S'if ((annot.subtyp & 0x30) == 0x30)'
p4904
sassg114
S'getref while: 1 if: 2 option: 1'
p4905
sg116
(dp4906
g118
I0
sg119
I1
sg120
I3
sg121
I12
sg122
I0
sg123
I1
sg124
I0
sg125
I8
ssasg191
S'else if (annot.anntyp == NOISE)'
p4907
sa(dp4908
g179
(lp4909
(dp4910
g79
g4584
sg81
(dp4911
g83
(dp4912
g85
I0
sg86
I0
sg87
I0
sg88
I4
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4913
sg106
(lp4914
(dp4915
g96
(dp4916
g79
g4584
sg81
(dp4917
g83
(dp4918
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4919
sg106
(lp4920
sg108
(lp4921
sg110
(dp4922
sg112
(lp4923
(dp4924
g179
(lp4925
(dp4926
g79
g4584
sg81
(dp4927
g83
(dp4928
g85
I0
sg86
I1
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp4929
sg106
(lp4930
sg108
(lp4931
sg110
(dp4932
sg112
(lp4933
ssg114
S'getref while: 1 if: 3 option: 1do while: 1 if: 1 option: 1'
p4934
sg116
(dp4935
g118
I0
sg119
I1
sg120
I0
sg121
I2
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssasg191
S'if (getann(0, &annot) < 0)'
p4936
sassg114
S'getref while: 1 if: 3 option: 1do while: 1'
p4937
sg116
(dp4938
g118
I0
sg119
I1
sg120
I0
sg121
I2
sg122
I0
sg123
I1
sg124
I0
sg125
I1
sssg126
I5
sg127
g2482
sg116
(dp4939
g118
I0
sg119
I5
sg120
I0
sg121
I11
sg122
I0
sg123
I5
sg124
I0
sg125
I10
ssg130
S'vhile (annot.anntyp != VFOFF);'
p4940
sg132
(dp4941
g79
g4584
sg81
(dp4942
g83
(dp4943
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4944
sg106
(lp4945
sg108
(lp4946
sg110
(dp4947
sg112
(lp4948
ssg114
g4615
sg116
(dp4949
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssasg108
(lp4950
sg110
(dp4951
sg112
(lp4952
ssg114
S'getref while: 1 if: 3 option: 1'
p4953
sg116
(dp4954
g118
I0
sg119
I5
sg120
I0
sg121
I15
sg122
I0
sg123
I5
sg124
I0
sg125
I10
ssasg191
S'else if (annot.anntyp == VFON)'
p4955
sassg114
S'getref while: 1'
p4956
sg116
(dp4957
g118
I0
sg119
I7
sg120
I3
sg121
I29
sg122
I0
sg123
I6
sg124
I0
sg125
I22
sssg126
I5
sg127
g2482
sg116
(dp4958
g118
I0
sg119
I35
sg120
I15
sg121
I145
sg122
I0
sg123
I30
sg124
I0
sg125
I115
ssg130
S'vhile (getann(0, &annot) == 0)'
p4959
sg132
(dp4960
g79
g4584
sg81
(dp4961
g83
(dp4962
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4963
sg106
(lp4964
sg108
(lp4965
sg110
(dp4966
sg112
(lp4967
ssg114
g2493
sg116
(dp4968
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssasg108
(lp4969
sg110
(dp4970
sg112
(lp4971
(dp4972
g179
(lp4973
(dp4974
g79
g4584
sg81
(dp4975
g83
(dp4976
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4977
sg106
(lp4978
sg108
(lp4979
sg110
(dp4980
sg112
(lp4981
ssg114
S'getref if: 1 option: 1'
p4982
sg116
(dp4983
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp4984
g79
g4584
sg81
(dp4985
g83
(dp4986
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp4987
sg106
(lp4988
sg108
(lp4989
sg110
(dp4990
sg112
(lp4991
ssg114
S'getref if: 1 option: 2'
p4992
sg116
(dp4993
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (TT == 0L || T == huge_time || (TT <= vfonref && vfonref < T)|| (TT <= sdonref && sdonref < T) || (TT <= pvfonref && pvfonref < T)|| (TT <= psdonref && psdonref < T))'
p4994
sa(dp4995
g179
(lp4996
(dp4997
g79
g4584
sg81
(dp4998
g83
(dp4999
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5000
sg106
(lp5001
sg108
(lp5002
sg110
(dp5003
sg112
(lp5004
ssg114
S'getref if: 2 option: 1'
p5005
sg116
(dp5006
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (oflag)'
p5007
sassg114
g38
sg116
(dp5008
g118
I0
sg119
I35
sg120
I17
sg121
I153
sg122
I0
sg123
I31
sg124
I0
sg125
I127
ssa(dp5009
g79
g4584
sg81
(dp5010
g83
(dp5011
g85
I0
sg86
I0
sg87
I1
sg88
I7
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp5012
sg106
(lp5013
(dp5014
g96
(dp5015
g79
g4584
sg81
(dp5016
g83
(dp5017
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5018
sg106
(lp5019
sg108
(lp5020
sg110
(dp5021
sg112
(lp5022
(dp5023
g179
(lp5024
(dp5025
g79
g4584
sg81
(dp5026
g83
(dp5027
g85
I0
sg86
I1
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5028
sg106
(lp5029
sg108
(lp5030
sg110
(dp5031
sg112
(lp5032
ssg114
S'gettest while: 1 if: 1 option: 1'
p5033
sg116
(dp5034
g118
I0
sg119
I1
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (isqrs(annot.anntyp) || Oflag)'
p5035
sa(dp5036
g179
(lp5037
(dp5038
g79
g4584
sg81
(dp5039
g83
(dp5040
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5041
sg106
(lp5042
sg108
(lp5043
sg110
(dp5044
sg112
(lp5045
(dp5046
g179
(lp5047
(dp5048
g79
g4584
sg81
(dp5049
g83
(dp5050
g85
I0
sg86
I0
sg87
I4
sg88
I7
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5051
sg106
(lp5052
sg108
(lp5053
sg110
(dp5054
sg112
(lp5055
(dp5056
g179
(lp5057
(dp5058
g79
g4584
sg81
(dp5059
g83
(dp5060
g85
I0
sg86
I1
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp5061
sg106
(lp5062
sg108
(lp5063
sg110
(dp5064
sg112
(lp5065
(dp5066
g179
(lp5067
(dp5068
g79
g4584
sg81
(dp5069
g83
(dp5070
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5071
sg106
(lp5072
sg108
(lp5073
sg110
(dp5074
sg112
(lp5075
ssg114
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 1 option: 1 if: 1 option: 1'
p5076
sg116
(dp5077
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp5078
g79
g4584
sg81
(dp5079
g83
(dp5080
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5081
sg106
(lp5082
sg108
(lp5083
sg110
(dp5084
sg112
(lp5085
ssg114
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 1 option: 1 if: 1 option: 2'
p5086
sg116
(dp5087
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (end_time > 0L)'
p5088
sassg114
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 1 option: 1'
p5089
sg116
(dp5090
g118
I0
sg119
I1
sg120
I2
sg121
I3
sg122
I0
sg123
I1
sg124
I0
sg125
I2
ssasg191
S'if (getann(1, &annot) < 0)'
p5091
sa(dp5092
g179
(lp5093
(dp5094
g79
g4584
sg81
(dp5095
g83
(dp5096
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5097
sg106
(lp5098
sg108
(lp5099
sg110
(dp5100
sg112
(lp5101
ssg114
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 2 option: 1'
p5102
sg116
(dp5103
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp5104
g79
g4584
sg81
(dp5105
g83
(dp5106
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5107
sg106
(lp5108
sg108
(lp5109
sg110
(dp5110
sg112
(lp5111
ssg114
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 2 option: 2'
p5112
sg116
(dp5113
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (annot.anntyp == NOISE && (annot.subtyp & 0x30) != 0x30)'
p5114
sa(dp5115
g179
(lp5116
(dp5117
g79
g4584
sg81
(dp5118
g83
(dp5119
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5120
sg106
(lp5121
sg108
(lp5122
sg110
(dp5123
sg112
(lp5124
ssg114
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 3 option: 1'
p5125
sg116
(dp5126
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp5127
g79
g4584
sg81
(dp5128
g83
(dp5129
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5130
sg106
(lp5131
sg108
(lp5132
sg110
(dp5133
sg112
(lp5134
ssg114
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 3 option: 2'
p5135
sg116
(dp5136
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (vfofftest > t)'
p5137
sa(dp5138
g179
(lp5139
(dp5140
g79
g4584
sg81
(dp5141
g83
(dp5142
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5143
sg106
(lp5144
sg108
(lp5145
sg110
(dp5146
sg112
(lp5147
ssg114
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 4 option: 1'
p5148
sg116
(dp5149
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (sdontest > sdofftest)'
p5150
sassg114
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1'
p5151
sg116
(dp5152
g118
I0
sg119
I1
sg120
I7
sg121
I13
sg122
I0
sg123
I1
sg124
I0
sg125
I9
ssasg191
S'if ((annot.subtyp & 0x30) == 0x30)'
p5153
sassg114
S'gettest while: 1 if: 2 option: 1'
p5154
sg116
(dp5155
g118
I0
sg119
I1
sg120
I7
sg121
I13
sg122
I0
sg123
I1
sg124
I0
sg125
I10
ssa(dp5156
g79
g4584
sg81
(dp5157
g83
(dp5158
g85
I0
sg86
I0
sg87
I0
sg88
I4
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5159
sg106
(lp5160
(dp5161
g96
(dp5162
g79
g4584
sg81
(dp5163
g83
(dp5164
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5165
sg106
(lp5166
sg108
(lp5167
sg110
(dp5168
sg112
(lp5169
(dp5170
g179
(lp5171
(dp5172
g79
g4584
sg81
(dp5173
g83
(dp5174
g85
I0
sg86
I1
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp5175
sg106
(lp5176
sg108
(lp5177
sg110
(dp5178
sg112
(lp5179
ssg114
S'gettest while: 1 if: 2 option: 2do while: 1 if: 1 option: 1'
p5180
sg116
(dp5181
g118
I0
sg119
I1
sg120
I0
sg121
I2
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssasg191
S'if (getann(1, &annot) < 0)'
p5182
sassg114
S'gettest while: 1 if: 2 option: 2do while: 1'
p5183
sg116
(dp5184
g118
I0
sg119
I1
sg120
I0
sg121
I2
sg122
I0
sg123
I1
sg124
I0
sg125
I1
sssg126
I5
sg127
g2482
sg116
(dp5185
g118
I0
sg119
I5
sg120
I0
sg121
I11
sg122
I0
sg123
I5
sg124
I0
sg125
I10
ssg130
S'vhile (annot.anntyp != VFOFF);'
p5186
sg132
(dp5187
g79
g4584
sg81
(dp5188
g83
(dp5189
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5190
sg106
(lp5191
sg108
(lp5192
sg110
(dp5193
sg112
(lp5194
ssg114
g4615
sg116
(dp5195
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssasg108
(lp5196
sg110
(dp5197
sg112
(lp5198
ssg114
S'gettest while: 1 if: 2 option: 2'
p5199
sg116
(dp5200
g118
I0
sg119
I5
sg120
I0
sg121
I15
sg122
I0
sg123
I5
sg124
I0
sg125
I10
ssasg191
S'if (annot.anntyp == NOISE)'
p5201
sassg114
S'gettest while: 1'
p5202
sg116
(dp5203
g118
I0
sg119
I6
sg120
I7
sg121
I17
sg122
I0
sg123
I5
sg124
I0
sg125
I14
sssg126
I5
sg127
g2482
sg116
(dp5204
g118
I0
sg119
I30
sg120
I35
sg121
I85
sg122
I0
sg123
I25
sg124
I0
sg125
I75
ssg130
S'vhile (getann(1, &annot) == 0)'
p5205
sg132
(dp5206
g79
g4584
sg81
(dp5207
g83
(dp5208
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5209
sg106
(lp5210
sg108
(lp5211
sg110
(dp5212
sg112
(lp5213
ssg114
g2493
sg116
(dp5214
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssasg108
(lp5215
sg110
(dp5216
g38
I1
ssg112
(lp5217
(dp5218
g179
(lp5219
(dp5220
g79
g4584
sg81
(dp5221
g83
(dp5222
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5223
sg106
(lp5224
sg108
(lp5225
sg110
(dp5226
sg112
(lp5227
ssg114
S'gettest if: 1 option: 1'
p5228
sg116
(dp5229
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (tt == 0L || t == huge_time || (tt <= vfontest && vfontest < t)'
p5230
sa(dp5231
g179
(lp5232
(dp5233
g79
g4584
sg81
(dp5234
g83
(dp5235
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5236
sg106
(lp5237
sg108
(lp5238
sg110
(dp5239
sg112
(lp5240
ssg114
S'gettest if: 2 option: 1'
p5241
sg116
(dp5242
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (oflag)'
p5243
sassg114
g39
sg116
(dp5244
g118
I0
sg119
I65
sg120
I53
sg121
I248
sg122
I0
sg123
I57
sg124
I0
sg125
I207
ssa(dp5245
g79
g4584
sg81
(dp5246
g83
(dp5247
g85
I0
sg86
I4
sg87
I8
sg88
I2
sg89
I0
sg90
I1
sg91
I3
sg92
I0
ssg93
(lp5248
sg106
(lp5249
sg108
(lp5250
sg110
(dp5251
g42
I1
ssg112
(lp5252
(dp5253
g179
(lp5254
(dp5255
g79
g4584
sg81
(dp5256
g83
(dp5257
g85
I0
sg86
I0
sg87
I1
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5258
sg106
(lp5259
sg108
(lp5260
sg110
(dp5261
sg112
(lp5262
ssg114
S'rpann if: 1 option: 1'
p5263
sg116
(dp5264
g118
I0
sg119
I0
sg120
I1
sg121
I3
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((vfonref != -1L && vfonref <= t && (t <= vfoffref || vfoffref == -1L))'
p5265
sa(dp5266
g179
(lp5267
(dp5268
g79
g4584
sg81
(dp5269
g83
(dp5270
g85
I0
sg86
I0
sg87
I1
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5271
sg106
(lp5272
sg108
(lp5273
sg110
(dp5274
sg112
(lp5275
ssg114
S'rpann if: 2 option: 1'
p5276
sg116
(dp5277
g118
I0
sg119
I0
sg120
I1
sg121
I3
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'else if ((sdonref != -1L && sdonref <= t && (t <= sdoffref || sdoffref == -1L))'
p5278
sassg114
g40
sg116
(dp5279
g118
I3
sg119
I4
sg120
I14
sg121
I25
sg122
I0
sg123
I4
sg124
I2
sg125
I37
ssa(dp5280
g79
g4584
sg81
(dp5281
g83
(dp5282
g85
I0
sg86
I2
sg87
I6
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5283
sg106
(lp5284
sg108
(lp5285
sg110
(dp5286
sg112
(lp5287
(dp5288
g179
(lp5289
(dp5290
g79
g4584
sg81
(dp5291
g83
(dp5292
g85
I0
sg86
I0
sg87
I1
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5293
sg106
(lp5294
sg108
(lp5295
sg110
(dp5296
sg112
(lp5297
ssg114
S'tpann if: 1 option: 1'
p5298
sg116
(dp5299
g118
I0
sg119
I0
sg120
I1
sg121
I3
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((sdontest != -1L && sdontest <= t && (t <= sdofftest || sdofftest == -1L))'
p5300
sassg114
g41
sg116
(dp5301
g118
I0
sg119
I2
sg120
I7
sg121
I4
sg122
I0
sg123
I0
sg124
I0
sg125
I4
ssa(dp5302
g79
g4584
sg81
(dp5303
g83
(dp5304
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5305
sg106
(lp5306
sg108
(lp5307
(dp5308
S'cases'
p5309
(lp5310
(dp5311
g79
g4584
sg81
(dp5312
g83
(dp5313
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5314
sg106
(lp5315
sg108
(lp5316
(dp5317
g5309
(lp5318
(dp5319
g79
g4584
sg81
(dp5320
g83
(dp5321
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5322
sg106
(lp5323
sg108
(lp5324
sg110
(dp5325
sg112
(lp5326
ssg114
S'pair switch: 1 case: 1 switch: 1 case: 1'
p5327
sg116
(dp5328
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5329
g79
g4584
sg81
(dp5330
g83
(dp5331
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5332
sg106
(lp5333
sg108
(lp5334
sg110
(dp5335
sg112
(lp5336
ssg114
S'pair switch: 1 case: 1 switch: 1 case: 2'
p5337
sg116
(dp5338
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5339
g79
g4584
sg81
(dp5340
g83
(dp5341
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5342
sg106
(lp5343
sg108
(lp5344
sg110
(dp5345
sg112
(lp5346
ssg114
S'pair switch: 1 case: 1 switch: 1 case: 3'
p5347
sg116
(dp5348
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5349
g79
g4584
sg81
(dp5350
g83
(dp5351
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5352
sg106
(lp5353
sg108
(lp5354
sg110
(dp5355
sg112
(lp5356
ssg114
S'pair switch: 1 case: 1 switch: 1 case: 4'
p5357
sg116
(dp5358
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5359
g79
g4584
sg81
(dp5360
g83
(dp5361
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5362
sg106
(lp5363
sg108
(lp5364
sg110
(dp5365
sg112
(lp5366
ssg114
S'pair switch: 1 case: 1 switch: 1 case: 5'
p5367
sg116
(dp5368
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5369
g79
g4584
sg81
(dp5370
g83
(dp5371
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5372
sg106
(lp5373
sg108
(lp5374
sg110
(dp5375
sg112
(lp5376
ssg114
S'pair switch: 1 case: 1 switch: 1 case: 6'
p5377
sg116
(dp5378
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5379
g79
g4584
sg81
(dp5380
g83
(dp5381
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5382
sg106
(lp5383
sg108
(lp5384
sg110
(dp5385
sg112
(lp5386
ssg114
S'pair switch: 1 case: 1 switch: 1 case: 7'
p5387
sg116
(dp5388
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssasg191
S'switch (test)'
p5389
sasg110
(dp5390
sg112
(lp5391
ssg114
S'pair switch: 1 case: 1'
p5392
sg116
(dp5393
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I8
ssa(dp5394
g79
g4584
sg81
(dp5395
g83
(dp5396
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5397
sg106
(lp5398
sg108
(lp5399
(dp5400
g5309
(lp5401
(dp5402
g79
g4584
sg81
(dp5403
g83
(dp5404
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5405
sg106
(lp5406
sg108
(lp5407
sg110
(dp5408
sg112
(lp5409
ssg114
S'pair switch: 1 case: 2 switch: 1 case: 1'
p5410
sg116
(dp5411
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5412
g79
g4584
sg81
(dp5413
g83
(dp5414
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5415
sg106
(lp5416
sg108
(lp5417
sg110
(dp5418
sg112
(lp5419
ssg114
S'pair switch: 1 case: 2 switch: 1 case: 2'
p5420
sg116
(dp5421
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5422
g79
g4584
sg81
(dp5423
g83
(dp5424
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5425
sg106
(lp5426
sg108
(lp5427
sg110
(dp5428
sg112
(lp5429
ssg114
S'pair switch: 1 case: 2 switch: 1 case: 3'
p5430
sg116
(dp5431
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5432
g79
g4584
sg81
(dp5433
g83
(dp5434
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5435
sg106
(lp5436
sg108
(lp5437
sg110
(dp5438
sg112
(lp5439
ssg114
S'pair switch: 1 case: 2 switch: 1 case: 4'
p5440
sg116
(dp5441
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5442
g79
g4584
sg81
(dp5443
g83
(dp5444
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5445
sg106
(lp5446
sg108
(lp5447
sg110
(dp5448
sg112
(lp5449
ssg114
S'pair switch: 1 case: 2 switch: 1 case: 5'
p5450
sg116
(dp5451
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5452
g79
g4584
sg81
(dp5453
g83
(dp5454
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5455
sg106
(lp5456
sg108
(lp5457
sg110
(dp5458
sg112
(lp5459
ssg114
S'pair switch: 1 case: 2 switch: 1 case: 6'
p5460
sg116
(dp5461
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5462
g79
g4584
sg81
(dp5463
g83
(dp5464
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5465
sg106
(lp5466
sg108
(lp5467
sg110
(dp5468
sg112
(lp5469
ssg114
S'pair switch: 1 case: 2 switch: 1 case: 7'
p5470
sg116
(dp5471
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssasg191
S'switch (test)'
p5472
sasg110
(dp5473
sg112
(lp5474
ssg114
S'pair switch: 1 case: 2'
p5475
sg116
(dp5476
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I8
ssa(dp5477
g79
g4584
sg81
(dp5478
g83
(dp5479
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5480
sg106
(lp5481
sg108
(lp5482
(dp5483
g5309
(lp5484
(dp5485
g79
g4584
sg81
(dp5486
g83
(dp5487
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5488
sg106
(lp5489
sg108
(lp5490
sg110
(dp5491
sg112
(lp5492
ssg114
S'pair switch: 1 case: 3 switch: 1 case: 1'
p5493
sg116
(dp5494
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5495
g79
g4584
sg81
(dp5496
g83
(dp5497
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5498
sg106
(lp5499
sg108
(lp5500
sg110
(dp5501
sg112
(lp5502
ssg114
S'pair switch: 1 case: 3 switch: 1 case: 2'
p5503
sg116
(dp5504
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5505
g79
g4584
sg81
(dp5506
g83
(dp5507
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5508
sg106
(lp5509
sg108
(lp5510
sg110
(dp5511
sg112
(lp5512
ssg114
S'pair switch: 1 case: 3 switch: 1 case: 3'
p5513
sg116
(dp5514
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5515
g79
g4584
sg81
(dp5516
g83
(dp5517
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5518
sg106
(lp5519
sg108
(lp5520
sg110
(dp5521
sg112
(lp5522
ssg114
S'pair switch: 1 case: 3 switch: 1 case: 4'
p5523
sg116
(dp5524
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5525
g79
g4584
sg81
(dp5526
g83
(dp5527
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5528
sg106
(lp5529
sg108
(lp5530
sg110
(dp5531
sg112
(lp5532
ssg114
S'pair switch: 1 case: 3 switch: 1 case: 5'
p5533
sg116
(dp5534
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5535
g79
g4584
sg81
(dp5536
g83
(dp5537
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5538
sg106
(lp5539
sg108
(lp5540
sg110
(dp5541
sg112
(lp5542
ssg114
S'pair switch: 1 case: 3 switch: 1 case: 6'
p5543
sg116
(dp5544
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5545
g79
g4584
sg81
(dp5546
g83
(dp5547
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5548
sg106
(lp5549
sg108
(lp5550
sg110
(dp5551
sg112
(lp5552
ssg114
S'pair switch: 1 case: 3 switch: 1 case: 7'
p5553
sg116
(dp5554
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssasg191
S'switch (test)'
p5555
sasg110
(dp5556
sg112
(lp5557
ssg114
S'pair switch: 1 case: 3'
p5558
sg116
(dp5559
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I8
ssa(dp5560
g79
g4584
sg81
(dp5561
g83
(dp5562
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5563
sg106
(lp5564
sg108
(lp5565
(dp5566
g5309
(lp5567
(dp5568
g79
g4584
sg81
(dp5569
g83
(dp5570
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5571
sg106
(lp5572
sg108
(lp5573
sg110
(dp5574
sg112
(lp5575
ssg114
S'pair switch: 1 case: 4 switch: 1 case: 1'
p5576
sg116
(dp5577
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5578
g79
g4584
sg81
(dp5579
g83
(dp5580
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5581
sg106
(lp5582
sg108
(lp5583
sg110
(dp5584
sg112
(lp5585
ssg114
S'pair switch: 1 case: 4 switch: 1 case: 2'
p5586
sg116
(dp5587
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5588
g79
g4584
sg81
(dp5589
g83
(dp5590
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5591
sg106
(lp5592
sg108
(lp5593
sg110
(dp5594
sg112
(lp5595
ssg114
S'pair switch: 1 case: 4 switch: 1 case: 3'
p5596
sg116
(dp5597
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5598
g79
g4584
sg81
(dp5599
g83
(dp5600
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5601
sg106
(lp5602
sg108
(lp5603
sg110
(dp5604
sg112
(lp5605
ssg114
S'pair switch: 1 case: 4 switch: 1 case: 4'
p5606
sg116
(dp5607
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5608
g79
g4584
sg81
(dp5609
g83
(dp5610
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5611
sg106
(lp5612
sg108
(lp5613
sg110
(dp5614
sg112
(lp5615
ssg114
S'pair switch: 1 case: 4 switch: 1 case: 5'
p5616
sg116
(dp5617
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5618
g79
g4584
sg81
(dp5619
g83
(dp5620
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5621
sg106
(lp5622
sg108
(lp5623
sg110
(dp5624
sg112
(lp5625
ssg114
S'pair switch: 1 case: 4 switch: 1 case: 6'
p5626
sg116
(dp5627
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5628
g79
g4584
sg81
(dp5629
g83
(dp5630
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5631
sg106
(lp5632
sg108
(lp5633
sg110
(dp5634
sg112
(lp5635
ssg114
S'pair switch: 1 case: 4 switch: 1 case: 7'
p5636
sg116
(dp5637
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssasg191
S'switch (test)'
p5638
sasg110
(dp5639
sg112
(lp5640
ssg114
S'pair switch: 1 case: 4'
p5641
sg116
(dp5642
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I8
ssa(dp5643
g79
g4584
sg81
(dp5644
g83
(dp5645
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5646
sg106
(lp5647
sg108
(lp5648
(dp5649
g5309
(lp5650
(dp5651
g79
g4584
sg81
(dp5652
g83
(dp5653
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5654
sg106
(lp5655
sg108
(lp5656
sg110
(dp5657
sg112
(lp5658
ssg114
S'pair switch: 1 case: 5 switch: 1 case: 1'
p5659
sg116
(dp5660
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5661
g79
g4584
sg81
(dp5662
g83
(dp5663
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5664
sg106
(lp5665
sg108
(lp5666
sg110
(dp5667
sg112
(lp5668
ssg114
S'pair switch: 1 case: 5 switch: 1 case: 2'
p5669
sg116
(dp5670
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5671
g79
g4584
sg81
(dp5672
g83
(dp5673
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5674
sg106
(lp5675
sg108
(lp5676
sg110
(dp5677
sg112
(lp5678
ssg114
S'pair switch: 1 case: 5 switch: 1 case: 3'
p5679
sg116
(dp5680
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5681
g79
g4584
sg81
(dp5682
g83
(dp5683
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5684
sg106
(lp5685
sg108
(lp5686
sg110
(dp5687
sg112
(lp5688
ssg114
S'pair switch: 1 case: 5 switch: 1 case: 4'
p5689
sg116
(dp5690
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5691
g79
g4584
sg81
(dp5692
g83
(dp5693
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5694
sg106
(lp5695
sg108
(lp5696
sg110
(dp5697
sg112
(lp5698
ssg114
S'pair switch: 1 case: 5 switch: 1 case: 5'
p5699
sg116
(dp5700
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5701
g79
g4584
sg81
(dp5702
g83
(dp5703
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5704
sg106
(lp5705
sg108
(lp5706
sg110
(dp5707
sg112
(lp5708
ssg114
S'pair switch: 1 case: 5 switch: 1 case: 6'
p5709
sg116
(dp5710
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5711
g79
g4584
sg81
(dp5712
g83
(dp5713
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5714
sg106
(lp5715
sg108
(lp5716
sg110
(dp5717
sg112
(lp5718
ssg114
S'pair switch: 1 case: 5 switch: 1 case: 7'
p5719
sg116
(dp5720
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssasg191
S'switch (test)'
p5721
sasg110
(dp5722
sg112
(lp5723
ssg114
S'pair switch: 1 case: 5'
p5724
sg116
(dp5725
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I8
ssa(dp5726
g79
g4584
sg81
(dp5727
g83
(dp5728
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5729
sg106
(lp5730
sg108
(lp5731
(dp5732
g5309
(lp5733
(dp5734
g79
g4584
sg81
(dp5735
g83
(dp5736
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5737
sg106
(lp5738
sg108
(lp5739
sg110
(dp5740
sg112
(lp5741
ssg114
S'pair switch: 1 case: 6 switch: 1 case: 1'
p5742
sg116
(dp5743
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5744
g79
g4584
sg81
(dp5745
g83
(dp5746
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5747
sg106
(lp5748
sg108
(lp5749
sg110
(dp5750
sg112
(lp5751
ssg114
S'pair switch: 1 case: 6 switch: 1 case: 2'
p5752
sg116
(dp5753
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5754
g79
g4584
sg81
(dp5755
g83
(dp5756
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5757
sg106
(lp5758
sg108
(lp5759
sg110
(dp5760
sg112
(lp5761
ssg114
S'pair switch: 1 case: 6 switch: 1 case: 3'
p5762
sg116
(dp5763
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5764
g79
g4584
sg81
(dp5765
g83
(dp5766
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5767
sg106
(lp5768
sg108
(lp5769
sg110
(dp5770
sg112
(lp5771
ssg114
S'pair switch: 1 case: 6 switch: 1 case: 4'
p5772
sg116
(dp5773
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5774
g79
g4584
sg81
(dp5775
g83
(dp5776
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5777
sg106
(lp5778
sg108
(lp5779
sg110
(dp5780
sg112
(lp5781
ssg114
S'pair switch: 1 case: 6 switch: 1 case: 5'
p5782
sg116
(dp5783
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssasg191
S'switch (test)'
p5784
sasg110
(dp5785
sg112
(lp5786
ssg114
S'pair switch: 1 case: 6'
p5787
sg116
(dp5788
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I6
ssa(dp5789
g79
g4584
sg81
(dp5790
g83
(dp5791
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5792
sg106
(lp5793
sg108
(lp5794
(dp5795
g5309
(lp5796
(dp5797
g79
g4584
sg81
(dp5798
g83
(dp5799
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5800
sg106
(lp5801
sg108
(lp5802
sg110
(dp5803
sg112
(lp5804
ssg114
S'pair switch: 1 case: 7 switch: 1 case: 1'
p5805
sg116
(dp5806
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5807
g79
g4584
sg81
(dp5808
g83
(dp5809
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5810
sg106
(lp5811
sg108
(lp5812
sg110
(dp5813
sg112
(lp5814
ssg114
S'pair switch: 1 case: 7 switch: 1 case: 2'
p5815
sg116
(dp5816
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5817
g79
g4584
sg81
(dp5818
g83
(dp5819
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5820
sg106
(lp5821
sg108
(lp5822
sg110
(dp5823
sg112
(lp5824
ssg114
S'pair switch: 1 case: 7 switch: 1 case: 3'
p5825
sg116
(dp5826
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5827
g79
g4584
sg81
(dp5828
g83
(dp5829
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5830
sg106
(lp5831
sg108
(lp5832
sg110
(dp5833
sg112
(lp5834
ssg114
S'pair switch: 1 case: 7 switch: 1 case: 4'
p5835
sg116
(dp5836
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssa(dp5837
g79
g4584
sg81
(dp5838
g83
(dp5839
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp5840
sg106
(lp5841
sg108
(lp5842
sg110
(dp5843
sg112
(lp5844
ssg114
S'pair switch: 1 case: 7 switch: 1 case: 5'
p5845
sg116
(dp5846
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
ssasg191
S'switch (test)'
p5847
sasg110
(dp5848
sg112
(lp5849
ssg114
S'pair switch: 1 case: 7'
p5850
sg116
(dp5851
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I6
ssasg191
S'switch (ref)'
p5852
sasg110
(dp5853
sg112
(lp5854
(dp5855
g179
(lp5856
(dp5857
g79
g4584
sg81
(dp5858
g83
(dp5859
g85
I0
sg86
I0
sg87
I2
sg88
I2
sg89
I0
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp5860
sg106
(lp5861
sg108
(lp5862
sg110
(dp5863
sg112
(lp5864
ssg114
S'pair if: 1 option: 1'
p5865
sg116
(dp5866
g118
I0
sg119
I0
sg120
I2
sg121
I2
sg122
I0
sg123
I1
sg124
I1
sg125
I0
ssasg191
S'if (RR > 0L && rr > 0L)'
p5867
sa(dp5868
g179
(lp5869
(dp5870
g79
g4584
sg81
(dp5871
g83
(dp5872
g85
I0
sg86
I0
sg87
I2
sg88
I9
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5873
sg106
(lp5874
sg108
(lp5875
sg110
(dp5876
sg112
(lp5877
(dp5878
g179
(lp5879
(dp5880
g79
g4584
sg81
(dp5881
g83
(dp5882
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5883
sg106
(lp5884
sg108
(lp5885
sg110
(dp5886
sg112
(lp5887
ssg114
S'pair if: 2 option: 1 if: 1 option: 1'
p5888
sg116
(dp5889
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp5890
g79
g4584
sg81
(dp5891
g83
(dp5892
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5893
sg106
(lp5894
sg108
(lp5895
sg110
(dp5896
sg112
(lp5897
ssg114
S'pair if: 2 option: 1 if: 1 option: 2'
p5898
sg116
(dp5899
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (ref == test)'
p5900
sa(dp5901
g179
(lp5902
(dp5903
g79
g4584
sg81
(dp5904
g83
(dp5905
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5906
sg106
(lp5907
sg108
(lp5908
sg110
(dp5909
sg112
(lp5910
ssg114
S'pair if: 2 option: 1 if: 2 option: 1'
p5911
sg116
(dp5912
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp5913
g79
g4584
sg81
(dp5914
g83
(dp5915
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5916
sg106
(lp5917
sg108
(lp5918
sg110
(dp5919
sg112
(lp5920
ssg114
S'pair if: 2 option: 1 if: 2 option: 2'
p5921
sg116
(dp5922
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S"if (test == 'O' || test == 'X')"
p5923
sassg114
S'pair if: 2 option: 1'
p5924
sg116
(dp5925
g118
I0
sg119
I0
sg120
I2
sg121
I10
sg122
I0
sg123
I0
sg124
I0
sg125
I5
ssasg191
S'if (oflag)'
p5926
sa(dp5927
g179
(lp5928
(dp5929
g79
g4584
sg81
(dp5930
g83
(dp5931
g85
I2
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5932
sg106
(lp5933
sg108
(lp5934
sg110
(dp5935
sg112
(lp5936
(dp5937
g179
(lp5938
(dp5939
g79
g4584
sg81
(dp5940
g83
(dp5941
g85
I1
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5942
sg106
(lp5943
sg108
(lp5944
sg110
(dp5945
sg112
(lp5946
ssg114
S'pair if: 3 option: 1 if: 1 option: 1'
p5947
sg116
(dp5948
g118
I1
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp5949
g79
g4584
sg81
(dp5950
g83
(dp5951
g85
I0
sg86
I0
sg87
I0
sg88
I4
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5952
sg106
(lp5953
sg108
(lp5954
sg110
(dp5955
sg112
(lp5956
ssg114
S'pair if: 3 option: 1 if: 1 option: 2'
p5957
sg116
(dp5958
g118
I0
sg119
I0
sg120
I0
sg121
I4
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S"if (ref == 'O' || ref == 'X')"
p5959
sassg114
S'pair if: 3 option: 1'
p5960
sg116
(dp5961
g118
I3
sg119
I0
sg120
I0
sg121
I4
sg122
I0
sg123
I0
sg124
I0
sg125
I3
ssasg191
S'if (verbose && ref != test)'
p5962
sassg114
g42
sg116
(dp5963
g118
I3
sg119
I0
sg120
I4
sg121
I17
sg122
I0
sg123
I1
sg124
I2
sg125
I29
ssa(dp5964
g79
g4584
sg81
(dp5965
g83
(dp5966
g85
I1
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp5967
sg106
(lp5968
sg108
(lp5969
sg110
(dp5970
sg112
(lp5971
(dp5972
g179
(lp5973
(dp5974
g79
g4584
sg81
(dp5975
g83
(dp5976
g85
I2
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp5977
sg106
(lp5978
sg108
(lp5979
sg110
(dp5980
sg112
(lp5981
(dp5982
g179
(lp5983
(dp5984
g79
g4584
sg81
(dp5985
g83
(dp5986
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5987
sg106
(lp5988
sg108
(lp5989
sg110
(dp5990
sg112
(lp5991
ssg114
S'pstat if: 1 option: 1 if: 1 option: 1'
p5992
sg116
(dp5993
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp5994
g79
g4584
sg81
(dp5995
g83
(dp5996
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp5997
sg106
(lp5998
sg108
(lp5999
sg110
(dp6000
sg112
(lp6001
ssg114
S'pstat if: 1 option: 1 if: 1 option: 2'
p6002
sg116
(dp6003
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (b <= 0)'
p6004
sassg114
S'pstat if: 1 option: 1'
p6005
sg116
(dp6006
g118
I2
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I1
sg124
I0
sg125
I2
ssa(dp6007
g79
g4584
sg81
(dp6008
g83
(dp6009
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6010
sg106
(lp6011
sg108
(lp6012
sg110
(dp6013
sg112
(lp6014
ssg114
S'pstat if: 1 option: 2'
p6015
sg116
(dp6016
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp6017
g79
g4584
sg81
(dp6018
g83
(dp6019
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6020
sg106
(lp6021
sg108
(lp6022
sg110
(dp6023
sg112
(lp6024
ssg114
S'pstat if: 1 option: 3'
p6025
sg116
(dp6026
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (fflag == 1 || fflag == 3 || fflag == 4 || fflag == 6)'
p6027
sassg114
g43
sg116
(dp6028
g118
I3
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I2
sg124
I0
sg125
I8
ssa(dp6029
g79
g4584
sg81
(dp6030
g83
(dp6031
g85
I1
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp6032
sg106
(lp6033
sg108
(lp6034
sg110
(dp6035
sg112
(lp6036
(dp6037
g179
(lp6038
(dp6039
g79
g4584
sg81
(dp6040
g83
(dp6041
g85
I2
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp6042
sg106
(lp6043
sg108
(lp6044
sg110
(dp6045
sg112
(lp6046
(dp6047
g179
(lp6048
(dp6049
g79
g4584
sg81
(dp6050
g83
(dp6051
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6052
sg106
(lp6053
sg108
(lp6054
sg110
(dp6055
sg112
(lp6056
ssg114
S'sstat if: 1 option: 1 if: 1 option: 1'
p6057
sg116
(dp6058
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp6059
g79
g4584
sg81
(dp6060
g83
(dp6061
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6062
sg106
(lp6063
sg108
(lp6064
sg110
(dp6065
sg112
(lp6066
ssg114
S'sstat if: 1 option: 1 if: 1 option: 2'
p6067
sg116
(dp6068
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (b <= 0)'
p6069
sassg114
S'sstat if: 1 option: 1'
p6070
sg116
(dp6071
g118
I2
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I1
sg124
I0
sg125
I2
ssa(dp6072
g79
g4584
sg81
(dp6073
g83
(dp6074
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6075
sg106
(lp6076
sg108
(lp6077
sg110
(dp6078
sg112
(lp6079
ssg114
S'sstat if: 1 option: 2'
p6080
sg116
(dp6081
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp6082
g79
g4584
sg81
(dp6083
g83
(dp6084
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6085
sg106
(lp6086
sg108
(lp6087
sg110
(dp6088
sg112
(lp6089
ssg114
S'sstat if: 1 option: 3'
p6090
sg116
(dp6091
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (fflag == 1 || fflag == 3 || fflag == 4 || fflag == 6)'
p6092
sassg114
g44
sg116
(dp6093
g118
I3
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I2
sg124
I0
sg125
I8
ssa(dp6094
g79
g4584
sg81
(dp6095
g83
(dp6096
g85
I2
sg86
I0
sg87
I2
sg88
I10
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp6097
(dp6098
g96
(dp6099
g79
g4584
sg81
(dp6100
g83
(dp6101
g85
I0
sg86
I0
sg87
I8
sg88
I24
sg89
I0
sg90
I1
sg91
I1
sg92
I14
ssg93
(lp6102
sg106
(lp6103
sg108
(lp6104
sg110
(dp6105
g47
I1
ssg112
(lp6106
(dp6107
g179
(lp6108
(dp6109
g79
g4584
sg81
(dp6110
g83
(dp6111
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp6112
sg106
(lp6113
sg108
(lp6114
sg110
(dp6115
sg112
(lp6116
ssg114
S'init for: 1 if: 1 option: 1'
p6117
sg116
(dp6118
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssasg191
S"if (*argv[i] == '-')"
p6119
sa(dp6120
g179
(lp6121
(dp6122
g79
g4584
sg81
(dp6123
g83
(dp6124
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6125
sg106
(lp6126
sg108
(lp6127
sg110
(dp6128
sg112
(lp6129
ssg114
S'init for: 1 if: 2 option: 1'
p6130
sg116
(dp6131
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++i >= argc - 1)'
p6132
sa(dp6133
g179
(lp6134
(dp6135
g79
g4584
sg81
(dp6136
g83
(dp6137
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6138
sg106
(lp6139
sg108
(lp6140
sg110
(dp6141
sg112
(lp6142
ssg114
S'init for: 1 if: 3 option: 1'
p6143
sg116
(dp6144
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++i >= argc)'
p6145
sa(dp6146
g179
(lp6147
(dp6148
g79
g4584
sg81
(dp6149
g83
(dp6150
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6151
sg106
(lp6152
sg108
(lp6153
sg110
(dp6154
sg112
(lp6155
ssg114
S'init for: 1 if: 4 option: 1'
p6156
sg116
(dp6157
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++i >= argc)'
p6158
sa(dp6159
g179
(lp6160
(dp6161
g79
g4584
sg81
(dp6162
g83
(dp6163
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6164
sg106
(lp6165
sg108
(lp6166
sg110
(dp6167
sg112
(lp6168
ssg114
S'init for: 1 if: 5 option: 1'
p6169
sg116
(dp6170
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++i >= argc)'
p6171
sa(dp6172
g179
(lp6173
(dp6174
g79
g4584
sg81
(dp6175
g83
(dp6176
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6177
sg106
(lp6178
sg108
(lp6179
sg110
(dp6180
sg112
(lp6181
ssg114
S'init for: 1 if: 6 option: 1'
p6182
sg116
(dp6183
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++i >= argc - 1)'
p6184
sa(dp6185
g179
(lp6186
(dp6187
g79
g4584
sg81
(dp6188
g83
(dp6189
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6190
sg106
(lp6191
sg108
(lp6192
sg110
(dp6193
sg112
(lp6194
ssg114
S'init for: 1 if: 7 option: 1'
p6195
sg116
(dp6196
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++i >= argc - 1)'
p6197
sa(dp6198
g179
(lp6199
(dp6200
g79
g4584
sg81
(dp6201
g83
(dp6202
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6203
sg106
(lp6204
sg108
(lp6205
sg110
(dp6206
sg112
(lp6207
ssg114
S'init for: 1 if: 8 option: 1'
p6208
sg116
(dp6209
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++i >= argc)'
p6210
sa(dp6211
g179
(lp6212
(dp6213
g79
g4584
sg81
(dp6214
g83
(dp6215
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6216
sg106
(lp6217
sg108
(lp6218
sg110
(dp6219
sg112
(lp6220
ssg114
S'init for: 1 if: 9 option: 1'
p6221
sg116
(dp6222
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++i >= argc)'
p6223
sa(dp6224
g179
(lp6225
(dp6226
g79
g4584
sg81
(dp6227
g83
(dp6228
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6229
sg106
(lp6230
sg108
(lp6231
sg110
(dp6232
sg112
(lp6233
ssg114
S'init for: 1 if: 10 option: 1'
p6234
sg116
(dp6235
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++i >= argc)'
p6236
sa(dp6237
g179
(lp6238
(dp6239
g79
g4584
sg81
(dp6240
g83
(dp6241
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6242
sg106
(lp6243
sg108
(lp6244
sg110
(dp6245
sg112
(lp6246
ssg114
S'init for: 1 if: 11 option: 1'
p6247
sg116
(dp6248
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++i >= argc)'
p6249
sa(dp6250
g179
(lp6251
(dp6252
g79
g4584
sg81
(dp6253
g83
(dp6254
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6255
sg106
(lp6256
sg108
(lp6257
sg110
(dp6258
sg112
(lp6259
ssg114
S'init for: 1 if: 12 option: 1'
p6260
sg116
(dp6261
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++i >= argc)'
p6262
sassg114
S'init for: 1'
p6263
sg116
(dp6264
g118
I0
sg119
I0
sg120
I20
sg121
I26
sg122
I0
sg123
I2
sg124
I19
sg125
I17
sssg126
I5
sg127
S'yes'
p6265
sg116
(dp6266
g118
I0
sg119
I0
sg120
I100
sg121
I131
sg122
I0
sg123
I10
sg124
I100
sg125
I90
ssg130
S'tor (i = 1; i < argc; i++)'
p6267
sg132
(dp6268
g79
g4584
sg81
(dp6269
g83
(dp6270
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp6271
sg106
(lp6272
sg108
(lp6273
sg110
(dp6274
sg112
(lp6275
ssg114
g141
sg116
(dp6276
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp6277
sg108
(lp6278
sg110
(dp6279
g47
I1
ssg112
(lp6280
(dp6281
g179
(lp6282
(dp6283
g79
g4584
sg81
(dp6284
g83
(dp6285
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6286
sg106
(lp6287
sg108
(lp6288
sg110
(dp6289
g47
I1
ssg112
(lp6290
ssg114
S'init if: 1 option: 1'
p6291
sg116
(dp6292
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I5
sg125
I5
ssasg191
S'if (!record || !an[0].name)'
p6293
sa(dp6294
g179
(lp6295
(dp6296
g79
g4584
sg81
(dp6297
g83
(dp6298
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6299
sg106
(lp6300
sg108
(lp6301
sg110
(dp6302
sg112
(lp6303
ssg114
S'init if: 2 option: 1'
p6304
sg116
(dp6305
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (start != 0L || end_time != 0L || match_dt != 0)'
p6306
sa(dp6307
g179
(lp6308
(dp6309
g79
g4584
sg81
(dp6310
g83
(dp6311
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6312
sg106
(lp6313
sg108
(lp6314
sg110
(dp6315
sg112
(lp6316
ssg114
S'init if: 3 option: 1'
p6317
sg116
(dp6318
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (sampfreq(record) <= 0)'
p6319
sa(dp6320
g179
(lp6321
(dp6322
g79
g4584
sg81
(dp6323
g83
(dp6324
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6325
sg106
(lp6326
sg108
(lp6327
sg110
(dp6328
sg112
(lp6329
ssg114
S'init if: 4 option: 1'
p6330
sg116
(dp6331
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp6332
g79
g4584
sg81
(dp6333
g83
(dp6334
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6335
sg106
(lp6336
sg108
(lp6337
sg110
(dp6338
sg112
(lp6339
ssg114
S'init if: 4 option: 2'
p6340
sg116
(dp6341
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (match_dt)'
p6342
sa(dp6343
g179
(lp6344
(dp6345
g79
g4584
sg81
(dp6346
g83
(dp6347
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6348
sg106
(lp6349
sg108
(lp6350
sg110
(dp6351
sg112
(lp6352
ssg114
S'init if: 5 option: 1'
p6353
sg116
(dp6354
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp6355
g79
g4584
sg81
(dp6356
g83
(dp6357
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6358
sg106
(lp6359
sg108
(lp6360
sg110
(dp6361
sg112
(lp6362
ssg114
S'init if: 5 option: 2'
p6363
sg116
(dp6364
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (start)'
p6365
sa(dp6366
g179
(lp6367
(dp6368
g79
g4584
sg81
(dp6369
g83
(dp6370
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6371
sg106
(lp6372
sg108
(lp6373
sg110
(dp6374
sg112
(lp6375
ssg114
S'init if: 6 option: 1'
p6376
sg116
(dp6377
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp6378
g79
g4584
sg81
(dp6379
g83
(dp6380
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6381
sg106
(lp6382
sg108
(lp6383
sg110
(dp6384
sg112
(lp6385
ssg114
S'init if: 6 option: 2'
p6386
sg116
(dp6387
g118
I0
sg119
I0
sg120
I0
sg121
I3
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (end_time)'
p6388
sa(dp6389
g179
(lp6390
(dp6391
g79
g4584
sg81
(dp6392
g83
(dp6393
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6394
sg106
(lp6395
sg108
(lp6396
sg110
(dp6397
sg112
(lp6398
ssg114
S'init if: 7 option: 1'
p6399
sg116
(dp6400
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (end_time > 0L && end_time < start)'
p6401
sa(dp6402
g179
(lp6403
(dp6404
g79
g4584
sg81
(dp6405
g83
(dp6406
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6407
sg106
(lp6408
sg108
(lp6409
sg110
(dp6410
sg112
(lp6411
ssg114
S'init if: 8 option: 1'
p6412
sg116
(dp6413
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (oflag)'
p6414
sa(dp6415
g179
(lp6416
(dp6417
g79
g4584
sg81
(dp6418
g83
(dp6419
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6420
sg106
(lp6421
sg108
(lp6422
sg110
(dp6423
sg112
(lp6424
ssg114
S'init if: 9 option: 1'
p6425
sg116
(dp6426
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (annopen(record, an, 2 + oflag) < 0)'
p6427
sassg114
g45
sg116
(dp6428
g118
I2
sg119
I0
sg120
I102
sg121
I152
sg122
I0
sg123
I10
sg124
I111
sg125
I116
ssa(dp6429
g79
g4584
sg81
(dp6430
g83
(dp6431
g85
I0
sg86
I0
sg87
I112
sg88
I11
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6432
sg106
(lp6433
sg108
(lp6434
(dp6435
g5309
(lp6436
(dp6437
g79
g4584
sg81
(dp6438
g83
(dp6439
g85
I0
sg86
I0
sg87
I39
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6440
sg106
(lp6441
sg108
(lp6442
sg110
(dp6443
sg112
(lp6444
ssg114
S'print_results switch: 1 case: 1'
p6445
sg116
(dp6446
g118
I0
sg119
I0
sg120
I39
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp6447
g79
g4584
sg81
(dp6448
g83
(dp6449
g85
I0
sg86
I0
sg87
I36
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6450
sg106
(lp6451
sg108
(lp6452
sg110
(dp6453
sg112
(lp6454
ssg114
S'print_results switch: 1 case: 2'
p6455
sg116
(dp6456
g118
I0
sg119
I0
sg120
I36
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp6457
g79
g4584
sg81
(dp6458
g83
(dp6459
g85
I0
sg86
I0
sg87
I13
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6460
sg106
(lp6461
sg108
(lp6462
sg110
(dp6463
sg112
(lp6464
ssg114
S'print_results switch: 1 case: 3'
p6465
sg116
(dp6466
g118
I0
sg119
I0
sg120
I13
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp6467
g79
g4584
sg81
(dp6468
g83
(dp6469
g85
I0
sg86
I0
sg87
I31
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6470
sg106
(lp6471
sg108
(lp6472
sg110
(dp6473
sg112
(lp6474
ssg114
S'print_results switch: 1 case: 4'
p6475
sg116
(dp6476
g118
I0
sg119
I0
sg120
I31
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp6477
g79
g4584
sg81
(dp6478
g83
(dp6479
g85
I0
sg86
I0
sg87
I27
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6480
sg106
(lp6481
sg108
(lp6482
sg110
(dp6483
sg112
(lp6484
ssg114
S'print_results switch: 1 case: 5'
p6485
sg116
(dp6486
g118
I0
sg119
I0
sg120
I27
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp6487
g79
g4584
sg81
(dp6488
g83
(dp6489
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6490
sg106
(lp6491
sg108
(lp6492
sg110
(dp6493
sg112
(lp6494
ssg114
S'print_results switch: 1 case: 6'
p6495
sg116
(dp6496
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'switch (fflag)'
p6497
sasg110
(dp6498
g43
I6
sg44
I4
ssg112
(lp6499
(dp6500
g179
(lp6501
(dp6502
g79
g4584
sg81
(dp6503
g83
(dp6504
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6505
sg106
(lp6506
sg108
(lp6507
sg110
(dp6508
sg112
(lp6509
(dp6510
g179
(lp6511
(dp6512
g79
g4584
sg81
(dp6513
g83
(dp6514
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6515
sg106
(lp6516
sg108
(lp6517
sg110
(dp6518
sg112
(lp6519
(dp6520
g179
(lp6521
(dp6522
g79
g4584
sg81
(dp6523
g83
(dp6524
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6525
sg106
(lp6526
sg108
(lp6527
sg110
(dp6528
sg112
(lp6529
ssg114
S'print_results if: 1 option: 1 if: 1 option: 1 if: 1 option: 1'
p6530
sg116
(dp6531
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((ofile = fopen(ofname, "w")) == NULL)'
p6532
sa(dp6533
g179
(lp6534
(dp6535
g79
g4584
sg81
(dp6536
g83
(dp6537
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6538
sg106
(lp6539
sg108
(lp6540
sg110
(dp6541
sg112
(lp6542
ssg114
S'print_results if: 1 option: 1 if: 1 option: 1 if: 2 option: 1'
p6543
sg116
(dp6544
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp6545
g79
g4584
sg81
(dp6546
g83
(dp6547
g85
I0
sg86
I0
sg87
I3
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6548
sg106
(lp6549
sg108
(lp6550
sg110
(dp6551
sg112
(lp6552
ssg114
S'print_results if: 1 option: 1 if: 1 option: 1 if: 2 option: 2'
p6553
sg116
(dp6554
g118
I0
sg119
I0
sg120
I3
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (fflag == 2)'
p6555
sassg114
S'print_results if: 1 option: 1 if: 1 option: 1'
p6556
sg116
(dp6557
g118
I0
sg119
I0
sg120
I3
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I3
ssa(dp6558
g79
g4584
sg81
(dp6559
g83
(dp6560
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6561
sg106
(lp6562
sg108
(lp6563
sg110
(dp6564
sg112
(lp6565
(dp6566
g179
(lp6567
(dp6568
g79
g4584
sg81
(dp6569
g83
(dp6570
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6571
sg106
(lp6572
sg108
(lp6573
sg110
(dp6574
sg112
(lp6575
ssg114
S'print_results if: 1 option: 1 if: 1 option: 2 if: 1 option: 1'
p6576
sg116
(dp6577
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((ofile = fopen(ofname, "a")) == NULL)'
p6578
sassg114
S'print_results if: 1 option: 1 if: 1 option: 2'
p6579
sg116
(dp6580
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I1
ssasg191
S'if ((ofile = fopen(ofname, "r")) == NULL)'
p6581
sassg114
S'print_results if: 1 option: 1'
p6582
sg116
(dp6583
g118
I0
sg119
I0
sg120
I3
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I5
ssa(dp6584
g79
g4584
sg81
(dp6585
g83
(dp6586
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6587
sg106
(lp6588
sg108
(lp6589
sg110
(dp6590
sg112
(lp6591
ssg114
S'print_results if: 1 option: 2'
p6592
sg116
(dp6593
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (strcmp(ofname, "-"))'
p6594
sa(dp6595
g179
(lp6596
(dp6597
g79
g4584
sg81
(dp6598
g83
(dp6599
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6600
sg106
(lp6601
sg108
(lp6602
sg110
(dp6603
sg112
(lp6604
(dp6605
g179
(lp6606
(dp6607
g79
g4584
sg81
(dp6608
g83
(dp6609
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6610
sg106
(lp6611
sg108
(lp6612
sg110
(dp6613
sg112
(lp6614
(dp6615
g179
(lp6616
(dp6617
g79
g4584
sg81
(dp6618
g83
(dp6619
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6620
sg106
(lp6621
sg108
(lp6622
sg110
(dp6623
sg112
(lp6624
(dp6625
g179
(lp6626
(dp6627
g79
g4584
sg81
(dp6628
g83
(dp6629
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6630
sg106
(lp6631
sg108
(lp6632
sg110
(dp6633
sg112
(lp6634
ssg114
S'print_results if: 2 option: 1 if: 1 option: 1 if: 1 option: 1 if: 1 option: 1'
p6635
sg116
(dp6636
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((sfile = fopen(sfname, "w")) == NULL)'
p6637
sa(dp6638
g179
(lp6639
(dp6640
g79
g4584
sg81
(dp6641
g83
(dp6642
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6643
sg106
(lp6644
sg108
(lp6645
sg110
(dp6646
sg112
(lp6647
ssg114
S'print_results if: 2 option: 1 if: 1 option: 1 if: 1 option: 1 if: 2 option: 1'
p6648
sg116
(dp6649
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp6650
g79
g4584
sg81
(dp6651
g83
(dp6652
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6653
sg106
(lp6654
sg108
(lp6655
sg110
(dp6656
sg112
(lp6657
ssg114
S'print_results if: 2 option: 1 if: 1 option: 1 if: 1 option: 1 if: 2 option: 2'
p6658
sg116
(dp6659
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (fflag == 2)'
p6660
sassg114
S'print_results if: 2 option: 1 if: 1 option: 1 if: 1 option: 1'
p6661
sg116
(dp6662
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I3
ssa(dp6663
g79
g4584
sg81
(dp6664
g83
(dp6665
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6666
sg106
(lp6667
sg108
(lp6668
sg110
(dp6669
sg112
(lp6670
(dp6671
g179
(lp6672
(dp6673
g79
g4584
sg81
(dp6674
g83
(dp6675
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6676
sg106
(lp6677
sg108
(lp6678
sg110
(dp6679
sg112
(lp6680
ssg114
S'print_results if: 2 option: 1 if: 1 option: 1 if: 1 option: 2 if: 1 option: 1'
p6681
sg116
(dp6682
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((sfile = fopen(sfname, "a")) == NULL)'
p6683
sassg114
S'print_results if: 2 option: 1 if: 1 option: 1 if: 1 option: 2'
p6684
sg116
(dp6685
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I1
ssasg191
S'if ((sfile = fopen(sfname, "r")) == NULL)'
p6686
sassg114
S'print_results if: 2 option: 1 if: 1 option: 1'
p6687
sg116
(dp6688
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I5
ssa(dp6689
g79
g4584
sg81
(dp6690
g83
(dp6691
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6692
sg106
(lp6693
sg108
(lp6694
sg110
(dp6695
sg112
(lp6696
ssg114
S'print_results if: 2 option: 1 if: 1 option: 2'
p6697
sg116
(dp6698
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (strcmp(sfname, "-"))'
p6699
sassg114
S'print_results if: 2 option: 1'
p6700
sg116
(dp6701
g118
I0
sg119
I0
sg120
I1
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I7
ssa(dp6702
g79
g4584
sg81
(dp6703
g83
(dp6704
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6705
sg106
(lp6706
sg108
(lp6707
sg110
(dp6708
sg112
(lp6709
ssg114
S'print_results if: 2 option: 2'
p6710
sg116
(dp6711
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (fflag == 2 || fflag == 5)'
p6712
sa(dp6713
g179
(lp6714
(dp6715
g79
g4584
sg81
(dp6716
g83
(dp6717
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6718
sg106
(lp6719
sg108
(lp6720
sg110
(dp6721
sg112
(lp6722
ssg114
S'print_results if: 3 option: 1'
p6723
sg116
(dp6724
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (fflag == 1 || fflag == 3 || fflag == 4 || fflag == 6)'
p6725
sa(dp6726
g179
(lp6727
(dp6728
g79
g4584
sg81
(dp6729
g83
(dp6730
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6731
sg106
(lp6732
sg108
(lp6733
sg110
(dp6734
sg112
(lp6735
ssg114
S'print_results if: 4 option: 1'
p6736
sg116
(dp6737
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp6738
g79
g4584
sg81
(dp6739
g83
(dp6740
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6741
sg106
(lp6742
sg108
(lp6743
sg110
(dp6744
sg112
(lp6745
ssg114
S'print_results if: 4 option: 2'
p6746
sg116
(dp6747
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (fflag < 4)'
p6748
sa(dp6749
g179
(lp6750
(dp6751
g79
g4584
sg81
(dp6752
g83
(dp6753
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6754
sg106
(lp6755
sg108
(lp6756
sg110
(dp6757
sg112
(lp6758
(dp6759
g179
(lp6760
(dp6761
g79
g4584
sg81
(dp6762
g83
(dp6763
g85
I2
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp6764
sg106
(lp6765
sg108
(lp6766
sg110
(dp6767
sg112
(lp6768
ssg114
S'print_results if: 5 option: 1 if: 1 option: 1'
p6769
sg116
(dp6770
g118
I2
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssa(dp6771
g79
g4584
sg81
(dp6772
g83
(dp6773
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6774
sg106
(lp6775
sg108
(lp6776
sg110
(dp6777
sg112
(lp6778
ssg114
S'print_results if: 5 option: 1 if: 1 option: 2'
p6779
sg116
(dp6780
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (nrre)'
p6781
sassg114
S'print_results if: 5 option: 1'
p6782
sg116
(dp6783
g118
I2
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I1
sg124
I0
sg125
I2
ssa(dp6784
g79
g4584
sg81
(dp6785
g83
(dp6786
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6787
sg106
(lp6788
sg108
(lp6789
sg110
(dp6790
sg112
(lp6791
(dp6792
g179
(lp6793
(dp6794
g79
g4584
sg81
(dp6795
g83
(dp6796
g85
I2
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp6797
sg106
(lp6798
sg108
(lp6799
sg110
(dp6800
sg112
(lp6801
ssg114
S'print_results if: 5 option: 2 if: 1 option: 1'
p6802
sg116
(dp6803
g118
I2
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssa(dp6804
g79
g4584
sg81
(dp6805
g83
(dp6806
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6807
sg106
(lp6808
sg108
(lp6809
sg110
(dp6810
sg112
(lp6811
ssg114
S'print_results if: 5 option: 2 if: 1 option: 2'
p6812
sg116
(dp6813
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (nrre)'
p6814
sassg114
S'print_results if: 5 option: 2'
p6815
sg116
(dp6816
g118
I2
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I1
sg124
I0
sg125
I2
ssasg191
S'if (fflag == 4 || fflag == 6)'
p6817
sa(dp6818
g179
(lp6819
(dp6820
g79
g4584
sg81
(dp6821
g83
(dp6822
g85
I0
sg86
I0
sg87
I6
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6823
sg106
(lp6824
sg108
(lp6825
sg110
(dp6826
sg112
(lp6827
ssg114
S'print_results if: 6 option: 1'
p6828
sg116
(dp6829
g118
I0
sg119
I0
sg120
I6
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (fflag >= 4)'
p6830
sa(dp6831
g179
(lp6832
(dp6833
g79
g4584
sg81
(dp6834
g83
(dp6835
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6836
sg106
(lp6837
sg108
(lp6838
sg110
(dp6839
sg112
(lp6840
ssg114
S'print_results if: 7 option: 1'
p6841
sg116
(dp6842
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (fflag == 1 || fflag == 3 || fflag == 4 || fflag == 6)'
p6843
sa(dp6844
g179
(lp6845
(dp6846
g79
g4584
sg81
(dp6847
g83
(dp6848
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6849
sg106
(lp6850
sg108
(lp6851
sg110
(dp6852
sg112
(lp6853
ssg114
S'print_results if: 8 option: 1'
p6854
sg116
(dp6855
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (ofile != NULL)'
p6856
sassg114
g46
sg116
(dp6857
g118
I32
sg119
I0
sg120
I175
sg121
I15
sg122
I0
sg123
I21
sg124
I0
sg125
I121
ssa(dp6858
g79
g4584
sg81
(dp6859
g83
(dp6860
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6861
(dp6862
g96
(dp6863
g79
g4584
sg81
(dp6864
g83
(dp6865
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6866
sg106
(lp6867
sg108
(lp6868
sg110
(dp6869
sg112
(lp6870
ssg114
S'help for: 1'
p6871
sg116
(dp6872
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I5
sg127
g6265
sg116
(dp6873
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I5
sg125
I5
ssg130
S'tor (i = 1; help_strings[i] != NULL; i++)'
p6874
sg132
(dp6875
g79
g4584
sg81
(dp6876
g83
(dp6877
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp6878
sg106
(lp6879
sg108
(lp6880
sg110
(dp6881
sg112
(lp6882
ssg114
g141
sg116
(dp6883
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp6884
sg108
(lp6885
sg110
(dp6886
sg112
(lp6887
ssg114
g47
sg116
(dp6888
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I5
sg125
I5
ssa(dp6889
g79
g4584
sg81
(dp6890
g83
(dp6891
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp6892
(dp6893
g96
(dp6894
g79
g4584
sg81
(dp6895
g83
(dp6896
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp6897
sg106
(lp6898
sg108
(lp6899
sg110
(dp6900
sg112
(lp6901
ssg114
S'genxcmp for: 1'
p6902
sg116
(dp6903
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I1
sg124
I0
sg125
I0
sssg126
I5
sg127
g6265
sg116
(dp6904
g118
I0
sg119
I0
sg120
I10
sg121
I6
sg122
I0
sg123
I10
sg124
I5
sg125
I5
ssg130
S'tor (p = mstring + 1; p < mstring + *mstring; p++)'
p6905
sg132
(dp6906
g79
g4584
sg81
(dp6907
g83
(dp6908
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I1
ssg93
(lp6909
sg106
(lp6910
sg108
(lp6911
sg110
(dp6912
sg112
(lp6913
ssg114
g141
sg116
(dp6914
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I0
sg123
I1
sg124
I1
sg125
I0
sssasg106
(lp6915
(dp6916
g96
(dp6917
g79
g4584
sg81
(dp6918
g83
(dp6919
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6920
sg106
(lp6921
sg108
(lp6922
sg110
(dp6923
sg112
(lp6924
ssg114
S'genxcmp while: 1'
p6925
sg116
(dp6926
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I5
sg127
g2482
sg116
(dp6927
g118
I0
sg119
I0
sg120
I5
sg121
I5
sg122
I0
sg123
I0
sg124
I0
sg125
I15
ssg130
S'vhile ((end_time > 0L && (T <= end_time || t <= end_time))'
p6928
sg132
(dp6929
g79
g4584
sg81
(dp6930
g83
(dp6931
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6932
sg106
(lp6933
sg108
(lp6934
sg110
(dp6935
sg112
(lp6936
ssg114
g2493
sg116
(dp6937
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssasg108
(lp6938
sg110
(dp6939
sg112
(lp6940
(dp6941
g179
(lp6942
(dp6943
g79
g4584
sg81
(dp6944
g83
(dp6945
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6946
sg106
(lp6947
sg108
(lp6948
sg110
(dp6949
sg112
(lp6950
ssg114
S'genxcmp if: 1 option: 1'
p6951
sg116
(dp6952
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (ref_annot.anntyp == 0)'
p6953
sa(dp6954
g179
(lp6955
(dp6956
g79
g4584
sg81
(dp6957
g83
(dp6958
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6959
sg106
(lp6960
sg108
(lp6961
sg110
(dp6962
sg112
(lp6963
ssg114
S'genxcmp if: 2 option: 1'
p6964
sg116
(dp6965
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (test_annot.anntyp == 0)'
p6966
sa(dp6967
g179
(lp6968
(dp6969
g79
g4584
sg81
(dp6970
g83
(dp6971
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6972
sg106
(lp6973
sg108
(lp6974
sg110
(dp6975
sg112
(lp6976
ssg114
S'genxcmp if: 3 option: 1'
p6977
sg116
(dp6978
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (!ref_annot.aux)'
p6979
sa(dp6980
g179
(lp6981
(dp6982
g79
g4584
sg81
(dp6983
g83
(dp6984
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6985
sg106
(lp6986
sg108
(lp6987
sg110
(dp6988
sg112
(lp6989
ssg114
S'genxcmp if: 4 option: 1'
p6990
sg116
(dp6991
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (!test_annot.aux)'
p6992
sa(dp6993
g179
(lp6994
(dp6995
g79
g4584
sg81
(dp6996
g83
(dp6997
g85
I0
sg86
I0
sg87
I3
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp6998
sg106
(lp6999
sg108
(lp7000
sg110
(dp7001
g76
I1
ssg112
(lp7002
(dp7003
g179
(lp7004
(dp7005
g79
g4584
sg81
(dp7006
g83
(dp7007
g85
I1
sg86
I0
sg87
I5
sg88
I12
sg89
I0
sg90
I1
sg91
I2
sg92
I0
ssg93
(lp7008
sg106
(lp7009
sg108
(lp7010
sg110
(dp7011
g38
I1
sg39
I1
ssg112
(lp7012
(dp7013
g179
(lp7014
(dp7015
g79
g4584
sg81
(dp7016
g83
(dp7017
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7018
sg106
(lp7019
sg108
(lp7020
sg110
(dp7021
sg112
(lp7022
ssg114
S'genxcmp if: 5 option: 1 if: 1 option: 1 if: 1 option: 1'
p7023
sg116
(dp7024
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (test_annot.anntyp != ref_annot.anntyp || test_annot.subtyp != ref_annot.subtyp'
p7025
sa(dp7026
g179
(lp7027
(dp7028
g79
g4584
sg81
(dp7029
g83
(dp7030
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7031
sg106
(lp7032
sg108
(lp7033
sg110
(dp7034
sg112
(lp7035
ssg114
S'genxcmp if: 5 option: 1 if: 1 option: 1 if: 2 option: 1'
p7036
sg116
(dp7037
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (test_annot.subtyp != ref_annot.subtyp || test_annot.chan != ref_annot.chan'
p7038
sa(dp7039
g179
(lp7040
(dp7041
g79
g4584
sg81
(dp7042
g83
(dp7043
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7044
sg106
(lp7045
sg108
(lp7046
sg110
(dp7047
sg112
(lp7048
ssg114
S'genxcmp if: 5 option: 1 if: 1 option: 1 if: 3 option: 1'
p7049
sg116
(dp7050
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (*ref_annot.aux)'
p7051
sa(dp7052
g179
(lp7053
(dp7054
g79
g4584
sg81
(dp7055
g83
(dp7056
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7057
sg106
(lp7058
sg108
(lp7059
sg110
(dp7060
sg112
(lp7061
ssg114
S'genxcmp if: 5 option: 1 if: 1 option: 1 if: 4 option: 1'
p7062
sg116
(dp7063
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (*test_annot.aux)'
p7064
sa(dp7065
g179
(lp7066
(dp7067
g79
g4584
sg81
(dp7068
g83
(dp7069
g85
I0
sg86
I0
sg87
I1
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7070
sg106
(lp7071
sg108
(lp7072
sg110
(dp7073
sg112
(lp7074
ssg114
S'genxcmp if: 5 option: 1 if: 1 option: 1 if: 5 option: 1'
p7075
sg116
(dp7076
g118
I0
sg119
I0
sg120
I1
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (alen > 254)'
p7077
sa(dp7078
g179
(lp7079
(dp7080
g79
g4584
sg81
(dp7081
g83
(dp7082
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7083
sg106
(lp7084
sg108
(lp7085
sg110
(dp7086
sg112
(lp7087
ssg114
S'genxcmp if: 5 option: 1 if: 1 option: 1 if: 6 option: 1'
p7088
sg116
(dp7089
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (!ref_annot.aux)'
p7090
sa(dp7091
g179
(lp7092
(dp7093
g79
g4584
sg81
(dp7094
g83
(dp7095
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7096
sg106
(lp7097
sg108
(lp7098
sg110
(dp7099
sg112
(lp7100
ssg114
S'genxcmp if: 5 option: 1 if: 1 option: 1 if: 7 option: 1'
p7101
sg116
(dp7102
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (!test_annot.aux)'
p7103
sassg114
S'genxcmp if: 5 option: 1 if: 1 option: 1'
p7104
sg116
(dp7105
g118
I1
sg119
I100
sg120
I79
sg121
I421
sg122
I0
sg123
I90
sg124
I0
sg125
I343
ssa(dp7106
g79
g4584
sg81
(dp7107
g83
(dp7108
g85
I1
sg86
I0
sg87
I3
sg88
I6
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp7109
sg106
(lp7110
sg108
(lp7111
sg110
(dp7112
g40
I1
sg39
I1
ssg112
(lp7113
(dp7114
g179
(lp7115
(dp7116
g79
g4584
sg81
(dp7117
g83
(dp7118
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7119
sg106
(lp7120
sg108
(lp7121
sg110
(dp7122
sg112
(lp7123
ssg114
S'genxcmp if: 5 option: 1 if: 1 option: 2 if: 1 option: 1'
p7124
sg116
(dp7125
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (*test_annot.aux)'
p7126
sa(dp7127
g179
(lp7128
(dp7129
g79
g4584
sg81
(dp7130
g83
(dp7131
g85
I0
sg86
I0
sg87
I1
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7132
sg106
(lp7133
sg108
(lp7134
sg110
(dp7135
sg112
(lp7136
ssg114
S'genxcmp if: 5 option: 1 if: 1 option: 2 if: 2 option: 1'
p7137
sg116
(dp7138
g118
I0
sg119
I0
sg120
I1
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (alen > 254)'
p7139
sa(dp7140
g179
(lp7141
(dp7142
g79
g4584
sg81
(dp7143
g83
(dp7144
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7145
sg106
(lp7146
sg108
(lp7147
sg110
(dp7148
sg112
(lp7149
ssg114
S'genxcmp if: 5 option: 1 if: 1 option: 2 if: 3 option: 1'
p7150
sg116
(dp7151
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (!test_annot.aux)'
p7152
sassg114
S'genxcmp if: 5 option: 1 if: 1 option: 2'
p7153
sg116
(dp7154
g118
I4
sg119
I69
sg120
I72
sg121
I282
sg122
I0
sg123
I62
sg124
I2
sg125
I247
ssasg191
S"if (T - t <= match_dt && (T - t < abs(T - tprime) || aprime == 'O'))"
p7155
sassg114
S'genxcmp if: 5 option: 1'
p7156
sg116
(dp7157
g118
I4
sg119
I101
sg120
I82
sg121
I421
sg122
I0
sg123
I91
sg124
I2
sg125
I349
ssa(dp7158
g79
g4584
sg81
(dp7159
g83
(dp7160
g85
I0
sg86
I0
sg87
I3
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7161
sg106
(lp7162
sg108
(lp7163
sg110
(dp7164
g76
I1
ssg112
(lp7165
(dp7166
g179
(lp7167
(dp7168
g79
g4584
sg81
(dp7169
g83
(dp7170
g85
I1
sg86
I0
sg87
I5
sg88
I12
sg89
I0
sg90
I1
sg91
I2
sg92
I0
ssg93
(lp7171
sg106
(lp7172
sg108
(lp7173
sg110
(dp7174
g38
I1
sg39
I1
ssg112
(lp7175
(dp7176
g179
(lp7177
(dp7178
g79
g4584
sg81
(dp7179
g83
(dp7180
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7181
sg106
(lp7182
sg108
(lp7183
sg110
(dp7184
sg112
(lp7185
ssg114
S'genxcmp if: 5 option: 2 if: 1 option: 1 if: 1 option: 1'
p7186
sg116
(dp7187
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (test_annot.anntyp != ref_annot.anntyp || test_annot.subtyp != ref_annot.subtyp'
p7188
sa(dp7189
g179
(lp7190
(dp7191
g79
g4584
sg81
(dp7192
g83
(dp7193
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7194
sg106
(lp7195
sg108
(lp7196
sg110
(dp7197
sg112
(lp7198
ssg114
S'genxcmp if: 5 option: 2 if: 1 option: 1 if: 2 option: 1'
p7199
sg116
(dp7200
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (test_annot.subtyp != ref_annot.subtyp || test_annot.chan != ref_annot.chan'
p7201
sa(dp7202
g179
(lp7203
(dp7204
g79
g4584
sg81
(dp7205
g83
(dp7206
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7207
sg106
(lp7208
sg108
(lp7209
sg110
(dp7210
sg112
(lp7211
ssg114
S'genxcmp if: 5 option: 2 if: 1 option: 1 if: 3 option: 1'
p7212
sg116
(dp7213
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (*ref_annot.aux)'
p7214
sa(dp7215
g179
(lp7216
(dp7217
g79
g4584
sg81
(dp7218
g83
(dp7219
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7220
sg106
(lp7221
sg108
(lp7222
sg110
(dp7223
sg112
(lp7224
ssg114
S'genxcmp if: 5 option: 2 if: 1 option: 1 if: 4 option: 1'
p7225
sg116
(dp7226
g118
I0
sg119
I0
sg120
I1
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (*test_annot.aux)'
p7227
sa(dp7228
g179
(lp7229
(dp7230
g79
g4584
sg81
(dp7231
g83
(dp7232
g85
I0
sg86
I0
sg87
I1
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7233
sg106
(lp7234
sg108
(lp7235
sg110
(dp7236
sg112
(lp7237
ssg114
S'genxcmp if: 5 option: 2 if: 1 option: 1 if: 5 option: 1'
p7238
sg116
(dp7239
g118
I0
sg119
I0
sg120
I1
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (alen > 254)'
p7240
sa(dp7241
g179
(lp7242
(dp7243
g79
g4584
sg81
(dp7244
g83
(dp7245
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7246
sg106
(lp7247
sg108
(lp7248
sg110
(dp7249
sg112
(lp7250
ssg114
S'genxcmp if: 5 option: 2 if: 1 option: 1 if: 6 option: 1'
p7251
sg116
(dp7252
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (!ref_annot.aux)'
p7253
sa(dp7254
g179
(lp7255
(dp7256
g79
g4584
sg81
(dp7257
g83
(dp7258
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7259
sg106
(lp7260
sg108
(lp7261
sg110
(dp7262
sg112
(lp7263
ssg114
S'genxcmp if: 5 option: 2 if: 1 option: 1 if: 7 option: 1'
p7264
sg116
(dp7265
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (!test_annot.aux)'
p7266
sassg114
S'genxcmp if: 5 option: 2 if: 1 option: 1'
p7267
sg116
(dp7268
g118
I1
sg119
I100
sg120
I79
sg121
I421
sg122
I0
sg123
I90
sg124
I0
sg125
I343
ssa(dp7269
g79
g4584
sg81
(dp7270
g83
(dp7271
g85
I1
sg86
I0
sg87
I3
sg88
I6
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp7272
sg106
(lp7273
sg108
(lp7274
sg110
(dp7275
g41
I1
sg38
I1
ssg112
(lp7276
(dp7277
g179
(lp7278
(dp7279
g79
g4584
sg81
(dp7280
g83
(dp7281
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7282
sg106
(lp7283
sg108
(lp7284
sg110
(dp7285
sg112
(lp7286
ssg114
S'genxcmp if: 5 option: 2 if: 1 option: 2 if: 1 option: 1'
p7287
sg116
(dp7288
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (*ref_annot.aux)'
p7289
sa(dp7290
g179
(lp7291
(dp7292
g79
g4584
sg81
(dp7293
g83
(dp7294
g85
I0
sg86
I0
sg87
I1
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7295
sg106
(lp7296
sg108
(lp7297
sg110
(dp7298
sg112
(lp7299
ssg114
S'genxcmp if: 5 option: 2 if: 1 option: 2 if: 2 option: 1'
p7300
sg116
(dp7301
g118
I0
sg119
I0
sg120
I1
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (alen > 254)'
p7302
sa(dp7303
g179
(lp7304
(dp7305
g79
g4584
sg81
(dp7306
g83
(dp7307
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7308
sg106
(lp7309
sg108
(lp7310
sg110
(dp7311
sg112
(lp7312
ssg114
S'genxcmp if: 5 option: 2 if: 1 option: 2 if: 3 option: 1'
p7313
sg116
(dp7314
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (!ref_annot.aux)'
p7315
sassg114
S'genxcmp if: 5 option: 2 if: 1 option: 2'
p7316
sg116
(dp7317
g118
I1
sg119
I37
sg120
I30
sg121
I167
sg122
I0
sg123
I32
sg124
I0
sg125
I134
ssasg191
S"if (t - T <= match_dt && (t - T < abs(t - Tprime) || Aprime == 'O'))"
p7318
sassg114
S'genxcmp if: 5 option: 2'
p7319
sg116
(dp7320
g118
I1
sg119
I101
sg120
I82
sg121
I421
sg122
I0
sg123
I91
sg124
I0
sg125
I349
ssasg191
S'if (t < T)'
p7321
sassg114
g48
sg116
(dp7322
g118
I4
sg119
I101
sg120
I97
sg121
I436
sg122
I0
sg123
I102
sg124
I7
sg125
I375
ssa(dp7323
g79
g4584
sg81
(dp7324
g83
(dp7325
g85
I0
sg86
I0
sg87
I1
sg88
I59
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7326
sg106
(lp7327
sg108
(lp7328
sg110
(dp7329
sg112
(lp7330
(dp7331
g179
(lp7332
(dp7333
g79
g4584
sg81
(dp7334
g83
(dp7335
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7336
sg106
(lp7337
sg108
(lp7338
sg110
(dp7339
sg112
(lp7340
ssg114
S'NewInit if: 1 option: 1'
p7341
sg116
(dp7342
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (annopen(record, an, 2) < 0)'
p7343
sassg114
g49
sg116
(dp7344
g118
I0
sg119
I0
sg120
I1
sg121
I59
sg122
I0
sg123
I0
sg124
I0
sg125
I1
ssa(dp7345
g79
g4584
sg81
(dp7346
g83
(dp7347
g85
I0
sg86
I0
sg87
I73
sg88
I8
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp7348
sg106
(lp7349
sg108
(lp7350
sg110
(dp7351
sg112
(lp7352
ssg114
g50
sg116
(dp7353
g118
I0
sg119
I0
sg120
I73
sg121
I8
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssa(dp7354
g79
S'MATCH.CPP'
p7355
sg81
(dp7356
g83
(dp7357
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7358
(dp7359
g96
(dp7360
g79
g7355
sg81
(dp7361
g83
(dp7362
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7363
(dp7364
g96
(dp7365
g79
g7355
sg81
(dp7366
g83
(dp7367
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7368
sg106
(lp7369
sg108
(lp7370
sg110
(dp7371
sg112
(lp7372
ssg114
S'ResetMatch for: 1 for: 1'
p7373
sg116
(dp7374
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
F8.0
sg127
g128
sg116
(dp7375
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F9.0
sg122
F0.0
sg123
F0.0
sg124
F8.0
sg125
F8.0
ssg130
S'tor (j = 0; j < 8; ++j)'
p7376
sg132
(dp7377
g79
g7355
sg81
(dp7378
g83
(dp7379
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7380
sg106
(lp7381
sg108
(lp7382
sg110
(dp7383
sg112
(lp7384
ssg114
g141
sg116
(dp7385
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp7386
sg108
(lp7387
sg110
(dp7388
sg112
(lp7389
ssg114
S'ResetMatch for: 1'
p7390
sg116
(dp7391
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F11.0
sg122
F0.0
sg123
F0.0
sg124
F8.0
sg125
F8.0
sssg126
I8
sg127
g128
sg116
(dp7392
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F89.0
sg122
F0.0
sg123
F0.0
sg124
F72.0
sg125
F72.0
ssg130
S'tor (i = 0; i < MAXTYPES; ++i)'
p7393
sg132
(dp7394
g79
g7355
sg81
(dp7395
g83
(dp7396
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7397
sg106
(lp7398
sg108
(lp7399
sg110
(dp7400
sg112
(lp7401
ssg114
g141
sg116
(dp7402
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp7403
sg108
(lp7404
sg110
(dp7405
sg112
(lp7406
ssg114
g51
sg116
(dp7407
g118
F0.0
sg119
F0.0
sg120
F0.0
sg121
F90.0
sg122
F0.0
sg123
F0.0
sg124
F72.0
sg125
F72.0
ssa(dp7408
g79
g7355
sg81
(dp7409
g83
(dp7410
g85
I3
sg86
I1
sg87
I2
sg88
I14
sg89
I0
sg90
I1
sg91
I3
sg92
I0
ssg93
(lp7411
(dp7412
g96
(dp7413
g79
g7355
sg81
(dp7414
g83
(dp7415
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7416
sg106
(lp7417
sg108
(lp7418
sg110
(dp7419
sg112
(lp7420
(dp7421
g179
(lp7422
(dp7423
g79
g7355
sg81
(dp7424
g83
(dp7425
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7426
sg106
(lp7427
sg108
(lp7428
sg110
(dp7429
sg112
(lp7430
ssg114
S'CompareBeats for: 1 if: 1 option: 1'
p7431
sg116
(dp7432
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp7433
g79
g7355
sg81
(dp7434
g83
(dp7435
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7436
sg106
(lp7437
sg108
(lp7438
sg110
(dp7439
sg112
(lp7440
ssg114
S'CompareBeats for: 1 if: 1 option: 2'
p7441
sg116
(dp7442
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (beat1[i] > max)'
p7443
sassg114
S'CompareBeats for: 1'
p7444
sg116
(dp7445
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I2
sssg126
I30
sg127
g128
sg116
(dp7446
g118
I0
sg119
I0
sg120
I30
sg121
I61
sg122
I0
sg123
I0
sg124
I30
sg125
I90
ssg130
S'tor (i = MATCH_START + 1; i < MATCH_END; ++i)'
p7447
sg132
(dp7448
g79
g7355
sg81
(dp7449
g83
(dp7450
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7451
sg106
(lp7452
sg108
(lp7453
sg110
(dp7454
sg112
(lp7455
ssg114
g141
sg116
(dp7456
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp7457
g96
(dp7458
g79
g7355
sg81
(dp7459
g83
(dp7460
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7461
sg106
(lp7462
sg108
(lp7463
sg110
(dp7464
sg112
(lp7465
(dp7466
g179
(lp7467
(dp7468
g79
g7355
sg81
(dp7469
g83
(dp7470
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7471
sg106
(lp7472
sg108
(lp7473
sg110
(dp7474
sg112
(lp7475
ssg114
S'CompareBeats for: 2 if: 1 option: 1'
p7476
sg116
(dp7477
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp7478
g79
g7355
sg81
(dp7479
g83
(dp7480
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7481
sg106
(lp7482
sg108
(lp7483
sg110
(dp7484
sg112
(lp7485
ssg114
S'CompareBeats for: 2 if: 1 option: 2'
p7486
sg116
(dp7487
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (beat2[i] > max)'
p7488
sassg114
S'CompareBeats for: 2'
p7489
sg116
(dp7490
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I2
sssg126
I30
sg127
g128
sg116
(dp7491
g118
I0
sg119
I0
sg120
I30
sg121
I61
sg122
I0
sg123
I0
sg124
I30
sg125
I90
ssg130
S'tor (i = MATCH_START + 1; i < MATCH_END; ++i)'
p7492
sg132
(dp7493
g79
g7355
sg81
(dp7494
g83
(dp7495
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7496
sg106
(lp7497
sg108
(lp7498
sg110
(dp7499
sg112
(lp7500
ssg114
g141
sg116
(dp7501
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp7502
g96
(dp7503
g79
g7355
sg81
(dp7504
g83
(dp7505
g85
I1
sg86
I0
sg87
I8
sg88
I7
sg89
I0
sg90
I1
sg91
I2
sg92
I0
ssg93
(lp7506
(dp7507
g96
(dp7508
g79
g7355
sg81
(dp7509
g83
(dp7510
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7511
sg106
(lp7512
sg108
(lp7513
sg110
(dp7514
sg112
(lp7515
ssg114
S'CompareBeats for: 3 for: 1'
p7516
sg116
(dp7517
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssg126
I60
sg127
g128
sg116
(dp7518
g118
I0
sg119
I0
sg120
I120
sg121
I2
sg122
I120
sg123
I0
sg124
I60
sg125
I60
ssg130
S'tor (i = FIDMARK - (MATCH_LENGTH >> 1), meanDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p7519
sg132
(dp7520
g79
g7355
sg81
(dp7521
g83
(dp7522
g85
I0
sg86
I0
sg87
I2
sg88
I2
sg89
I2
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7523
sg106
(lp7524
sg108
(lp7525
sg110
(dp7526
sg112
(lp7527
ssg114
g141
sg116
(dp7528
g118
I0
sg119
I0
sg120
I2
sg121
I2
sg122
I2
sg123
I0
sg124
I0
sg125
I0
sssa(dp7529
g96
(dp7530
g79
g7355
sg81
(dp7531
g83
(dp7532
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7533
sg106
(lp7534
sg108
(lp7535
sg110
(dp7536
sg112
(lp7537
ssg114
S'CompareBeats for: 3 for: 2'
p7538
sg116
(dp7539
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssg126
I60
sg127
g128
sg116
(dp7540
g118
I0
sg119
I0
sg120
I120
sg121
I2
sg122
I120
sg123
I0
sg124
I60
sg125
I60
ssg130
S'tor (i = FIDMARK - (MATCH_LENGTH >> 1), beatDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p7541
sg132
(dp7542
g79
g7355
sg81
(dp7543
g83
(dp7544
g85
I0
sg86
I0
sg87
I2
sg88
I2
sg89
I2
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7545
sg106
(lp7546
sg108
(lp7547
sg110
(dp7548
sg112
(lp7549
ssg114
g141
sg116
(dp7550
g118
I0
sg119
I0
sg120
I2
sg121
I2
sg122
I2
sg123
I0
sg124
I0
sg125
I0
sssasg106
(lp7551
sg108
(lp7552
sg110
(dp7553
g76
I1
ssg112
(lp7554
(dp7555
g179
(lp7556
(dp7557
g79
g7355
sg81
(dp7558
g83
(dp7559
g85
I0
sg86
I0
sg87
I1
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7560
sg106
(lp7561
sg108
(lp7562
sg110
(dp7563
sg112
(lp7564
ssg114
S'CompareBeats for: 3 if: 1 option: 1'
p7565
sg116
(dp7566
g118
I0
sg119
I0
sg120
I1
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp7567
g79
g7355
sg81
(dp7568
g83
(dp7569
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7570
sg106
(lp7571
sg108
(lp7572
sg110
(dp7573
sg112
(lp7574
ssg114
S'CompareBeats for: 3 if: 1 option: 2'
p7575
sg116
(dp7576
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (shift == -MAX_SHIFT)'
p7577
sassg114
S'CompareBeats for: 3'
p7578
sg116
(dp7579
g118
I1
sg119
I1
sg120
I249
sg121
I13
sg122
I240
sg123
I3
sg124
I120
sg125
I124
sssg126
I8
sg127
g128
sg116
(dp7580
g118
I8
sg119
I8
sg120
I2000
sg121
I105
sg122
I1920
sg123
I24
sg124
I968
sg125
I1000
ssg130
S'tor (shift = -MAX_SHIFT; shift <= MAX_SHIFT; ++shift)'
p7581
sg132
(dp7582
g79
g7355
sg81
(dp7583
g83
(dp7584
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7585
sg106
(lp7586
sg108
(lp7587
sg110
(dp7588
sg112
(lp7589
ssg114
g141
sg116
(dp7590
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp7591
sg108
(lp7592
sg110
(dp7593
sg112
(lp7594
ssg114
g52
sg116
(dp7595
g118
I11
sg119
I9
sg120
I2062
sg121
I241
sg122
I1920
sg123
I27
sg124
I1028
sg125
I1180
ssa(dp7596
g79
g7355
sg81
(dp7597
g83
(dp7598
g85
I2
sg86
I1
sg87
I3
sg88
I12
sg89
I0
sg90
I1
sg91
I2
sg92
I0
ssg93
(lp7599
(dp7600
g96
(dp7601
g79
g7355
sg81
(dp7602
g83
(dp7603
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7604
sg106
(lp7605
sg108
(lp7606
sg110
(dp7607
sg112
(lp7608
(dp7609
g179
(lp7610
(dp7611
g79
g7355
sg81
(dp7612
g83
(dp7613
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7614
sg106
(lp7615
sg108
(lp7616
sg110
(dp7617
sg112
(lp7618
ssg114
S'CompareBeats2 for: 1 if: 1 option: 1'
p7619
sg116
(dp7620
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp7621
g79
g7355
sg81
(dp7622
g83
(dp7623
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7624
sg106
(lp7625
sg108
(lp7626
sg110
(dp7627
sg112
(lp7628
ssg114
S'CompareBeats2 for: 1 if: 1 option: 2'
p7629
sg116
(dp7630
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (beat1[i] > max)'
p7631
sassg114
S'CompareBeats2 for: 1'
p7632
sg116
(dp7633
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I2
sssg126
I30
sg127
g128
sg116
(dp7634
g118
I0
sg119
I0
sg120
I30
sg121
I61
sg122
I0
sg123
I0
sg124
I30
sg125
I90
ssg130
S'tor (i = MATCH_START + 1; i < MATCH_END; ++i)'
p7635
sg132
(dp7636
g79
g7355
sg81
(dp7637
g83
(dp7638
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7639
sg106
(lp7640
sg108
(lp7641
sg110
(dp7642
sg112
(lp7643
ssg114
g141
sg116
(dp7644
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp7645
g96
(dp7646
g79
g7355
sg81
(dp7647
g83
(dp7648
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7649
sg106
(lp7650
sg108
(lp7651
sg110
(dp7652
sg112
(lp7653
(dp7654
g179
(lp7655
(dp7656
g79
g7355
sg81
(dp7657
g83
(dp7658
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7659
sg106
(lp7660
sg108
(lp7661
sg110
(dp7662
sg112
(lp7663
ssg114
S'CompareBeats2 for: 2 if: 1 option: 1'
p7664
sg116
(dp7665
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp7666
g79
g7355
sg81
(dp7667
g83
(dp7668
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7669
sg106
(lp7670
sg108
(lp7671
sg110
(dp7672
sg112
(lp7673
ssg114
S'CompareBeats2 for: 2 if: 1 option: 2'
p7674
sg116
(dp7675
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (beat2[i] > max)'
p7676
sassg114
S'CompareBeats2 for: 2'
p7677
sg116
(dp7678
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I2
sssg126
I30
sg127
g128
sg116
(dp7679
g118
I0
sg119
I0
sg120
I30
sg121
I61
sg122
I0
sg123
I0
sg124
I30
sg125
I90
ssg130
S'tor (i = MATCH_START + 1; i < MATCH_END; ++i)'
p7680
sg132
(dp7681
g79
g7355
sg81
(dp7682
g83
(dp7683
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7684
sg106
(lp7685
sg108
(lp7686
sg110
(dp7687
sg112
(lp7688
ssg114
g141
sg116
(dp7689
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp7690
g96
(dp7691
g79
g7355
sg81
(dp7692
g83
(dp7693
g85
I1
sg86
I0
sg87
I8
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7694
(dp7695
g96
(dp7696
g79
g7355
sg81
(dp7697
g83
(dp7698
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7699
sg106
(lp7700
sg108
(lp7701
sg110
(dp7702
sg112
(lp7703
ssg114
S'CompareBeats2 for: 3 for: 1'
p7704
sg116
(dp7705
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssg126
I60
sg127
g128
sg116
(dp7706
g118
I0
sg119
I0
sg120
I120
sg121
I2
sg122
I120
sg123
I0
sg124
I60
sg125
I60
ssg130
S'tor (i = FIDMARK - (MATCH_LENGTH >> 1), meanDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p7707
sg132
(dp7708
g79
g7355
sg81
(dp7709
g83
(dp7710
g85
I0
sg86
I0
sg87
I2
sg88
I2
sg89
I2
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7711
sg106
(lp7712
sg108
(lp7713
sg110
(dp7714
sg112
(lp7715
ssg114
g141
sg116
(dp7716
g118
I0
sg119
I0
sg120
I2
sg121
I2
sg122
I2
sg123
I0
sg124
I0
sg125
I0
sssa(dp7717
g96
(dp7718
g79
g7355
sg81
(dp7719
g83
(dp7720
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7721
sg106
(lp7722
sg108
(lp7723
sg110
(dp7724
sg112
(lp7725
ssg114
S'CompareBeats2 for: 3 for: 2'
p7726
sg116
(dp7727
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssg126
I60
sg127
g128
sg116
(dp7728
g118
I0
sg119
I0
sg120
I120
sg121
I2
sg122
I120
sg123
I0
sg124
I60
sg125
I60
ssg130
S'tor (i = FIDMARK - (MATCH_LENGTH >> 1), beatDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p7729
sg132
(dp7730
g79
g7355
sg81
(dp7731
g83
(dp7732
g85
I0
sg86
I0
sg87
I2
sg88
I2
sg89
I2
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7733
sg106
(lp7734
sg108
(lp7735
sg110
(dp7736
sg112
(lp7737
ssg114
g141
sg116
(dp7738
g118
I0
sg119
I0
sg120
I2
sg121
I2
sg122
I2
sg123
I0
sg124
I0
sg125
I0
sssasg106
(lp7739
sg108
(lp7740
sg110
(dp7741
g76
I1
ssg112
(lp7742
(dp7743
g179
(lp7744
(dp7745
g79
g7355
sg81
(dp7746
g83
(dp7747
g85
I0
sg86
I0
sg87
I1
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7748
sg106
(lp7749
sg108
(lp7750
sg110
(dp7751
sg112
(lp7752
ssg114
S'CompareBeats2 for: 3 if: 1 option: 1'
p7753
sg116
(dp7754
g118
I0
sg119
I0
sg120
I1
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp7755
g79
g7355
sg81
(dp7756
g83
(dp7757
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7758
sg106
(lp7759
sg108
(lp7760
sg110
(dp7761
sg112
(lp7762
ssg114
S'CompareBeats2 for: 3 if: 1 option: 2'
p7763
sg116
(dp7764
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (shift == -MAX_SHIFT)'
p7765
sassg114
S'CompareBeats2 for: 3'
p7766
sg116
(dp7767
g118
I1
sg119
I1
sg120
I249
sg121
I9
sg122
I240
sg123
I1
sg124
I120
sg125
I124
sssg126
I9
sg127
g128
sg116
(dp7768
g118
I9
sg119
I9
sg120
I2250
sg121
I82
sg122
I2160
sg123
I9
sg124
I1089
sg125
I1125
ssg130
S'tor (shift = -MAX_SHIFT; shift <= MAX_SHIFT; ++shift)'
p7769
sg132
(dp7770
g79
g7355
sg81
(dp7771
g83
(dp7772
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7773
sg106
(lp7774
sg108
(lp7775
sg110
(dp7776
sg112
(lp7777
ssg114
g141
sg116
(dp7778
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp7779
sg108
(lp7780
sg110
(dp7781
sg112
(lp7782
ssg114
g53
sg116
(dp7783
g118
I11
sg119
I10
sg120
I2313
sg121
I216
sg122
I2160
sg123
I11
sg124
I1149
sg125
I1305
ssa(dp7784
g79
g7355
sg81
(dp7785
g83
(dp7786
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7787
(dp7788
g96
(dp7789
g79
g7355
sg81
(dp7790
g83
(dp7791
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7792
sg106
(lp7793
sg108
(lp7794
sg110
(dp7795
sg112
(lp7796
(dp7797
g179
(lp7798
(dp7799
g79
g7355
sg81
(dp7800
g83
(dp7801
g85
I0
sg86
I0
sg87
I2
sg88
I4
sg89
I1
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp7802
sg106
(lp7803
sg108
(lp7804
sg110
(dp7805
sg112
(lp7806
ssg114
S'UpdateBeat for: 1 if: 1 option: 1'
p7807
sg116
(dp7808
g118
I0
sg119
I0
sg120
I2
sg121
I4
sg122
I1
sg123
I1
sg124
I0
sg125
I0
ssasg191
S'if ((i + shift >= 0) && (i + shift < BEATLGTH))'
p7809
sassg114
S'UpdateBeat for: 1'
p7810
sg116
(dp7811
g118
I0
sg119
I0
sg120
I4
sg121
I4
sg122
I1
sg123
I1
sg124
I0
sg125
I2
sssg126
I100
sg127
g128
sg116
(dp7812
g118
I0
sg119
I0
sg120
I400
sg121
I401
sg122
I100
sg123
I100
sg124
I100
sg125
I300
ssg130
S'tor (i = 0; i < BEATLGTH; ++i)'
p7813
sg132
(dp7814
g79
g7355
sg81
(dp7815
g83
(dp7816
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7817
sg106
(lp7818
sg108
(lp7819
sg110
(dp7820
sg112
(lp7821
ssg114
g141
sg116
(dp7822
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp7823
sg108
(lp7824
sg110
(dp7825
sg112
(lp7826
ssg114
g54
sg116
(dp7827
g118
I0
sg119
I0
sg120
I400
sg121
I401
sg122
I100
sg123
I100
sg124
I100
sg125
I300
ssa(dp7828
g79
g7355
sg81
(dp7829
g83
(dp7830
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7831
sg106
(lp7832
sg108
(lp7833
sg110
(dp7834
sg112
(lp7835
ssg114
g55
sg116
(dp7836
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp7837
g79
g7355
sg81
(dp7838
g83
(dp7839
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7840
sg106
(lp7841
sg108
(lp7842
sg110
(dp7843
sg112
(lp7844
ssg114
g56
sg116
(dp7845
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp7846
g79
g7355
sg81
(dp7847
g83
(dp7848
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7849
sg106
(lp7850
sg108
(lp7851
sg110
(dp7852
sg112
(lp7853
ssg114
g57
sg116
(dp7854
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp7855
g79
g7355
sg81
(dp7856
g83
(dp7857
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7858
sg106
(lp7859
sg108
(lp7860
sg110
(dp7861
sg112
(lp7862
ssg114
g58
sg116
(dp7863
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp7864
g79
g7355
sg81
(dp7865
g83
(dp7866
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7867
sg106
(lp7868
sg108
(lp7869
sg110
(dp7870
sg112
(lp7871
(dp7872
g179
(lp7873
(dp7874
g79
g7355
sg81
(dp7875
g83
(dp7876
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7877
sg106
(lp7878
sg108
(lp7879
sg110
(dp7880
sg112
(lp7881
ssg114
S'GetBeatClass if: 1 option: 1'
p7882
sg116
(dp7883
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (type == MAXTYPES)'
p7884
sassg114
g59
sg116
(dp7885
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I1
ssa(dp7886
g79
g7355
sg81
(dp7887
g83
(dp7888
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7889
sg106
(lp7890
sg108
(lp7891
sg110
(dp7892
sg112
(lp7893
ssg114
g60
sg116
(dp7894
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp7895
g79
g7355
sg81
(dp7896
g83
(dp7897
g85
I1
sg86
I1
sg87
I4
sg88
I9
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7898
(dp7899
g96
(dp7900
g79
g7355
sg81
(dp7901
g83
(dp7902
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7903
sg106
(lp7904
sg108
(lp7905
sg110
(dp7906
sg112
(lp7907
ssg114
S'NewBeatType for: 1'
p7908
sg116
(dp7909
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssg126
I8
sg127
g128
sg116
(dp7910
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I16
sg125
I8
ssg130
S'tor (i = 0; i < TypeCount; ++i)'
p7911
sg132
(dp7912
g79
g7355
sg81
(dp7913
g83
(dp7914
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7915
sg106
(lp7916
sg108
(lp7917
sg110
(dp7918
sg112
(lp7919
ssg114
g141
sg116
(dp7920
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp7921
g96
(dp7922
g79
g7355
sg81
(dp7923
g83
(dp7924
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7925
sg106
(lp7926
sg108
(lp7927
sg110
(dp7928
sg112
(lp7929
ssg114
S'NewBeatType for: 2'
p7930
sg116
(dp7931
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I8
sg127
g128
sg116
(dp7932
g118
I0
sg119
I0
sg120
I0
sg121
I9
sg122
I0
sg123
I0
sg124
I8
sg125
I8
ssg130
S'tor (i = 0; i < BEATLGTH; ++i)'
p7933
sg132
(dp7934
g79
g7355
sg81
(dp7935
g83
(dp7936
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7937
sg106
(lp7938
sg108
(lp7939
sg110
(dp7940
sg112
(lp7941
ssg114
g141
sg116
(dp7942
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp7943
sg108
(lp7944
sg110
(dp7945
g20
I1
sg26
I1
ssg112
(lp7946
(dp7947
g179
(lp7948
(dp7949
g79
g7355
sg81
(dp7950
g83
(dp7951
g85
I1
sg86
I1
sg87
I3
sg88
I8
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7952
(dp7953
g96
(dp7954
g79
g7355
sg81
(dp7955
g83
(dp7956
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7957
sg106
(lp7958
sg108
(lp7959
sg110
(dp7960
sg112
(lp7961
ssg114
S'NewBeatType if: 1 option: 1 for: 1'
p7962
sg116
(dp7963
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I100
sg127
g128
sg116
(dp7964
g118
I0
sg119
I0
sg120
I0
sg121
I101
sg122
I0
sg123
I0
sg124
I100
sg125
I100
ssg130
S'tor (i = 0; i < BEATLGTH; ++i)'
p7965
sg132
(dp7966
g79
g7355
sg81
(dp7967
g83
(dp7968
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp7969
sg106
(lp7970
sg108
(lp7971
sg110
(dp7972
sg112
(lp7973
ssg114
g141
sg116
(dp7974
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp7975
sg108
(lp7976
sg110
(dp7977
g26
I1
ssg112
(lp7978
ssg114
S'NewBeatType if: 1 option: 1'
p7979
sg116
(dp7980
g118
I1
sg119
I41
sg120
I440
sg121
I216
sg122
I117
sg123
I151
sg124
I476
sg125
I494
ssasg191
S'if (TypeCount < MAXTYPES)'
p7981
sa(dp7982
g179
(lp7983
(dp7984
g79
g7355
sg81
(dp7985
g83
(dp7986
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7987
(dp7988
g96
(dp7989
g79
g7355
sg81
(dp7990
g83
(dp7991
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp7992
sg106
(lp7993
sg108
(lp7994
sg110
(dp7995
sg112
(lp7996
(dp7997
g179
(lp7998
(dp7999
g79
g7355
sg81
(dp8000
g83
(dp8001
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8002
sg106
(lp8003
sg108
(lp8004
sg110
(dp8005
sg112
(lp8006
ssg114
S'NewBeatType if: 2 option: 1 for: 1 if: 1 option: 1'
p8007
sg116
(dp8008
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp8009
g79
g7355
sg81
(dp8010
g83
(dp8011
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8012
sg106
(lp8013
sg108
(lp8014
sg110
(dp8015
sg112
(lp8016
ssg114
S'NewBeatType if: 2 option: 1 for: 1 if: 1 option: 2'
p8017
sg116
(dp8018
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (BeatCounts[i] < BeatCounts[mcType])'
p8019
sa(dp8020
g179
(lp8021
(dp8022
g79
g7355
sg81
(dp8023
g83
(dp8024
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8025
sg106
(lp8026
sg108
(lp8027
sg110
(dp8028
sg112
(lp8029
ssg114
S'NewBeatType if: 2 option: 1 for: 1 if: 2 option: 1'
p8030
sg116
(dp8031
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (BeatsSinceLastMatch[i] > BeatsSinceLastMatch[mcType])'
p8032
sassg114
S'NewBeatType if: 2 option: 1 for: 1'
p8033
sg116
(dp8034
g118
I0
sg119
I0
sg120
I0
sg121
I3
sg122
I0
sg123
I0
sg124
I0
sg125
I3
sssg126
I8
sg127
g128
sg116
(dp8035
g118
I0
sg119
I0
sg120
I0
sg121
I25
sg122
I0
sg123
I0
sg124
I8
sg125
I32
ssg130
S'tor (i = 1; i < MAXTYPES; ++i)'
p8036
sg132
(dp8037
g79
g7355
sg81
(dp8038
g83
(dp8039
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8040
sg106
(lp8041
sg108
(lp8042
sg110
(dp8043
sg112
(lp8044
ssg114
g141
sg116
(dp8045
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp8046
sg108
(lp8047
sg110
(dp8048
sg112
(lp8049
ssg114
S'NewBeatType if: 2 option: 1'
p8050
sg116
(dp8051
g118
I0
sg119
I0
sg120
I0
sg121
I26
sg122
I0
sg123
I0
sg124
I8
sg125
I32
ssasg191
S'if (mcType == -1)'
p8052
sassg114
g61
sg116
(dp8053
g118
I2
sg119
I82
sg120
I881
sg121
I554
sg122
I234
sg123
I302
sg124
I1063
sg125
I1299
ssa(dp8054
g79
g7355
sg81
(dp8055
g83
(dp8056
g85
I0
sg86
I0
sg87
I0
sg88
I5
sg89
I0
sg90
I1
sg91
I4
sg92
I0
ssg93
(lp8057
(dp8058
g96
(dp8059
g79
g7355
sg81
(dp8060
g83
(dp8061
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8062
sg106
(lp8063
sg108
(lp8064
sg110
(dp8065
g52
I1
ssg112
(lp8066
(dp8067
g179
(lp8068
(dp8069
g79
g7355
sg81
(dp8070
g83
(dp8071
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8072
sg106
(lp8073
sg108
(lp8074
sg110
(dp8075
sg112
(lp8076
ssg114
S'BestMorphMatch for: 1 if: 1 option: 1'
p8077
sg116
(dp8078
g118
I0
sg119
I0
sg120
I0
sg121
I3
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp8079
g79
g7355
sg81
(dp8080
g83
(dp8081
g85
I0
sg86
I0
sg87
I0
sg88
I5
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8082
sg106
(lp8083
sg108
(lp8084
sg110
(dp8085
sg112
(lp8086
ssg114
S'BestMorphMatch for: 1 if: 1 option: 2'
p8087
sg116
(dp8088
g118
I0
sg119
I0
sg120
I0
sg121
I5
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp8089
g79
g7355
sg81
(dp8090
g83
(dp8091
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8092
sg106
(lp8093
sg108
(lp8094
sg110
(dp8095
sg112
(lp8096
ssg114
S'BestMorphMatch for: 1 if: 1 option: 3'
p8097
sg116
(dp8098
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp8099
g79
g7355
sg81
(dp8100
g83
(dp8101
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8102
sg106
(lp8103
sg108
(lp8104
sg110
(dp8105
sg112
(lp8106
ssg114
S'BestMorphMatch for: 1 if: 1 option: 4'
p8107
sg116
(dp8108
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (type == 0)'
p8109
sassg114
S'BestMorphMatch for: 1'
p8110
sg116
(dp8111
g118
I11
sg119
I9
sg120
I2062
sg121
I247
sg122
I1920
sg123
I27
sg124
I1028
sg125
I1184
sssg126
I8
sg127
g128
sg116
(dp8112
g118
I88
sg119
I72
sg120
I16496
sg121
I1977
sg122
I15360
sg123
I216
sg124
I8232
sg125
I9480
ssg130
S'tor (type = 0; type < TypeCount; ++type)'
p8113
sg132
(dp8114
g79
g7355
sg81
(dp8115
g83
(dp8116
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8117
sg106
(lp8118
sg108
(lp8119
sg110
(dp8120
sg112
(lp8121
ssg114
g141
sg116
(dp8122
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp8123
sg108
(lp8124
sg110
(dp8125
g53
I1
ssg112
(lp8126
(dp8127
g179
(lp8128
(dp8129
g79
g7355
sg81
(dp8130
g83
(dp8131
g85
I0
sg86
I1
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I3
sg92
I0
ssg93
(lp8132
sg106
(lp8133
sg108
(lp8134
sg110
(dp8135
sg112
(lp8136
ssg114
S'BestMorphMatch if: 1 option: 1'
p8137
sg116
(dp8138
g118
I0
sg119
I1
sg120
I0
sg121
I3
sg122
I0
sg123
I3
sg124
I0
sg125
I0
ssasg191
S'if (TypeCount == 0)'
p8139
sa(dp8140
g179
(lp8141
(dp8142
g79
g7355
sg81
(dp8143
g83
(dp8144
g85
I0
sg86
I0
sg87
I0
sg88
I3
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp8145
sg106
(lp8146
sg108
(lp8147
sg110
(dp8148
g72
I1
sg52
I1
sg53
I2
ssg112
(lp8149
(dp8150
g179
(lp8151
(dp8152
g79
g7355
sg81
(dp8153
g83
(dp8154
g85
I0
sg86
I0
sg87
I0
sg88
I8
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp8155
sg106
(lp8156
sg108
(lp8157
sg110
(dp8158
sg112
(lp8159
ssg114
S'BestMorphMatch if: 2 option: 1 if: 1 option: 1'
p8160
sg116
(dp8161
g118
I0
sg119
I0
sg120
I0
sg121
I8
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssa(dp8162
g79
g7355
sg81
(dp8163
g83
(dp8164
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp8165
sg106
(lp8166
sg108
(lp8167
sg110
(dp8168
sg112
(lp8169
ssg114
S'BestMorphMatch if: 2 option: 1 if: 1 option: 2'
p8170
sg116
(dp8171
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssasg191
S'if (nextDiff2 < bestDiff2)'
p8172
sa(dp8173
g179
(lp8174
(dp8175
g79
g7355
sg81
(dp8176
g83
(dp8177
g85
I0
sg86
I0
sg87
I1
sg88
I5
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8178
(dp8179
g96
(dp8180
g79
g7355
sg81
(dp8181
g83
(dp8182
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I1
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8183
sg106
(lp8184
sg108
(lp8185
sg110
(dp8186
sg112
(lp8187
ssg114
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 for: 1'
p8188
sg116
(dp8189
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I1
sg123
I0
sg124
I0
sg125
I0
sssg126
I100
sg127
g128
sg116
(dp8190
g118
I0
sg119
I0
sg120
I100
sg121
I101
sg122
I100
sg123
I0
sg124
I100
sg125
I100
ssg130
S'tor (i = 0; i < BEATLGTH; ++i)'
p8191
sg132
(dp8192
g79
g7355
sg81
(dp8193
g83
(dp8194
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8195
sg106
(lp8196
sg108
(lp8197
sg110
(dp8198
sg112
(lp8199
ssg114
g141
sg116
(dp8200
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp8201
g96
(dp8202
g79
g7355
sg81
(dp8203
g83
(dp8204
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8205
sg106
(lp8206
sg108
(lp8207
sg110
(dp8208
g71
I1
ssg112
(lp8209
ssg114
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 for: 2'
p8210
sg116
(dp8211
g118
I0
sg119
I0
sg120
I1
sg121
I220
sg122
I0
sg123
I0
sg124
I196
sg125
I377
sssg126
I7
sg127
g128
sg116
(dp8212
g118
I0
sg119
I0
sg120
I14
sg121
I1541
sg122
I0
sg123
I0
sg124
I1379
sg125
I2646
ssg130
S'tor (type = bestMatch; type < TypeCount - 1; ++type)'
p8213
sg132
(dp8214
g79
g7355
sg81
(dp8215
g83
(dp8216
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8217
sg106
(lp8218
sg108
(lp8219
sg110
(dp8220
sg112
(lp8221
ssg114
g141
sg116
(dp8222
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp8223
sg108
(lp8224
sg110
(dp8225
g21
I1
ssg112
(lp8226
(dp8227
g179
(lp8228
(dp8229
g79
g7355
sg81
(dp8230
g83
(dp8231
g85
I0
sg86
I0
sg87
I1
sg88
I3
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8232
(dp8233
g96
(dp8234
g79
g7355
sg81
(dp8235
g83
(dp8236
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8237
sg106
(lp8238
sg108
(lp8239
sg110
(dp8240
sg112
(lp8241
(dp8242
g179
(lp8243
(dp8244
g79
g7355
sg81
(dp8245
g83
(dp8246
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I1
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8247
sg106
(lp8248
sg108
(lp8249
sg110
(dp8250
sg112
(lp8251
ssg114
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 1 option: 1 for: 1 if: 1 option: 1'
p8252
sg116
(dp8253
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I1
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((i + shift > 0) && (i + shift < BEATLGTH))'
p8254
sassg114
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 1 option: 1 for: 1'
p8255
sg116
(dp8256
g118
I0
sg119
I0
sg120
I4
sg121
I1
sg122
I1
sg123
I0
sg124
I0
sg125
I2
sssg126
I100
sg127
g128
sg116
(dp8257
g118
I0
sg119
I0
sg120
I400
sg121
I101
sg122
I100
sg123
I0
sg124
I100
sg125
I300
ssg130
S'tor (i = 0; i < BEATLGTH; ++i)'
p8258
sg132
(dp8259
g79
g7355
sg81
(dp8260
g83
(dp8261
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8262
sg106
(lp8263
sg108
(lp8264
sg110
(dp8265
sg112
(lp8266
ssg114
g141
sg116
(dp8267
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp8268
g96
(dp8269
g79
g7355
sg81
(dp8270
g83
(dp8271
g85
I0
sg86
I0
sg87
I1
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8272
sg106
(lp8273
sg108
(lp8274
sg110
(dp8275
g71
I1
ssg112
(lp8276
ssg114
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 1 option: 1 for: 2'
p8277
sg116
(dp8278
g118
I0
sg119
I0
sg120
I1
sg121
I220
sg122
I0
sg123
I0
sg124
I196
sg125
I377
sssg126
I7
sg127
g128
sg116
(dp8279
g118
I0
sg119
I0
sg120
I14
sg121
I1541
sg122
I0
sg123
I0
sg124
I1379
sg125
I2646
ssg130
S'tor (type = nextBest; type < TypeCount - 1; ++type)'
p8280
sg132
(dp8281
g79
g7355
sg81
(dp8282
g83
(dp8283
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8284
sg106
(lp8285
sg108
(lp8286
sg110
(dp8287
sg112
(lp8288
ssg114
g141
sg116
(dp8289
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp8290
sg108
(lp8291
sg110
(dp8292
g21
I1
ssg112
(lp8293
(dp8294
g179
(lp8295
(dp8296
g79
g7355
sg81
(dp8297
g83
(dp8298
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8299
sg106
(lp8300
sg108
(lp8301
sg110
(dp8302
sg112
(lp8303
ssg114
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 1 option: 1 if: 1 option: 1'
p8304
sg116
(dp8305
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((BeatClassifications[bestMatch] == NORMAL)'
p8306
sa(dp8307
g179
(lp8308
(dp8309
g79
g7355
sg81
(dp8310
g83
(dp8311
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8312
sg106
(lp8313
sg108
(lp8314
sg110
(dp8315
sg112
(lp8316
ssg114
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 1 option: 1 if: 2 option: 1'
p8317
sg116
(dp8318
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'else if ((BeatClassifications[bestMatch] == PVC)'
p8319
sassg114
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 1 option: 1'
p8320
sg116
(dp8321
g118
I0
sg119
I0
sg120
I417
sg121
I1835
sg122
I100
sg123
I0
sg124
I1659
sg125
I3309
ssasg191
S'if (bestMatch < nextBest)'
p8322
sa(dp8323
g179
(lp8324
(dp8325
g79
g7355
sg81
(dp8326
g83
(dp8327
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8328
sg106
(lp8329
sg108
(lp8330
sg110
(dp8331
sg112
(lp8332
ssg114
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 2 option: 1'
p8333
sg116
(dp8334
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((BeatClassifications[bestMatch] == NORMAL)'
p8335
sa(dp8336
g179
(lp8337
(dp8338
g79
g7355
sg81
(dp8339
g83
(dp8340
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8341
sg106
(lp8342
sg108
(lp8343
sg110
(dp8344
sg112
(lp8345
ssg114
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 3 option: 1'
p8346
sg116
(dp8347
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'else if ((BeatClassifications[bestMatch] == PVC)'
p8348
sassg114
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1'
p8349
sg116
(dp8350
g118
I0
sg119
I0
sg120
I534
sg121
I3672
sg122
I200
sg123
I0
sg124
I3319
sg125
I6419
ssasg191
S'if ((beatDiff < COMBINE_LIMIT) && ((*mi2 < 1.0) || (!MinimumBeatVariation(nextBest))))'
p8351
sassg114
S'BestMorphMatch if: 2 option: 1'
p8352
sg116
(dp8353
g118
I33
sg119
I30
sg120
I7230
sg121
I4365
sg122
I6440
sg123
I51
sg124
I6653
sg125
I10232
ssasg191
S'if ((minDiff < MATCH_LIMIT) && (nextDiff < MATCH_LIMIT) && (TypeCount > 1))'
p8354
sassg114
g62
sg116
(dp8355
g118
I132
sg119
I113
sg120
I26039
sg121
I6566
sg122
I23960
sg123
I285
sg124
I16034
sg125
I21021
ssa(dp8356
g79
g7355
sg81
(dp8357
g83
(dp8358
g85
I1
sg86
I0
sg87
I6
sg88
I7
sg89
I1
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8359
(dp8360
g96
(dp8361
g79
g7355
sg81
(dp8362
g83
(dp8363
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8364
sg106
(lp8365
sg108
(lp8366
sg110
(dp8367
sg112
(lp8368
(dp8369
g179
(lp8370
(dp8371
g79
g7355
sg81
(dp8372
g83
(dp8373
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8374
sg106
(lp8375
sg108
(lp8376
sg110
(dp8377
sg112
(lp8378
ssg114
S'UpdateBeatType for: 1 if: 1 option: 1'
p8379
sg116
(dp8380
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp8381
g79
g7355
sg81
(dp8382
g83
(dp8383
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8384
sg106
(lp8385
sg108
(lp8386
sg110
(dp8387
sg112
(lp8388
ssg114
S'UpdateBeatType for: 1 if: 1 option: 2'
p8389
sg116
(dp8390
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (i != matchType)'
p8391
sassg114
S'UpdateBeatType for: 1'
p8392
sg116
(dp8393
g118
I0
sg119
I0
sg120
I2
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I2
sssg126
I8
sg127
g128
sg116
(dp8394
g118
I0
sg119
I0
sg120
I16
sg121
I17
sg122
I0
sg123
I0
sg124
I8
sg125
I24
ssg130
S'tor (i = 0; i < TypeCount; ++i)'
p8395
sg132
(dp8396
g79
g7355
sg81
(dp8397
g83
(dp8398
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8399
sg106
(lp8400
sg108
(lp8401
sg110
(dp8402
sg112
(lp8403
ssg114
g141
sg116
(dp8404
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp8405
g96
(dp8406
g79
g7355
sg81
(dp8407
g83
(dp8408
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8409
sg106
(lp8410
sg108
(lp8411
sg110
(dp8412
sg112
(lp8413
ssg114
S'UpdateBeatType for: 2'
p8414
sg116
(dp8415
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
F-1.0
sg127
g128
sg116
(dp8416
g118
F-0.0
sg119
F-0.0
sg120
F-2.0
sg121
F0.0
sg122
F-0.0
sg123
F-0.0
sg124
F-1.0
sg125
F-1.0
ssg130
S'tor (i = MAXPREV - 1; i > 0; --i)'
p8417
sg132
(dp8418
g79
g7355
sg81
(dp8419
g83
(dp8420
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8421
sg106
(lp8422
sg108
(lp8423
sg110
(dp8424
sg112
(lp8425
ssg114
g141
sg116
(dp8426
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp8427
sg108
(lp8428
sg110
(dp8429
g54
I1
sg26
I1
ssg112
(lp8430
(dp8431
g179
(lp8432
(dp8433
g79
g7355
sg81
(dp8434
g83
(dp8435
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8436
sg106
(lp8437
sg108
(lp8438
sg110
(dp8439
sg112
(lp8440
ssg114
S'UpdateBeatType if: 1 option: 1'
p8441
sg116
(dp8442
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (BeatCounts[matchType] == 1)'
p8443
sa(dp8444
g179
(lp8445
(dp8446
g79
g7355
sg81
(dp8447
g83
(dp8448
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8449
sg106
(lp8450
sg108
(lp8451
sg110
(dp8452
sg112
(lp8453
ssg114
S'UpdateBeatType if: 2 option: 1'
p8454
sg116
(dp8455
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((i + shiftAdj >= 0) && (i + shiftAdj < BEATLGTH))'
p8456
sassg114
g63
sg116
(dp8457
g118
F1.0
sg119
F40.0
sg120
F859.0
sg121
F533.0
sg122
F218.0
sg123
F251.0
sg124
F483.0
sg125
F720.0
ssa(dp8458
g79
g7355
sg81
(dp8459
g83
(dp8460
g85
I0
sg86
I1
sg87
I2
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8461
(dp8462
g96
(dp8463
g79
g7355
sg81
(dp8464
g83
(dp8465
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8466
sg106
(lp8467
sg108
(lp8468
sg110
(dp8469
sg112
(lp8470
(dp8471
g179
(lp8472
(dp8473
g79
g7355
sg81
(dp8474
g83
(dp8475
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8476
sg106
(lp8477
sg108
(lp8478
sg110
(dp8479
sg112
(lp8480
ssg114
S'GetDominantType for: 1 if: 1 option: 1'
p8481
sg116
(dp8482
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((BeatClassifications[type] == NORMAL) && (BeatCounts[type] > maxCount))'
p8483
sassg114
S'GetDominantType for: 1'
p8484
sg116
(dp8485
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I2
sssg126
I8
sg127
g128
sg116
(dp8486
g118
I0
sg119
I0
sg120
I0
sg121
I17
sg122
I0
sg123
I0
sg124
I8
sg125
I24
ssg130
S'tor (type = 0; type < MAXTYPES; ++type)'
p8487
sg132
(dp8488
g79
g7355
sg81
(dp8489
g83
(dp8490
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8491
sg106
(lp8492
sg108
(lp8493
sg110
(dp8494
sg112
(lp8495
ssg114
g141
sg116
(dp8496
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp8497
sg108
(lp8498
sg110
(dp8499
sg112
(lp8500
(dp8501
g179
(lp8502
(dp8503
g79
g7355
sg81
(dp8504
g83
(dp8505
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8506
(dp8507
g96
(dp8508
g79
g7355
sg81
(dp8509
g83
(dp8510
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8511
sg106
(lp8512
sg108
(lp8513
sg110
(dp8514
sg112
(lp8515
ssg114
S'GetDominantType if: 1 option: 1 for: 1'
p8516
sg116
(dp8517
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I8
sg127
g128
sg116
(dp8518
g118
I0
sg119
I0
sg120
I8
sg121
I10
sg122
I0
sg123
I0
sg124
I8
sg125
I8
ssg130
S'tor (type = 0, totalCount = 0; type < TypeCount; ++type)'
p8519
sg132
(dp8520
g79
g7355
sg81
(dp8521
g83
(dp8522
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8523
sg106
(lp8524
sg108
(lp8525
sg110
(dp8526
sg112
(lp8527
ssg114
g141
sg116
(dp8528
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp8529
sg108
(lp8530
sg110
(dp8531
sg112
(lp8532
(dp8533
g179
(lp8534
(dp8535
g79
g7355
sg81
(dp8536
g83
(dp8537
g85
I0
sg86
I0
sg87
I2
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8538
sg106
(lp8539
sg108
(lp8540
sg110
(dp8541
sg112
(lp8542
ssg114
S'GetDominantType if: 1 option: 1 if: 1 option: 1'
p8543
sg116
(dp8544
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (totalCount > 300)'
p8545
sa(dp8546
g179
(lp8547
(dp8548
g79
g7355
sg81
(dp8549
g83
(dp8550
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8551
sg106
(lp8552
sg108
(lp8553
sg110
(dp8554
sg112
(lp8555
ssg114
S'GetDominantType if: 1 option: 1 if: 2 option: 1'
p8556
sg116
(dp8557
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (BeatCounts[type] > maxCount)'
p8558
sassg114
S'GetDominantType if: 1 option: 1'
p8559
sg116
(dp8560
g118
I0
sg119
I0
sg120
I10
sg121
I13
sg122
I0
sg123
I0
sg124
I8
sg125
I10
ssasg191
S'if (maxType == -1)'
p8561
sassg114
g64
sg116
(dp8562
g118
I0
sg119
I1
sg120
I12
sg121
I32
sg122
I0
sg123
I0
sg124
I16
sg125
I35
ssa(dp8563
g79
g7355
sg81
(dp8564
g83
(dp8565
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8566
sg106
(lp8567
sg108
(lp8568
sg110
(dp8569
sg112
(lp8570
(dp8571
g179
(lp8572
(dp8573
g79
g7355
sg81
(dp8574
g83
(dp8575
g85
I0
sg86
I0
sg87
I2
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8576
sg106
(lp8577
sg108
(lp8578
sg110
(dp8579
sg112
(lp8580
ssg114
S'ClearLastNewType if: 1 option: 1'
p8581
sg116
(dp8582
g118
I0
sg119
I0
sg120
I2
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (TypeCount != 0)'
p8583
sassg114
g65
sg116
(dp8584
g118
I0
sg119
I0
sg120
I2
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I1
ssa(dp8585
g79
g7355
sg81
(dp8586
g83
(dp8587
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8588
sg106
(lp8589
sg108
(lp8590
sg110
(dp8591
sg112
(lp8592
ssg114
g66
sg116
(dp8593
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp8594
g79
g7355
sg81
(dp8595
g83
(dp8596
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8597
sg106
(lp8598
sg108
(lp8599
sg110
(dp8600
sg112
(lp8601
ssg114
g67
sg116
(dp8602
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp8603
g79
g7355
sg81
(dp8604
g83
(dp8605
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8606
sg106
(lp8607
sg108
(lp8608
sg110
(dp8609
sg112
(lp8610
ssg114
g68
sg116
(dp8611
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp8612
g79
g7355
sg81
(dp8613
g83
(dp8614
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8615
sg106
(lp8616
sg108
(lp8617
sg110
(dp8618
g53
I1
ssg112
(lp8619
ssg114
g69
sg116
(dp8620
g118
I11
sg119
I11
sg120
I2313
sg121
I216
sg122
I2160
sg123
I11
sg124
I1149
sg125
I1305
ssa(dp8621
g79
g7355
sg81
(dp8622
g83
(dp8623
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8624
sg106
(lp8625
sg108
(lp8626
sg110
(dp8627
g53
I1
ssg112
(lp8628
ssg114
g70
sg116
(dp8629
g118
I11
sg119
I11
sg120
I2313
sg121
I216
sg122
I2160
sg123
I11
sg124
I1149
sg125
I1305
ssa(dp8630
g79
g7355
sg81
(dp8631
g83
(dp8632
g85
I0
sg86
I0
sg87
I0
sg88
I8
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8633
(dp8634
g96
(dp8635
g79
g7355
sg81
(dp8636
g83
(dp8637
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8638
sg106
(lp8639
sg108
(lp8640
sg110
(dp8641
sg112
(lp8642
ssg114
S'BeatCopy for: 1'
p8643
sg116
(dp8644
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I8
sg127
g128
sg116
(dp8645
g118
I0
sg119
I0
sg120
I0
sg121
I9
sg122
I0
sg123
I0
sg124
I8
sg125
I8
ssg130
S'tor (i = 0; i < BEATLGTH; ++i)'
p8646
sg132
(dp8647
g79
g7355
sg81
(dp8648
g83
(dp8649
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8650
sg106
(lp8651
sg108
(lp8652
sg110
(dp8653
sg112
(lp8654
ssg114
g141
sg116
(dp8655
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssa(dp8656
g96
(dp8657
g79
g7355
sg81
(dp8658
g83
(dp8659
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8660
sg106
(lp8661
sg108
(lp8662
sg110
(dp8663
sg112
(lp8664
ssg114
S'BeatCopy for: 2'
p8665
sg116
(dp8666
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I8
sg127
g128
sg116
(dp8667
g118
I0
sg119
I0
sg120
I0
sg121
I17
sg122
I0
sg123
I0
sg124
I8
sg125
I8
ssg130
S'tor (i = 0; i < MAXPREV; ++i)'
p8668
sg132
(dp8669
g79
g7355
sg81
(dp8670
g83
(dp8671
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8672
sg106
(lp8673
sg108
(lp8674
sg110
(dp8675
sg112
(lp8676
ssg114
g141
sg116
(dp8677
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp8678
sg108
(lp8679
sg110
(dp8680
g20
I1
ssg112
(lp8681
ssg114
g71
sg116
(dp8682
g118
I0
sg119
I0
sg120
I0
sg121
I220
sg122
I0
sg123
I0
sg124
I196
sg125
I377
ssa(dp8683
g79
g7355
sg81
(dp8684
g83
(dp8685
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8686
(dp8687
g96
(dp8688
g79
g7355
sg81
(dp8689
g83
(dp8690
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8691
sg106
(lp8692
sg108
(lp8693
sg110
(dp8694
sg112
(lp8695
(dp8696
g179
(lp8697
(dp8698
g79
g7355
sg81
(dp8699
g83
(dp8700
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8701
sg106
(lp8702
sg108
(lp8703
sg110
(dp8704
sg112
(lp8705
ssg114
S'MinimumBeatVariation for: 1 if: 1 option: 1'
p8706
sg116
(dp8707
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (MIs[type][i] > 0.5)'
p8708
sassg114
S'MinimumBeatVariation for: 1'
p8709
sg116
(dp8710
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I1
sssg126
I8
sg127
g128
sg116
(dp8711
g118
I0
sg119
I0
sg120
I8
sg121
I9
sg122
I0
sg123
I0
sg124
I8
sg125
I16
ssg130
S'tor (i = 0; i < MAXTYPES; ++i)'
p8712
sg132
(dp8713
g79
g7355
sg81
(dp8714
g83
(dp8715
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8716
sg106
(lp8717
sg108
(lp8718
sg110
(dp8719
sg112
(lp8720
ssg114
g141
sg116
(dp8721
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp8722
sg108
(lp8723
sg110
(dp8724
sg112
(lp8725
(dp8726
g179
(lp8727
(dp8728
g79
g7355
sg81
(dp8729
g83
(dp8730
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8731
sg106
(lp8732
sg108
(lp8733
sg110
(dp8734
sg112
(lp8735
ssg114
S'MinimumBeatVariation if: 1 option: 1'
p8736
sg116
(dp8737
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp8738
g79
g7355
sg81
(dp8739
g83
(dp8740
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8741
sg106
(lp8742
sg108
(lp8743
sg110
(dp8744
sg112
(lp8745
ssg114
S'MinimumBeatVariation if: 1 option: 2'
p8746
sg116
(dp8747
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (i == MAXTYPES)'
p8748
sassg114
g72
sg116
(dp8749
g118
I0
sg119
I1
sg120
I8
sg121
I9
sg122
I0
sg123
I0
sg124
I8
sg125
I18
ssa(dp8750
g79
g7355
sg81
(dp8751
g83
(dp8752
g85
I1
sg86
I1
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8753
(dp8754
g96
(dp8755
g79
g7355
sg81
(dp8756
g83
(dp8757
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8758
sg106
(lp8759
sg108
(lp8760
sg110
(dp8761
sg112
(lp8762
ssg114
S'WideBeatVariation for: 1'
p8763
sg116
(dp8764
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
sssg126
I8
sg127
g128
sg116
(dp8765
g118
I0
sg119
I0
sg120
I8
sg121
I10
sg122
I0
sg123
I0
sg124
I8
sg125
I8
ssg130
S'tor (i = 0, aveMI = 0; i < n; ++i)'
p8766
sg132
(dp8767
g79
g7355
sg81
(dp8768
g83
(dp8769
g85
I0
sg86
I0
sg87
I0
sg88
I2
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8770
sg106
(lp8771
sg108
(lp8772
sg110
(dp8773
sg112
(lp8774
ssg114
g141
sg116
(dp8775
g118
I0
sg119
I0
sg120
I0
sg121
I2
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp8776
sg108
(lp8777
sg110
(dp8778
sg112
(lp8779
(dp8780
g179
(lp8781
(dp8782
g79
g7355
sg81
(dp8783
g83
(dp8784
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8785
sg106
(lp8786
sg108
(lp8787
sg110
(dp8788
sg112
(lp8789
ssg114
S'WideBeatVariation if: 1 option: 1'
p8790
sg116
(dp8791
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (n > 8)'
p8792
sa(dp8793
g179
(lp8794
(dp8795
g79
g7355
sg81
(dp8796
g83
(dp8797
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8798
sg106
(lp8799
sg108
(lp8800
sg110
(dp8801
sg112
(lp8802
ssg114
S'WideBeatVariation if: 2 option: 1'
p8803
sg116
(dp8804
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp8805
g79
g7355
sg81
(dp8806
g83
(dp8807
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8808
sg106
(lp8809
sg108
(lp8810
sg110
(dp8811
sg112
(lp8812
ssg114
S'WideBeatVariation if: 2 option: 2'
p8813
sg116
(dp8814
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (aveMI > WIDE_VAR_LIMIT)'
p8815
sassg114
g73
sg116
(dp8816
g118
I1
sg119
I1
sg120
I8
sg121
I13
sg122
I0
sg123
I0
sg124
I8
sg125
I11
ssa(dp8817
g79
S'NOISECHK.CPP'
p8818
sg81
(dp8819
g83
(dp8820
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8821
sg106
(lp8822
sg108
(lp8823
sg110
(dp8824
sg112
(lp8825
ssg114
g74
sg116
(dp8826
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp8827
g79
g8818
sg81
(dp8828
g83
(dp8829
g85
I0
sg86
I1
sg87
I4
sg88
I4
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8830
sg106
(lp8831
sg108
(lp8832
sg110
(dp8833
sg112
(lp8834
(dp8835
g179
(lp8836
(dp8837
g79
g8818
sg81
(dp8838
g83
(dp8839
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8840
sg106
(lp8841
sg108
(lp8842
sg110
(dp8843
sg112
(lp8844
ssg114
S'NoiseCheck if: 1 option: 1'
p8845
sg116
(dp8846
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++NBPtr == NB_LENGTH)'
p8847
sa(dp8848
g179
(lp8849
(dp8850
g79
g8818
sg81
(dp8851
g83
(dp8852
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8853
sg106
(lp8854
sg108
(lp8855
sg110
(dp8856
sg112
(lp8857
ssg114
S'NoiseCheck if: 2 option: 1'
p8858
sg116
(dp8859
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (ncStart > ncEnd + MS250)'
p8860
sa(dp8861
g179
(lp8862
(dp8863
g79
g8818
sg81
(dp8864
g83
(dp8865
g85
I1
sg86
I0
sg87
I3
sg88
I6
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp8866
(dp8867
g96
(dp8868
g79
g8818
sg81
(dp8869
g83
(dp8870
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8871
sg106
(lp8872
sg108
(lp8873
sg110
(dp8874
sg112
(lp8875
(dp8876
g179
(lp8877
(dp8878
g79
g8818
sg81
(dp8879
g83
(dp8880
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8881
sg106
(lp8882
sg108
(lp8883
sg110
(dp8884
sg112
(lp8885
ssg114
S'NoiseCheck if: 3 option: 1 for: 1 if: 1 option: 1'
p8886
sg116
(dp8887
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp8888
g79
g8818
sg81
(dp8889
g83
(dp8890
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8891
sg106
(lp8892
sg108
(lp8893
sg110
(dp8894
sg112
(lp8895
ssg114
S'NoiseCheck if: 3 option: 1 for: 1 if: 1 option: 2'
p8896
sg116
(dp8897
g118
I0
sg119
I0
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (NoiseBuffer[ptr] > ncMax)'
p8898
sa(dp8899
g179
(lp8900
(dp8901
g79
g8818
sg81
(dp8902
g83
(dp8903
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8904
sg106
(lp8905
sg108
(lp8906
sg110
(dp8907
sg112
(lp8908
ssg114
S'NoiseCheck if: 3 option: 1 for: 1 if: 2 option: 1'
p8909
sg116
(dp8910
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (++ptr == NB_LENGTH)'
p8911
sassg114
S'NoiseCheck if: 3 option: 1 for: 1'
p8912
sg116
(dp8913
g118
I0
sg119
I0
sg120
I0
sg121
I3
sg122
I0
sg123
I0
sg124
I1
sg125
I3
sssg126
I50
sg127
g128
sg116
(dp8914
g118
I0
sg119
I0
sg120
I50
sg121
I151
sg122
I0
sg123
I0
sg124
I100
sg125
I200
ssg130
S'tor (i = 0; i < ncStart - ncEnd; ++i)'
p8915
sg132
(dp8916
g79
g8818
sg81
(dp8917
g83
(dp8918
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I1
ssg93
(lp8919
sg106
(lp8920
sg108
(lp8921
sg110
(dp8922
sg112
(lp8923
ssg114
g141
sg116
(dp8924
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I1
sg125
I0
sssasg106
(lp8925
sg108
(lp8926
sg110
(dp8927
sg112
(lp8928
(dp8929
g179
(lp8930
(dp8931
g79
g8818
sg81
(dp8932
g83
(dp8933
g85
I0
sg86
I0
sg87
I1
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8934
sg106
(lp8935
sg108
(lp8936
sg110
(dp8937
sg112
(lp8938
ssg114
S'NoiseCheck if: 3 option: 1 if: 1 option: 1'
p8939
sg116
(dp8940
g118
I0
sg119
I0
sg120
I1
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if (ptr < 0) '
p8941
sassg114
S'NoiseCheck if: 3 option: 1'
p8942
sg116
(dp8943
g118
I1
sg119
I0
sg120
I54
sg121
I158
sg122
I0
sg123
I1
sg124
I100
sg125
I201
ssa(dp8944
g79
g8818
sg81
(dp8945
g83
(dp8946
g85
I0
sg86
I0
sg87
I0
sg88
I1
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8947
sg106
(lp8948
sg108
(lp8949
sg110
(dp8950
sg112
(lp8951
ssg114
S'NoiseCheck if: 3 option: 2'
p8952
sg116
(dp8953
g118
I0
sg119
I0
sg120
I0
sg121
I1
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssasg191
S'if ((delay != 0) && (ncStart < NB_LENGTH) && (ncStart > ncEnd))'
p8954
sassg114
g75
sg116
(dp8955
g118
I1
sg119
I1
sg120
I59
sg121
I164
sg122
I0
sg123
I1
sg124
I101
sg125
I207
ssa(dp8956
g79
S'absdefinition.cpp'
p8957
sg81
(dp8958
g83
(dp8959
g85
I0
sg86
I0
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8960
sg106
(lp8961
sg108
(lp8962
sg110
(dp8963
sg112
(lp8964
(dp8965
g179
(lp8966
(dp8967
g79
g8957
sg81
(dp8968
g83
(dp8969
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I0
sg92
I0
ssg93
(lp8970
sg106
(lp8971
sg108
(lp8972
sg110
(dp8973
sg112
(lp8974
ssg114
S'abs if: 1 option: 1'
p8975
sg116
(dp8976
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I0
sg124
I0
sg125
I0
ssa(dp8977
g79
g8957
sg81
(dp8978
g83
(dp8979
g85
I0
sg86
I1
sg87
I0
sg88
I0
sg89
I0
sg90
I1
sg91
I1
sg92
I0
ssg93
(lp8980
sg106
(lp8981
sg108
(lp8982
sg110
(dp8983
sg112
(lp8984
ssg114
S'abs if: 1 option: 2'
p8985
sg116
(dp8986
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I1
sg124
I0
sg125
I0
ssasg191
S'if (a > 0)'
p8987
sassg114
g76
sg116
(dp8988
g118
I0
sg119
I1
sg120
I0
sg121
I0
sg122
I0
sg123
I1
sg124
I0
sg125
I2
ssaa(lp8989
S''
p8990
aS'postclas.h'
p8991
aS'WFDB.H'
p8992
aS'wfdb.h'
p8993
aS'RHYTHMCHK.CPP'
p8994
ag80
aS'qrsdet.h'
p8995
aS'rythmchk.h'
p8996
aS'ecgcodes.h'
p8997
aS'RHYTHMCHK.H'
p8998
ag389
aS'match.h'
p8999
ag1502
aS'hackery.cpp'
p9000
ag2448
aS'ECGMAP.H'
p9001
ag2721
aS'stdio.h'
p9002
aS'ECGCODES.H'
p9003
aS'analbeat.h'
p9004
ag3943
ag4196
ag4584
aS'ecgmap.h'
p9005
aS'bdac.h'
p9006
aS'POSTCLAS.H'
p9007
ag7355
aS'MATCH.H'
p9008
aS'ANALBEAT.H'
p9009
ag8818
aS'QRSDET.H'
p9010
ag8957
aa(lp9011
(lp9012
g8990
aa(lp9013
S'void ResetPostClassify();'
p9014
aS'void PostClassify('
p9015
aS'int* recentTypes, int domType, int* recentRRs, int width, double mi2, int rhythmClass);'
p9016
aS'int CheckPostClass(int type);'
p9017
aS'int CheckPCRhythm(int type);'
p9018
ag8990
aS'// yo yo yo stuff'
p9019
aa(lp9020
S'/* file: wfdb.h\t\tG. Moody\t13 June 1983'
p9021
aS'Last revised:   28 February 2001\twfdblib 10.1.6'
p9022
aS'WFDB library type, constant, structure, and function interface definitions'
p9023
ag8990
aS'_______________________________________________________________________________'
p9024
aS'wfdb: a library for reading and writing annotated waveforms (time series data)'
p9025
aS'Copyright (C) 2001 George B. Moody'
p9026
ag8990
aS'This library is free software; you can redistribute it and/or modify it under'
p9027
aS'the terms of the GNU Library General Public License as published by the Free'
p9028
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p9029
aS'later version.'
p9030
ag8990
aS'This library is distributed in the hope that it will be useful, but WITHOUT ANY'
p9031
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p9032
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p9033
aS'details.'
p9034
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p9035
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p9036
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p9037
ag8990
aS'You may contact the author by e-mail (george@mit.edu) or postal mail'
p9038
aS'(MIT Room E25-505A, Cambridge, MA 02139 USA).  For updates to this software,'
p9039
aS'please visit PhysioNet (http://www.physionet.org/).'
p9040
aS'_______________________________________________________________________________'
p9041
ag8990
aS'*/'
p9042
ag8990
aS'#ifndef wfdb_WFDB_H /* avoid multiple definitions */'
p9043
aS'#define wfdb_WFDB_H'
p9044
ag8990
aS'/* WFDB library version. */'
p9045
aS'#define WFDB_MAJOR 10'
p9046
aS'#define WFDB_MINOR 1'
p9047
aS'#define WFDB_RELEASE 6'
p9048
aS'#define WFDB_NETFILES 0 /* if 1, library includes code for HTTP, FTP clients */'
p9049
ag8990
aS'/* Determine what type of compiler is being used. */'
p9050
aS'#ifdef __STDC__ /* true for ANSI C compilers only */'
p9051
aS'#define wfdb_PROTO /* function prototypes will be needed */'
p9052
aS"#undef _WINDOWS /* we don't want MS-Windows API in this case */"
p9053
aS'#undef _WIN32 /* ... or 32-bit MS-Windows API either */'
p9054
aS'#endif'
p9055
ag8990
aS'#ifdef __cplusplus /* true for some C++ compilers */'
p9056
aS'#define wfdb_CPP'
p9057
aS'#define wfdb_PROTO'
p9058
aS'#endif'
p9059
ag8990
aS'#ifdef c_plusplus /* true for some other C++ compilers */'
p9060
aS'#define wfdb_CPP'
p9061
aS'#define wfdb_PROTO'
p9062
aS'#endif'
p9063
ag8990
aS'#ifdef _WIN32 /* true when compiling for 32-bit MS Windows */'
p9064
aS'#ifndef _WINDOWS'
p9065
aS'#define _WINDOWS'
p9066
aS'#endif'
p9067
aS'#endif'
p9068
ag8990
aS'#ifdef _WINDOWS /* true when compiling for MS Windows */'
p9069
aS'#define wfdb_PROTO'
p9070
aS'#endif'
p9071
ag8990
aS'#ifndef wfdb_PROTO /* should be true for K&R C compilers only */'
p9072
aS'#define wfdb_KRC'
p9073
aS'#define signed'
p9074
aS'#endif'
p9075
ag8990
aS'/* Simple data types */'
p9076
aS'typedef int WFDB_Sample; /* units are adus */'
p9077
aS'typedef long WFDB_Time; /* units are sample intervals */'
p9078
aS'typedef long WFDB_Date; /* units are days */'
p9079
aS'typedef double WFDB_Frequency; /* units are Hz (samples/second/signal) */'
p9080
aS'typedef double WFDB_Gain; /* units are adus per physical unit */'
p9081
aS'typedef unsigned int WFDB_Group; /* signal group number */'
p9082
aS'typedef unsigned int WFDB_Signal; /* signal number */'
p9083
aS'typedef unsigned int WFDB_Annotator; /* annotator number */'
p9084
ag8990
aS'/* Array sizes */'
p9085
aS'#define WFDB_MAXANN 2 /* maximum number of input or output annotators */'
p9086
aS'#define WFDB_MAXSIG 32 /* maximum number of input or output signals */'
p9087
aS'#define WFDB_MAXSPF 4 /* maximum number of samples per signal per frame */'
p9088
aS'#define WFDB_MAXRNL 11 /* maximum length of record name */'
p9089
aS"#define WFDB_MAXUSL 20 /* maximum length of WFDB_siginfo `.units' string */"
p9090
aS"#define WFDB_MAXDSL 60 /* maximum length of WFDB_siginfo `.desc' string */"
p9091
ag8990
aS"/* WFDB_anninfo '.stat' values */"
p9092
aS'#define WFDB_READ 0 /* standard input annotation file */'
p9093
aS'#define WFDB_WRITE 1 /* standard output annotation file */'
p9094
aS'#define WFDB_AHA_READ 2 /* AHA-format input annotation file */'
p9095
aS'#define WFDB_AHA_WRITE 3 /* AHA-format output annotation file */'
p9096
ag8990
aS"/* WFDB_siginfo '.fmt' values"
p9097
aS'FMT_LIST is suitable as an initializer for a static array; it lists all of'
p9098
aS'the legal values for the format field in a WFDB_siginfo structure.'
p9099
aS'fmt    meaning'
p9100
aS'0\tnull signal (nothing read or written)'
p9101
aS'8\t8-bit first differences'
p9102
aS"16\t16-bit 2's complement amplitudes, low byte first"
p9103
aS"61\t16-bit 2's complement amplitudes, high byte first"
p9104
aS'80\t8-bit offset binary amplitudes'
p9105
aS'160\t16-bit offset binary amplitudes'
p9106
aS'212\t2 12-bit amplitudes bit-packed in 3 bytes'
p9107
aS'310\t3 10-bit amplitudes bit-packed in 4 bytes'
p9108
aS'311    3 10-bit amplitudes bit-packed in 4 bytes'
p9109
aS'*/'
p9110
aS'#define WFDB_FMT_LIST                                                                              \\'
p9111
aS'{                                                                                              \\'
p9112
aS'0, 8, 16, 61, 80, 160, 212, 310, 311                                                       \\'
p9113
aS'}'
p9114
aS'#define WFDB_NFMTS 9 /* number of items in FMT_LIST */'
p9115
ag8990
aS'/* Default signal specifications */'
p9116
aS'#define WFDB_DEFFREQ 250.0 /* default sampling frequency (Hz) */'
p9117
aS'#define WFDB_DEFGAIN 200.0 /* default value for gain (adu/physical unit) */'
p9118
aS'#define WFDB_DEFRES 12 /* default value for ADC resolution (bits) */'
p9119
ag8990
aS'/* getvec operating modes */'
p9120
aS'#define WFDB_LOWRES 0 /* return one sample per signal per frame */'
p9121
aS'#define WFDB_HIGHRES                                                                               \\'
p9122
aS'1 /* return each sample of oversampled signals,                                                \\'
p9123
aS'duplicating samples of other signals */'
p9124
aS"/* calinfo '.caltype' values"
p9125
aS'WFDB_AC_COUPLED and WFDB_DC_COUPLED are used in combination with the pulse'
p9126
aS'shape definitions below to characterize calibration pulses. */'
p9127
aS'#define WFDB_AC_COUPLED 0 /* AC coupled signal */'
p9128
aS'#define WFDB_DC_COUPLED 1 /* DC coupled signal */'
p9129
aS'#define WFDB_CAL_SQUARE 2 /* square wave pulse */'
p9130
aS'#define WFDB_CAL_SINE 4 /* sine wave pulse */'
p9131
aS'#define WFDB_CAL_SAWTOOTH 6 /* sawtooth pulse */'
p9132
aS'#define WFDB_CAL_UNDEF 8 /* undefined pulse shape */'
p9133
ag8990
aS'/* Structure definitions */'
p9134
aS'struct WFDB_siginfo'
p9135
aS'{ /* signal information structure */'
p9136
aS'char* fname; /* filename of signal file */'
p9137
aS'char* desc; /* signal description */'
p9138
aS'char* units; /* physical units (mV unless otherwise specified) */'
p9139
aS'WFDB_Gain gain; /* gain (ADC units/physical unit, 0: uncalibrated) */'
p9140
aS'WFDB_Sample initval; /* initial value (that of sample number 0) */'
p9141
aS'WFDB_Group group; /* signal group number */'
p9142
aS'int fmt; /* format (8, 16, etc.) */'
p9143
aS'int spf; /* samples per frame (>1 for oversampled signals) */'
p9144
aS'int bsize; /* block size (for character special files only) */'
p9145
aS'int adcres; /* ADC resolution in bits */'
p9146
aS'int adczero; /* ADC output given 0 VDC input */'
p9147
aS'int baseline; /* ADC output given 0 physical units input */'
p9148
aS'long nsamp; /* number of samples (0: unspecified) */'
p9149
aS'int cksum; /* 16-bit checksum of all samples */'
p9150
aS'};'
p9151
ag8990
aS'struct WFDB_calinfo'
p9152
aS'{ /* calibration information structure */'
p9153
aS'double low; /* low level of calibration pulse in physical units */'
p9154
aS'double high; /* high level of calibration pulse in physical units */'
p9155
aS'double scale; /* customary plotting scale (physical units per cm) */'
p9156
aS'char* sigtype; /* signal type */'
p9157
aS'char* units; /* physical units */'
p9158
aS'int caltype; /* calibration pulse type (see definitions above) */'
p9159
aS'};'
p9160
ag8990
aS'struct WFDB_anninfo'
p9161
aS'{ /* annotator information structure */'
p9162
aS'char* name; /* annotator name */'
p9163
aS'int stat; /* file type/access code (READ, WRITE, etc.) */'
p9164
aS'};'
p9165
ag8990
aS'struct WFDB_ann'
p9166
aS'{ /* annotation structure */'
p9167
aS'WFDB_Time time; /* annotation time, in sample intervals from'
p9168
aS'the beginning of the record */'
p9169
aS'char anntyp; /* annotation type (< ACMAX, see <wfdb/ecgcodes.h> */'
p9170
aS'signed char subtyp; /* annotation subtype */'
p9171
aS'signed char chan; /* channel number */'
p9172
aS'signed char num; /* annotator number */'
p9173
aS'char* aux; /* pointer to auxiliary information */'
p9174
aS'};'
p9175
ag8990
aS'/* Composite data types */'
p9176
aS'typedef struct WFDB_siginfo WFDB_Siginfo;'
p9177
aS'typedef struct WFDB_calinfo WFDB_Calinfo;'
p9178
aS'typedef struct WFDB_anninfo WFDB_Anninfo;'
p9179
aS'typedef struct WFDB_ann WFDB_Annotation;'
p9180
ag8990
aS'/* Function types */'
p9181
aS'#ifndef _WINDOWS /* for everything *except* MS Windows applications */'
p9182
aS'typedef char* FSTRING;'
p9183
aS'typedef WFDB_Date FDATE;'
p9184
aS'typedef double FDOUBLE;'
p9185
aS'typedef WFDB_Frequency FFREQUENCY;'
p9186
aS'typedef int FINT;'
p9187
aS'typedef long FLONGINT;'
p9188
aS'typedef WFDB_Sample FSAMPLE;'
p9189
aS'typedef WFDB_Time FSITIME;'
p9190
aS'typedef void FVOID;'
p9191
aS'#else'
p9192
aS'#ifndef _WIN32 /* for 16-bit MS Windows applications using the WFDB DLL */'
p9193
aS"/* typedefs don't work properly with _far or _pascal -- must use #defines */"
p9194
aS'#define FSTRING char _far* _pascal'
p9195
aS'#define FDATE WFDB_Date _far _pascal'
p9196
aS'#define FDOUBLE double _far _pascal'
p9197
aS'#define FFREQUENCY WFDB_Frequency _far _pascal'
p9198
aS'#define FINT int _far _pascal'
p9199
aS'#define FLONGINT long _far _pascal'
p9200
aS'#define FSAMPLE WFDB_Sample _far _pascal'
p9201
aS'#define FSITIME WFDB_Time _far _pascal'
p9202
aS'#define FVOID void _far _pascal'
p9203
aS'#else /* for 32-bit MS Windows applications using the WFDB DLL */'
p9204
aS'#ifndef CALLBACK'
p9205
aS'#define CALLBACK __stdcall /* from windef.h */'
p9206
aS'#endif'
p9207
aS'#define FSTRING __declspec(dllexport) char* CALLBACK'
p9208
aS'#define FDATE __declspec(dllexport) WFDB_Date CALLBACK'
p9209
aS'#define FDOUBLE __declspec(dllexport) double CALLBACK'
p9210
aS'#define FFREQUENCY __declspec(dllexport) WFDB_Frequency CALLBACK'
p9211
aS'#define FINT __declspec(dllexport) int CALLBACK'
p9212
aS'#define FLONGINT __declspec(dllexport) long CALLBACK'
p9213
aS'#define FSAMPLE __declspec(dllexport) WFDB_Sample CALLBACK'
p9214
aS'#define FSITIME __declspec(dllexport) WFDB_Time CALLBACK'
p9215
aS'#define FVOID __declspec(dllexport) void CALLBACK'
p9216
aS'#endif'
p9217
aS'#endif'
p9218
ag8990
aS'/* Specify C linkage for C++ compilers. */'
p9219
aS'#ifdef wfdb_CPP'
p9220
aS'extern "C" {'
p9221
aS'#endif'
p9222
ag8990
aS'/* Define function prototypes for ANSI C compilers and C++ compilers */'
p9223
aS'#ifdef wfdb_PROTO'
p9224
aS'extern FINT annopen(char* record, WFDB_Anninfo* aiarray, unsigned int nann);'
p9225
aS'extern FINT isigopen(char* record, WFDB_Siginfo* siarray, int nsig);'
p9226
aS'extern FINT osigopen(char* record, WFDB_Siginfo* siarray, unsigned int nsig);'
p9227
aS'extern FINT osigfopen(WFDB_Siginfo* siarray, unsigned int nsig);'
p9228
aS'extern FINT wfdbinit(char* record, WFDB_Anninfo* aiarray, unsigned int nann, WFDB_Siginfo* siarray,'
p9229
aS'unsigned int nsig);'
p9230
aS'extern FINT getspf(void);'
p9231
aS'extern FVOID setgvmode(int mode);'
p9232
aS'extern FINT getvec(WFDB_Sample* vector);'
p9233
aS'extern FINT getframe(WFDB_Sample* vector);'
p9234
aS'extern FINT putvec(WFDB_Sample* vector);'
p9235
aS'extern FINT getann(WFDB_Annotator a, WFDB_Annotation* annot);'
p9236
aS'extern FINT ungetann(WFDB_Annotator a, WFDB_Annotation* annot);'
p9237
aS'extern FINT putann(WFDB_Annotator a, WFDB_Annotation* annot);'
p9238
aS'extern FINT isigsettime(WFDB_Time t);'
p9239
aS'extern FINT isgsettime(WFDB_Group g, WFDB_Time t);'
p9240
aS'extern FINT iannsettime(WFDB_Time t);'
p9241
aS'extern FSTRING ecgstr(int annotation_code);'
p9242
aS'extern FINT strecg(char* annotation_mnemonic_string);'
p9243
aS'extern FINT setecgstr(int annotation_code, char* annotation_mnemonic_string);'
p9244
aS'extern FSTRING annstr(int annotation_code);'
p9245
aS'extern FINT strann(char* annotation_mnemonic_string);'
p9246
aS'extern FINT setannstr(int annotation_code, char* annotation_mnemonic_string);'
p9247
aS'extern FSTRING anndesc(int annotation_code);'
p9248
aS'extern FINT setanndesc(int annotation_code, char* annotation_description);'
p9249
aS'extern FVOID iannclose(WFDB_Annotator a);'
p9250
aS'extern FVOID oannclose(WFDB_Annotator a);'
p9251
aS'extern FSTRING timstr(WFDB_Time t);'
p9252
aS'extern FSTRING mstimstr(WFDB_Time t);'
p9253
aS'extern FSITIME strtim(char* time_string);'
p9254
aS'extern FSTRING datstr(WFDB_Date d);'
p9255
aS'extern FDATE strdat(char* date_string);'
p9256
aS'extern FINT adumuv(WFDB_Signal s, WFDB_Sample a);'
p9257
aS'extern FSAMPLE muvadu(WFDB_Signal s, int microvolts);'
p9258
aS'extern FDOUBLE aduphys(WFDB_Signal s, WFDB_Sample a);'
p9259
aS'extern FSAMPLE physadu(WFDB_Signal s, double v);'
p9260
aS'extern FINT calopen(char* calibration_filename);'
p9261
aS'extern FINT getcal(char* description, char* units, WFDB_Calinfo* cal);'
p9262
aS'extern FINT putcal(WFDB_Calinfo* cal);'
p9263
aS'extern FINT newcal(char* calibration_filename);'
p9264
aS'extern FVOID flushcal(void);'
p9265
aS'extern FSTRING getinfo(char* record);'
p9266
aS'extern FINT putinfo(char* info);'
p9267
aS'extern FINT newheader(char* record);'
p9268
aS'extern FINT setheader(char* record, WFDB_Siginfo* siarray, unsigned int nsig);'
p9269
aS'extern FINT setmsheader(char* record, char** seg_names, unsigned int nsegments);'
p9270
aS'extern FINT wfdbgetskew(WFDB_Signal s);'
p9271
aS'extern FVOID wfdbsetskew(WFDB_Signal s, int skew);'
p9272
aS'extern FLONGINT wfdbgetstart(WFDB_Signal s);'
p9273
aS'extern FVOID wfdbsetstart(WFDB_Signal s, long bytes);'
p9274
aS'extern FVOID wfdbquit(void);'
p9275
aS'extern FFREQUENCY sampfreq(char* record);'
p9276
aS'extern FINT setsampfreq(WFDB_Frequency sampling_frequency);'
p9277
aS'extern FFREQUENCY getcfreq(void);'
p9278
aS'extern FVOID setcfreq(WFDB_Frequency counter_frequency);'
p9279
aS'extern FDOUBLE getbasecount(void);'
p9280
aS'extern FVOID setbasecount(double count);'
p9281
aS'extern FINT setbasetime(char* time_string);'
p9282
aS'extern FVOID wfdbquiet(void);'
p9283
aS'extern FVOID wfdbverbose(void);'
p9284
aS'extern FSTRING wfdberror(void);'
p9285
aS'extern FVOID setwfdb(char* database_path_string);'
p9286
aS'extern FSTRING getwfdb(void);'
p9287
aS'extern FINT setibsize(int input_buffer_size);'
p9288
aS'extern FINT setobsize(int output_buffer_size);'
p9289
aS'extern FSTRING wfdbfile(char* file_type, char* record);'
p9290
aS'extern FVOID wfdbflush(void);'
p9291
aS'#endif'
p9292
ag8990
aS'#ifdef wfdb_CPP'
p9293
ag9114
aS'#endif'
p9294
ag8990
aS'#ifdef wfdb_KRC /* declare only function return types for K&R C compilers */'
p9295
aS'extern FINT annopen(), isigopen(), osigopen(), wfdbinit(), getspf(), getvec(), getframe(), putvec(),'
p9296
aS'getann(), ungetann(), putann(), isigsettime(), isgsettime(), iannsettime(), strecg(),'
p9297
aS'setecgstr(), strann(), setannstr(), setanndesc(), adumuv(), newheader(), setheader(),'
p9298
aS'setmsheader(), setsampfreq(), setbasetime(), putinfo(), setibsize(), setobsize(), calopen(),'
p9299
aS'getcal(), putcal(), newcal(), wfdbgetskew();'
p9300
aS'extern FLONGINT wfdbgetstart();'
p9301
aS'extern FSAMPLE muvadu(), physadu();'
p9302
aS'extern FSTRING ecgstr(), annstr(), anndesc(), timstr(), mstimstr(), datstr(), getwfdb(), getinfo(),'
p9303
aS'wfdberror(), wfdbfile();'
p9304
aS'extern FSITIME strtim();'
p9305
aS'extern FDATE strdat();'
p9306
aS'extern FVOID setgvmode(), wfdbquit(), wfdbquiet(), dbverbose(), setdb(), wfdbflush(), setcfreq(),'
p9307
aS'setbasecount(), flushcal(), wfdbsetskew(), wfdbsetstart();'
p9308
aS'extern FFREQUENCY sampfreq(), getcfreq();'
p9309
aS'extern FDOUBLE aduphys(), getbasecount();'
p9310
aS'#endif'
p9311
ag8990
aS'/* Remove local preprocessor definitions. */'
p9312
aS'#ifdef wfdb_PROTO'
p9313
aS'#undef wfdb_PROTO'
p9314
aS'#endif'
p9315
ag8990
aS'#ifdef wfdb_CPP'
p9316
aS'#undef wfdb_CPP'
p9317
aS'#endif'
p9318
ag8990
aS'#ifdef wfdb_KRC'
p9319
aS'#undef wfdb_KRC'
p9320
aS'#undef signed'
p9321
aS'#endif'
p9322
ag8990
aS'#endif'
p9323
aa(lp9324
S'/* file: wfdb.h\t\tG. Moody\t13 June 1983'
p9325
aS'Last revised:   28 February 2001\twfdblib 10.1.6'
p9326
aS'WFDB library type, constant, structure, and function interface definitions'
p9327
ag8990
aS'_______________________________________________________________________________'
p9328
aS'wfdb: a library for reading and writing annotated waveforms (time series data)'
p9329
aS'Copyright (C) 2001 George B. Moody'
p9330
ag8990
aS'This library is free software; you can redistribute it and/or modify it under'
p9331
aS'the terms of the GNU Library General Public License as published by the Free'
p9332
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p9333
aS'later version.'
p9334
ag8990
aS'This library is distributed in the hope that it will be useful, but WITHOUT ANY'
p9335
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p9336
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p9337
aS'details.'
p9338
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p9339
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p9340
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p9341
ag8990
aS'You may contact the author by e-mail (george@mit.edu) or postal mail'
p9342
aS'(MIT Room E25-505A, Cambridge, MA 02139 USA).  For updates to this software,'
p9343
aS'please visit PhysioNet (http://www.physionet.org/).'
p9344
aS'_______________________________________________________________________________'
p9345
ag8990
aS'*/'
p9346
ag8990
aS'#ifndef wfdb_WFDB_H /* avoid multiple definitions */'
p9347
aS'#define wfdb_WFDB_H'
p9348
ag8990
aS'/* WFDB library version. */'
p9349
aS'#define WFDB_MAJOR 10'
p9350
aS'#define WFDB_MINOR 1'
p9351
aS'#define WFDB_RELEASE 6'
p9352
aS'#define WFDB_NETFILES 0 /* if 1, library includes code for HTTP, FTP clients */'
p9353
ag8990
aS'/* Determine what type of compiler is being used. */'
p9354
aS'#ifdef __STDC__ /* true for ANSI C compilers only */'
p9355
aS'#define wfdb_PROTO /* function prototypes will be needed */'
p9356
aS"#undef _WINDOWS /* we don't want MS-Windows API in this case */"
p9357
aS'#undef _WIN32 /* ... or 32-bit MS-Windows API either */'
p9358
aS'#endif'
p9359
ag8990
aS'#ifdef __cplusplus /* true for some C++ compilers */'
p9360
aS'#define wfdb_CPP'
p9361
aS'#define wfdb_PROTO'
p9362
aS'#endif'
p9363
ag8990
aS'#ifdef c_plusplus /* true for some other C++ compilers */'
p9364
aS'#define wfdb_CPP'
p9365
aS'#define wfdb_PROTO'
p9366
aS'#endif'
p9367
ag8990
aS'#ifdef _WIN32 /* true when compiling for 32-bit MS Windows */'
p9368
aS'#ifndef _WINDOWS'
p9369
aS'#define _WINDOWS'
p9370
aS'#endif'
p9371
aS'#endif'
p9372
ag8990
aS'#ifdef _WINDOWS /* true when compiling for MS Windows */'
p9373
aS'#define wfdb_PROTO'
p9374
aS'#endif'
p9375
ag8990
aS'#ifndef wfdb_PROTO /* should be true for K&R C compilers only */'
p9376
aS'#define wfdb_KRC'
p9377
aS'#define signed'
p9378
aS'#endif'
p9379
ag8990
aS'/* Simple data types */'
p9380
aS'typedef int WFDB_Sample; /* units are adus */'
p9381
aS'typedef long WFDB_Time; /* units are sample intervals */'
p9382
aS'typedef long WFDB_Date; /* units are days */'
p9383
aS'typedef double WFDB_Frequency; /* units are Hz (samples/second/signal) */'
p9384
aS'typedef double WFDB_Gain; /* units are adus per physical unit */'
p9385
aS'typedef unsigned int WFDB_Group; /* signal group number */'
p9386
aS'typedef unsigned int WFDB_Signal; /* signal number */'
p9387
aS'typedef unsigned int WFDB_Annotator; /* annotator number */'
p9388
ag8990
aS'/* Array sizes */'
p9389
aS'#define WFDB_MAXANN 2 /* maximum number of input or output annotators */'
p9390
aS'#define WFDB_MAXSIG 32 /* maximum number of input or output signals */'
p9391
aS'#define WFDB_MAXSPF 4 /* maximum number of samples per signal per frame */'
p9392
aS'#define WFDB_MAXRNL 11 /* maximum length of record name */'
p9393
aS"#define WFDB_MAXUSL 20 /* maximum length of WFDB_siginfo `.units' string */"
p9394
aS"#define WFDB_MAXDSL 60 /* maximum length of WFDB_siginfo `.desc' string */"
p9395
ag8990
aS"/* WFDB_anninfo '.stat' values */"
p9396
aS'#define WFDB_READ 0 /* standard input annotation file */'
p9397
aS'#define WFDB_WRITE 1 /* standard output annotation file */'
p9398
aS'#define WFDB_AHA_READ 2 /* AHA-format input annotation file */'
p9399
aS'#define WFDB_AHA_WRITE 3 /* AHA-format output annotation file */'
p9400
ag8990
aS"/* WFDB_siginfo '.fmt' values"
p9401
aS'FMT_LIST is suitable as an initializer for a static array; it lists all of'
p9402
aS'the legal values for the format field in a WFDB_siginfo structure.'
p9403
aS'fmt    meaning'
p9404
aS'0\tnull signal (nothing read or written)'
p9405
aS'8\t8-bit first differences'
p9406
aS"16\t16-bit 2's complement amplitudes, low byte first"
p9407
aS"61\t16-bit 2's complement amplitudes, high byte first"
p9408
aS'80\t8-bit offset binary amplitudes'
p9409
aS'160\t16-bit offset binary amplitudes'
p9410
aS'212\t2 12-bit amplitudes bit-packed in 3 bytes'
p9411
aS'310\t3 10-bit amplitudes bit-packed in 4 bytes'
p9412
aS'311    3 10-bit amplitudes bit-packed in 4 bytes'
p9413
aS'*/'
p9414
aS'#define WFDB_FMT_LIST                                                                              \\'
p9415
aS'{                                                                                              \\'
p9416
aS'0, 8, 16, 61, 80, 160, 212, 310, 311                                                       \\'
p9417
ag9114
aS'#define WFDB_NFMTS 9 /* number of items in FMT_LIST */'
p9418
ag8990
aS'/* Default signal specifications */'
p9419
aS'#define WFDB_DEFFREQ 250.0 /* default sampling frequency (Hz) */'
p9420
aS'#define WFDB_DEFGAIN 200.0 /* default value for gain (adu/physical unit) */'
p9421
aS'#define WFDB_DEFRES 12 /* default value for ADC resolution (bits) */'
p9422
ag8990
aS'/* getvec operating modes */'
p9423
aS'#define WFDB_LOWRES 0 /* return one sample per signal per frame */'
p9424
aS'#define WFDB_HIGHRES                                                                               \\'
p9425
aS'1 /* return each sample of oversampled signals,                                                \\'
p9426
aS'duplicating samples of other signals */'
p9427
aS"/* calinfo '.caltype' values"
p9428
aS'WFDB_AC_COUPLED and WFDB_DC_COUPLED are used in combination with the pulse'
p9429
aS'shape definitions below to characterize calibration pulses. */'
p9430
aS'#define WFDB_AC_COUPLED 0 /* AC coupled signal */'
p9431
aS'#define WFDB_DC_COUPLED 1 /* DC coupled signal */'
p9432
aS'#define WFDB_CAL_SQUARE 2 /* square wave pulse */'
p9433
aS'#define WFDB_CAL_SINE 4 /* sine wave pulse */'
p9434
aS'#define WFDB_CAL_SAWTOOTH 6 /* sawtooth pulse */'
p9435
aS'#define WFDB_CAL_UNDEF 8 /* undefined pulse shape */'
p9436
ag8990
aS'/* Structure definitions */'
p9437
aS'struct WFDB_siginfo'
p9438
aS'{ /* signal information structure */'
p9439
aS'char* fname; /* filename of signal file */'
p9440
aS'char* desc; /* signal description */'
p9441
aS'char* units; /* physical units (mV unless otherwise specified) */'
p9442
aS'WFDB_Gain gain; /* gain (ADC units/physical unit, 0: uncalibrated) */'
p9443
aS'WFDB_Sample initval; /* initial value (that of sample number 0) */'
p9444
aS'WFDB_Group group; /* signal group number */'
p9445
aS'int fmt; /* format (8, 16, etc.) */'
p9446
aS'int spf; /* samples per frame (>1 for oversampled signals) */'
p9447
aS'int bsize; /* block size (for character special files only) */'
p9448
aS'int adcres; /* ADC resolution in bits */'
p9449
aS'int adczero; /* ADC output given 0 VDC input */'
p9450
aS'int baseline; /* ADC output given 0 physical units input */'
p9451
aS'long nsamp; /* number of samples (0: unspecified) */'
p9452
aS'int cksum; /* 16-bit checksum of all samples */'
p9453
aS'};'
p9454
ag8990
aS'struct WFDB_calinfo'
p9455
aS'{ /* calibration information structure */'
p9456
aS'double low; /* low level of calibration pulse in physical units */'
p9457
aS'double high; /* high level of calibration pulse in physical units */'
p9458
aS'double scale; /* customary plotting scale (physical units per cm) */'
p9459
aS'char* sigtype; /* signal type */'
p9460
aS'char* units; /* physical units */'
p9461
aS'int caltype; /* calibration pulse type (see definitions above) */'
p9462
aS'};'
p9463
ag8990
aS'struct WFDB_anninfo'
p9464
aS'{ /* annotator information structure */'
p9465
aS'char* name; /* annotator name */'
p9466
aS'int stat; /* file type/access code (READ, WRITE, etc.) */'
p9467
aS'};'
p9468
ag8990
aS'struct WFDB_ann'
p9469
aS'{ /* annotation structure */'
p9470
aS'WFDB_Time time; /* annotation time, in sample intervals from'
p9471
aS'the beginning of the record */'
p9472
aS'char anntyp; /* annotation type (< ACMAX, see <wfdb/ecgcodes.h> */'
p9473
aS'signed char subtyp; /* annotation subtype */'
p9474
aS'signed char chan; /* channel number */'
p9475
aS'signed char num; /* annotator number */'
p9476
aS'char* aux; /* pointer to auxiliary information */'
p9477
aS'};'
p9478
ag8990
aS'/* Composite data types */'
p9479
aS'typedef struct WFDB_siginfo WFDB_Siginfo;'
p9480
aS'typedef struct WFDB_calinfo WFDB_Calinfo;'
p9481
aS'typedef struct WFDB_anninfo WFDB_Anninfo;'
p9482
aS'typedef struct WFDB_ann WFDB_Annotation;'
p9483
ag8990
aS'/* Function types */'
p9484
aS'#ifndef _WINDOWS /* for everything *except* MS Windows applications */'
p9485
aS'typedef char* FSTRING;'
p9486
aS'typedef WFDB_Date FDATE;'
p9487
aS'typedef double FDOUBLE;'
p9488
aS'typedef WFDB_Frequency FFREQUENCY;'
p9489
aS'typedef int FINT;'
p9490
aS'typedef long FLONGINT;'
p9491
aS'typedef WFDB_Sample FSAMPLE;'
p9492
aS'typedef WFDB_Time FSITIME;'
p9493
aS'typedef void FVOID;'
p9494
aS'#else'
p9495
aS'#ifndef _WIN32 /* for 16-bit MS Windows applications using the WFDB DLL */'
p9496
aS"/* typedefs don't work properly with _far or _pascal -- must use #defines */"
p9497
aS'#define FSTRING char _far* _pascal'
p9498
aS'#define FDATE WFDB_Date _far _pascal'
p9499
aS'#define FDOUBLE double _far _pascal'
p9500
aS'#define FFREQUENCY WFDB_Frequency _far _pascal'
p9501
aS'#define FINT int _far _pascal'
p9502
aS'#define FLONGINT long _far _pascal'
p9503
aS'#define FSAMPLE WFDB_Sample _far _pascal'
p9504
aS'#define FSITIME WFDB_Time _far _pascal'
p9505
aS'#define FVOID void _far _pascal'
p9506
aS'#else /* for 32-bit MS Windows applications using the WFDB DLL */'
p9507
aS'#ifndef CALLBACK'
p9508
aS'#define CALLBACK __stdcall /* from windef.h */'
p9509
aS'#endif'
p9510
aS'#define FSTRING __declspec(dllexport) char* CALLBACK'
p9511
aS'#define FDATE __declspec(dllexport) WFDB_Date CALLBACK'
p9512
aS'#define FDOUBLE __declspec(dllexport) double CALLBACK'
p9513
aS'#define FFREQUENCY __declspec(dllexport) WFDB_Frequency CALLBACK'
p9514
aS'#define FINT __declspec(dllexport) int CALLBACK'
p9515
aS'#define FLONGINT __declspec(dllexport) long CALLBACK'
p9516
aS'#define FSAMPLE __declspec(dllexport) WFDB_Sample CALLBACK'
p9517
aS'#define FSITIME __declspec(dllexport) WFDB_Time CALLBACK'
p9518
aS'#define FVOID __declspec(dllexport) void CALLBACK'
p9519
aS'#endif'
p9520
aS'#endif'
p9521
ag8990
aS'/* Specify C linkage for C++ compilers. */'
p9522
aS'#ifdef wfdb_CPP'
p9523
aS'extern "C" {'
p9524
aS'#endif'
p9525
ag8990
aS'/* Define function prototypes for ANSI C compilers and C++ compilers */'
p9526
aS'#ifdef wfdb_PROTO'
p9527
aS'extern FINT annopen(char* record, WFDB_Anninfo* aiarray, unsigned int nann);'
p9528
aS'extern FINT isigopen(char* record, WFDB_Siginfo* siarray, int nsig);'
p9529
aS'extern FINT osigopen(char* record, WFDB_Siginfo* siarray, unsigned int nsig);'
p9530
aS'extern FINT osigfopen(WFDB_Siginfo* siarray, unsigned int nsig);'
p9531
aS'extern FINT wfdbinit(char* record, WFDB_Anninfo* aiarray, unsigned int nann, WFDB_Siginfo* siarray,'
p9532
aS'unsigned int nsig);'
p9533
aS'extern FINT getspf(void);'
p9534
aS'extern FVOID setgvmode(int mode);'
p9535
aS'extern FINT getvec(WFDB_Sample* vector);'
p9536
aS'extern FINT getframe(WFDB_Sample* vector);'
p9537
aS'extern FINT putvec(WFDB_Sample* vector);'
p9538
aS'extern FINT getann(WFDB_Annotator a, WFDB_Annotation* annot);'
p9539
aS'extern FINT ungetann(WFDB_Annotator a, WFDB_Annotation* annot);'
p9540
aS'extern FINT putann(WFDB_Annotator a, WFDB_Annotation* annot);'
p9541
aS'extern FINT isigsettime(WFDB_Time t);'
p9542
aS'extern FINT isgsettime(WFDB_Group g, WFDB_Time t);'
p9543
aS'extern FINT iannsettime(WFDB_Time t);'
p9544
aS'extern FSTRING ecgstr(int annotation_code);'
p9545
aS'extern FINT strecg(char* annotation_mnemonic_string);'
p9546
aS'extern FINT setecgstr(int annotation_code, char* annotation_mnemonic_string);'
p9547
aS'extern FSTRING annstr(int annotation_code);'
p9548
aS'extern FINT strann(char* annotation_mnemonic_string);'
p9549
aS'extern FINT setannstr(int annotation_code, char* annotation_mnemonic_string);'
p9550
aS'extern FSTRING anndesc(int annotation_code);'
p9551
aS'extern FINT setanndesc(int annotation_code, char* annotation_description);'
p9552
aS'extern FVOID iannclose(WFDB_Annotator a);'
p9553
aS'extern FVOID oannclose(WFDB_Annotator a);'
p9554
aS'extern FSTRING timstr(WFDB_Time t);'
p9555
aS'extern FSTRING mstimstr(WFDB_Time t);'
p9556
aS'extern FSITIME strtim(char* time_string);'
p9557
aS'extern FSTRING datstr(WFDB_Date d);'
p9558
aS'extern FDATE strdat(char* date_string);'
p9559
aS'extern FINT adumuv(WFDB_Signal s, WFDB_Sample a);'
p9560
aS'extern FSAMPLE muvadu(WFDB_Signal s, int microvolts);'
p9561
aS'extern FDOUBLE aduphys(WFDB_Signal s, WFDB_Sample a);'
p9562
aS'extern FSAMPLE physadu(WFDB_Signal s, double v);'
p9563
aS'extern FINT calopen(char* calibration_filename);'
p9564
aS'extern FINT getcal(char* description, char* units, WFDB_Calinfo* cal);'
p9565
aS'extern FINT putcal(WFDB_Calinfo* cal);'
p9566
aS'extern FINT newcal(char* calibration_filename);'
p9567
aS'extern FVOID flushcal(void);'
p9568
aS'extern FSTRING getinfo(char* record);'
p9569
aS'extern FINT putinfo(char* info);'
p9570
aS'extern FINT newheader(char* record);'
p9571
aS'extern FINT setheader(char* record, WFDB_Siginfo* siarray, unsigned int nsig);'
p9572
aS'extern FINT setmsheader(char* record, char** seg_names, unsigned int nsegments);'
p9573
aS'extern FINT wfdbgetskew(WFDB_Signal s);'
p9574
aS'extern FVOID wfdbsetskew(WFDB_Signal s, int skew);'
p9575
aS'extern FLONGINT wfdbgetstart(WFDB_Signal s);'
p9576
aS'extern FVOID wfdbsetstart(WFDB_Signal s, long bytes);'
p9577
aS'extern FVOID wfdbquit(void);'
p9578
aS'extern FFREQUENCY sampfreq(char* record);'
p9579
aS'extern FINT setsampfreq(WFDB_Frequency sampling_frequency);'
p9580
aS'extern FFREQUENCY getcfreq(void);'
p9581
aS'extern FVOID setcfreq(WFDB_Frequency counter_frequency);'
p9582
aS'extern FDOUBLE getbasecount(void);'
p9583
aS'extern FVOID setbasecount(double count);'
p9584
aS'extern FINT setbasetime(char* time_string);'
p9585
aS'extern FVOID wfdbquiet(void);'
p9586
aS'extern FVOID wfdbverbose(void);'
p9587
aS'extern FSTRING wfdberror(void);'
p9588
aS'extern FVOID setwfdb(char* database_path_string);'
p9589
aS'extern FSTRING getwfdb(void);'
p9590
aS'extern FINT setibsize(int input_buffer_size);'
p9591
aS'extern FINT setobsize(int output_buffer_size);'
p9592
aS'extern FSTRING wfdbfile(char* file_type, char* record);'
p9593
aS'extern FVOID wfdbflush(void);'
p9594
aS'#endif'
p9595
ag8990
aS'#ifdef wfdb_CPP'
p9596
ag9114
aS'#endif'
p9597
ag8990
aS'#ifdef wfdb_KRC /* declare only function return types for K&R C compilers */'
p9598
aS'extern FINT annopen(), isigopen(), osigopen(), wfdbinit(), getspf(), getvec(), getframe(), putvec(),'
p9599
aS'getann(), ungetann(), putann(), isigsettime(), isgsettime(), iannsettime(), strecg(),'
p9600
aS'setecgstr(), strann(), setannstr(), setanndesc(), adumuv(), newheader(), setheader(),'
p9601
aS'setmsheader(), setsampfreq(), setbasetime(), putinfo(), setibsize(), setobsize(), calopen(),'
p9602
aS'getcal(), putcal(), newcal(), wfdbgetskew();'
p9603
aS'extern FLONGINT wfdbgetstart();'
p9604
aS'extern FSAMPLE muvadu(), physadu();'
p9605
aS'extern FSTRING ecgstr(), annstr(), anndesc(), timstr(), mstimstr(), datstr(), getwfdb(), getinfo(),'
p9606
aS'wfdberror(), wfdbfile();'
p9607
aS'extern FSITIME strtim();'
p9608
aS'extern FDATE strdat();'
p9609
aS'extern FVOID setgvmode(), wfdbquit(), wfdbquiet(), dbverbose(), setdb(), wfdbflush(), setcfreq(),'
p9610
aS'setbasecount(), flushcal(), wfdbsetskew(), wfdbsetstart();'
p9611
aS'extern FFREQUENCY sampfreq(), getcfreq();'
p9612
aS'extern FDOUBLE aduphys(), getbasecount();'
p9613
aS'#endif'
p9614
ag8990
aS'/* Remove local preprocessor definitions. */'
p9615
aS'#ifdef wfdb_PROTO'
p9616
aS'#undef wfdb_PROTO'
p9617
aS'#endif'
p9618
ag8990
aS'#ifdef wfdb_CPP'
p9619
aS'#undef wfdb_CPP'
p9620
aS'#endif'
p9621
ag8990
aS'#ifdef wfdb_KRC'
p9622
aS'#undef wfdb_KRC'
p9623
aS'#undef signed'
p9624
aS'#endif'
p9625
ag8990
aS'#endif'
p9626
aa(lp9627
g8990
aa(lp9628
S'/*****************************************************************************'
p9629
aS'FILE:  postclas.cpp'
p9630
aS'AUTHOR:\tPatrick S. Hamilton'
p9631
aS'REVISED:\t5/13/2002'
p9632
aS'___________________________________________________________________________'
p9633
ag8990
aS'postclas.cpp: Post classifier'
p9634
aS'Copywrite (C) 2002 Patrick S. Hamilton'
p9635
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p9636
aS'the terms of the GNU Library General Public License as published by the Free'
p9637
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p9638
aS'later version.'
p9639
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p9640
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p9641
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p9642
aS'details.'
p9643
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p9644
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p9645
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p9646
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p9647
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p9648
aS'MA 02143 USA).  For updates to this software, please visit our website'
p9649
aS'(http://www.eplimited.com).'
p9650
aS'__________________________________________________________________________'
p9651
ag8990
aS'This file contains functions for classifying beats based after the'
p9652
aS'following beat is detected.'
p9653
ag8990
aS'ResetPostClassify() -- Resets static variables used by'
p9654
aS'PostClassify()'
p9655
aS'PostClassify() -- classifies each beat based on six preceding'
p9656
aS'beats and the following beat.'
p9657
aS'CheckPostClass() --  classifys beat type based on the last'
p9658
aS'eight post classifications of that beat.'
p9659
aS'CheckPCRhythm() -- returns the classification of the RR interval'
p9660
aS'for this type of beat based its previous eight RR intervals.'
p9661
ag8990
aS'****************************************************************/'
p9662
ag8990
aS'#include "bdac.h"'
p9663
aS'#include "ecgcodes.h"'
p9664
ag8990
aS'// External Prototypes.'
p9665
ag8990
aS'double DomCompare(int newType, int domType);'
p9666
aS'int GetBeatTypeCount(int type);'
p9667
ag8990
aS'// Records of post classifications.'
p9668
ag8990
aS'int PostClass[MAXTYPES][8], PCInitCount = 0;'
p9669
aS'int PCRhythm[MAXTYPES][8];'
p9670
ag8990
aS'/**********************************************************************'
p9671
aS'Resets post classifications for beats.'
p9672
aS'**********************************************************************/'
p9673
ag8990
aS'void ResetPostClassify()'
p9674
aS'{'
p9675
aS'int i, j;'
p9676
aS'for (i = 0; i < MAXTYPES; ++i)'
p9677
ag9675
aS'for (j = 0; j < 8; ++j)'
p9678
ag9675
aS'PostClass[i][j] = 0;'
p9679
aS'PCRhythm[i][j] = 0;'
p9680
ag9114
ag9114
aS'PCInitCount = 0;'
p9681
ag9114
ag8990
aS'/***********************************************************************'
p9682
aS'Classify the previous beat type and rhythm type based on this beat'
p9683
aS'and the preceding beat.  This classifier is more sensitive'
p9684
aS'to detecting premature beats followed by compensitory pauses.'
p9685
aS'************************************************************************/'
p9686
ag8990
aS'void PostClassify('
p9687
aS'int* recentTypes, int domType, int* recentRRs, int width, double mi2, int rhythmClass)'
p9688
ag9675
aS'static int lastRC, lastWidth;'
p9689
aS'static double lastMI2;'
p9690
aS'int i, regCount, pvcCount, normRR;'
p9691
aS'double mi3;'
p9692
ag8990
aS'// If the preceeding and following beats are the same type,'
p9693
aS'// they are generally regular, and reasonably close in shape'
p9694
aS'// to the dominant type, consider them to be dominant.'
p9695
ag8990
aS'if ((recentTypes[0] == recentTypes[2]) && (recentTypes[0] != domType)'
p9696
aS'&& (recentTypes[0] != recentTypes[1]))'
p9697
ag9675
aS'mi3 = DomCompare(recentTypes[0], domType);'
p9698
aS'for (i = regCount = 0; i < 8; ++i)'
p9699
aS'if (PCRhythm[recentTypes[0]][i] == NORMAL)'
p9700
aS'++regCount;'
p9701
aS'if ((mi3 < 2.0) && (regCount > 6))'
p9702
aS'domType = recentTypes[0];'
p9703
ag9114
ag8990
aS"// Don't do anything until four beats have gone by."
p9704
ag8990
aS'if (PCInitCount < 3)'
p9705
ag9675
aS'++PCInitCount;'
p9706
aS'lastWidth = width;'
p9707
aS'lastMI2 = 0;'
p9708
aS'lastRC = 0;'
p9709
aS'return;'
p9710
ag9114
ag8990
aS'if (recentTypes[1] < MAXTYPES)'
p9711
ag9675
ag8990
aS'// Find first NN interval.'
p9712
aS'for (i = 2; (i < 7) && (recentTypes[i] != recentTypes[i + 1]); ++i)'
p9713
aS';'
p9714
aS'if (i == 7)'
p9715
aS'normRR = 0;'
p9716
aS'else'
p9717
aS'normRR = recentRRs[i];'
p9718
ag8990
aS'// Shift the previous beat classifications to make room for the'
p9719
aS'// new classification.'
p9720
aS'for (i = pvcCount = 0; i < 8; ++i)'
p9721
aS'if (PostClass[recentTypes[1]][i] == PVC)'
p9722
aS'++pvcCount;'
p9723
ag8990
aS'for (i = 7; i > 0; --i)'
p9724
ag9675
aS'PostClass[recentTypes[1]][i] = PostClass[recentTypes[1]][i - 1];'
p9725
aS'PCRhythm[recentTypes[1]][i] = PCRhythm[recentTypes[1]][i - 1];'
p9726
ag9114
ag8990
aS'// If the beat is premature followed by a compensitory pause and the'
p9727
aS'// previous and following beats are normal, post classify as'
p9728
aS'// a PVC.'
p9729
ag8990
aS'if (((normRR - (normRR >> 3)) >= recentRRs[1])'
p9730
aS'&& ((recentRRs[0] - (recentRRs[0] >> 3)) >= normRR) // && (lastMI2 > 3)'
p9731
aS'&& (recentTypes[0] == domType) && (recentTypes[2] == domType)'
p9732
aS'&& (recentTypes[1] != domType))'
p9733
aS'PostClass[recentTypes[1]][0] = PVC;'
p9734
ag8990
aS'// If previous two were classified as PVCs, and this is at least slightly'
p9735
aS'// premature, classify as a PVC.'
p9736
ag8990
aS'else if (((normRR - (normRR >> 4)) > recentRRs[1])'
p9737
aS'&& ((normRR + (normRR >> 4)) < recentRRs[0])'
p9738
aS'&& (((PostClass[recentTypes[1]][1] == PVC) && (PostClass[recentTypes[1]][2] == PVC))'
p9739
aS'|| (pvcCount >= 6))'
p9740
aS'&& (recentTypes[0] == domType) && (recentTypes[2] == domType)'
p9741
aS'&& (recentTypes[1] != domType))'
p9742
aS'PostClass[recentTypes[1]][0] = PVC;'
p9743
ag8990
aS'// If the previous and following beats are the dominant beat type,'
p9744
aS'// and this beat is significantly different from the dominant,'
p9745
aS'// call it a PVC.'
p9746
ag8990
aS'else if ((recentTypes[0] == domType) && (recentTypes[2] == domType) && (lastMI2 > 2.5))'
p9747
aS'PostClass[recentTypes[1]][0] = PVC;'
p9748
ag8990
aS'// Otherwise post classify this beat as UNKNOWN.'
p9749
ag8990
aS'else'
p9750
aS'PostClass[recentTypes[1]][0] = UNKNOWN;'
p9751
ag8990
aS'// If the beat is premature followed by a compensitory pause, post'
p9752
aS'// classify the rhythm as PVC.'
p9753
ag8990
aS'if (((normRR - (normRR >> 3)) > recentRRs[1])'
p9754
aS'&& ((recentRRs[0] - (recentRRs[0] >> 3)) > normRR))'
p9755
aS'PCRhythm[recentTypes[1]][0] = PVC;'
p9756
ag8990
aS'// Otherwise, post classify the rhythm as the same as the'
p9757
aS'// regular rhythm classification.'
p9758
ag8990
aS'else'
p9759
aS'PCRhythm[recentTypes[1]][0] = lastRC;'
p9760
ag9114
ag8990
aS'lastWidth = width;'
p9761
aS'lastMI2 = mi2;'
p9762
aS'lastRC = rhythmClass;'
p9763
ag9114
ag8990
ag8990
aS'/*************************************************************************'
p9764
aS'CheckPostClass checks to see if three of the last four or six of the'
p9765
aS'last eight of a given beat type have been post classified as PVC.'
p9766
aS'*************************************************************************/'
p9767
ag8990
aS'int CheckPostClass(int type)'
p9768
ag9675
aS'int i, pvcs4 = 0, pvcs8;'
p9769
ag8990
ag257
aS'return (UNKNOWN);'
p9770
ag8990
aS'for (i = 0; i < 4; ++i)'
p9771
ag9675
ag192
aS'++pvcs4;'
p9772
ag9114
aS'for (pvcs8 = pvcs4; i < 8; ++i)'
p9773
ag9675
ag227
aS'++pvcs8;'
p9774
ag9114
ag280
aS'return (PVC);'
p9775
aS'else'
p9776
aS'return (UNKNOWN);'
p9777
ag9114
ag8990
aS'/****************************************************************************'
p9778
aS"Check classification of previous beats' rhythms based on post beat"
p9779
aS'classification.  If 7 of 8 previous beats were classified as NORMAL'
p9780
aS'(regular) classify the beat type as NORMAL (regular).'
p9781
aS'Call it a PVC if 2 of the last 8 were regular.'
p9782
aS'****************************************************************************/'
p9783
ag8990
aS'int CheckPCRhythm(int type)'
p9784
ag9675
aS'int i, normCount, n;'
p9785
ag8990
ag8990
ag337
aS'return (UNKNOWN);'
p9786
ag8990
ag360
aS'n = GetBeatTypeCount(type) - 1;'
p9787
aS'else'
p9788
aS'n = 8;'
p9789
ag8990
aS'for (i = normCount = 0; i < n; ++i)'
p9790
ag9675
ag307
aS'++normCount;'
p9791
ag9114
ag373
aS'return (NORMAL);'
p9792
ag386
aS'return (PVC);'
p9793
aS'return (UNKNOWN);'
p9794
aS'}'
p9795
aa(lp9796
S'/*****************************************************************************'
p9797
aS'FILE:  qrsdet.h'
p9798
aS'AUTHOR:\tPatrick S. Hamilton'
p9799
aS'REVISED:\t4/16/2002'
p9800
aS'___________________________________________________________________________'
p9801
ag8990
aS'qrsdet.h QRS detector parameter definitions'
p9802
aS'Copywrite (C) 2000 Patrick S. Hamilton'
p9803
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p9804
aS'the terms of the GNU Library General Public License as published by the Free'
p9805
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p9806
aS'later version.'
p9807
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p9808
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p9809
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p9810
aS'details.'
p9811
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p9812
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p9813
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p9814
ag8990
aS'You may contact the author by e-mail (pat@eplimited.com) or postal mail'
p9815
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p9816
aS'MA 02143 USA).  For updates to this software, please visit our website'
p9817
aS'(http://www.eplimited.com).'
p9818
aS'__________________________________________________________________________'
p9819
aS'Revisions:'
p9820
aS'4/16: Modified to allow simplified modification of digital filters in'
p9821
aS'qrsfilt().'
p9822
aS'*****************************************************************************/'
p9823
ag8990
ag8990
aS'#define SAMPLE_RATE 200 /* Sample rate in Hz. */'
p9824
aS'#define MS_PER_SAMPLE ((double)1000 / (double)SAMPLE_RATE)'
p9825
aS'#define MS10 ((int)(10 / MS_PER_SAMPLE + 0.5))'
p9826
aS'#define MS25 ((int)(25 / MS_PER_SAMPLE + 0.5))'
p9827
aS'#define MS30 ((int)(30 / MS_PER_SAMPLE + 0.5))'
p9828
aS'#define MS80 ((int)(80 / MS_PER_SAMPLE + 0.5))'
p9829
aS'#define MS95 ((int)(95 / MS_PER_SAMPLE + 0.5))'
p9830
aS'#define MS100 ((int)(100 / MS_PER_SAMPLE + 0.5))'
p9831
aS'#define MS125 ((int)(125 / MS_PER_SAMPLE + 0.5))'
p9832
aS'#define MS150 ((int)(150 / MS_PER_SAMPLE + 0.5))'
p9833
aS'#define MS160 ((int)(160 / MS_PER_SAMPLE + 0.5))'
p9834
aS'#define MS175 ((int)(175 / MS_PER_SAMPLE + 0.5))'
p9835
aS'#define MS195 ((int)(195 / MS_PER_SAMPLE + 0.5))'
p9836
aS'#define MS200 ((int)(200 / MS_PER_SAMPLE + 0.5))'
p9837
aS'#define MS220 ((int)(220 / MS_PER_SAMPLE + 0.5))'
p9838
aS'#define MS250 ((int)(250 / MS_PER_SAMPLE + 0.5))'
p9839
aS'#define MS300 ((int)(300 / MS_PER_SAMPLE + 0.5))'
p9840
aS'#define MS360 ((int)(360 / MS_PER_SAMPLE + 0.5))'
p9841
aS'#define MS450 ((int)(450 / MS_PER_SAMPLE + 0.5))'
p9842
aS'#define MS1000 SAMPLE_RATE'
p9843
aS'#define MS1500 ((int)(1500 / MS_PER_SAMPLE))'
p9844
aS'#define DERIV_LENGTH MS10'
p9845
aS'#define LPBUFFER_LGTH ((int)(2 * MS25))'
p9846
aS'#define HPBUFFER_LGTH MS125'
p9847
ag8990
aS'#define WINDOW_WIDTH MS80 // Moving window integration width.'
p9848
aS'#define FILTER_DELAY                                                                               \\'
p9849
aS'(int)(((double)DERIV_LENGTH / 2) + ((double)LPBUFFER_LGTH / 2 - 1)                             \\'
p9850
aS'+ (((double)HPBUFFER_LGTH - 1) / 2)                                                        \\'
p9851
aS'+ PRE_BLANK) // filter delays plus 200 ms blanking delay'
p9852
aS'#define DER_DELAY WINDOW_WIDTH + FILTER_DELAY + MS100'
p9853
aa(lp9854
S'/*****************************************************************************'
p9855
aS'FILE:  rythmchk.h'
p9856
aS'AUTHOR:\tPatrick S. Hamilton'
p9857
aS'REVISED:\t9/25/2001'
p9858
aS'___________________________________________________________________________'
p9859
ag8990
aS'rythmchk.h: Prototype definitions for rythmchk.cpp'
p9860
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p9861
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p9862
aS'the terms of the GNU Library General Public License as published by the Free'
p9863
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p9864
aS'later version.'
p9865
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p9866
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p9867
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p9868
aS'details.'
p9869
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p9870
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p9871
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p9872
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p9873
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p9874
aS'MA 02143 USA).  For updates to this software, please visit our website'
p9875
aS'(http://www.eplimited.com).'
p9876
aS'******************************************************************************/'
p9877
ag8990
aS'// External prototypes for rythmchk.cpp'
p9878
ag8990
aS'void ResetRhythmChk(void);'
p9879
aS'int RhythmChk(int rr);'
p9880
aS'int IsBigeminy(void);'
p9881
ag8990
ag8990
aS"//Hey yo dudes I'm doing shit"
p9882
aa(lp9883
S'/* file: ecgcodes.h\tT. Baker and G. Moody\t  June 1981'
p9884
aS'Last revised:  19 March 1992\t\tdblib 7.0'
p9885
aS'ECG annotation codes'
p9886
ag8990
aS'Copyright (C) Massachusetts Institute of Technology 1992. All rights reserved.'
p9887
aS'*/'
p9888
ag8990
aS'#ifndef db_ECGCODES_H /* avoid multiple definitions */'
p9889
aS'#define db_ECGCODES_H'
p9890
ag8990
aS'#define NOTQRS 0 /* not-QRS (not a getann/putann code) */'
p9891
aS'#define NORMAL 1 /* normal beat */'
p9892
aS'#define LBBB 2 /* left bundle branch block beat */'
p9893
aS'#define RBBB 3 /* right bundle branch block beat */'
p9894
aS'#define ABERR 4 /* aberrated atrial premature beat */'
p9895
aS'#define PVC 5 /* premature ventricular contraction */'
p9896
aS'#define FUSION 6 /* fusion of ventricular and normal beat */'
p9897
aS'#define NPC 7 /* nodal (junctional) premature beat */'
p9898
aS'#define APC 8 /* atrial premature contraction */'
p9899
aS'#define SVPB 9 /* premature or ectopic supraventricular beat */'
p9900
aS'#define VESC 10 /* ventricular escape beat */'
p9901
aS'#define NESC 11 /* nodal (junctional) escape beat */'
p9902
aS'#define PACE 12 /* paced beat */'
p9903
aS'#define UNKNOWN 13 /* unclassifiable beat */'
p9904
aS'#define NOISE 14 /* signal quality change */'
p9905
aS'#define ARFCT 16 /* isolated QRS-like artifact */'
p9906
aS'#define STCH 18 /* ST change */'
p9907
aS'#define TCH 19 /* T-wave change */'
p9908
aS'#define SYSTOLE 20 /* systole */'
p9909
aS'#define DIASTOLE 21 /* diastole */'
p9910
aS'#define NOTE 22 /* comment annotation */'
p9911
aS'#define MEASURE 23 /* measurement annotation */'
p9912
aS'#define BBB 25 /* left or right bundle branch block */'
p9913
aS'#define PACESP 26 /* non-conducted pacer spike */'
p9914
aS'#define RHYTHM 28 /* rhythm change */'
p9915
aS'#define LEARN 30 /* learning */'
p9916
aS'#define FLWAV 31 /* ventricular flutter wave */'
p9917
aS'#define VFON 32 /* start of ventricular flutter/fibrillation */'
p9918
aS'#define VFOFF 33 /* end of ventricular flutter/fibrillation */'
p9919
aS'#define AESC 34 /* atrial escape beat */'
p9920
aS'#define SVESC 35 /* supraventricular escape beat */'
p9921
aS'#define NAPC 37 /* non-conducted P-wave (blocked APB) */'
p9922
aS'#define PFUS 38 /* fusion of paced and normal beat */'
p9923
aS'#define PQ 39 /* PQ junction (beginning of QRS) */'
p9924
aS'#define JPT 40 /* J point (end of QRS) */'
p9925
aS'#define RONT 41 /* R-on-T premature ventricular contraction */'
p9926
ag8990
aS'/* ... annotation codes between RONT+1 and ACMAX inclusive are user-defined */'
p9927
ag8990
aS'#define ACMAX 49 /* value of largest valid annot code (must be < 50) */'
p9928
ag8990
aS'#endif'
p9929
aa(lp9930
g8990
aa(lp9931
S'/*****************************************************************************'
p9932
aS'FILE:  qrsdet2.cpp'
p9933
aS'AUTHOR:\tPatrick S. Hamilton'
p9934
aS'REVISED:\t7/08/2002'
p9935
aS'___________________________________________________________________________'
p9936
ag8990
aS'qrsdet2.cpp: A QRS detector.'
p9937
aS'Copywrite (C) 2002 Patrick S. Hamilton'
p9938
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p9939
aS'the terms of the GNU Library General Public License as published by the Free'
p9940
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p9941
aS'later version.'
p9942
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p9943
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p9944
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p9945
aS'details.'
p9946
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p9947
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p9948
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p9949
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p9950
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p9951
aS'MA 02143 USA).  For updates to this software, please visit our website'
p9952
aS'(http://www.eplimited.com).'
p9953
aS'__________________________________________________________________________'
p9954
ag8990
aS'This file contains functions for detecting QRS complexes in an ECG.  The'
p9955
aS'QRS detector requires filter functions in qrsfilt.cpp and parameter'
p9956
aS'definitions in qrsdet.h.  QRSDet is the only function that needs to be'
p9957
aS'visable outside of these files.'
p9958
ag8990
aS'Syntax:'
p9959
aS'int QRSDet(int ecgSample, int init) ;'
p9960
ag8990
aS'Description:'
p9961
aS'QRSDet() implements a modified version of the QRS detection'
p9962
aS'algorithm described in:'
p9963
ag8990
aS'Hamilton, Tompkins, W. J., "Quantitative investigation of QRS'
p9964
aS'detection rules using the MIT/BIH arrhythmia database",'
p9965
aS'IEEE Trans. Biomed. Eng., BME-33, pp. 1158-1165, 1987.'
p9966
ag8990
aS'Consecutive ECG samples are passed to QRSDet.  QRSDet was'
p9967
aS'designed for a 200 Hz sample rate.  QRSDet contains a number'
p9968
aS'of static variables that it uses to adapt to different ECG'
p9969
aS'signals.  These variables can be reset by passing any value'
p9970
aS'not equal to 0 in init.'
p9971
ag8990
aS'Note: QRSDet() requires filters in QRSFilt.cpp'
p9972
ag8990
aS'Returns:'
p9973
aS'When a QRS complex is detected QRSDet returns the detection delay.'
p9974
ag8990
aS'****************************************************************/'
p9975
ag8990
aS'#include <mem.h> /* For memmov. */'
p9976
aS'#include <math.h>'
p9977
aS'#include "qrsdet.h"'
p9978
ag8990
aS'#define PRE_BLANK MS195'
p9979
aS'#define MIN_PEAK_AMP 7 // Prevents detections of peaks smaller than 150 uV.'
p9980
ag8990
aS'// External Prototypes.'
p9981
ag8990
aS'int QRSFilter(int datum, int init);'
p9982
aS'int deriv1(int x0, int init);'
p9983
ag8990
aS'// Local Prototypes.'
p9984
ag8990
aS'int Peak(int datum, int init);'
p9985
aS'int mean(int* array, int datnum);'
p9986
aS'int thresh(int qmean, int nmean);'
p9987
aS'int BLSCheck(int* dBuf, int dbPtr, int* maxder);'
p9988
ag8990
aS'double TH = .3125;'
p9989
ag8990
aS'int DDBuffer[DER_DELAY], DDPtr; /* Buffer holding derivative data. *//*****************************************************************************'
p9990
aS'FILE:  qrsdet2.cpp'
p9991
aS'AUTHOR:\tPatrick S. Hamilton'
p9992
aS'REVISED:\t7/08/2002'
p9993
aS'___________________________________________________________________________'
p9994
ag8990
aS'qrsdet2.cpp: A QRS detector.'
p9995
aS'Copywrite (C) 2002 Patrick S. Hamilton'
p9996
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p9997
aS'the terms of the GNU Library General Public License as published by the Free'
p9998
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p9999
aS'later version.'
p10000
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p10001
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p10002
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p10003
aS'details.'
p10004
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p10005
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p10006
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p10007
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p10008
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p10009
aS'MA 02143 USA).  For updates to this software, please visit our website'
p10010
aS'(http://www.eplimited.com).'
p10011
aS'__________________________________________________________________________'
p10012
ag8990
aS'This file contains functions for detecting QRS complexes in an ECG.  The'
p10013
aS'QRS detector requires filter functions in qrsfilt.cpp and parameter'
p10014
aS'definitions in qrsdet.h.  QRSDet is the only function that needs to be'
p10015
aS'visable outside of these files.'
p10016
ag8990
aS'Syntax:'
p10017
aS'int QRSDet(int ecgSample, int init) ;'
p10018
ag8990
aS'Description:'
p10019
aS'QRSDet() implements a modified version of the QRS detection'
p10020
aS'algorithm described in:'
p10021
ag8990
aS'Hamilton, Tompkins, W. J., "Quantitative investigation of QRS'
p10022
aS'detection rules using the MIT/BIH arrhythmia database",'
p10023
aS'IEEE Trans. Biomed. Eng., BME-33, pp. 1158-1165, 1987.'
p10024
ag8990
aS'Consecutive ECG samples are passed to QRSDet.  QRSDet was'
p10025
aS'designed for a 200 Hz sample rate.  QRSDet contains a number'
p10026
aS'of static variables that it uses to adapt to different ECG'
p10027
aS'signals.  These variables can be reset by passing any value'
p10028
aS'not equal to 0 in init.'
p10029
ag8990
aS'Note: QRSDet() requires filters in QRSFilt.cpp'
p10030
ag8990
aS'Returns:'
p10031
aS'When a QRS complex is detected QRSDet returns the detection delay.'
p10032
ag8990
aS'****************************************************************/'
p10033
ag8990
aS'#include <mem.h> /* For memmov. */'
p10034
aS'#include <math.h>'
p10035
aS'#include "qrsdet.h"'
p10036
ag8990
aS'#define PRE_BLANK MS195'
p10037
aS'#define MIN_PEAK_AMP 7 // Prevents detections of peaks smaller than 150 uV.'
p10038
ag8990
aS'// External Prototypes.'
p10039
ag8990
aS'int QRSFilter(int datum, int init);'
p10040
aS'int deriv1(int x0, int init);'
p10041
ag8990
aS'// Local Prototypes.'
p10042
ag8990
aS'int Peak(int datum, int init);'
p10043
aS'int mean(int* array, int datnum);'
p10044
aS'int thresh(int qmean, int nmean);'
p10045
aS'int BLSCheck(int* dBuf, int dbPtr, int* maxder);'
p10046
ag8990
aS'double TH = .3125;'
p10047
ag8990
aS'int DDBuffer[DER_DELAY], DDPtr; /* Buffer holding derivative data. */'
p10048
aS'int Dly = 0;'
p10049
ag8990
aS'const int MEMMOVELEN = 7 * sizeof(int);'
p10050
ag8990
aS'int QRSDet(int datum, int init)'
p10051
ag9675
aS'static int det_thresh, qpkcnt = 0;'
p10052
aS'static int qrsbuf[8], noise[8], rrbuf[8];'
p10053
aS'static int rsetBuff[8], rsetCount = 0;'
p10054
aS'static int nmean, qmean, rrmean;'
p10055
aS'static int count, sbpeak = 0, sbloc, sbcount = MS1500;'
p10056
aS'static int maxder, lastmax;'
p10057
aS'static int initBlank, initMax;'
p10058
aS'static int preBlankCnt, tempPeak;'
p10059
ag8990
aS'int fdatum, QrsDelay = 0;'
p10060
aS'int i, newPeak, aPeak;'
p10061
ag8990
aS'/*\tInitialize all buffers to 0 on the first call.\t*/'
p10062
ag8990
ag431
ag9675
aS'for (i = 0; i < 8; ++i)'
p10063
ag9675
aS'noise[i] = 0; /* Initialize noise buffer */'
p10064
aS'rrbuf[i] = MS1000; /* and R-to-R interval buffer. */'
p10065
ag9114
ag8990
aS'qpkcnt = maxder = lastmax = count = sbpeak = 0;'
p10066
aS'initBlank = initMax = preBlankCnt = DDPtr = 0;'
p10067
aS'sbcount = MS1500;'
p10068
aS'QRSFilter(0, 1); /* initialize filters. */'
p10069
aS'Peak(0, 1);'
p10070
ag9114
ag8990
aS'fdatum = QRSFilter(datum, 0); /* Filter data. */'
p10071
ag8990
ag8990
aS'/* Wait until normal detector is ready before calling early detections. */'
p10072
ag8990
aS'aPeak = Peak(fdatum, 0);'
p10073
ag444
aS'aPeak = 0;'
p10074
ag8990
aS'// Hold any peak that is detected for 200 ms'
p10075
aS'// in case a bigger one comes along.  There'
p10076
aS'// can only be one QRS complex in any 200 ms window.'
p10077
ag8990
aS'newPeak = 0;'
p10078
aS'if (aPeak && !preBlankCnt) // If there has been no peak for 200 ms'
p10079
aS'{ // save this one and start counting.'
p10080
aS'tempPeak = aPeak;'
p10081
aS'preBlankCnt = PRE_BLANK; // MS200'
p10082
ag9114
ag8990
aS'else if (!aPeak && preBlankCnt) // If we have held onto a peak for'
p10083
aS'{ // 200 ms pass it on for evaluation.'
p10084
ag480
aS'newPeak = tempPeak;'
p10085
ag9114
ag8990
aS'else if (aPeak) // If we were holding a peak, but'
p10086
aS'{ // this ones bigger, save it and'
p10087
aS'if (aPeak > tempPeak) // start counting to 200 ms again.'
p10088
ag9675
aS'tempPeak = aPeak;'
p10089
aS'preBlankCnt = PRE_BLANK; // MS200'
p10090
ag9114
aS'else if (--preBlankCnt == 0)'
p10091
aS'newPeak = tempPeak;'
p10092
ag9114
ag8990
aS'/* Save derivative of raw signal for T-wave and baseline'
p10093
aS'shift discrimination. */'
p10094
ag8990
aS'DDBuffer[DDPtr] = deriv1(datum, 0);'
p10095
ag532
aS'DDPtr = 0;'
p10096
ag8990
aS'/* Initialize the qrs peak buffer with the first eight \t*/'
p10097
aS'/* local maximum peaks detected.\t\t\t\t\t\t*/'
p10098
ag8990
ag597
ag9675
aS'++count;'
p10099
ag555
aS'count = WINDOW_WIDTH;'
p10100
ag581
ag9675
aS'initBlank = 0;'
p10101
aS'qrsbuf[qpkcnt] = initMax;'
p10102
aS'initMax = 0;'
p10103
aS'++qpkcnt;'
p10104
ag578
ag9675
aS'qmean = mean(qrsbuf, 8);'
p10105
aS'nmean = 0;'
p10106
aS'rrmean = MS1000;'
p10107
aS'sbcount = MS1500 + MS150;'
p10108
aS'det_thresh = thresh(qmean, nmean);'
p10109
ag9114
ag9114
ag594
aS'initMax = newPeak;'
p10110
ag9114
ag8990
aS'else /* Else test for a qrs. */'
p10111
ag9675
aS'++count;'
p10112
ag649
ag9675
ag8990
ag8990
aS'/* Check for maximum derivative and matching minima and maxima'
p10113
aS'for T-wave and baseline shift rejection.  Only consider this'
p10114
aS"peak if it doesn't seem to be a base line shift. */"
p10115
ag8990
ag646
ag9675
ag8990
ag8990
aS'// Classify the beat as a QRS complex'
p10116
aS'// if the peak is larger than the detection threshold.'
p10117
ag8990
ag630
ag9675
aS'memmove(&qrsbuf[1], qrsbuf, MEMMOVELEN);'
p10118
aS'qrsbuf[0] = newPeak;'
p10119
aS'qmean = mean(qrsbuf, 8);'
p10120
aS'det_thresh = thresh(qmean, nmean);'
p10121
aS'memmove(&rrbuf[1], rrbuf, MEMMOVELEN);'
p10122
aS'rrbuf[0] = count - WINDOW_WIDTH;'
p10123
aS'rrmean = mean(rrbuf, 8);'
p10124
aS'sbcount = rrmean + (rrmean >> 1) + WINDOW_WIDTH;'
p10125
aS'count = WINDOW_WIDTH;'
p10126
ag8990
aS'sbpeak = 0;'
p10127
ag8990
aS'lastmax = maxder;'
p10128
aS'maxder = 0;'
p10129
aS'QrsDelay = WINDOW_WIDTH + FILTER_DELAY;'
p10130
aS'initBlank = initMax = rsetCount = 0;'
p10131
ag9114
ag8990
aS"// If a peak isn't a QRS update noise buffer and estimate."
p10132
aS'// Store the peak for possible search back.'
p10133
ag8990
ag8990
aS'else'
p10134
ag9675
aS'memmove(&noise[1], noise, MEMMOVELEN);'
p10135
aS'noise[0] = newPeak;'
p10136
aS'nmean = mean(noise, 8);'
p10137
aS'det_thresh = thresh(qmean, nmean);'
p10138
ag8990
aS"// Don't include early peaks (which might be T-waves)"
p10139
aS'// in the search back process.  A T-wave can mask'
p10140
aS'// a small following QRS.'
p10141
ag8990
ag643
ag9675
aS'sbpeak = newPeak;'
p10142
aS'sbloc = count - WINDOW_WIDTH;'
p10143
ag9114
ag9114
ag9114
ag9114
ag8990
aS'/* Test for search back condition.  If a QRS is found in  */'
p10144
aS'/* search back update the QRS buffer and det_thresh.      */'
p10145
ag8990
ag662
ag9675
aS'memmove(&qrsbuf[1], qrsbuf, MEMMOVELEN);'
p10146
aS'qrsbuf[0] = sbpeak;'
p10147
aS'qmean = mean(qrsbuf, 8);'
p10148
aS'det_thresh = thresh(qmean, nmean);'
p10149
aS'memmove(&rrbuf[1], rrbuf, MEMMOVELEN);'
p10150
aS'rrbuf[0] = sbloc;'
p10151
aS'rrmean = mean(rrbuf, 8);'
p10152
aS'sbcount = rrmean + (rrmean >> 1) + WINDOW_WIDTH;'
p10153
aS'QrsDelay = count = count - sbloc;'
p10154
aS'QrsDelay += FILTER_DELAY;'
p10155
aS'sbpeak = 0;'
p10156
aS'lastmax = maxder;'
p10157
aS'maxder = 0;'
p10158
ag8990
aS'initBlank = initMax = rsetCount = 0;'
p10159
ag9114
ag9114
aS'we'
p10160
ag8990
aS'// In the background estimate threshold to replace adaptive threshold'
p10161
aS'// if eight seconds elapses without a QRS detection.'
p10162
ag8990
ag736
ag9675
ag720
ag9675
aS'initBlank = 0;'
p10163
aS'rsetBuff[rsetCount] = initMax;'
p10164
aS'initMax = 0;'
p10165
aS'++rsetCount;'
p10166
ag8990
aS'// Reset threshold if it has been 8 seconds without'
p10167
aS'// a detection.'
p10168
ag8990
ag717
ag9675
aS'for (i = 0; i < 8; ++i)'
p10169
ag9675
aS'qrsbuf[i] = rsetBuff[i];'
p10170
aS'noise[i] = 0;'
p10171
ag9114
aS'qmean = mean(rsetBuff, 8);'
p10172
aS'nmean = 0;'
p10173
aS'rrmean = MS1000;'
p10174
aS'sbcount = MS1500 + MS150;'
p10175
aS'det_thresh = thresh(qmean, nmean);'
p10176
aS'initBlank = initMax = rsetCount = 0;'
p10177
ag9114
ag9114
ag733
aS'initMax = newPeak;'
p10178
ag9114
ag8990
aS'return (QrsDelay);'
p10179
ag9114
ag8990
aS'/**************************************************************'
p10180
aS'* peak() takes a datum as input and returns a peak height'
p10181
aS'* when the signal returns to half its peak height, or'
p10182
aS'**************************************************************/'
p10183
ag8990
aS'int Peak(int datum, int init)'
p10184
ag9675
aS'static int max = 0, timeSinceMax = 0, lastDatum;'
p10185
aS'int pk = 0;'
p10186
ag8990
ag758
aS'max = timeSinceMax = 0;'
p10187
ag8990
ag771
aS'++timeSinceMax;'
p10188
ag8990
ag797
ag9675
aS'max = datum;'
p10189
ag794
aS'timeSinceMax = 1;'
p10190
ag9114
ag8990
ag810
ag9675
aS'pk = max;'
p10191
aS'max = 0;'
p10192
aS'timeSinceMax = 0;'
p10193
aS'Dly = 0;'
p10194
ag9114
ag8990
ag823
ag9675
aS'pk = max;'
p10195
aS'max = 0;'
p10196
aS'timeSinceMax = 0;'
p10197
aS'Dly = 3;'
p10198
ag9114
aS'lastDatum = datum;'
p10199
aS'return (pk);'
p10200
ag9114
ag8990
aS'/********************************************************************'
p10201
aS'mean returns the mean of an array of integers.  It uses a slow'
p10202
aS'sort algorithm, but these arrays are small, so it hardly matters.'
p10203
aS'********************************************************************/'
p10204
ag8990
aS'int mean(int* array, int datnum)'
p10205
ag9675
aS'long sum;'
p10206
aS'int i;'
p10207
ag8990
aS'for (i = 0, sum = 0; i < datnum; ++i)'
p10208
aS'sum += array[i];'
p10209
aS'sum /= datnum;'
p10210
aS'return (sum);'
p10211
ag9114
ag8990
aS'/****************************************************************************'
p10212
aS'thresh() calculates the detection threshold from the qrs mean and noise'
p10213
aS'mean estimates.'
p10214
aS'****************************************************************************/'
p10215
ag8990
aS'int thresh(int qmean, int nmean)'
p10216
ag9675
aS'int thrsh, dmed;'
p10217
aS'double temp;'
p10218
aS'dmed = qmean - nmean;'
p10219
aS'temp = dmed;'
p10220
aS'temp *= TH;'
p10221
aS'dmed = temp;'
p10222
aS'thrsh = nmean + dmed; /* dmed * THRESHOLD */'
p10223
aS'return (thrsh);'
p10224
ag9114
ag8990
aS'/***********************************************************************'
p10225
aS'BLSCheck() reviews data to see if a baseline shift has occurred.'
p10226
aS'This is done by looking for both positive and negative slopes of'
p10227
aS'roughly the same magnitude in a 220 ms window.'
p10228
aS'***********************************************************************/'
p10229
ag8990
aS'int BLSCheck(int* dBuf, int dbPtr, int* maxder)'
p10230
ag9675
aS'int max, min, maxt, mint, t, x;'
p10231
aS'max = min = 0;'
p10232
ag8990
aS'for (t = 0; t < MS220; ++t)'
p10233
ag9675
aS'x = dBuf[dbPtr];'
p10234
ag900
ag9675
aS'maxt = t;'
p10235
aS'max = x;'
p10236
ag9114
aS'else if (x < min)'
p10237
ag9675
aS'mint = t;'
p10238
aS'min = x;'
p10239
ag9114
ag913
aS'dbPtr = 0;'
p10240
ag9114
ag8990
aS'*maxder = max;'
p10241
aS'min = -min;'
p10242
ag8990
aS'/* Possible beat if a maximum and minimum pair are found'
p10243
aS'where the interval between them is less than 150 ms. */'
p10244
ag8990
ag943
aS'return (0);'
p10245
ag8990
aS'else'
p10246
aS'return (1);'
p10247
ag9114
ag8990
aS'int Dly = 0;'
p10248
ag8990
aS'const int MEMMOVELEN = 7 * sizeof(int);'
p10249
ag8990
aS'int QRSDet(int datum, int init)'
p10250
ag9675
aS'static int det_thresh, qpkcnt = 0;'
p10251
aS'static int qrsbuf[8], noise[8], rrbuf[8];'
p10252
aS'static int rsetBuff[8], rsetCount = 0;'
p10253
aS'static int nmean, qmean, rrmean;'
p10254
aS'static int count, sbpeak = 0, sbloc, sbcount = MS1500;'
p10255
aS'static int maxder, lastmax;'
p10256
aS'static int initBlank, initMax;'
p10257
aS'static int preBlankCnt, tempPeak;'
p10258
ag8990
aS'int fdatum, QrsDelay = 0;'
p10259
aS'int i, newPeak, aPeak;'
p10260
ag8990
aS'/*\tInitialize all buffers to 0 on the first call.\t*/'
p10261
ag8990
ag987
ag9675
aS'for (i = 0; i < 8; ++i)'
p10262
ag9675
aS'noise[i] = 0; /* Initialize noise buffer */'
p10263
aS'rrbuf[i] = MS1000; /* and R-to-R interval buffer. */'
p10264
ag9114
ag8990
aS'qpkcnt = maxder = lastmax = count = sbpeak = 0;'
p10265
aS'initBlank = initMax = preBlankCnt = DDPtr = 0;'
p10266
aS'sbcount = MS1500;'
p10267
aS'QRSFilter(0, 1); /* initialize filters. */'
p10268
aS'Peak(0, 1);'
p10269
ag9114
ag8990
aS'fdatum = QRSFilter(datum, 0); /* Filter data. */'
p10270
ag8990
ag8990
aS'/* Wait until normal detector is ready before calling early detections. */'
p10271
ag8990
aS'aPeak = Peak(fdatum, 0);'
p10272
ag1000
aS'aPeak = 0;'
p10273
ag8990
aS'// Hold any peak that is detected for 200 ms'
p10274
aS'// in case a bigger one comes along.  There'
p10275
aS'// can only be one QRS complex in any 200 ms window.'
p10276
ag8990
aS'newPeak = 0;'
p10277
aS'if (aPeak && !preBlankCnt) // If there has been no peak for 200 ms'
p10278
aS'{ // save this one and start counting.'
p10279
aS'tempPeak = aPeak;'
p10280
aS'preBlankCnt = PRE_BLANK; // MS200'
p10281
ag9114
ag8990
aS'else if (!aPeak && preBlankCnt) // If we have held onto a peak for'
p10282
aS'{ // 200 ms pass it on for evaluation.'
p10283
ag1036
aS'newPeak = tempPeak;'
p10284
ag9114
ag8990
aS'else if (aPeak) // If we were holding a peak, but'
p10285
aS'{ // this ones bigger, save it and'
p10286
aS'if (aPeak > tempPeak) // start counting to 200 ms again.'
p10287
ag9675
aS'tempPeak = aPeak;'
p10288
aS'preBlankCnt = PRE_BLANK; // MS200'
p10289
ag9114
aS'else if (--preBlankCnt == 0)'
p10290
aS'newPeak = tempPeak;'
p10291
ag9114
ag8990
aS'/* Save derivative of raw signal for T-wave and baseline'
p10292
aS'shift discrimination. */'
p10293
ag8990
aS'DDBuffer[DDPtr] = deriv1(datum, 0);'
p10294
ag1088
aS'DDPtr = 0;'
p10295
ag8990
aS'/* Initialize the qrs peak buffer with the first eight \t*/'
p10296
aS'/* local maximum peaks detected.\t\t\t\t\t\t*/'
p10297
ag8990
ag1153
ag9675
aS'++count;'
p10298
ag1111
aS'count = WINDOW_WIDTH;'
p10299
ag1137
ag9675
aS'initBlank = 0;'
p10300
aS'qrsbuf[qpkcnt] = initMax;'
p10301
aS'initMax = 0;'
p10302
aS'++qpkcnt;'
p10303
ag1134
ag9675
aS'qmean = mean(qrsbuf, 8);'
p10304
aS'nmean = 0;'
p10305
aS'rrmean = MS1000;'
p10306
aS'sbcount = MS1500 + MS150;'
p10307
aS'det_thresh = thresh(qmean, nmean);'
p10308
ag9114
ag9114
ag1150
aS'initMax = newPeak;'
p10309
ag9114
ag8990
aS'else /* Else test for a qrs. */'
p10310
ag9675
aS'++count;'
p10311
ag1205
ag9675
ag8990
ag8990
aS'/* Check for maximum derivative and matching minima and maxima'
p10312
aS'for T-wave and baseline shift rejection.  Only consider this'
p10313
aS"peak if it doesn't seem to be a base line shift. */"
p10314
ag8990
ag1202
ag9675
ag8990
ag8990
aS'// Classify the beat as a QRS complex'
p10315
aS'// if the peak is larger than the detection threshold.'
p10316
ag8990
ag1186
ag9675
aS'memmove(&qrsbuf[1], qrsbuf, MEMMOVELEN);'
p10317
aS'qrsbuf[0] = newPeak;'
p10318
aS'qmean = mean(qrsbuf, 8);'
p10319
aS'det_thresh = thresh(qmean, nmean);'
p10320
aS'memmove(&rrbuf[1], rrbuf, MEMMOVELEN);'
p10321
aS'rrbuf[0] = count - WINDOW_WIDTH;'
p10322
aS'rrmean = mean(rrbuf, 8);'
p10323
aS'sbcount = rrmean + (rrmean >> 1) + WINDOW_WIDTH;'
p10324
aS'count = WINDOW_WIDTH;'
p10325
ag8990
aS'sbpeak = 0;'
p10326
ag8990
aS'lastmax = maxder;'
p10327
aS'maxder = 0;'
p10328
aS'QrsDelay = WINDOW_WIDTH + FILTER_DELAY;'
p10329
aS'initBlank = initMax = rsetCount = 0;'
p10330
ag9114
ag8990
aS"// If a peak isn't a QRS update noise buffer and estimate."
p10331
aS'// Store the peak for possible search back.'
p10332
ag8990
ag8990
aS'else'
p10333
ag9675
aS'memmove(&noise[1], noise, MEMMOVELEN);'
p10334
aS'noise[0] = newPeak;'
p10335
aS'nmean = mean(noise, 8);'
p10336
aS'det_thresh = thresh(qmean, nmean);'
p10337
ag8990
aS"// Don't include early peaks (which might be T-waves)"
p10338
aS'// in the search back process.  A T-wave can mask'
p10339
aS'// a small following QRS.'
p10340
ag8990
ag1199
ag9675
aS'sbpeak = newPeak;'
p10341
aS'sbloc = count - WINDOW_WIDTH;'
p10342
ag9114
ag9114
ag9114
ag9114
ag8990
aS'/* Test for search back condition.  If a QRS is found in  */'
p10343
aS'/* search back update the QRS buffer and det_thresh.      */'
p10344
ag8990
ag1218
ag9675
aS'memmove(&qrsbuf[1], qrsbuf, MEMMOVELEN);'
p10345
aS'qrsbuf[0] = sbpeak;'
p10346
aS'qmean = mean(qrsbuf, 8);'
p10347
aS'det_thresh = thresh(qmean, nmean);'
p10348
aS'memmove(&rrbuf[1], rrbuf, MEMMOVELEN);'
p10349
aS'rrbuf[0] = sbloc;'
p10350
aS'rrmean = mean(rrbuf, 8);'
p10351
aS'sbcount = rrmean + (rrmean >> 1) + WINDOW_WIDTH;'
p10352
aS'QrsDelay = count = count - sbloc;'
p10353
aS'QrsDelay += FILTER_DELAY;'
p10354
aS'sbpeak = 0;'
p10355
aS'lastmax = maxder;'
p10356
aS'maxder = 0;'
p10357
ag8990
aS'initBlank = initMax = rsetCount = 0;'
p10358
ag9114
ag9114
aS'we'
p10359
ag8990
aS'// In the background estimate threshold to replace adaptive threshold'
p10360
aS'// if eight seconds elapses without a QRS detection.'
p10361
ag8990
ag1292
ag9675
ag1276
ag9675
aS'initBlank = 0;'
p10362
aS'rsetBuff[rsetCount] = initMax;'
p10363
aS'initMax = 0;'
p10364
aS'++rsetCount;'
p10365
ag8990
aS'// Reset threshold if it has been 8 seconds without'
p10366
aS'// a detection.'
p10367
ag8990
ag1273
ag9675
aS'for (i = 0; i < 8; ++i)'
p10368
ag9675
aS'qrsbuf[i] = rsetBuff[i];'
p10369
aS'noise[i] = 0;'
p10370
ag9114
aS'qmean = mean(rsetBuff, 8);'
p10371
aS'nmean = 0;'
p10372
aS'rrmean = MS1000;'
p10373
aS'sbcount = MS1500 + MS150;'
p10374
aS'det_thresh = thresh(qmean, nmean);'
p10375
aS'initBlank = initMax = rsetCount = 0;'
p10376
ag9114
ag9114
ag1289
aS'initMax = newPeak;'
p10377
ag9114
ag8990
aS'return (QrsDelay);'
p10378
ag9114
ag8990
aS'/**************************************************************'
p10379
aS'* peak() takes a datum as input and returns a peak height'
p10380
aS'* when the signal returns to half its peak height, or'
p10381
aS'**************************************************************/'
p10382
ag8990
aS'int Peak(int datum, int init)'
p10383
ag9675
aS'static int max = 0, timeSinceMax = 0, lastDatum;'
p10384
aS'int pk = 0;'
p10385
ag8990
ag1314
aS'max = timeSinceMax = 0;'
p10386
ag8990
ag1327
aS'++timeSinceMax;'
p10387
ag8990
ag1353
ag9675
aS'max = datum;'
p10388
ag1350
aS'timeSinceMax = 1;'
p10389
ag9114
ag8990
ag1366
ag9675
aS'pk = max;'
p10390
aS'max = 0;'
p10391
aS'timeSinceMax = 0;'
p10392
aS'Dly = 0;'
p10393
ag9114
ag8990
ag1379
ag9675
aS'pk = max;'
p10394
aS'max = 0;'
p10395
aS'timeSinceMax = 0;'
p10396
aS'Dly = 3;'
p10397
ag9114
aS'lastDatum = datum;'
p10398
aS'return (pk);'
p10399
ag9114
ag8990
aS'/********************************************************************'
p10400
aS'mean returns the mean of an array of integers.  It uses a slow'
p10401
aS'sort algorithm, but these arrays are small, so it hardly matters.'
p10402
aS'********************************************************************/'
p10403
ag8990
aS'int mean(int* array, int datnum)'
p10404
ag9675
aS'long sum;'
p10405
aS'int i;'
p10406
ag8990
aS'for (i = 0, sum = 0; i < datnum; ++i)'
p10407
aS'sum += array[i];'
p10408
aS'sum /= datnum;'
p10409
aS'return (sum);'
p10410
ag9114
ag8990
aS'/****************************************************************************'
p10411
aS'thresh() calculates the detection threshold from the qrs mean and noise'
p10412
aS'mean estimates.'
p10413
aS'****************************************************************************/'
p10414
ag8990
aS'int thresh(int qmean, int nmean)'
p10415
ag9675
aS'int thrsh, dmed;'
p10416
aS'double temp;'
p10417
aS'dmed = qmean - nmean;'
p10418
aS'temp = dmed;'
p10419
aS'temp *= TH;'
p10420
aS'dmed = temp;'
p10421
aS'thrsh = nmean + dmed; /* dmed * THRESHOLD */'
p10422
aS'return (thrsh);'
p10423
ag9114
ag8990
aS'/***********************************************************************'
p10424
aS'BLSCheck() reviews data to see if a baseline shift has occurred.'
p10425
aS'This is done by looking for both positive and negative slopes of'
p10426
aS'roughly the same magnitude in a 220 ms window.'
p10427
aS'***********************************************************************/'
p10428
ag8990
aS'int BLSCheck(int* dBuf, int dbPtr, int* maxder)'
p10429
ag9675
aS'int max, min, maxt, mint, t, x;'
p10430
aS'max = min = 0;'
p10431
ag8990
aS'for (t = 0; t < MS220; ++t)'
p10432
ag9675
aS'x = dBuf[dbPtr];'
p10433
ag1456
ag9675
aS'maxt = t;'
p10434
aS'max = x;'
p10435
ag9114
aS'else if (x < min)'
p10436
ag9675
aS'mint = t;'
p10437
aS'min = x;'
p10438
ag9114
ag1469
aS'dbPtr = 0;'
p10439
ag9114
ag8990
aS'*maxder = max;'
p10440
aS'min = -min;'
p10441
ag8990
aS'/* Possible beat if a maximum and minimum pair are found'
p10442
aS'where the interval between them is less than 150 ms. */'
p10443
ag8990
ag1499
aS'return (0);'
p10444
ag8990
aS'else'
p10445
aS'return (1);'
p10446
ag9114
aa(lp10447
S'/*****************************************************************************'
p10448
aS'FILE:  match.h'
p10449
aS'AUTHOR:\tPatrick S. Hamilton'
p10450
aS'REVISED:\t12/4/2001'
p10451
aS'___________________________________________________________________________'
p10452
ag8990
aS'match.h: Beat matching prototype definitions.'
p10453
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p10454
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p10455
aS'the terms of the GNU Library General Public License as published by the Free'
p10456
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p10457
aS'later version.'
p10458
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p10459
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p10460
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p10461
aS'details.'
p10462
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p10463
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p10464
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p10465
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p10466
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p10467
aS'MA 02143 USA).  For updates to this software, please visit our website'
p10468
aS'(http://www.eplimited.com).'
p10469
aS'******************************************************************************/'
p10470
ag8990
aS'int NewBeatType(int* beat);'
p10471
aS'void BestMorphMatch(int* newBeat, int* matchType, double* matchIndex, double* mi2, int* shiftAdj);'
p10472
aS'void UpdateBeatType(int matchType, int* newBeat, double mi2, int shiftAdj);'
p10473
aS'int GetTypesCount(void);'
p10474
aS'int GetBeatTypeCount(int type);'
p10475
aS'int IsTypeIsolated(int type);'
p10476
aS'void SetBeatClass(int type, int beatClass);'
p10477
aS'int GetBeatClass(int type);'
p10478
aS'int GetDominantType(void);'
p10479
aS'int GetBeatWidth(int type);'
p10480
aS'int GetPolarity(int type);'
p10481
aS'int GetRhythmIndex(int type);'
p10482
aS'void ResetMatch(void);'
p10483
aS'void ClearLastNewType(void);'
p10484
aS'int GetBeatBegin(int type);'
p10485
aS'int GetBeatEnd(int type);'
p10486
aS'int GetBeatAmp(int type);'
p10487
aS'int MinimumBeatVariation(int type);'
p10488
aS'int GetBeatCenter(int type);'
p10489
aS'int WideBeatVariation(int type);'
p10490
aS'double DomCompare2(int* newBeat, int domType);'
p10491
aS'double DomCompare(int newType, int domType);'
p10492
ag8990
aS'// hey yo'
p10493
aa(lp10494
S'/*****************************************************************************'
p10495
aS'FILE:  classify.cpp'
p10496
aS'AUTHOR:\tPatrick S. Hamilton'
p10497
aS'REVISED:\t5/13/2001'
p10498
aS'___________________________________________________________________________'
p10499
ag8990
aS'classify.cpp: Classify a given beat.'
p10500
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p10501
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p10502
aS'the terms of the GNU Library General Public License as published by the Free'
p10503
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p10504
aS'later version.'
p10505
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p10506
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p10507
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p10508
aS'details.'
p10509
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p10510
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p10511
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p10512
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p10513
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p10514
aS'MA 02143 USA).  For updates to this software, please visit our website'
p10515
aS'(http://www.eplimited.com).'
p10516
aS'__________________________________________________________________________'
p10517
ag8990
aS'Classify.cpp contains functions for classifying beats.  The only'
p10518
aS'function that needs to be called externally from this file is Classify().'
p10519
ag8990
aS'Functions in classify.cpp require functions in the following files:'
p10520
aS'match.cpp'
p10521
aS'rythmchk.cpp'
p10522
aS'classify.cpp'
p10523
aS'rythmchk.cpp'
p10524
aS'analbeat.cpp'
p10525
aS'postclas.cpp'
p10526
ag8990
aS'__________________________________________________________________________'
p10527
ag8990
aS'Revisions:'
p10528
aS'5/13/02:'
p10529
aS'Width constants tied to BEAT_SAMPLE_RATE in bdac.h'
p10530
ag8990
aS'Arrays added to track the classifications and RR intervals for the'
p10531
aS'most recent 8 beats, allowing GetRunCount to become a local function.'
p10532
aS'RR intervals and classifications are now passed to PostClassify.'
p10533
ag8990
aS'Determination of whether the dominant rhythm is regular is now made'
p10534
aS'by examining the number of RR intervals classified as UNKNOWN in the'
p10535
aS'last DM_BUFFER_LENGTH beats (180).  If more than 60 are UNKNOWN'
p10536
aS'the rhythm is too irregular to give any weight to whether the beat'
p10537
aS'was premature or not.'
p10538
ag8990
aS'*******************************************************************************/'
p10539
ag8990
aS'#include "ecgcodes.h"'
p10540
aS'#include <stdlib.h> // For abs()'
p10541
aS'#include <stdio.h>'
p10542
aS'#include "qrsdet.h" // For base sample rate.'
p10543
aS'#include "bdac.h"'
p10544
aS'#include "match.h"'
p10545
aS'#include "rythmchk.h"'
p10546
aS'#include "analbeat.h"'
p10547
aS'#include "postclas.h"'
p10548
ag8990
aS'// Detection Rule Parameters.'
p10549
ag8990
aS'#define MATCH_LIMIT 1.3 // Threshold for template matching'
p10550
aS'// without amplitude sensitivity.'
p10551
aS'#define MATCH_WITH_AMP_LIMIT 2.5 // Threshold for matching index that'
p10552
aS'// is amplitude sensitive.'
p10553
aS'#define PVC_MATCH_WITH_AMP_LIMIT 0.9 // Amplitude sensitive limit for'
p10554
aS'// matching premature beats'
p10555
aS'#define BL_SHIFT_LIMIT 100 // Threshold for assuming a baseline shift.'
p10556
aS'#define NEW_TYPE_NOISE_THRESHOLD 18 // Above this noise level, do not create'
p10557
aS'// new beat types.'
p10558
aS'#define NEW_TYPE_HF_NOISE_LIMIT 75 // Above this noise level, do not crate'
p10559
aS'// new beat types.'
p10560
ag8990
aS'#define MATCH_NOISE_THRESHOLD 0.7 // Match threshold below which noise'
p10561
aS'// indications are ignored.'
p10562
ag8990
aS'// TempClass classification rule parameters.'
p10563
ag8990
aS'#define R2_DI_THRESHOLD 1.0 // Rule 2 dominant similarity index threshold'
p10564
aS'#define R3_WIDTH_THRESHOLD BEAT_MS90 // Rule 3 width threshold.'
p10565
aS'#define R7_DI_THRESHOLD 1.2 // Rule 7 dominant similarity index threshold'
p10566
aS'#define R8_DI_THRESHOLD 1.5 // Rule 8 dominant similarity index threshold'
p10567
aS'#define R9_DI_THRESHOLD 2.0 // Rule 9 dominant similarity index threshold'
p10568
aS'#define R10_BC_LIM 3 // Rule 10 beat count limit.'
p10569
aS'#define R10_DI_THRESHOLD 2.5 // Rule 10 dominant similarity index threshold'
p10570
aS'#define R11_MIN_WIDTH BEAT_MS110 // Rule 11 minimum width threshold.'
p10571
aS'#define R11_WIDTH_BREAK BEAT_MS140 // Rule 11 width break.'
p10572
aS'#define R11_WIDTH_DIFF1 BEAT_MS40 // Rule 11 width difference threshold 1'
p10573
aS'#define R11_WIDTH_DIFF2 BEAT_MS60 // Rule 11 width difference threshold 2'
p10574
aS'#define R11_HF_THRESHOLD 45 // Rule 11 high frequency noise threshold.'
p10575
aS'#define R11_MA_THRESHOLD 14 // Rule 11 motion artifact threshold.'
p10576
aS'#define R11_BC_LIM 1 // Rule 11 beat count limit.'
p10577
aS'#define R15_DI_THRESHOLD 3.5 // Rule 15 dominant similarity index threshold'
p10578
aS'#define R15_WIDTH_THRESHOLD BEAT_MS100 // Rule 15 width threshold.'
p10579
aS'#define R16_WIDTH_THRESHOLD BEAT_MS100 // Rule 16 width threshold.'
p10580
aS'#define R17_WIDTH_DELTA BEAT_MS20 // Rule 17 difference threshold.'
p10581
aS'#define R18_DI_THRESHOLD 1.5 // Rule 18 dominant similarity index threshold.'
p10582
aS'#define R19_HF_THRESHOLD 75 // Rule 19 high frequency noise threshold.'
p10583
ag8990
aS'// Dominant monitor constants.'
p10584
ag8990
aS'#define DM_BUFFER_LENGTH 180'
p10585
aS'#define IRREG_RR_LIMIT 60'
p10586
ag8990
aS'// Local prototypes.'
p10587
ag8990
aS'int HFNoiseCheck(int* beat);'
p10588
aS'int TempClass(int rhythmClass, int morphType, int beatWidth, int domWidth, int domType, int hfNoise,int noiseLevel, int blShift, double domIndex);'
p10589
aS'int DomMonitor(int morphType, int rhythmClass, int beatWidth, int rr, int reset);'
p10590
aS'int GetDomRhythm(void);'
p10591
aS'int GetRunCount(void);'
p10592
ag8990
aS'// Local Global variables'
p10593
ag8990
aS'int DomType;'
p10594
aS'int RecentRRs[8], RecentTypes[8];'
p10595
ag8990
aS'/***************************************************************************'
p10596
aS'*  Classify() takes a beat buffer, the previous rr interval, and the present'
p10597
aS'*  noise level estimate and returns a beat classification of NORMAL, PVC, or'
p10598
aS'*  UNKNOWN.  The UNKNOWN classification is only returned.  The beat template'
p10599
aS'*  type that the beat has been matched to is returned through the pointer'
p10600
aS'*  *beatMatch for debugging display.  Passing anything other than 0 in init'
p10601
aS'*  resets the static variables used by Classify.'
p10602
aS'****************************************************************************/'
p10603
ag8990
aS'int Classify(int* newBeat, int rr, int noiseLevel, int* beatMatch, int* fidAdj, int init)'
p10604
ag9675
aS'int rhythmClass, beatClass, i, beatWidth, blShift;'
p10605
aS'static int morphType, runCount = 0;'
p10606
aS'double matchIndex, domIndex, mi2;'
p10607
aS'int shiftAdj;'
p10608
aS'int domType, domWidth, onset, offset, amp;'
p10609
aS'int beatBegin, beatEnd, tempClass;'
p10610
aS'int hfNoise, isoLevel;'
p10611
aS'static int lastIsoLevel = 0, lastRhythmClass = UNKNOWN, lastBeatWasNew = 0;'
p10612
ag8990
aS'// If initializing...'
p10613
ag8990
ag1566
ag9675
aS'ResetRhythmChk();'
p10614
aS'ResetMatch();'
p10615
aS'ResetPostClassify();'
p10616
aS'runCount = 0;'
p10617
aS'DomMonitor(0, 0, 0, 0, 1);'
p10618
aS'return (0);'
p10619
ag9114
ag8990
aS'hfNoise = HFNoiseCheck(newBeat); // Check for muscle noise.'
p10620
aS'rhythmClass = RhythmChk(rr); // Check the rhythm.'
p10621
ag8990
aS'// Estimate beat features.'
p10622
ag8990
aS'AnalyzeBeat(newBeat, &onset, &offset, &isoLevel, &beatBegin, &beatEnd, &amp);'
p10623
ag8990
aS'blShift = abs(lastIsoLevel - isoLevel);'
p10624
aS'lastIsoLevel = isoLevel;'
p10625
ag8990
aS'// Make isoelectric level 0.'
p10626
ag8990
aS'for (i = 0; i < BEATLGTH; ++i)'
p10627
aS'newBeat[i] -= isoLevel;'
p10628
ag8990
aS'// If there was a significant baseline shift since'
p10629
aS'// the last beat and the last beat was a new type,'
p10630
aS'// delete the new type because it might have resulted'
p10631
aS'// from a baseline shift.'
p10632
ag8990
ag1579
aS'ClearLastNewType();'
p10633
ag8990
aS'lastBeatWasNew = 0;'
p10634
ag8990
aS'// Find the template that best matches this beat.'
p10635
ag8990
aS'BestMorphMatch(newBeat, &morphType, &matchIndex, &mi2, &shiftAdj);'
p10636
ag8990
aS'// Disregard noise if the match is good. (New)'
p10637
ag8990
ag1592
aS'hfNoise = noiseLevel = blShift = 0;'
p10638
ag8990
aS'// Apply a stricter match limit to premature beats.'
p10639
ag8990
ag1605
ag9675
aS'morphType = NewBeatType(newBeat);'
p10640
aS'lastBeatWasNew = 1;'
p10641
ag9114
ag8990
aS'// Match if within standard match limits.'
p10642
ag8990
ag1618
ag8990
aS"// If the beat isn't noisy but doesn't match, start a new beat."
p10643
ag8990
ag1631
ag9675
aS'morphType = NewBeatType(newBeat);'
p10644
aS'lastBeatWasNew = 1;'
p10645
ag9114
ag8990
aS'// Even if it is a noisy, start new beat if it was an irregular beat.'
p10646
ag8990
ag1644
ag9675
aS'morphType = NewBeatType(newBeat);'
p10647
aS'lastBeatWasNew = 1;'
p10648
ag9114
ag8990
aS"// If its noisy and regular, don't waste space starting a new beat."
p10649
ag8990
aS'else'
p10650
aS'morphType = MAXTYPES;'
p10651
ag8990
aS'// Update recent rr and type arrays.'
p10652
ag8990
aS'for (i = 7; i > 0; --i)'
p10653
ag9675
aS'RecentRRs[i] = RecentRRs[i - 1];'
p10654
aS'RecentTypes[i] = RecentTypes[i - 1];'
p10655
ag9114
aS'RecentRRs[0] = rr;'
p10656
aS'RecentTypes[0] = morphType;'
p10657
ag8990
aS'lastRhythmClass = rhythmClass;'
p10658
aS'lastIsoLevel = isoLevel;'
p10659
ag8990
aS'// Fetch beat features needed for classification.'
p10660
aS'// Get features from average beat if it matched.'
p10661
ag8990
ag1670
ag9675
aS'beatClass = GetBeatClass(morphType);'
p10662
aS'beatWidth = GetBeatWidth(morphType);'
p10663
aS'*fidAdj = GetBeatCenter(morphType) - FIDMARK;'
p10664
ag8990
aS'// If the width seems large and there have only been a few'
p10665
aS'// beats of this type, use the actual beat for width'
p10666
aS'// estimate.'
p10667
ag8990
ag1667
ag9675
aS'beatWidth = offset - onset;'
p10668
aS'*fidAdj = ((offset + onset) / 2) - FIDMARK;'
p10669
ag9114
ag9114
ag8990
aS"// If this beat didn't match get beat features directly"
p10670
aS'// from this beat.'
p10671
ag8990
aS'else'
p10672
ag9675
aS'beatWidth = offset - onset;'
p10673
aS'beatClass = UNKNOWN;'
p10674
aS'*fidAdj = ((offset + onset) / 2) - FIDMARK;'
p10675
ag9114
ag8990
aS'// Fetch dominant type beat features.'
p10676
ag8990
aS'DomType = domType = DomMonitor(morphType, rhythmClass, beatWidth, rr, 0);'
p10677
aS'domWidth = GetBeatWidth(domType);'
p10678
ag8990
aS'// Compare the beat type, or actual beat to the dominant beat.'
p10679
ag8990
ag1693
aS'domIndex = DomCompare(morphType, domType);'
p10680
aS'else if (morphType == 8)'
p10681
aS'domIndex = DomCompare2(newBeat, domType);'
p10682
aS'else'
p10683
aS'domIndex = matchIndex;'
p10684
ag8990
aS'// Update post classificaton of the previous beat.'
p10685
ag8990
aS'PostClassify(RecentTypes, domType, RecentRRs, beatWidth, domIndex, rhythmClass);'
p10686
ag8990
aS'// Classify regardless of how the morphology'
p10687
aS'// was previously classified.'
p10688
ag8990
aS'tempClass = TempClass(rhythmClass, morphType, beatWidth, domWidth, domType, hfNoise, noiseLevel,blShift, domIndex);'
p10689
ag8990
aS'// If this morphology has not been classified yet, attempt to classify'
p10690
aS'// it.'
p10691
ag8990
ag1768
ag9675
ag8990
aS'// Classify as normal if there are 6 in a row'
p10692
aS'// or at least two in a row that meet rhythm'
p10693
aS'// rules for normal.'
p10694
ag8990
aS'runCount = GetRunCount();'
p10695
ag8990
aS'// Classify a morphology as NORMAL if it is not too wide, and there'
p10696
aS'// are three in a row.  The width criterion prevents ventricular beats'
p10697
aS'// from being classified as normal during VTACH (MIT/BIH 205).'
p10698
ag8990
ag1716
aS'SetBeatClass(morphType, NORMAL);'
p10699
ag8990
aS'// If there is no dominant type established yet, classify any type'
p10700
aS'// with six in a row as NORMAL.'
p10701
ag8990
ag1729
aS'SetBeatClass(morphType, NORMAL);'
p10702
ag8990
aS'// During bigeminy, classify the premature beats as ventricular if'
p10703
aS'// they are not too narrow.'
p10704
ag8990
ag1765
ag9675
ag1762
aS'SetBeatClass(morphType, PVC);'
p10705
aS'else if (rhythmClass == NORMAL)'
p10706
aS'SetBeatClass(morphType, NORMAL);'
p10707
ag9114
ag9114
ag8990
aS'// Save morphology type of this beat for next classification.'
p10708
ag8990
aS'*beatMatch = morphType;'
p10709
ag8990
aS'beatClass = GetBeatClass(morphType);'
p10710
ag8990
aS'// If the morphology has been previously classified.'
p10711
aS'// use that classification.'
p10712
aS'//\treturn(rhythmClass) ;'
p10713
ag8990
ag1781
aS'return (beatClass);'
p10714
ag8990
ag1794
aS'return (PVC);'
p10715
ag8990
aS'// Otherwise use the temporary classification.'
p10716
ag8990
aS'return (tempClass);'
p10717
ag9114
ag8990
aS'/**************************************************************************'
p10718
aS'*  HFNoiseCheck() gauges the high frequency (muscle noise) present in the'
p10719
aS'*  beat template.  The high frequency noise level is estimated by highpass'
p10720
aS'*  filtering the beat (y[n] = x[n] - 2*x[n-1] + x[n-2]), averaging the'
p10721
aS'*  highpass filtered signal over five samples, and finding the maximum of'
p10722
aS'*  this averaged highpass filtered signal.  The high frequency noise metric'
p10723
aS'*  is then taken to be the ratio of the maximum averaged highpassed signal'
p10724
aS'*  to the QRS amplitude.'
p10725
aS'**************************************************************************/'
p10726
ag8990
aS'#define AVELENGTH BEAT_MS50'
p10727
ag8990
aS'int HFNoiseCheck(int* beat)'
p10728
ag9675
aS'int maxNoiseAve = 0, i;'
p10729
aS'int sum = 0, aveBuff[AVELENGTH], avePtr = 0;'
p10730
aS'int qrsMax = 0, qrsMin = 0;'
p10731
ag8990
aS'// Determine the QRS amplitude.'
p10732
ag8990
aS'for (i = FIDMARK - BEAT_MS70; i < FIDMARK + BEAT_MS80; ++i)'
p10733
ag9675
ag1831
aS'qrsMax = beat[i];'
p10734
aS'else if (beat[i] < qrsMin)'
p10735
aS'qrsMin = beat[i];'
p10736
ag9114
aS'for (i = 0; i < AVELENGTH; ++i)'
p10737
aS'aveBuff[i] = 0;'
p10738
ag8990
aS'for (i = FIDMARK - BEAT_MS280; i < FIDMARK + BEAT_MS280; ++i)'
p10739
ag9675
aS'sum -= aveBuff[avePtr];'
p10740
aS'aveBuff[avePtr] = abs(beat[i] - (beat[i - BEAT_MS10] << 1) + beat[i - 2 * BEAT_MS10]);'
p10741
aS'sum += aveBuff[avePtr];'
p10742
ag1888
aS'avePtr = 0;'
p10743
ag1901
aS'if (sum > maxNoiseAve)'
p10744
aS'maxNoiseAve = sum;'
p10745
ag9114
ag1941
aS'return ((maxNoiseAve * (50 / AVELENGTH)) / ((qrsMax - qrsMin) >> 2));'
p10746
aS'else'
p10747
aS'return (0);'
p10748
ag9114
ag8990
aS'/************************************************************************'
p10749
aS'*  TempClass() classifies beats based on their beat features, relative'
p10750
aS'*  to the features of the dominant beat and the present noise level.'
p10751
aS'*************************************************************************/'
p10752
ag8990
aS'int TempClass(int rhythmClass, int morphType, int beatWidth, int domWidth, int domType, int hfNoise,'
p10753
aS'int noiseLevel, int blShift, double domIndex)'
p10754
ag9675
ag8990
aS'// Rule 1:  If no dominant type has been detected classify all'
p10755
aS'// beats as UNKNOWN.'
p10756
ag8990
aS'if (domType < 0)'
p10757
aS'return (UNKNOWN);'
p10758
ag8990
aS'// Rule 2:  If the dominant rhythm is normal, the dominant'
p10759
aS"// beat type doesn't vary much, this beat is premature"
p10760
aS'// and looks sufficiently different than the dominant beat'
p10761
aS'// classify as PVC.'
p10762
ag8990
aS'if (MinimumBeatVariation(domType) && (rhythmClass == PVC) && (domIndex > R2_DI_THRESHOLD)&& (GetDomRhythm() == 1))'
p10763
aS'return (PVC);'
p10764
ag8990
aS'// Rule 3:  If the beat is sufficiently narrow, classify as normal.'
p10765
ag8990
aS'if (beatWidth < R3_WIDTH_THRESHOLD)'
p10766
aS'return (NORMAL);'
p10767
ag8990
aS'// Rule 5:  If the beat cannot be matched to any previously'
p10768
aS'// detected morphology and it is not premature, consider it normal'
p10769
aS'// (probably noisy).'
p10770
ag8990
aS'if ((morphType == MAXTYPES) && (rhythmClass != PVC)) // == UNKNOWN'
p10771
aS'return (NORMAL);'
p10772
ag8990
aS'// Rule 6:  If the maximum number of beat types have been stored,'
p10773
aS'// this beat is not regular or premature and only one'
p10774
aS'// beat of this morphology has been seen, call it normal (probably'
p10775
aS'// noisy).'
p10776
ag8990
aS'if ((GetTypesCount() == MAXTYPES) && (GetBeatTypeCount(morphType) == 1)&& (rhythmClass == UNKNOWN))'
p10777
aS'return (NORMAL);'
p10778
ag8990
aS'// Rule 7:  If this beat looks like the dominant beat and the'
p10779
aS'// rhythm is regular, call it normal.'
p10780
ag8990
aS'if ((domIndex < R7_DI_THRESHOLD) && (rhythmClass == NORMAL))'
p10781
aS'return (NORMAL);'
p10782
ag8990
aS'// Rule 8:  If post classification rhythm is normal for this'
p10783
aS'// type and its shape is close to the dominant shape, classify'
p10784
aS'// as normal.'
p10785
ag8990
aS'if ((domIndex < R8_DI_THRESHOLD) && (CheckPCRhythm(morphType) == NORMAL))'
p10786
aS'return (NORMAL);'
p10787
ag8990
aS'// Rule 9:  If the beat is not premature, it looks similar to the dominant'
p10788
aS'// beat type, and the dominant beat type is variable (noisy), classify as'
p10789
aS'// normal.'
p10790
ag8990
aS'if ((domIndex < R9_DI_THRESHOLD) && (rhythmClass != PVC) && WideBeatVariation(domType))'
p10791
aS'return (NORMAL);'
p10792
ag8990
aS'// Rule 10:  If this beat is significantly different from the dominant beat'
p10793
aS'// there have previously been matching beats, the post rhythm classification'
p10794
aS'// of this type is PVC, and the dominant rhythm is regular, classify as PVC.'
p10795
ag8990
aS'if ((domIndex > R10_DI_THRESHOLD) && (GetBeatTypeCount(morphType) >= R10_BC_LIM)&& (CheckPCRhythm(morphType) == PVC) && (GetDomRhythm() == 1))'
p10796
aS'return (PVC);'
p10797
ag8990
aS"// Rule 11: if the beat is wide, wider than the dominant beat, doesn't"
p10798
aS'// appear to be noisy, and matches a previous type, classify it as'
p10799
aS'// a PVC.'
p10800
ag8990
aS'if ((beatWidth >= R11_MIN_WIDTH)&& (((beatWidth - domWidth >= R11_WIDTH_DIFF1) && (domWidth < R11_WIDTH_BREAK))|| (beatWidth - domWidth >= R11_WIDTH_DIFF2)) && (hfNoise < R11_HF_THRESHOLD) && (noiseLevel < R11_MA_THRESHOLD)  && (blShift < BL_SHIFT_LIMIT) && (morphType < MAXTYPES)&& (GetBeatTypeCount(morphType) > R11_BC_LIM)) // Rev 1.1'
p10801
aS'return (PVC);'
p10802
ag8990
aS'// Rule 12:  If the dominant rhythm is regular and this beat is premature'
p10803
aS'// then classify as PVC.'
p10804
ag8990
aS'if ((rhythmClass == PVC) && (GetDomRhythm() == 1))'
p10805
aS'return (PVC);'
p10806
ag8990
aS'// Rule 14:  If the beat is regular and the dominant rhythm is regular'
p10807
aS'// call the beat normal.'
p10808
ag8990
aS'if ((rhythmClass == NORMAL) && (GetDomRhythm() == 1))'
p10809
aS'return (NORMAL);'
p10810
ag8990
aS'// By this point, we know that rhythm will not help us, so we'
p10811
aS'// have to classify based on width and similarity to the dominant'
p10812
aS'// beat type.'
p10813
ag8990
aS'// Rule 15: If the beat is wider than normal, wide on an'
p10814
aS'// absolute scale, and significantly different from the'
p10815
aS'// dominant beat, call it a PVC.'
p10816
ag8990
aS'if ((beatWidth > domWidth) && (domIndex > R15_DI_THRESHOLD) && (beatWidth >= R15_WIDTH_THRESHOLD))'
p10817
aS'return (PVC);'
p10818
ag8990
aS'// Rule 16:  If the beat is sufficiently narrow, call it normal.'
p10819
ag8990
aS'if (beatWidth < R16_WIDTH_THRESHOLD)'
p10820
aS'return (NORMAL);'
p10821
ag8990
aS"// Rule 17:  If the beat isn't much wider than the dominant beat"
p10822
aS'// call it normal.'
p10823
ag8990
aS'if (beatWidth < domWidth + R17_WIDTH_DELTA)'
p10824
aS'return (NORMAL);'
p10825
ag8990
aS'// If the beat is noisy but reasonably close to dominant,'
p10826
aS'// call it normal.'
p10827
ag8990
aS'// Rule 18:  If the beat is similar to the dominant beat, call it normal.'
p10828
ag8990
aS'if (domIndex < R18_DI_THRESHOLD)'
p10829
aS'return (NORMAL);'
p10830
ag8990
aS"// If it's noisy don't trust the width."
p10831
ag8990
aS"// Rule 19:  If the beat is noisy, we can't trust our width estimate"
p10832
aS'// and we have no useful rhythm information, so guess normal.'
p10833
ag8990
aS'if (hfNoise > R19_HF_THRESHOLD)'
p10834
aS'return (NORMAL);'
p10835
ag8990
aS'// Rule 20:  By this point, we have no rhythm information, the beat'
p10836
aS"// isn't particularly narrow, the beat isn't particulary similar to"
p10837
aS'// the dominant beat, so guess a PVC.'
p10838
ag8990
aS'return (PVC);'
p10839
ag9114
ag8990
ag8990
aS'/****************************************************************************'
p10840
aS'*  DomMonitor, monitors which beat morphology is considered to be dominant.'
p10841
aS'*  The dominant morphology is the beat morphology that has been most frequently'
p10842
aS'*  classified as normal over the course of the last 120 beats.  The dominant'
p10843
aS'*  beat rhythm is classified as regular if at least 3/4 of the dominant beats'
p10844
aS'*  have been classified as regular.'
p10845
aS'*******************************************************************************/'
p10846
ag8990
aS'#define DM_BUFFER_LENGTH 180'
p10847
ag8990
aS'int NewDom, DomRhythm;'
p10848
aS'int DMBeatTypes[DM_BUFFER_LENGTH], DMBeatClasses[DM_BUFFER_LENGTH];'
p10849
aS'int DMBeatRhythms[DM_BUFFER_LENGTH];'
p10850
aS'int DMNormCounts[8], DMBeatCounts[8], DMIrregCount = 0;'
p10851
ag8990
aS'int DomMonitor(int morphType, int rhythmClass, int beatWidth, int rr, int reset)'
p10852
ag9675
aS'static int brIndex = 0;'
p10853
aS'int i, oldType, runCount, dom, max;'
p10854
ag8990
aS'// Fetch the type of the beat before the last beat.'
p10855
ag8990
aS'i = brIndex - 2;'
p10856
ag2068
aS'i += DM_BUFFER_LENGTH;'
p10857
aS'oldType = DMBeatTypes[i];'
p10858
ag8990
aS'// If reset flag is set, reset beat type counts and'
p10859
aS'// beat information buffers.'
p10860
ag8990
ag2125
ag9675
aS'for (i = 0; i < DM_BUFFER_LENGTH; ++i)'
p10861
ag9675
aS'DMBeatTypes[i] = -1;'
p10862
aS'DMBeatClasses[i] = 0;'
p10863
ag9114
ag8990
aS'for (i = 0; i < 8; ++i)'
p10864
ag9675
aS'DMNormCounts[i] = 0;'
p10865
aS'DMBeatCounts[i] = 0;'
p10866
ag9114
aS'DMIrregCount = 0;'
p10867
aS'return (0);'
p10868
ag9114
ag8990
aS'// Once we have wrapped around, subtract old beat types from'
p10869
aS'// the beat counts.'
p10870
ag8990
ag2151
ag9675
aS'--DMBeatCounts[DMBeatTypes[brIndex]];'
p10871
aS'DMNormCounts[DMBeatTypes[brIndex]] -= DMBeatClasses[brIndex];'
p10872
ag2148
aS'--DMIrregCount;'
p10873
ag9114
ag8990
aS'// If this is a morphology that has been detected before, decide'
p10874
aS'// (for the purposes of selecting the dominant normal beattype)'
p10875
aS'// whether it is normal or not and update the approporiate counts.'
p10876
ag8990
ag2251
ag9675
ag8990
aS'// Update the buffers of previous beats and increment the'
p10877
aS'// count for this beat type.'
p10878
ag8990
aS'DMBeatTypes[brIndex] = morphType;'
p10879
aS'++DMBeatCounts[morphType];'
p10880
aS'DMBeatRhythms[brIndex] = rhythmClass;'
p10881
ag8990
aS'// If the rhythm appears regular, update the regular rhythm'
p10882
aS'// count.'
p10883
ag8990
ag2209
aS'++DMIrregCount;'
p10884
ag8990
aS'// Check to see how many beats of this type have occurred in'
p10885
aS'// a row (stop counting at six).'
p10886
ag8990
aS'i = brIndex - 1;'
p10887
ag2222
aS'i += DM_BUFFER_LENGTH;'
p10888
aS'for (runCount = 0; (DMBeatTypes[i] == morphType) && (runCount < 6); ++runCount)'
p10889
ag9675
ag2179
aS'i += DM_BUFFER_LENGTH;'
p10890
ag9114
aS'// If the rhythm is regular, the beat width is less than 130 ms, and'
p10891
aS'// there have been at least two in a row, consider the beat to be'
p10892
aS'// normal.'
p10893
ag8990
ag2235
ag9675
aS'DMBeatClasses[brIndex] = 1;'
p10894
aS'++DMNormCounts[morphType];'
p10895
ag9114
ag8990
aS'// If the last beat was within the normal P-R interval for this beat,'
p10896
aS'// and the one before that was this beat type, assume the last beat'
p10897
aS'// was noise and this beat is normal.'
p10898
ag8990
ag2248
ag9675
aS'DMBeatClasses[brIndex] = 1;'
p10899
aS'++DMNormCounts[morphType];'
p10900
ag9114
ag8990
aS'// Otherwise assume that this is not a normal beat.'
p10901
ag8990
aS'else'
p10902
aS'DMBeatClasses[brIndex] = 0;'
p10903
ag9114
ag8990
aS'// If the beat does not match any of the beat types, store'
p10904
aS'// an indication that the beat does not match.'
p10905
ag8990
aS'else'
p10906
ag9675
aS'DMBeatClasses[brIndex] = 0;'
p10907
aS'DMBeatTypes[brIndex] = -1;'
p10908
ag9114
ag8990
aS'// Increment the index to the beginning of the circular buffers.'
p10909
ag8990
ag2264
aS'brIndex = 0;'
p10910
ag8990
aS'// Determine which beat type has the most beats that seem'
p10911
aS'// normal.'
p10912
ag8990
aS'dom = 0;'
p10913
aS'for (i = 1; i < 8; ++i)'
p10914
ag9675
ag1968
aS'dom = i;'
p10915
ag9114
aS'max = 0;'
p10916
aS'for (i = 1; i < 8; ++i)'
p10917
ag9675
ag2003
aS'max = i;'
p10918
ag9114
aS'// If there are no normal looking beats, fall back on which beat'
p10919
aS'// has occurred most frequently since classification began.'
p10920
ag8990
aS'if ((DMNormCounts[dom] == 0) || (DMBeatCounts[max] / DMBeatCounts[dom] >= 2)) // == 0'
p10921
aS'dom = GetDominantType();'
p10922
ag8990
aS'// If at least half of the most frequently occuring normal'
p10923
aS'// type do not seem normal, fall back on choosing the most frequently'
p10924
aS'// occurring type since classification began.'
p10925
ag8990
ag2290
aS'dom = GetDominantType();'
p10926
ag8990
aS'// If there is any beat type that has been classfied as normal,'
p10927
aS"// but at least 10 don't seem normal, reclassify it to UNKNOWN."
p10928
ag8990
aS'for (i = 0; i < 8; ++i)'
p10929
ag9675
ag2038
aS'SetBeatClass(i, UNKNOWN);'
p10930
ag9114
aS'// Save the dominant type in a global variable so that it is'
p10931
aS'// accessable for debugging.'
p10932
ag8990
aS'NewDom = dom;'
p10933
aS'return (dom);'
p10934
ag9114
ag8990
aS'int GetNewDominantType(void)'
p10935
ag9675
aS'return (NewDom);'
p10936
ag9114
ag8990
aS'int GetDomRhythm(void)'
p10937
ag9675
ag2331
aS'return (0);'
p10938
aS'else'
p10939
aS'return (1);'
p10940
ag9114
ag8990
ag8990
aS'void AdjustDomData(int oldType, int newType)'
p10941
ag9675
aS'int i;'
p10942
ag8990
aS'for (i = 0; i < DM_BUFFER_LENGTH; ++i)'
p10943
ag9675
ag2358
aS'DMBeatTypes[i] = newType;'
p10944
ag9114
ag8990
ag2388
ag9675
aS'DMNormCounts[newType] = DMNormCounts[oldType];'
p10945
aS'DMBeatCounts[newType] = DMBeatCounts[oldType];'
p10946
ag9114
ag8990
aS'DMNormCounts[oldType] = DMBeatCounts[oldType] = 0;'
p10947
ag9114
ag8990
aS'void CombineDomData(int oldType, int newType)'
p10948
ag9675
aS'int i;'
p10949
ag8990
aS'for (i = 0; i < DM_BUFFER_LENGTH; ++i)'
p10950
ag9675
ag2415
aS'DMBeatTypes[i] = newType;'
p10951
ag9114
ag8990
ag2445
ag9675
aS'DMNormCounts[newType] += DMNormCounts[oldType];'
p10952
aS'DMBeatCounts[newType] += DMBeatCounts[oldType];'
p10953
ag9114
ag8990
aS'DMNormCounts[oldType] = DMBeatCounts[oldType] = 0;'
p10954
ag9114
ag8990
aS'/***********************************************************************'
p10955
aS'GetRunCount() checks how many of the present beat type have occurred'
p10956
aS'in a row.'
p10957
aS'***********************************************************************/'
p10958
ag8990
aS'GetRunCount()'
p10959
ag9675
aS'int i;'
p10960
aS'for (i = 1; (i < 8) && (RecentTypes[0] == RecentTypes[i]); ++i)'
p10961
ag9714
aS'return (i);'
p10962
ag9114
aa(lp10963
S'#include "absdefinition.cpp"'
p10964
aS'#include "ANALBEAT.CPP"'
p10965
aS'#include "ANALBEAT.H"'
p10966
aS'#include "BDAC.CPP"'
p10967
aS'#include "BXB.CPP"'
p10968
aS'#include "CLASSIFY.CPP"'
p10969
aS'#include "EASYTEST.CPP"'
p10970
aS'#include "ECGCODES.H"'
p10971
aS'#include "ECGMAP.H"'
p10972
aS'#include "MATCH.CPP"'
p10973
aS'#include "MATCH.H"'
p10974
aS'#include "NOISECHK.CPP"'
p10975
aS'#include "POSTCLAS.CPP"'
p10976
aS'#include "POSTCLAS.H"'
p10977
aS'#include "QRSDET.H"'
p10978
aS'#include "QRSDET2.CPP"'
p10979
aS'#include "QRSFILT.CPP"'
p10980
aS'#include "RHYTHMCHK.CPP"'
p10981
aS'#include "RHYTHMCHK.H"'
p10982
aS'#include "WFDB.H"'
p10983
ag8990
ag8990
aa(lp10984
S'/*****************************************************************************'
p10985
aS'FILE:  easytest.cpp'
p10986
aS'AUTHOR:\tPatrick S. Hamilton'
p10987
aS'REVISED:\t5/13/2002'
p10988
aS'___________________________________________________________________________'
p10989
ag8990
aS'easytest.cpp: Use bdac to generate an annotation file.'
p10990
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p10991
aS'Copywrite (C) 1999 George B. Moody'
p10992
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p10993
aS'the terms of the GNU Library General Public License as published by the Free'
p10994
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p10995
aS'later version.'
p10996
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p10997
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p10998
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p10999
aS'details.'
p11000
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p11001
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p11002
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p11003
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p11004
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p11005
aS'MA 02143 USA).  For updates to this software, please visit our website'
p11006
aS'(http://www.eplimited.com).'
p11007
aS'__________________________________________________________________________'
p11008
ag8990
aS'Easytest.exe is a simple program to help test the performance of our'
p11009
aS'beat detection and classification software. Data is read from the'
p11010
aS'indicated ECG file, the channel 1 signal is fed to bdac.c, and the'
p11011
aS'resulting detections are saved in the annotation file <record>.ate.'
p11012
aS'<record>.ate may then be compared to <record>.atr to using bxb to'
p11013
aS'analyze the performance of the the beat detector and classifier detector.'
p11014
ag8990
aS'Note that data in the MIT/BIH Arrythmia database file has been sampled'
p11015
aS'at 360 samples-per-second, but the beat detection and classification'
p11016
aS'software has been written for data sampled at 200 samples-per-second.'
p11017
aS'Date is converterted from 360 sps to 200 sps with the function NextSample.'
p11018
aS"Code for resampling was copied from George Moody's xform utility.  The beat"
p11019
aS'locations are then adjusted back to coincide with the original sample'
p11020
aS'rate of 360 samples/second so that the annotation files generated by'
p11021
aS'easytest can be compared to the "atruth" annotation files.'
p11022
ag8990
aS'This file must be linked with object files produced from:'
p11023
aS'wfdb software library (source available at www.physionet.org)'
p11024
aS'analbeat.cpp'
p11025
aS'match.cpp'
p11026
aS'rythmchk.cpp'
p11027
aS'classify.cpp'
p11028
aS'bdac.cpp'
p11029
aS'qrsfilt.cpp'
p11030
aS'qrsdet.cpp'
p11031
aS'__________________________________________________________________________'
p11032
ag8990
aS'Revisions'
p11033
aS'4/13/02:'
p11034
aS'Added conditional define statements that allow MIT/BIH or AHA'
p11035
aS'records to be processed.'
p11036
aS'Normalize input to 5 mV/LSB (200 A-to-D units/mV).'
p11037
ag8990
aS'*******************************************************************************/'
p11038
ag8990
aS'#include "wfdb.h"'
p11039
aS'#include "ecgcodes.h"'
p11040
aS'#include "ecgmap.h"'
p11041
aS'#include "stdio.h"'
p11042
aS'#include "qrsdet.h" // For sample rate.'
p11043
ag8990
aS'#define MITDB // Comment this line out to process AHA data.'
p11044
aS'#ifdef MITDB'
p11045
aS'#define ECG_DB_PATH "C:\\\\MITDB\\\\" // Path to where MIT/BIH data.'
p11046
aS'#define REC_COUNT 48'
p11047
aS'int Records[REC_COUNT] = { 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114,'
p11048
aS'115, 116, 117, 118, 119, 121, 122, 123, 124, 200, 201, 202, 203, 205, 207, 208, 209, 210, 212,'
p11049
aS'213, 214, 215, 217, 219, 220, 221, 222, 223, 228, 230, 231, 232, 233, 234 };'
p11050
ag8990
aS'#else'
p11051
aS'#define ECG_DB_PATH "C:\\\\AHADAT~1\\\\" // Path to where AHA data.'
p11052
aS'#define REC_COUNT 69'
p11053
aS'int Records[REC_COUNT] = { 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 2201, 2203,'
p11054
aS'2204, 2205, 2206, 2207, 2208, 2209, 2210, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209,'
p11055
aS'3210, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 5201, 5202, 5203, 5204, 5205,'
p11056
aS'5206, 5207, 5208, 5209, 5210, 6201, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 7201,'
p11057
aS'7202, 7203, 7204, 7205, 7206, 7207, 7208, 7209, 7210 };'
p11058
aS'#endif'
p11059
aS'// External function prototypes.'
p11060
aS'void ResetBDAC(void);'
p11061
aS'int BeatDetectAndClassify(int ecgSample, int* beatType, int* beatMatch);'
p11062
ag8990
aS'// Local Prototypes.'
p11063
aS'int NextSample(int* vout, int nosig, int ifreq, int ofreq, int init);'
p11064
aS'int gcd(int x, int y);'
p11065
ag8990
aS'// Global variables.'
p11066
ag8990
aS'int ADCZero, ADCUnit, InputFileSampleFrequency;'
p11067
ag8990
aS'void main()'
p11068
ag9675
aS'char record[10], fname[20];'
p11069
aS'int i, ecg[2], delay, recNum;'
p11070
aS'WFDB_Siginfo s[2];'
p11071
aS'WFDB_Anninfo a[2];'
p11072
aS'WFDB_Annotation annot;'
p11073
ag8990
aS'unsigned char byte;'
p11074
aS'FILE *newAnn0, *newAnn1;'
p11075
aS'long SampleCount = 0, lTemp, DetectionTime;'
p11076
aS'int beatType, beatMatch;'
p11077
ag8990
aS'// Set up path to database directory'
p11078
ag8990
aS'setwfdb(ECG_DB_PATH);'
p11079
ag8990
aS'// Analyze all 48 MIT/BIH Records.'
p11080
ag8990
aS'for (recNum = 0; recNum < REC_COUNT; ++recNum)'
p11081
ag9675
aS'sprintf(record, "%d", Records[recNum]);'
p11082
aS'printf("Record %d\\n", Records[recNum]);'
p11083
ag8990
aS'// Open a 2 channel record'
p11084
ag8990
ag2532
ag9675
aS'printf("Couldn\'t open %s\\n", record);'
p11085
aS'return;'
p11086
ag9114
ag8990
aS'ADCZero = s[0].adczero;'
p11087
aS'ADCUnit = s[0].gain;'
p11088
aS'InputFileSampleFrequency = sampfreq(record);'
p11089
ag8990
aS'// Setup for output annotations'
p11090
ag8990
aS'a[0].name = "atest";'
p11091
aS'a[0].stat = WFDB_WRITE;'
p11092
ag8990
ag2545
aS'return;'
p11093
ag8990
aS'// Initialize sampling frequency adjustment.'
p11094
ag8990
aS'NextSample(ecg, 2, InputFileSampleFrequency, SAMPLE_RATE, 1);'
p11095
ag8990
aS'// Initialize beat detection and classification.'
p11096
ag8990
aS'ResetBDAC();'
p11097
aS'SampleCount = 0;'
p11098
ag8990
aS'// Read data from MIT/BIH file until there is none left.'
p11099
ag8990
aS'while (NextSample(ecg, 2, InputFileSampleFrequency, SAMPLE_RATE, 0) >= 0)'
p11100
ag9675
aS'++SampleCount;'
p11101
ag8990
aS'// Set baseline to 0 and resolution to 5 mV/lsb (200 units/mV)'
p11102
ag8990
aS'lTemp = ecg[0] - ADCZero;'
p11103
aS'lTemp *= 200;'
p11104
aS'lTemp /= ADCUnit;'
p11105
aS'ecg[0] = lTemp;'
p11106
ag8990
aS'// Pass sample to beat detection and classification.'
p11107
ag8990
aS'delay = BeatDetectAndClassify(ecg[0], &beatType, &beatMatch);'
p11108
ag8990
aS'// If a beat was detected, annotate the beat location'
p11109
aS'// and type.'
p11110
ag8990
ag2479
ag9675
aS'DetectionTime = SampleCount - delay;'
p11111
ag8990
aS'// Convert sample count to input file sample'
p11112
aS'// rate.'
p11113
ag8990
aS'DetectionTime *= InputFileSampleFrequency;'
p11114
aS'DetectionTime /= SAMPLE_RATE;'
p11115
aS'annot.time = DetectionTime;'
p11116
aS'annot.anntyp = beatType;'
p11117
aS'annot.aux = NULL;'
p11118
aS'putann(0, &annot);'
p11119
ag9114
ag9114
ag8990
aS'// Reset database after record is done.'
p11120
ag8990
aS'wfdbquit();'
p11121
ag8990
aS'// Copy "atest.<record>" to "<record>.ate" for future ascess.'
p11122
aS'// (This is necessary for PC files)'
p11123
ag8990
aS'sprintf(fname, "%s.ate", record);'
p11124
aS'newAnn0 = fopen(fname, "rb");'
p11125
aS'sprintf(fname, "%s%s.ate", ECG_DB_PATH, record);'
p11126
aS'newAnn1 = fopen(fname, "wb");'
p11127
ag8990
aS'// Copy byte image of annotation file in this'
p11128
aS'// directory to a correctly named file in the'
p11129
aS'// database directory.'
p11130
ag8990
aS'while (fread(&byte, sizeof(char), 1, newAnn0) == 1)'
p11131
aS'fwrite(&byte, sizeof(char), 1, newAnn1);'
p11132
ag8990
aS'fclose(newAnn0);'
p11133
aS'fclose(newAnn1);'
p11134
ag9114
ag9114
ag8990
aS'/**********************************************************************'
p11135
aS'NextSample reads MIT/BIH Arrhythmia data from a file of data'
p11136
aS'sampled at ifreq and returns data sampled at ofreq.  Data is'
p11137
aS'returned in vout via *vout.  NextSample must be initialized by'
p11138
aS'passing in a nonzero value in init.  NextSample returns -1 when'
p11139
aS'there is no more data left.'
p11140
aS'***********************************************************************/'
p11141
ag8990
aS'int NextSample(int* vout, int nosig, int ifreq, int ofreq, int init)'
p11142
ag9675
aS'int i;'
p11143
aS'static int m, n, mn, ot, it, vv[WFDB_MAXSIG], v[WFDB_MAXSIG], rval;'
p11144
ag8990
ag2664
ag9675
aS'i = gcd(ifreq, ofreq);'
p11145
aS'm = ifreq / i;'
p11146
aS'n = ofreq / i;'
p11147
aS'mn = m * n;'
p11148
aS'ot = it = 0;'
p11149
aS'getvec(vv);'
p11150
aS'rval = getvec(v);'
p11151
ag9114
ag8990
aS'else'
p11152
ag9675
aS'while (ot > it)'
p11153
ag9675
aS'for (i = 0; i < nosig; ++i)'
p11154
aS'vv[i] = v[i];'
p11155
aS'rval = getvec(v);'
p11156
ag2635
ag9675
aS'it -= mn;'
p11157
aS'ot -= mn;'
p11158
ag9114
aS'it += n;'
p11159
ag9114
aS'for (i = 0; i < nosig; ++i)'
p11160
aS'vout[i] = vv[i] + (ot % n) * (v[i] - vv[i]) / n;'
p11161
aS'ot += m;'
p11162
ag9114
ag8990
aS'return (rval);'
p11163
ag9114
ag8990
aS"// Greatest common divisor of x and y (Euclid's algorithm)"
p11164
ag8990
aS'int gcd(int x, int y)'
p11165
ag9675
aS'while (x != y)'
p11166
ag9675
ag2702
aS'x -= y;'
p11167
aS'else'
p11168
aS'y -= x;'
p11169
ag9114
aS'return (x);'
p11170
ag9114
aa(lp11171
S'/* file: ecgmap.h\tG. Moody        8 June 1983'
p11172
aS'Last revised:\t4 May 1999\twfdblib 10.0.0'
p11173
aS'ECG annotation code mapping macros'
p11174
ag8990
aS'_______________________________________________________________________________'
p11175
aS'wfdb: a library for reading and writing annotated waveforms (time series data)'
p11176
aS'Copyright (C) 1999 George B. Moody'
p11177
ag8990
aS'This library is free software; you can redistribute it and/or modify it under'
p11178
aS'the terms of the GNU Library General Public License as published by the Free'
p11179
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p11180
aS'later version.'
p11181
ag8990
aS'This library is distributed in the hope that it will be useful, but WITHOUT ANY'
p11182
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p11183
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p11184
aS'details.'
p11185
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p11186
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p11187
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p11188
ag8990
aS'You may contact the author by e-mail (george@mit.edu) or postal mail'
p11189
aS'(MIT Room E25-505A, Cambridge, MA 02139 USA).  For updates to this software,'
p11190
aS'please visit PhysioNet (http://www.physionet.org/).'
p11191
aS'_______________________________________________________________________________'
p11192
ag8990
aS'These macros evaluate their arguments only once, so that they behave like'
p11193
aS"functions with respect to side-effects (e.g., `isqrs(x++)' is safe).  With"
p11194
aS'the exception of isann(), each macro uses a table;  to avoid wasting space'
p11195
aS'in programs compiled from more than one source, try to keep all references'
p11196
aS'to these macros in a single source file so that multiple instances of the'
p11197
aS'tables are not required.  To save even more space, simply define the unneeded'
p11198
aS"macros before including this file (e.g., `#define map1').*/"
p11199
ag8990
aS'#ifndef wfdb_ECGMAP_H /* avoid multiple definitions */'
p11200
aS'#define wfdb_ECGMAP_H'
p11201
ag8990
aS'#ifndef wfdb_ECGCODES_H'
p11202
aS'#include "ecgcodes.h"'
p11203
aS'#endif'
p11204
ag8990
aS'/* isann(A) is true if A is a legal annotation code, false otherwise */'
p11205
aS'#define isann(A) (0 < (wfdb_mt = (A)) && wfdb_mt <= ACMAX)'
p11206
aS'static int wfdb_mt; /* macro temporary variable */'
p11207
ag8990
aS'/* isqrs(A) is true (1) if A denotes a QRS complex, false (0) otherwise */'
p11208
aS'#ifndef isqrs'
p11209
aS'#define isqrs(A) (isann(A) ? wfdb_qrs[wfdb_mt] : 0)'
p11210
aS'#define setisqrs(A, X) (isann(A) ? (wfdb_qrs[wfdb_mt] = (X)) : 0)'
p11211
aS'static char wfdb_qrs[] = {'
p11212
aS'0, 1, 1, 1, 1, 1, 1, 1, 1, 1, /* 0 - 9 */'
p11213
aS'1, 1, 1, 1, 0, 0, 0, 0, 0, 0, /* 10 - 19 */'
p11214
aS'0, 0, 0, 0, 0, 1, 0, 0, 0, 0, /* 20 - 29 */'
p11215
aS'1, 1, 0, 0, 1, 1, 0, 0, 1, 0, /* 30 - 39 */'
p11216
aS'0, 1, 0, 0, 0, 0, 0, 0, 0, 0 /* 40 - 49 */'
p11217
aS'};'
p11218
aS'#endif'
p11219
ag8990
aS'/* map1(A) maps A into one of {NOTQRS, NORMAL, PVC, FUSION, LEARN} */'
p11220
aS'#ifndef map1'
p11221
aS'#define map1(A) (isann(A) ? wfdb_mp1[wfdb_mt] : NOTQRS)'
p11222
aS'#define setmap1(A, X) (isann(A) ? (wfdb_mp1[wfdb_mt] = (X)) : NOTQRS)'
p11223
aS'static char wfdb_mp1[] = {'
p11224
aS'NOTQRS, NORMAL, NORMAL, NORMAL, NORMAL, /* 0 - 4 */'
p11225
aS'PVC, FUSION, NORMAL, NORMAL, NORMAL, /* 5 - 9 */'
p11226
aS'PVC, NORMAL, NORMAL, NORMAL, NOTQRS, /* 10 - 14 */'
p11227
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 15 - 19 */'
p11228
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 20 - 24 */'
p11229
aS'NORMAL, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 25 - 29 */'
p11230
aS'LEARN, PVC, NOTQRS, NOTQRS, NORMAL, /* 30 - 34 */'
p11231
aS'NORMAL, NOTQRS, NOTQRS, NORMAL, NOTQRS, /* 35 - 39 */'
p11232
aS'NOTQRS, PVC, NOTQRS, NOTQRS, NOTQRS, /* 40 - 44 */'
p11233
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS /* 45 - 49 */'
p11234
aS'};'
p11235
aS'#endif'
p11236
ag8990
aS'/* map2(A) maps A into one of {NOTQRS, NORMAL, SVPB, PVC, FUSION, LEARN} */'
p11237
aS'#ifndef map2'
p11238
aS'#define map2(A) (isann(A) ? wfdb_mp2[wfdb_mt] : NOTQRS)'
p11239
aS'#define setmap2(A, X) (isann(A) ? (wfdb_mp2[wfdb_mt] = (X)) : NOTQRS)'
p11240
aS'static char wfdb_mp2[] = {'
p11241
aS'NOTQRS, NORMAL, NORMAL, NORMAL, SVPB, /* 0 - 4 */'
p11242
aS'PVC, FUSION, SVPB, SVPB, SVPB, /* 5 - 9 */'
p11243
aS'PVC, NORMAL, NORMAL, NORMAL, NOTQRS, /* 10 - 14 */'
p11244
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 15 - 19 */'
p11245
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 20 - 24 */'
p11246
aS'NORMAL, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 25 - 29 */'
p11247
aS'LEARN, PVC, NOTQRS, NOTQRS, NORMAL, /* 30 - 34 */'
p11248
aS'NORMAL, NOTQRS, NOTQRS, NORMAL, NOTQRS, /* 35 - 39 */'
p11249
aS'NOTQRS, PVC, NOTQRS, NOTQRS, NOTQRS, /* 40 - 44 */'
p11250
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS /* 45 - 49 */'
p11251
aS'};'
p11252
aS'#endif'
p11253
ag8990
aS'/* ammap(A) maps an AHA annotation code, A, into an MIT annotation code */'
p11254
aS'#ifndef ammap'
p11255
aS"#define ammap(A) (('D' < (wfdb_mt = (A)) && wfdb_mt <= ']') ? wfdb_ammp[wfdb_mt - 'E'] : NOTQRS)"
p11256
aS'static char wfdb_ammp[] = {'
p11257
aS"VESC, FUSION, NOTQRS, NOTQRS, NOTQRS, /* 'E' - 'I' */"
p11258
aS"NOTQRS, NOTQRS, NOTQRS, NOTQRS, NORMAL, /* 'J' - 'N' */"
p11259
aS"NOTE, PACE, UNKNOWN, RONT, NOTQRS, /* 'O' - 'S' */"
p11260
aS"NOTQRS, NOISE, PVC, NOTQRS, NOTQRS, /* 'T' - 'X' */"
p11261
aS"NOTQRS, NOTQRS, VFON, NOTQRS, VFOFF /* 'Y' - ']' */"
p11262
aS'};'
p11263
aS'#endif'
p11264
ag8990
aS'/* mamap(A,S) maps MIT code A, subtype S, into an AHA annotation code */'
p11265
aS'#ifndef mamap'
p11266
aS'#define mamap(A, S)                                                                                \\'
p11267
aS"(isann(A) ? (((wfdb_mt = wfdb_mamp[wfdb_mt]) == 'U' && (S) != -1) ? 'O' : wfdb_mt) : 'O')"
p11268
aS'static char wfdb_mamp[] = {'
p11269
aS"'O', 'N', 'N', 'N', 'N', /* 0 - 4 */"
p11270
aS"'V', 'F', 'N', 'N', 'N', /* 5 - 9 */"
p11271
aS"'E', 'N', 'P', 'Q', 'U', /* 10 - 14 */"
p11272
aS"'O', 'O', 'O', 'O', 'O', /* 15 - 19 */"
p11273
aS"'O', 'O', 'O', 'O', 'O', /* 20 - 24 */"
p11274
aS"'N', 'O', 'O', 'O', 'O', /* 25 - 29 */"
p11275
aS"'Q', 'O', '[', ']', 'N', /* 30 - 34 */"
p11276
aS"'N', 'O', 'O', 'N', 'O', /* 35 - 39 */"
p11277
aS"'O', 'R', 'O', 'O', 'O', /* 40 - 44 */"
p11278
aS"'O', 'O', 'O', 'O', 'O' /* 45 - 49 */"
p11279
aS'};'
p11280
aS'#endif'
p11281
ag8990
aS'/* Annotation position codes.  These may be used by applications which plot'
p11282
aS'signals and annotations to determine where to print annotation mnemonics. */'
p11283
aS'#define APUNDEF 0 /* for undefined annotation types */'
p11284
aS'#define APSTD 1 /* standard position */'
p11285
aS'#define APHIGH 2 /* a level above APSTD */'
p11286
aS'#define APLOW 3 /* a level below APSTD */'
p11287
aS"#define APATT 4 /* attached to the signal specified by `chan' */"
p11288
aS'#define APAHIGH 5 /* a level above APATT */'
p11289
aS'#define APALOW 6 /* a level below APATT */'
p11290
ag8990
aS'/* annpos(A) returns the appropriate position code for A */'
p11291
aS'#ifndef annpos'
p11292
aS'#define annpos(A) (isann(A) ? wfdb_annp[wfdb_mt] : APUNDEF)'
p11293
aS'#define setannpos(A, X) (isann(A) ? (wfdb_annp[wfdb_mt] = (X)) : APUNDEF)'
p11294
aS'static char wfdb_annp[] = {'
p11295
aS'APUNDEF, APSTD, APSTD, APSTD, APSTD, /* 0 - 4 */'
p11296
aS'APSTD, APSTD, APSTD, APSTD, APSTD, /* 5 - 9 */'
p11297
aS'APSTD, APSTD, APSTD, APSTD, APHIGH, /* 10 - 14 */'
p11298
aS'APUNDEF, APHIGH, APUNDEF, APHIGH, APHIGH, /* 15 - 19 */'
p11299
aS'APHIGH, APHIGH, APHIGH, APHIGH, APHIGH, /* 20 - 24 */'
p11300
aS'APSTD, APHIGH, APHIGH, APLOW, APHIGH, /* 25 - 29 */'
p11301
aS'APSTD, APSTD, APSTD, APSTD, APSTD, /* 30 - 34 */'
p11302
aS'APSTD, APHIGH, APHIGH, APSTD, APHIGH, /* 35 - 39 */'
p11303
aS'APHIGH, APSTD, APUNDEF, APUNDEF, APUNDEF, /* 40 - 44 */'
p11304
aS'APUNDEF, APUNDEF, APUNDEF, APUNDEF, APUNDEF /* 45 - 49 */'
p11305
aS'};'
p11306
aS'#endif'
p11307
ag8990
aS'#endif'
p11308
aa(lp11309
S'/*****************************************************************************'
p11310
aS'FILE:  analbeat.cpp'
p11311
aS'AUTHOR:\tPatrick S. Hamilton'
p11312
aS'REVISED:\t5/13/2002'
p11313
aS'___________________________________________________________________________'
p11314
ag8990
aS'analbeat.cpp: Analyze Beat'
p11315
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p11316
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p11317
aS'the terms of the GNU Library General Public License as published by the Free'
p11318
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p11319
aS'later version.'
p11320
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p11321
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p11322
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p11323
aS'details.'
p11324
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p11325
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p11326
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p11327
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p11328
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p11329
aS'MA 02143 USA).  For updates to this software, please visit our website'
p11330
aS'(http://www.eplimited.com).'
p11331
aS'__________________________________________________________________________'
p11332
ag8990
aS'This file contains functions for determining the QRS onset, QRS offset,'
p11333
aS'beat onset, beat offset, polarity, and isoelectric level for a beat.'
p11334
ag8990
aS'Revisions:'
p11335
aS'4/16: Modified to prevent isoStart from being set to less than ISO_LENGTH1-1'
p11336
aS'5/13/2002: Time related constants are tied to BEAT_SAMPLE_RATE in bdac.h.'
p11337
ag8990
aS'*****************************************************************************/'
p11338
aS'#include "bdac.h"'
p11339
aS'#include <stdio.h>'
p11340
aS'#include <stdlib.h>'
p11341
ag8990
aS'#define ISO_LENGTH1 BEAT_MS50'
p11342
aS'#define ISO_LENGTH2 BEAT_MS80'
p11343
aS'#define ISO_LIMIT 20'
p11344
ag8990
aS'// Local prototypes.'
p11345
ag8990
aS'int IsoCheck(int* data, int isoLength);'
p11346
ag8990
aS'/****************************************************************'
p11347
aS'IsoCheck determines whether the amplitudes of a run'
p11348
aS'of data fall within a sufficiently small amplitude that'
p11349
aS'the run can be considered isoelectric.'
p11350
aS'*****************************************************************/'
p11351
ag8990
aS'int IsoCheck(int* data, int isoLength)'
p11352
ag9675
aS'int i, max, min;'
p11353
ag8990
aS'for (i = 1, max = min = data[0]; i < isoLength; ++i)'
p11354
ag9675
ag2756
aS'max = data[i];'
p11355
aS'else if (data[i] < min)'
p11356
aS'min = data[i];'
p11357
ag9114
ag8990
ag2786
aS'return (1);'
p11358
aS'return (0);'
p11359
ag9114
ag8990
aS'/**********************************************************************'
p11360
aS'AnalyzeBeat takes a beat buffer as input and returns (via pointers)'
p11361
aS'estimates of the QRS onset, QRS offset, polarity, isoelectric level'
p11362
aS'beat beginning (P-wave onset), and beat ending (T-wave offset).'
p11363
aS'Analyze Beat assumes that the beat has been sampled at 100 Hz, is'
p11364
aS'BEATLGTH long, and has an R-wave location of roughly FIDMARK.'
p11365
ag8990
aS'Note that beatBegin is the number of samples before FIDMARK that'
p11366
aS'the beat begins and beatEnd is the number of samples after the'
p11367
aS'FIDMARK that the beat ends.'
p11368
aS'************************************************************************/'
p11369
ag8990
aS'#define INF_CHK_N BEAT_MS40'
p11370
ag8990
aS'void AnalyzeBeat(int* beat, int* onset, int* offset, int* isoLevel, int* beatBegin, int* beatEnd, int* amp)'
p11371
ag9675
aS'int maxSlope = 0, maxSlopeI, minSlope = 0, minSlopeI;'
p11372
aS'int maxV, minV;'
p11373
aS'int isoStart, isoEnd;'
p11374
aS'int slope, i;'
p11375
ag8990
aS'// Search back from the fiducial mark to find the isoelectric'
p11376
aS'// region preceeding the QRS complex.'
p11377
ag8990
aS'for (i = FIDMARK - ISO_LENGTH2; (i > 0) && (IsoCheck(&beat[i], ISO_LENGTH2) == 0); --i)'
p11378
ag9714
ag8990
aS"// If the first search didn't turn up any isoelectric region, look for"
p11379
aS'// a shorter isoelectric region.'
p11380
ag8990
ag3195
ag9675
aS'for (i = FIDMARK - ISO_LENGTH1; (i > 0) && (IsoCheck(&beat[i], ISO_LENGTH1) == 0); --i)'
p11381
ag9714
aS'isoStart = i + (ISO_LENGTH1 - 1);'
p11382
ag9114
aS'else'
p11383
aS'isoStart = i + (ISO_LENGTH2 - 1);'
p11384
ag8990
aS'// Search forward from the R-wave to find an isoelectric region following'
p11385
aS'// the QRS complex.'
p11386
ag8990
aS'for (i = FIDMARK; (i < BEATLGTH) && (IsoCheck(&beat[i], ISO_LENGTH1) == 0); ++i)'
p11387
ag9714
aS'isoEnd = i;'
p11388
ag8990
aS'// Find the maximum and minimum slopes on the'
p11389
aS'// QRS complex.'
p11390
ag8990
aS'i = FIDMARK - BEAT_MS150;'
p11391
aS'maxSlope = maxSlope = beat[i] - beat[i - 1];'
p11392
aS'maxSlopeI = minSlopeI = i;'
p11393
ag8990
aS'for (; i < FIDMARK + BEAT_MS150; ++i)'
p11394
ag9675
aS'slope = beat[i] - beat[i - 1];'
p11395
ag2867
ag9675
aS'maxSlope = slope;'
p11396
aS'maxSlopeI = i;'
p11397
ag9114
aS'else if (slope < minSlope)'
p11398
ag9675
aS'minSlope = slope;'
p11399
aS'minSlopeI = i;'
p11400
ag9114
ag9114
ag8990
aS'// Use the smallest of max or min slope for search parameters.'
p11401
ag8990
ag3218
aS'maxSlope = -minSlope;'
p11402
aS'else'
p11403
aS'minSlope = -maxSlope;'
p11404
ag8990
ag3560
ag9675
ag8990
aS'// Search back from the maximum slope point for the QRS onset.'
p11405
ag8990
aS'for (i = maxSlopeI; (i > 0) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); --i)'
p11406
ag9714
aS'*onset = i - 1;'
p11407
ag8990
aS'// Check to see if this was just a brief inflection.'
p11408
ag8990
aS'for (; (i > *onset - INF_CHK_N) && ((beat[i] - beat[i - 1]) <= (maxSlope >> 2)); --i)'
p11409
ag9714
ag3395
ag9675
aS'for (; (i > 0) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); --i)'
p11410
ag9714
aS'*onset = i - 1;'
p11411
ag9114
aS'i = *onset + 1;'
p11412
ag8990
aS'// Check to see if a large negative slope follows an inflection.'
p11413
aS'// If so, extend the onset a little more.'
p11414
ag8990
aS'for (; (i > *onset - INF_CHK_N) && ((beat[i - 1] - beat[i]) < (maxSlope >> 2)); --i)'
p11415
ag9714
ag3430
ag9675
aS'for (; (i > 0) && ((beat[i - 1] - beat[i]) > (maxSlope >> 2)); --i)'
p11416
ag9714
aS'*onset = i - 1;'
p11417
ag9114
ag8990
aS'// Search forward from minimum slope point for QRS offset.'
p11418
ag8990
aS'for (i = minSlopeI; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); ++i)'
p11419
ag9714
aS'*offset = i;'
p11420
ag8990
aS"// Make sure this wasn't just an inflection."
p11421
ag8990
aS'for (; (i < *offset + INF_CHK_N) && ((beat[i] - beat[i - 1]) >= (minSlope >> 2)); ++i)'
p11422
ag9714
ag3465
ag9675
aS'for (; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); ++i)'
p11423
ag9714
aS'*offset = i;'
p11424
ag9114
aS'i = *offset;'
p11425
ag8990
aS'// Check to see if there is a significant upslope following'
p11426
aS'// the end of the down slope.'
p11427
ag8990
aS'for (; (i < *offset + BEAT_MS40) && ((beat[i - 1] - beat[i]) > (minSlope >> 2)); ++i)'
p11428
ag9714
ag3557
ag9675
aS'for (; (i < BEATLGTH) && ((beat[i - 1] - beat[i]) < (minSlope >> 2)); ++i)'
p11429
ag9714
aS'*offset = i;'
p11430
ag8990
aS'// One more search motivated by PVC shape in 123.'
p11431
ag8990
aS'for (; (i < *offset + BEAT_MS60) && (beat[i] - beat[i - 1] > (minSlope >> 2)); ++i)'
p11432
ag9714
ag3554
ag9675
aS'for (; (i < BEATLGTH) && (beat[i] - beat[i - 1] < (minSlope >> 2)); ++i)'
p11433
ag9714
aS'*offset = i;'
p11434
ag9114
ag9114
ag9114
ag8990
aS'else'
p11435
ag9675
ag8990
aS'// Search back from the minimum slope point for the QRS onset.'
p11436
ag8990
aS'for (i = minSlopeI; (i > 0) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); --i)'
p11437
ag9714
aS'*onset = i - 1;'
p11438
ag8990
aS'// Check to see if this was just a brief inflection.'
p11439
ag8990
aS'for (; (i > *onset - INF_CHK_N) && ((beat[i] - beat[i - 1]) >= (minSlope >> 2)); --i)'
p11440
ag9714
ag3595
ag9675
aS'for (; (i > 0) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); --i)'
p11441
ag9714
aS'*onset = i - 1;'
p11442
ag9114
aS'i = *onset + 1;'
p11443
ag8990
aS'// Check for significant positive slope after a turning point.'
p11444
ag8990
aS'for (; (i > *onset - INF_CHK_N) && ((beat[i - 1] - beat[i]) > (minSlope >> 2)); --i)'
p11445
ag9714
ag3630
ag9675
aS'for (; (i > 0) && ((beat[i - 1] - beat[i]) < (minSlope >> 2)); --i)'
p11446
ag9714
aS'*onset = i - 1;'
p11447
ag9114
ag8990
aS'// Search forward from maximum slope point for QRS offset.'
p11448
ag8990
aS'for (i = maxSlopeI; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); ++i)'
p11449
ag9714
aS'*offset = i;'
p11450
ag8990
aS'// Check to see if this was just a brief inflection.'
p11451
ag8990
aS'for (; (i < *offset + INF_CHK_N) && ((beat[i] - beat[i - 1]) <= (maxSlope >> 2)); ++i)'
p11452
ag9714
ag3665
ag9675
aS'for (; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); ++i)'
p11453
ag9714
aS'*offset = i;'
p11454
ag9114
aS'i = *offset;'
p11455
ag8990
aS'// Check to see if there is a significant downslope following'
p11456
aS'// the end of the up slope.'
p11457
ag8990
aS'for (; (i < *offset + BEAT_MS40) && ((beat[i - 1] - beat[i]) < (maxSlope >> 2)); ++i)'
p11458
ag9714
ag3700
ag9675
aS'for (; (i < BEATLGTH) && ((beat[i - 1] - beat[i]) > (maxSlope >> 2)); ++i)'
p11459
ag9714
aS'*offset = i;'
p11460
ag9114
ag9114
ag8990
aS'// If the estimate of the beginning of the isoelectric level was'
p11461
aS'// at the beginning of the beat, use the slope based QRS onset point'
p11462
aS'// as the iso electric point.'
p11463
ag8990
aS'if ((isoStart == ISO_LENGTH1 - 1) && (*onset > isoStart)) // ** 4/19 **'
p11464
aS'isoStart = *onset;'
p11465
ag8990
aS'// Otherwise, if the isoelectric start and the slope based points'
p11466
aS'// are close, use the isoelectric start point.'
p11467
ag8990
ag3726
aS'*onset = isoStart;'
p11468
ag8990
aS'// If the isoelectric end and the slope based QRS offset are close'
p11469
aS'// use the isoelectic based point.'
p11470
ag8990
ag3739
aS'*offset = isoEnd;'
p11471
ag8990
aS'*isoLevel = beat[isoStart];'
p11472
ag8990
ag8990
aS'// Find the maximum and minimum values in the QRS.'
p11473
ag8990
aS'for (i = *onset, maxV = minV = beat[*onset]; i < *offset; ++i)'
p11474
ag9675
ag3044
aS'maxV = beat[i];'
p11475
aS'else if (beat[i] < minV)'
p11476
aS'minV = beat[i];'
p11477
ag9114
aS'// If the offset is significantly below the onset and the offset is'
p11478
aS'// on a negative slope, add the next up slope to the width.'
p11479
ag8990
ag3822
ag9675
ag8990
aS'// Find the maximum slope between the finish and the end of the buffer.'
p11480
ag8990
aS'for (i = maxSlopeI = *offset, maxSlope = beat[*offset] - beat[*offset - 1];(i < *offset + BEAT_MS100) && (i < BEATLGTH); ++i)'
p11481
ag9675
aS'slope = beat[i] - beat[i - 1];'
p11482
ag3767
ag9675
aS'maxSlope = slope;'
p11483
aS'maxSlopeI = i;'
p11484
ag9114
ag9114
ag8990
aS'// Find the new offset.'
p11485
ag8990
ag3819
ag9675
aS'for (i = maxSlopeI; (i < BEATLGTH) && (beat[i] - beat[i - 1] > (maxSlope >> 1)); ++i)'
p11486
ag9714
aS'*offset = i;'
p11487
ag9114
ag9114
ag8990
aS'// Determine beginning and ending of the beat.'
p11488
aS'// Search for an isoelectric region that precedes the R-wave.'
p11489
aS'// by at least 250 ms.'
p11490
ag8990
aS'for (i = FIDMARK - BEAT_MS250;(i >= BEAT_MS80) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 0); --i)'
p11491
ag9714
aS'*beatBegin = i;'
p11492
ag8990
aS'// If there was an isoelectric section at 250 ms before the'
p11493
aS'// R-wave, search forward for the isoelectric region closest'
p11494
aS'// to the R-wave.  But leave at least 50 ms between beat begin'
p11495
aS'// and onset, or else normal beat onset is within PVC QRS complexes.'
p11496
aS'// that screws up noise estimation.'
p11497
ag8990
ag3857
ag9675
aS'for (; (i < *onset - BEAT_MS50) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 1); ++i)'
p11498
ag9714
aS'*beatBegin = i - 1;'
p11499
ag9114
ag8990
aS'// Rev 1.1'
p11500
ag3940
ag9675
aS'for (; (i < *onset) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 0); ++i)'
p11501
ag9714
ag3937
ag9675
aS'for (; (i < *onset) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 1); ++i)'
p11502
ag9714
ag3934
aS'*beatBegin = i - 1;'
p11503
ag9114
ag9114
ag8990
aS'// Search for the end of the beat as the first isoelectric'
p11504
aS'// segment that follows the beat by at least 300 ms.'
p11505
ag8990
aS'for (i = FIDMARK + BEAT_MS300; (i < BEATLGTH) && (IsoCheck(&beat[i], BEAT_MS80) == 0); ++i)'
p11506
ag9714
aS'*beatEnd = i;'
p11507
ag8990
ag8990
aS'maxV = minV = beat[*onset];'
p11508
aS'for (i = *onset; i < *offset; ++i)'
p11509
ag9675
ag3133
aS'maxV = beat[i];'
p11510
aS'else if (beat[i] < minV)'
p11511
aS'minV = beat[i];'
p11512
ag9114
aS'*amp = maxV - minV;'
p11513
ag9114
aa(lp11514
g8990
aa(lp11515
S'/* file: ecgcodes.h\tT. Baker and G. Moody\t  June 1981'
p11516
aS'Last revised:  19 March 1992\t\tdblib 7.0'
p11517
aS'ECG annotation codes'
p11518
ag8990
aS'Copyright (C) Massachusetts Institute of Technology 1992. All rights reserved.'
p11519
aS'*/'
p11520
ag8990
aS'#ifndef db_ECGCODES_H /* avoid multiple definitions */'
p11521
aS'#define db_ECGCODES_H'
p11522
ag8990
aS'#define NOTQRS 0 /* not-QRS (not a getann/putann code) */'
p11523
aS'#define NORMAL 1 /* normal beat */'
p11524
aS'#define LBBB 2 /* left bundle branch block beat */'
p11525
aS'#define RBBB 3 /* right bundle branch block beat */'
p11526
aS'#define ABERR 4 /* aberrated atrial premature beat */'
p11527
aS'#define PVC 5 /* premature ventricular contraction */'
p11528
aS'#define FUSION 6 /* fusion of ventricular and normal beat */'
p11529
aS'#define NPC 7 /* nodal (junctional) premature beat */'
p11530
aS'#define APC 8 /* atrial premature contraction */'
p11531
aS'#define SVPB 9 /* premature or ectopic supraventricular beat */'
p11532
aS'#define VESC 10 /* ventricular escape beat */'
p11533
aS'#define NESC 11 /* nodal (junctional) escape beat */'
p11534
aS'#define PACE 12 /* paced beat */'
p11535
aS'#define UNKNOWN 13 /* unclassifiable beat */'
p11536
aS'#define NOISE 14 /* signal quality change */'
p11537
aS'#define ARFCT 16 /* isolated QRS-like artifact */'
p11538
aS'#define STCH 18 /* ST change */'
p11539
aS'#define TCH 19 /* T-wave change */'
p11540
aS'#define SYSTOLE 20 /* systole */'
p11541
aS'#define DIASTOLE 21 /* diastole */'
p11542
aS'#define NOTE 22 /* comment annotation */'
p11543
aS'#define MEASURE 23 /* measurement annotation */'
p11544
aS'#define BBB 25 /* left or right bundle branch block */'
p11545
aS'#define PACESP 26 /* non-conducted pacer spike */'
p11546
aS'#define RHYTHM 28 /* rhythm change */'
p11547
aS'#define LEARN 30 /* learning */'
p11548
aS'#define FLWAV 31 /* ventricular flutter wave */'
p11549
aS'#define VFON 32 /* start of ventricular flutter/fibrillation */'
p11550
aS'#define VFOFF 33 /* end of ventricular flutter/fibrillation */'
p11551
aS'#define AESC 34 /* atrial escape beat */'
p11552
aS'#define SVESC 35 /* supraventricular escape beat */'
p11553
aS'#define NAPC 37 /* non-conducted P-wave (blocked APB) */'
p11554
aS'#define PFUS 38 /* fusion of paced and normal beat */'
p11555
aS'#define PQ 39 /* PQ junction (beginning of QRS) */'
p11556
aS'#define JPT 40 /* J point (end of QRS) */'
p11557
aS'#define RONT 41 /* R-on-T premature ventricular contraction */'
p11558
ag8990
aS'/* ... annotation codes between RONT+1 and ACMAX inclusive are user-defined */'
p11559
ag8990
aS'#define ACMAX 49 /* value of largest valid annot code (must be < 50) */'
p11560
ag8990
aS'#endif'
p11561
aa(lp11562
S'/*****************************************************************************'
p11563
aS'FILE:  analbeat.h'
p11564
aS'AUTHOR:\tPatrick S. Hamilton'
p11565
aS'REVISED:\t12/4/2001'
p11566
aS'___________________________________________________________________________'
p11567
ag8990
aS'analbeat.h: Beat analysis prototype definition.'
p11568
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p11569
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p11570
aS'the terms of the GNU Library General Public License as published by the Free'
p11571
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p11572
aS'later version.'
p11573
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p11574
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p11575
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p11576
aS'details.'
p11577
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p11578
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p11579
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p11580
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p11581
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p11582
aS'MA 02143 USA).  For updates to this software, please visit our website'
p11583
aS'(http://www.eplimited.com).'
p11584
aS'******************************************************************************/'
p11585
ag8990
aS'// External prototypes for analbeat.cpp'
p11586
ag8990
aS'void AnalyzeBeat(int* beat, int* onset, int* offset, int* isoLevel, int* beatBegin, int* beatEnd, int* amp);'
p11587
aS'// hey yo'
p11588
aa(lp11589
S'/*****************************************************************************'
p11590
aS'FILE:  bdac.cpp'
p11591
aS'AUTHOR:\tPatrick S. Hamilton'
p11592
aS'REVISED:\t5/13/2002'
p11593
aS'___________________________________________________________________________'
p11594
ag8990
aS'bdac.cpp: Beat Detection And Classification'
p11595
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p11596
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p11597
aS'the terms of the GNU Library General Public License as published by the Free'
p11598
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p11599
aS'later version.'
p11600
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p11601
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p11602
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p11603
aS'details.'
p11604
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p11605
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p11606
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p11607
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p11608
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p11609
aS'MA 02143 USA).  For updates to this software, please visit our website'
p11610
aS'(http://www.eplimited.com).'
p11611
aS'__________________________________________________________________________'
p11612
ag8990
aS'bdac.cpp contains functions for handling Beat Detection And Classification.'
p11613
aS'The primary function calls a qrs detector.  When a beat is detected it waits'
p11614
aS'until a sufficient number of samples from the beat have occurred.  When the'
p11615
aS'beat is ready, BeatDetectAndClassify passes the beat and the timing'
p11616
aS'information on to the functions that actually classify the beat.'
p11617
ag8990
aS'Functions in bdac.cpp require functions in the following files:'
p11618
aS'qrsfilt.cpp'
p11619
aS'qrsdet.cpp'
p11620
aS'classify.cpp'
p11621
aS'rythmchk.cpp'
p11622
aS'noisechk.cpp'
p11623
aS'analbeat.cpp'
p11624
aS'match.cpp'
p11625
aS'postclas.cpp'
p11626
ag8990
aS'__________________________________________________________________________'
p11627
ag8990
aS'Revisions:'
p11628
aS'5/13/02:'
p11629
aS'Encapsulated down sampling from input stream to beat template in'
p11630
aS'the function DownSampleBeat.'
p11631
ag8990
aS'Constants related to time are derived from SAMPLE_RATE in qrsdet'
p11632
aS'and BEAT_SAMPLE_RATE in bcac.h.'
p11633
ag8990
aS'*******************************************************************************/'
p11634
aS'#include "qrsdet.h" // For base SAMPLE_RATE'
p11635
aS'#include "bdac.h"'
p11636
ag8990
aS'#define ECG_BUFFER_LENGTH 1000 // Should be long enough for a beat'
p11637
aS'// plus extra space to accommodate'
p11638
aS'// the maximum detection delay.'
p11639
aS'#define BEAT_QUE_LENGTH 10 // Length of que for beats awaiting'
p11640
aS'// classification.  Because of'
p11641
aS'// detection delays, Multiple beats'
p11642
aS'// can occur before there is enough data'
p11643
aS'// to classify the first beat in the que.'
p11644
ag8990
aS'// Internal function prototypes.'
p11645
ag8990
aS'void DownSampleBeat(int* beatOut, int* beatIn);'
p11646
ag8990
aS'// External function prototypes.'
p11647
ag8990
aS'int QRSDet(int datum, int init);'
p11648
aS'int NoiseCheck(int datum, int delay, int RR, int beatBegin, int beatEnd);'
p11649
aS'int Classify(int* newBeat, int rr, int noiseLevel, int* beatMatch, int* fidAdj, int init);'
p11650
aS'int GetDominantType(void);'
p11651
aS'int GetBeatEnd(int type);'
p11652
aS'int GetBeatBegin(int type);'
p11653
aS'int gcd(int x, int y);'
p11654
ag8990
aS'// Global Variables'
p11655
ag8990
aS'int ECGBuffer[ECG_BUFFER_LENGTH], ECGBufferIndex = 0; // Circular data buffer.'
p11656
aS'int BeatBuffer[BEATLGTH];'
p11657
aS'int BeatQue[BEAT_QUE_LENGTH], BeatQueCount = 0; // Buffer of detection delays.'
p11658
aS'int RRCount = 0;'
p11659
aS'int InitBeatFlag = 1;'
p11660
ag8990
aS'/******************************************************************************'
p11661
aS'ResetBDAC() resets static variables required for beat detection and'
p11662
aS'classification.'
p11663
aS'*******************************************************************************/'
p11664
ag8990
aS'void ResetBDAC(void)'
p11665
ag9675
aS'int dummy;'
p11666
aS'QRSDet(0, 1); // Reset the qrs detector'
p11667
aS'RRCount = 0;'
p11668
aS'Classify(BeatBuffer, 0, 0, &dummy, &dummy, 1);'
p11669
aS'InitBeatFlag = 1;'
p11670
aS'BeatQueCount = 0; // Flush the beat que.'
p11671
ag9114
ag8990
aS'/*****************************************************************************'
p11672
aS'Syntax:'
p11673
aS'int BeatDetectAndClassify(int ecgSample, int *beatType, *beatMatch) ;'
p11674
ag8990
aS'Description:'
p11675
aS'BeatDetectAndClassify() implements a beat detector and classifier.'
p11676
aS'ECG samples are passed into BeatDetectAndClassify() one sample at a'
p11677
aS'time.  BeatDetectAndClassify has been designed for a sample rate of'
p11678
aS'200 Hz.  When a beat has been detected and classified the detection'
p11679
aS'delay is returned and the beat classification is returned through the'
p11680
aS'pointer *beatType.  For use in debugging, the number of the template'
p11681
aS'that the beat was matched to is returned in via *beatMatch.'
p11682
ag8990
aS'Returns'
p11683
aS'BeatDetectAndClassify() returns 0 if no new beat has been detected and'
p11684
aS'classified.  If a beat has been classified, BeatDetectAndClassify returns'
p11685
aS'the number of samples since the approximate location of the R-wave.'
p11686
ag8990
aS'****************************************************************************/'
p11687
ag8990
aS'int BeatDetectAndClassify(int ecgSample, int* beatType, int* beatMatch)'
p11688
ag9675
aS'int detectDelay, rr, i, j;'
p11689
aS'int noiseEst = 0, beatBegin, beatEnd;'
p11690
aS'int domType;'
p11691
aS'int fidAdj;'
p11692
aS'int tempBeat[(SAMPLE_RATE / BEAT_SAMPLE_RATE) * BEATLGTH];'
p11693
ag8990
aS'// Store new sample in the circular buffer.'
p11694
ag8990
aS'ECGBuffer[ECGBufferIndex] = ecgSample;'
p11695
ag4051
aS'ECGBufferIndex = 0;'
p11696
ag8990
aS'// Increment RRInterval count.'
p11697
ag8990
aS'++RRCount;'
p11698
ag8990
aS'// Increment detection delays for any beats in the que.'
p11699
ag8990
aS'for (i = 0; i < BeatQueCount; ++i)'
p11700
aS'++BeatQue[i];'
p11701
ag8990
aS'// Run the sample through the QRS detector.'
p11702
ag8990
aS'detectDelay = QRSDet(ecgSample, 0);'
p11703
ag4064
ag9675
aS'BeatQue[BeatQueCount] = detectDelay;'
p11704
aS'++BeatQueCount;'
p11705
ag9114
ag8990
aS'// Return if no beat is ready for classification.'
p11706
ag8990
ag4077
aS'|| (BeatQueCount == 0))'
p11707
ag9675
aS'NoiseCheck(ecgSample, 0, rr, beatBegin, beatEnd); // Update noise check buffer'
p11708
aS'return 0;'
p11709
ag9114
ag8990
aS'// Otherwise classify the beat at the head of the que.'
p11710
ag8990
aS'rr = RRCount - BeatQue[0]; // Calculate the R-to-R interval'
p11711
aS'detectDelay = RRCount = BeatQue[0];'
p11712
ag8990
aS'// Estimate low frequency noise in the beat.'
p11713
aS'// Might want to move this into classify().'
p11714
ag8990
aS'domType = GetDominantType();'
p11715
ag4100
ag9675
aS'beatBegin = MS250;'
p11716
aS'beatEnd = MS300;'
p11717
ag9114
aS'else'
p11718
ag9675
aS'beatBegin = (SAMPLE_RATE / BEAT_SAMPLE_RATE) * (FIDMARK - GetBeatBegin(domType));'
p11719
aS'beatEnd = (SAMPLE_RATE / BEAT_SAMPLE_RATE) * (GetBeatEnd(domType) - FIDMARK);'
p11720
ag9114
aS'noiseEst = NoiseCheck(ecgSample, detectDelay, rr, beatBegin, beatEnd);'
p11721
ag8990
aS'// Copy the beat from the circular buffer to the beat buffer'
p11722
aS'// and reduce the sample rate by averageing pairs of data'
p11723
aS'// points.'
p11724
ag8990
aS'j = ECGBufferIndex - detectDelay - (SAMPLE_RATE / BEAT_SAMPLE_RATE) * FIDMARK;'
p11725
ag4113
aS'j += ECG_BUFFER_LENGTH;'
p11726
ag8990
aS'for (i = 0; i < (SAMPLE_RATE / BEAT_SAMPLE_RATE) * BEATLGTH; ++i)'
p11727
ag9675
aS'tempBeat[i] = ECGBuffer[j];'
p11728
ag3999
aS'j = 0;'
p11729
ag9114
ag8990
aS'DownSampleBeat(BeatBuffer, tempBeat);'
p11730
ag8990
aS'// Update the QUE.'
p11731
ag8990
aS'for (i = 0; i < BeatQueCount - 1; ++i)'
p11732
aS'BeatQue[i] = BeatQue[i + 1];'
p11733
aS'--BeatQueCount;'
p11734
ag8990
ag8990
aS'// Skip the first beat.'
p11735
ag8990
ag4126
ag9675
aS'InitBeatFlag = 0;'
p11736
aS'*beatType = 13;'
p11737
aS'*beatMatch = 0;'
p11738
aS'fidAdj = 0;'
p11739
ag9114
ag8990
aS'// Classify all other beats.'
p11740
ag8990
aS'else'
p11741
ag9675
aS'*beatType = Classify(BeatBuffer, rr, noiseEst, beatMatch, &fidAdj, 0);'
p11742
aS'fidAdj *= SAMPLE_RATE / BEAT_SAMPLE_RATE;'
p11743
ag9114
ag8990
aS'// Ignore detection if the classifier decides that this'
p11744
aS'// was the trailing edge of a PVC.'
p11745
ag8990
ag4139
ag9675
aS'RRCount += rr;'
p11746
aS'return (0);'
p11747
ag9114
ag8990
aS'// Limit the fiducial mark adjustment in case of problems with'
p11748
aS'// beat onset and offset estimation.'
p11749
ag8990
ag4162
aS'fidAdj = MS80;'
p11750
aS'else if (fidAdj < -MS80)'
p11751
aS'fidAdj = -MS80;'
p11752
ag8990
aS'return (detectDelay - fidAdj);'
p11753
ag9114
ag8990
aS'void DownSampleBeat(int* beatOut, int* beatIn)'
p11754
ag9675
aS'int i;'
p11755
ag8990
aS'for (i = 0; i < BEATLGTH; ++i)'
p11756
aS'beatOut[i] = (beatIn[i << 1] + beatIn[(i << 1) + 1]) >> 1;'
p11757
ag9114
aa(lp11758
S'/*****************************************************************************'
p11759
aS'FILE:  qrsfilt.cpp'
p11760
aS'AUTHOR:\tPatrick S. Hamilton'
p11761
aS'REVISED:\t5/13/2002'
p11762
aS'___________________________________________________________________________'
p11763
ag8990
aS'qrsfilt.cpp filter functions to aid beat detecton in electrocardiograms.'
p11764
aS'Copywrite (C) 2000 Patrick S. Hamilton'
p11765
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p11766
aS'the terms of the GNU Library General Public License as published by the Free'
p11767
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p11768
aS'later version.'
p11769
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p11770
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p11771
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p11772
aS'details.'
p11773
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p11774
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p11775
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p11776
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p11777
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p11778
aS'MA 02143 USA).  For updates to this software, please visit our website'
p11779
aS'(http://www.eplimited.com).'
p11780
aS'__________________________________________________________________________'
p11781
ag8990
aS'This file includes QRSFilt() and associated filtering files used for QRS'
p11782
aS'detection.  Only QRSFilt() and deriv1() are called by the QRS detector'
p11783
aS'other functions can be hidden.'
p11784
ag8990
aS'Revisions:'
p11785
aS'5/13: Filter implementations have been modified to allow simplified'
p11786
aS'modification for different sample rates.'
p11787
ag8990
aS'*******************************************************************************/'
p11788
ag8990
aS'#include <math.h>'
p11789
aS'#include "qrsdet.h"'
p11790
ag8990
aS'// Local Prototypes.'
p11791
ag8990
aS'int lpfilt(int datum, int init);'
p11792
aS'int hpfilt(int datum, int init);'
p11793
aS'int deriv1(int x0, int init);'
p11794
aS'int deriv2(int x0, int init);'
p11795
aS'int mvwint(int datum, int init);'
p11796
ag8990
aS'/******************************************************************************'
p11797
aS'* Syntax:'
p11798
aS'*\tint QRSFilter(int datum, int init) ;'
p11799
aS'* Description:'
p11800
aS'*\tQRSFilter() takes samples of an ECG signal as input and returns a sample of'
p11801
aS'*\ta signal that is an estimate of the local energy in the QRS bandwidth.  In'
p11802
aS'*\tother words, the signal has a lump in it whenever a QRS complex, or QRS'
p11803
aS'*\tcomplex like artifact occurs.  The filters were originally designed for data'
p11804
aS'*  sampled at 200 samples per second, but they work nearly as well at sample'
p11805
aS'*\tfrequencies from 150 to 250 samples per second.'
p11806
aS'*'
p11807
aS'*\tThe filter buffers and static variables are reset if a value other than'
p11808
aS'*\t0 is passed to QRSFilter through init.'
p11809
aS'*******************************************************************************/'
p11810
ag8990
aS'int QRSFilter(int datum, int init)'
p11811
ag9675
aS'int fdatum;'
p11812
ag8990
ag4216
ag9675
aS'hpfilt(0, 1); // Initialize filters.'
p11813
aS'lpfilt(0, 1);'
p11814
aS'mvwint(0, 1);'
p11815
aS'deriv1(0, 1);'
p11816
aS'deriv2(0, 1);'
p11817
ag9114
ag8990
aS'fdatum = lpfilt(datum, 0); // Low pass filter data.'
p11818
aS'fdatum = hpfilt(fdatum, 0); // High pass filter data.'
p11819
aS'fdatum = deriv2(fdatum, 0); // Take the derivative.'
p11820
aS'fdatum = abs(fdatum); // Take the absolute value.'
p11821
aS'fdatum = mvwint(fdatum, 0); // Average over an 80 ms window .'
p11822
aS'return (fdatum);'
p11823
ag9114
ag8990
ag8990
aS'/*************************************************************************'
p11824
aS'*  lpfilt() implements the digital filter represented by the difference'
p11825
aS'*  equation:'
p11826
ag11807
aS'* \ty[n] = 2*y[n-1] - y[n-2] + x[n] - 2*x[t-24 ms] + x[t-48 ms]'
p11827
ag11807
aS'*\tNote that the filter delay is (LPBUFFER_LGTH/2)-1'
p11828
ag11807
aS'**************************************************************************/'
p11829
ag8990
aS'int lpfilt(int datum, int init)'
p11830
ag9675
aS'static long y1 = 0, y2 = 0;'
p11831
aS'static int data[LPBUFFER_LGTH], ptr = 0;'
p11832
aS'long y0;'
p11833
aS'int output, halfPtr;'
p11834
ag4260
ag9675
aS'for (ptr = 0; ptr < LPBUFFER_LGTH; ++ptr)'
p11835
aS'data[ptr] = 0;'
p11836
aS'y1 = y2 = 0;'
p11837
aS'ptr = 0;'
p11838
ag9114
aS'halfPtr = ptr - (LPBUFFER_LGTH / 2); // Use halfPtr to index'
p11839
aS'if (halfPtr < 0) // to x[n-6].'
p11840
aS'halfPtr += LPBUFFER_LGTH;'
p11841
aS'y0 = (y1 << 1) - y2 + datum - (data[halfPtr] << 1) + data[ptr];'
p11842
aS'y2 = y1;'
p11843
aS'y1 = y0;'
p11844
aS'output = y0 / ((LPBUFFER_LGTH * LPBUFFER_LGTH) / 4);'
p11845
aS'data[ptr] = datum; // Stick most recent sample into'
p11846
aS'if (++ptr == LPBUFFER_LGTH) // the circular buffer and update'
p11847
aS'ptr = 0; // the buffer pointer.'
p11848
aS'return (output);'
p11849
ag9114
ag8990
aS'int testfunction()'
p11850
ag9675
aS'for (int i = 0; i < 8; i++)'
p11851
ag9675
aS'asdf = 0'
p11852
ag9114
ag9114
aS'/******************************************************************************'
p11853
aS'*  hpfilt() implements the high pass filter represented by the following'
p11854
aS'*  difference equation:'
p11855
ag11807
aS'*\ty[n] = y[n-1] + x[n] - x[n-128 ms]'
p11856
aS'*\tz[n] = x[n-64 ms] - y[n] ;'
p11857
ag11807
aS'*  Filter delay is (HPBUFFER_LGTH-1)/2'
p11858
aS'******************************************************************************/'
p11859
ag8990
aS'int hpfilt(int datum, int init)'
p11860
ag9675
aS'static long y = 0;'
p11861
aS'static int data[HPBUFFER_LGTH], ptr = 0;'
p11862
aS'int z, halfPtr;'
p11863
ag8990
ag4361
ag9675
aS'for (ptr = 0; ptr < HPBUFFER_LGTH; ++ptr)'
p11864
aS'data[ptr] = 0;'
p11865
aS'ptr = 0;'
p11866
aS'y = 0;'
p11867
ag9114
ag8990
aS'y += datum - data[ptr];'
p11868
aS'halfPtr = ptr - (HPBUFFER_LGTH / 2);'
p11869
ag4374
aS'halfPtr += HPBUFFER_LGTH;'
p11870
aS'z = data[halfPtr] - (y / HPBUFFER_LGTH);'
p11871
ag8990
aS'data[ptr] = datum;'
p11872
ag4387
aS'ptr = 0;'
p11873
ag8990
aS'return (z);'
p11874
ag9114
ag8990
aS'/*****************************************************************************'
p11875
aS'*  deriv1 and deriv2 implement derivative approximations represented by'
p11876
aS'*  the difference equation:'
p11877
ag11807
aS'*\ty[n] = x[n] - x[n - 10ms]'
p11878
ag11807
aS'*  Filter delay is DERIV_LENGTH/2'
p11879
aS'*****************************************************************************/'
p11880
ag8990
aS'int deriv1(int x, int init)'
p11881
ag9675
aS'static int derBuff[DERIV_LENGTH], derI = 0;'
p11882
aS'int y;'
p11883
ag8990
ag4431
ag9675
aS'for (derI = 0; derI < DERIV_LENGTH; ++derI)'
p11884
aS'derBuff[derI] = 0;'
p11885
aS'derI = 0;'
p11886
aS'return (0);'
p11887
ag9114
ag8990
aS'y = x - derBuff[derI];'
p11888
aS'derBuff[derI] = x;'
p11889
ag4444
aS'derI = 0;'
p11890
aS'return (y);'
p11891
ag9114
ag8990
aS'int deriv2(int x, int init)'
p11892
ag9675
aS'static int derBuff[DERIV_LENGTH], derI = 0;'
p11893
aS'int y;'
p11894
ag8990
ag4488
ag9675
aS'for (derI = 0; derI < DERIV_LENGTH; ++derI)'
p11895
aS'derBuff[derI] = 0;'
p11896
aS'derI = 0;'
p11897
aS'return (0);'
p11898
ag9114
ag8990
aS'y = x - derBuff[derI];'
p11899
aS'derBuff[derI] = x;'
p11900
ag4501
aS'derI = 0;'
p11901
aS'return (y);'
p11902
ag9114
ag8990
ag8990
aS'/*****************************************************************************'
p11903
aS'* mvwint() implements a moving window integrator.  Actually, mvwint() averages'
p11904
aS'* the signal values over the last WINDOW_WIDTH samples.'
p11905
aS'*****************************************************************************/'
p11906
ag8990
aS'int mvwint(int datum, int init)'
p11907
ag9675
aS'static long sum = 0;'
p11908
aS'static int data[WINDOW_WIDTH], ptr = 0;'
p11909
aS'int output;'
p11910
ag4545
ag9675
aS'for (ptr = 0; ptr < WINDOW_WIDTH; ++ptr)'
p11911
aS'data[ptr] = 0;'
p11912
aS'sum = 0;'
p11913
aS'ptr = 0;'
p11914
ag9114
aS'sum += datum;'
p11915
aS'sum -= data[ptr];'
p11916
aS'data[ptr] = datum;'
p11917
ag4558
aS'ptr = 0;'
p11918
ag4581
aS'output = 32000;'
p11919
aS'else'
p11920
aS'output = sum / WINDOW_WIDTH;'
p11921
aS'return (output);'
p11922
ag9114
aa(lp11923
S'/* file: bxb.c\t\tG. Moody\t14 December 1987'
p11924
aS'Revised:\t 7 November 2001'
p11925
aS'Revised: 5/13/2002 -- Patrick Hamilton'
p11926
ag8990
aS'-------------------------------------------------------------------------------'
p11927
aS'bxb: ANSI/AAMI-standard beat-by-beat annotation file comparator'
p11928
aS'Copyright (C) 2001 George B. Moody'
p11929
ag8990
aS'This program is free software; you can redistribute it and/or modify it under'
p11930
aS'the terms of the GNU General Public License as published by the Free Software'
p11931
aS'Foundation; either version 2 of the License, or (at your option) any later'
p11932
aS'version.'
p11933
ag8990
aS'This program is distributed in the hope that it will be useful, but WITHOUT ANY'
p11934
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p11935
aS'PARTICULAR PURPOSE.  See the GNU General Public License for more details.'
p11936
ag8990
aS'You should have received a copy of the GNU General Public License along with'
p11937
aS'this program; if not, write to the Free Software Foundation, Inc., 59 Temple'
p11938
aS'Place - Suite 330, Boston, MA 02111-1307, USA.'
p11939
ag8990
aS'You may contact the author by e-mail (george@mit.edu) or postal mail'
p11940
aS'(MIT Room E25-505A, Cambridge, MA 02139 USA).  For updates to this software,'
p11941
aS'please visit PhysioNet (http://www.physionet.org/).'
p11942
aS'_______________________________________________________________________________'
p11943
ag8990
aS'This program implements the beat-by-beat comparison algorithms described in'
p11944
aS'AAMI/ANSI EC38:1998, the American National Standard for ambulatory ECGs, and'
p11945
aS'in AAMI EC57:1998, the American National Standard for Testing and Reporting'
p11946
aS'Performance Results of Cardiac Rhythm and ST Segment Measurement Algorithms.'
p11947
aS'These standards are available from AAMI, 1110 N Glebe Road, Suite 220,'
p11948
aS'Arlington, VA 22201 USA (http://www.aami.org/).'
p11949
ag8990
aS'The -f, -O, -t, and -w options modify the comparison algorithm used by bxb in'
p11950
aS'ways not permitted by EC38:1998 or EC57:1998.  These options are provided for'
p11951
aS'the use of developers, who may find them useful for obtaining a more detailed'
p11952
aS'understanding of algorithm errors.'
p11953
ag8990
aS'This version of bxb.cpp has been modified to run without command line input,'
p11954
aS'batch comparing .ate annotations to .atr annotations for MIT/BIH database'
p11955
aS'or AHA database files.  The test maticies are stored in "testrpt.txt".  The'
p11956
aS'Record #, QRS TP, QRS FN, QRS FP, PVC TP, PVC FN, and PVC FP are stored in'
p11957
aS'the file "adstat.txt".'
p11958
ag8990
aS'*/'
p11959
ag8990
aS'#define MITDB // Comment out to batch run AHA data instead of MIT/BIH data.'
p11960
aS'#ifdef MITDB'
p11961
aS'#define ECG_DB_PATH "C:\\\\MITDB\\\\" // MIT/BIH database directory.'
p11962
aS'#define REC_COUNT 48'
p11963
aS'int Records[REC_COUNT] = { 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114,'
p11964
aS'115, 116, 117, 118, 119, 121, 122, 123, 124, 200, 201, 202, 203, 205, 207, 208, 209, 210, 212,'
p11965
aS'213, 214, 215, 217, 219, 220, 221, 222, 223, 228, 230, 231, 232, 233, 234 };'
p11966
aS'#else'
p11967
aS'#define ECG_DB_PATH "C:\\\\AHADAT~1\\\\" // AHA database directory'
p11968
aS'#define REC_COUNT 69'
p11969
aS'int Records[REC_COUNT] = { 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 2201, 2203,'
p11970
aS'2204, 2205, 2206, 2207, 2208, 2209, 2210, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209,'
p11971
aS'3210, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 5201, 5202, 5203, 5204, 5205,'
p11972
aS'5206, 5207, 5208, 5209, 5210, 6201, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 7201,'
p11973
aS'7202, 7203, 7204, 7205, 7206, 7207, 7208, 7209, 7210 };'
p11974
aS'#endif'
p11975
ag8990
aS'#include <stdio.h>'
p11976
aS'#include <stdlib.h> // For exit.'
p11977
aS'#include <math.h> /* for declaration of sqrt() */'
p11978
aS'#ifndef BSD'
p11979
aS'#include <string.h>'
p11980
aS'#else'
p11981
aS'#include <strings.h>'
p11982
aS'#endif'
p11983
aS'#ifndef __STDC__'
p11984
aS'extern void exit();'
p11985
aS'#endif'
p11986
ag8990
aS'#include "wfdb.h"'
p11987
aS'#define map1'
p11988
aS'#define map2'
p11989
aS'#define ammap'
p11990
aS'#define mamap'
p11991
aS'#define annpos'
p11992
aS'#include "ecgmap.h"'
p11993
ag8990
aS'#define abs(A) ((A) >= 0 ? (A) : -(A))'
p11994
ag8990
aS'// Local Prototypes.'
p11995
ag8990
aS'void NewInit(void);'
p11996
aS'int rpann(long t);'
p11997
aS'int tpann(long t);'
p11998
aS'void pair(int ref, int test);'
p11999
aS'void print_results(int fflag);'
p12000
aS'int amap(int a);'
p12001
aS'char* prog_name(char* s);'
p12002
aS'void pstat(char* s, char* f, long a, long b);'
p12003
aS'void sstat(char* s, char* f, long a, long b);'
p12004
aS'void NewPrintResults(void);'
p12005
ag8990
aS'// Global Variables'
p12006
ag8990
aS'char* pname; /* name by which this program was invoked */'
p12007
aS'int A, Aprime; /* types of the current & next reference annotations */'
p12008
aS'int a, aprime; /* types of the current & next test annotations */'
p12009
aS'int fflag = 3; /* report format (0: none; 1: compressed; 2: line;'
p12010
aS'3: standard; 4: compressed with SVEB;  5: line'
p12011
aS'with SVEB;  6: standard with SVEB) */'
p12012
aS'int match_dt = 0; /* match window duration in samples */'
p12013
aS'int Oflag = 0; /* if non-zero, produce an extended annotation file */'
p12014
aS"long shut_down; /* duration of test annotator's shutdown */"
p12015
aS'long start; /* time of the beginning of the test period */'
p12016
aS'long end_time; /* end of the test period (-1: end of reference annot'
p12017
aS'file; 0: end of either annot file) */'
p12018
aS'long huge_time = 0x7FFFFFFF; /* largest possible time */'
p12019
aS'long T, Tprime; /* times of the current & next reference annotations */'
p12020
aS'long t, tprime; /* times of the current & next test annotations */'
p12021
aS'char record[20]; /* record name */'
p12022
ag8990
ag8990
aS'void main()'
p12023
ag9675
aS'void genxcmp(), getref(), gettest(), init();'
p12024
aS'int recNum;'
p12025
ag8990
aS'/* Read and interpret command-line arguments. */'
p12026
ag8990
aS'// init(argc, argv);'
p12027
ag8990
aS'for (recNum = 0; recNum < REC_COUNT; ++recNum)'
p12028
ag9675
aS'sprintf(record, "%d", Records[recNum]);'
p12029
aS'printf("%s\\n", record);'
p12030
aS'NewInit();'
p12031
ag8990
ag8990
aS'/* Set A and T to the type and time of the first reference annotation after'
p12032
aS'the end of the learning period. */'
p12033
aS'do'
p12034
ag9675
aS'getref();'
p12035
aS'} while (T < start);'
p12036
ag8990
aS'/* Set aprime and tprime to the type and time of the first test annotation'
p12037
aS'after the end of the learning period, and a and t to the type and time'
p12038
aS'of the last test annotation in the learning period. */'
p12039
aS'do'
p12040
ag9675
aS'gettest();'
p12041
aS'} while (tprime < start);'
p12042
ag8990
aS'/* If an extended output annotation file was requested, produce it and'
p12043
aS'exit. */'
p12044
ag4725
ag9675
aS'genxcmp();'
p12045
aS'wfdbquit(); //**'
p12046
aS'exit(0);'
p12047
ag9114
ag8990
aS'/* If t matches the first reference annotation, count it and get the next'
p12048
aS'annotation from each file.  (Since T >= start and t < start, T-t must be'
p12049
aS'positive.) */'
p12050
ag8990
ag4751
ag9675
ag4748
aS'pair(A, a);'
p12051
aS'getref();'
p12052
aS'gettest();'
p12053
ag9114
ag8990
aS'/* If there is a test annotation within an interval equal to the match'
p12054
aS'window following the beginning of the test period, and there is no'
p12055
aS'match, go on to the next test annotation without counting the first'
p12056
aS'one. */'
p12057
ag8990
aS'else'
p12058
ag9675
aS'gettest();'
p12059
ag4764
aS'gettest();'
p12060
ag9114
ag8990
aS'/* Peform the comparison.  Each time through the loop below, a beat label'
p12061
aS'pair is identified and counted (or else a non-beat annotation is'
p12062
aS'discarded), and an annotation is read from each file from which an'
p12063
aS'annotation was paired or discarded.  Note that only one of the four'
p12064
aS'numbered actions is performed on each iteration.'
p12065
ag8990
aS'The complex loop termination condition is dependent on end_time, which'
p12066
aS'is not changed during execution of the loop.  There are three ways the'
p12067
aS'loop termination condition can be satisfied:'
p12068
aS'- If the length of the comparison is known, either because it was'
p12069
aS"specified using the `-t' option or because the header file specifies"
p12070
aS'the record length, the loop ends when both T and t are greater than'
p12071
aS'end_time.  This is the usual case.'
p12072
aS'- If the length of the comparison is unknown (end_time = -1), the loop'
p12073
aS'ends when EOF is reached in the reference annotation file (T ='
p12074
aS'huge_time).'
p12075
aS"- If the option `-t 0' was specified (end_time = 0), the loop ends when"
p12076
aS'EOF is first reached in either annotation file (T or t = huge_time).'
p12077
aS'*/'
p12078
aS'while ((end_time > 0L && (T <= end_time || t <= end_time))|| (end_time == -1L && T != huge_time)|| (end_time == 0L && T != huge_time && t != huge_time))'
p12079
ag9675
ag4696
aS'{ /* test annotation is earliest */'
p12080
aS'/* (1) If t is within the match window, and is a better match than'
p12081
aS'the next test annotation, pair it. */'
p12082
ag4670
ag9675
aS'pair(A, a);'
p12083
aS'getref();'
p12084
aS'gettest();'
p12085
ag9114
aS'/* (2) There is no match to the test annotation, so pair it with a'
p12086
aS'pseudo-beat annotation and get the next one. */'
p12087
aS'else'
p12088
ag9675
aS'pair(rpann(t), a);'
p12089
aS'gettest();'
p12090
ag9114
ag9114
aS'else'
p12091
aS'{ /* reference annotation is earliest */'
p12092
aS'/* (3) If T is within the match window, and is a better match than'
p12093
aS'the next reference annotation, pair it. */'
p12094
ag4693
ag9675
aS'pair(A, a);'
p12095
aS'gettest();'
p12096
aS'getref();'
p12097
ag9114
aS'/* (4) There is no match to the reference annotation, so pair it'
p12098
aS'with a pseudo-beat annotation and get the next one. */'
p12099
aS'else'
p12100
ag9675
aS'pair(A, tpann(T));'
p12101
aS'getref();'
p12102
ag9114
ag9114
ag9114
ag8990
aS'shut_down /= strtim("1"); /* convert from samples to seconds */'
p12103
ag8990
aS'/* Generate output. */'
p12104
aS'print_results(fflag);'
p12105
aS'NewPrintResults();'
p12106
ag8990
aS'wfdbquit(); /* close input files */'
p12107
ag9114
aS'exit(0); /*NOTREACHED*/'
p12108
ag9114
ag8990
aS'/* getref() and gettest() read the next beat annotations from their respective'
p12109
aS'files. */'
p12110
ag8990
ag8990
aS'struct WFDB_anninfo an[3];'
p12111
aS'unsigned int oflag = 0; /* if non-zero, produce an output annotation file */'
p12112
aS'long RR; /* reference RR interval, if non-zero */'
p12113
aS'long sdonref = -1L; /* start of reference shutdown */'
p12114
aS'long sdoffref = -1L; /* end of reference shutdown */'
p12115
aS'long vfonref = -1L; /* start of reference VF */'
p12116
aS'long vfoffref = -1L; /* end of reference VF */'
p12117
aS'long psdonref = -1L; /* start of previous reference shutdown */'
p12118
aS'long psdoffref = -1L; /* end of previous reference shutdown */'
p12119
aS'long pvfonref = -1L; /* start of previous reference VF */'
p12120
aS'long pvfoffref = -1L; /* end of previous reference VF */'
p12121
aS'struct WFDB_ann ref_annot;'
p12122
ag8990
aS'void getref() /* get next reference beat annotation */'
p12123
ag9675
aS'static long TT; /* time of previous reference beat annotation */'
p12124
aS'static struct WFDB_ann annot;'
p12125
ag8990
aS'TT = T;'
p12126
aS'T = Tprime;'
p12127
aS'A = Aprime;'
p12128
ag8990
aS'/* T-TT is not a valid RR interval if T is the time of the first beat,'
p12129
aS'if TT is the time of the last beat, or if a period of VF or shutdown'
p12130
aS'occurs between TT and T. */'
p12131
ag4994
aS'RR = 0L;'
p12132
aS'else'
p12133
aS'RR = T - TT;'
p12134
ag8990
ag5007
aS'ref_annot = annot;'
p12135
ag8990
aS'/* Read reference annotations until a beat annotation is read, or EOF.'
p12136
aS'If an expanded output annotation file is required, all annotations'
p12137
aS'are treated as if they were beat annotations. */'
p12138
aS'while (getann(0, &annot) == 0)'
p12139
ag9675
ag4809
aS'{ /* beat annotation */'
p12140
aS'Tprime = annot.time;'
p12141
aS'Aprime = amap(annot.anntyp);'
p12142
aS'return;'
p12143
ag9114
ag8990
aS'/* Shutdown occurs when neither signal is readable;  the beginning of'
p12144
aS'shutdown is indicated by a NOISE annotation in which bits 4 and 5'
p12145
aS'of the subtyp field are set, and the end of shutdown is indicated'
p12146
aS"by a NOISE annotation with any value of `subtyp' for which at least"
p12147
aS'one of bits 4 and 5 is zero.  In AHA DB reference annotation files,'
p12148
aS'shutdown is indicated by a single shutdown annotation placed roughly'
p12149
aS'in the middle of the shutdown interval;  in this case, shutdown is'
p12150
aS'assumed to begin match_dt samples after the previous beat annotation'
p12151
aS'or VFOFF annotation, and is assumed to end match_dt samples before'
p12152
aS'the next annotation.'
p12153
aS'*/'
p12154
ag4907
ag9675
ag4904
ag9675
aS'psdonref = sdonref;'
p12155
aS'psdoffref = sdoffref;'
p12156
aS'sdonref = annot.time;'
p12157
aS'/* Read next annotation, which should mark end of shutdown. */'
p12158
ag4842
aS'{ /* EOF before end of shutdown */'
p12159
aS'Tprime = sdoffref = huge_time;'
p12160
aS"Aprime = '*';"
p12161
aS'return;'
p12162
ag9114
ag4865
aS'sdoffref = annot.time;'
p12163
aS'else'
p12164
ag9675
ag4888
aS'sdonref = vfoffref + match_dt;'
p12165
aS'else'
p12166
aS'sdonref = T + match_dt;'
p12167
aS'sdoffref = annot.time - match_dt;'
p12168
ag4901
aS'sdonref = sdoffref;'
p12169
aS'(void)ungetann(0, &annot);'
p12170
ag9114
ag9114
ag9114
ag8990
aS'/* The beginning of ventricular fibrillation is indicated by a VFON'
p12171
aS'annotation, and its end by a VFOFF annotation;  any annotations'
p12172
aS'between VFON and VFOFF are read and ignored. */'
p12173
ag4955
ag9675
aS'pvfonref = vfonref;'
p12174
aS'pvfoffref = vfoffref;'
p12175
aS'vfonref = annot.time;'
p12176
aS'/* Read additional annotations, until end of VF or EOF. */'
p12177
aS'do'
p12178
ag9675
ag4936
aS'{ /* EOF before end of VF */'
p12179
aS'Tprime = huge_time;'
p12180
aS"Aprime = '*';"
p12181
aS'return;'
p12182
ag9114
aS'// stuff'
p12183
aS'} while (annot.anntyp != VFOFF);'
p12184
aS'vfoffref = annot.time;'
p12185
ag9114
ag9114
aS'/* When this statement is reached, there are no more annotations in the'
p12186
aS'reference annotation file. */'
p12187
aS'Tprime = huge_time;'
p12188
aS"Aprime = '*';"
p12189
ag9114
ag8990
aS'long rr; /* test RR interval, if non-zero */'
p12190
aS'long sdontest = -1L; /* start of test shutdown */'
p12191
aS'long sdofftest = -1L; /* end of test shutdown */'
p12192
aS'long vfontest = -1L; /* start of test VF */'
p12193
aS'long vfofftest = -1L; /* end of test VF */'
p12194
aS'long psdontest = -1L; /* start of previous test shutdown */'
p12195
aS'long psdofftest = -1L; /* end of previous test shutdown */'
p12196
aS'long pvfontest = -1L; /* start of previous test VF */'
p12197
aS'long pvfofftest = -1L; /* end of previous test VF */'
p12198
aS'struct WFDB_ann test_annot;'
p12199
ag8990
aS'void gettest() /* get next test annotation */'
p12200
ag9675
aS'static long tt; /* time of previous test beat annotation */'
p12201
aS'static struct WFDB_ann annot;'
p12202
ag8990
aS'tt = t;'
p12203
aS't = tprime;'
p12204
aS'a = aprime;'
p12205
ag8990
aS'/* See comments on the similar code in getref(), above. */'
p12206
ag5230
aS'|| (tt <= sdontest && sdontest < t) || (tt <= pvfontest && pvfontest < t)'
p12207
aS'|| (tt <= psdontest && psdontest < t))'
p12208
aS'rr = 0L;'
p12209
aS'else'
p12210
aS'rr = t - tt;'
p12211
ag8990
ag5243
aS'test_annot = annot;'
p12212
ag8990
aS'while (getann(1, &annot) == 0)'
p12213
ag9675
ag5035
ag9675
aS'tprime = annot.time;'
p12214
aS'aprime = amap(annot.anntyp);'
p12215
aS'return;'
p12216
ag9114
ag5201
ag9675
ag5153
ag9675
aS'psdontest = sdontest;'
p12217
aS'psdofftest = sdofftest;'
p12218
aS'sdontest = annot.time;'
p12219
ag5091
ag9675
aS'tprime = huge_time;'
p12220
aS"aprime = '*';"
p12221
ag5088
aS'shut_down += end_time - sdontest;'
p12222
aS'else'
p12223
ag9675
aS'(void)fprintf(stderr,'
p12224
aS'"%s: unterminated shutdown starting at %s in record %s, annotator %s\\n",'
p12225
aS'pname, timstr(sdontest), record, an[1].name);'
p12226
aS'(void)fprintf(stderr, " (not included in shutdown duration measurement)\\n");'
p12227
ag9114
aS'return;'
p12228
ag9114
ag5114
aS'sdofftest = annot.time;'
p12229
aS'else'
p12230
ag9675
ag5137
aS'sdontest = vfofftest + match_dt;'
p12231
aS'else'
p12232
aS'sdontest = t + match_dt;'
p12233
aS'sdofftest = annot.time - match_dt;'
p12234
ag5150
aS'sdontest = sdofftest;'
p12235
aS'(void)ungetann(0, &annot);'
p12236
ag9114
aS'/* update shutdown duration tally */'
p12237
aS'shut_down += sdofftest - sdontest;'
p12238
ag9114
ag9114
aS'else if (annot.anntyp == VFON)'
p12239
ag9675
aS'pvfontest = vfontest;'
p12240
aS'pvfofftest = vfofftest;'
p12241
aS'vfontest = annot.time;'
p12242
aS'do'
p12243
ag9675
ag5182
ag9675
aS'tprime = huge_time;'
p12244
aS"aprime = '*';"
p12245
aS'return;'
p12246
ag9114
ag8990
aS'} while (annot.anntyp != VFOFF);'
p12247
aS'vfofftest = annot.time;'
p12248
ag9114
ag9114
aS'tprime = huge_time;'
p12249
aS"aprime = '*';"
p12250
ag9114
ag8990
aS'/* Functions rpann() and tpann() return the appropriate pseudo-beat label'
p12251
aS'for the time specified by their argument.  They should be called only'
p12252
aS'with time arguments which match the times of the current test or reference'
p12253
aS'beat labels, since they depend on getref() and gettest() to locate the two'
p12254
aS'most recent VF and shutdown periods and have no information about earlier'
p12255
aS'or later VF or shutdown periods. */'
p12256
aS'int rpann(long t)'
p12257
ag9675
ag5265
aS'|| (pvfonref != -1L && pvfonref <= t && t <= pvfoffref))'
p12258
aS"return ('*'); /* test beat labels during reference-marked VF are"
p12259
aS"not to be counted;  since `*' is not recognized by"
p12260
aS"pair(), returning `*' accomplishes this */"
p12261
ag5278
aS'|| (psdonref != -1L && psdonref <= t && t <= psdoffref))'
p12262
aS"return ('X'); /* test beat labels during reference-marked shutdown"
p12263
aS'are paired with X pseudo-beat labels */'
p12264
aS'else'
p12265
aS"return ('O'); /* all other extra test beat labels are paired with"
p12266
aS'O pseudo-beat labels */'
p12267
ag9114
ag8990
aS'int tpann(long t)'
p12268
ag9675
aS'/* no special treatment for reference beat labels during test-marked VF */'
p12269
ag5300
aS'|| (psdontest != -1L && psdontest <= t && t <= psdoffref))'
p12270
aS"return ('X'); /* reference beat labels during test-marked shutdown"
p12271
aS'are paired with X pseudo-beat labels */'
p12272
aS'else'
p12273
aS"return ('O'); /* all other extra reference beat labels are paired"
p12274
aS'with O pseudo-beat labels */'
p12275
ag9114
ag8990
aS'/* Define counters for the elements of the confusion matrix.  Static variables'
p12276
aS'have initial values of zero.  */'
p12277
aS'static long Nn, Ns, Nv, Nf, Nq, No, Nx, Sn, Ss, Sv, Sf, Sq, So, Sx, Vn, Vs, Vv, Vf, Vq, Vo, Vx, Fn,'
p12278
aS'Fs, Fv, Ff, Fq, Fo, Fx, Qn, Qs, Qv, Qf, Qq, Qo, Qx, On, Os, Ov, Of, Oq, Xn, Xs, Xv, Xf, Xq;'
p12279
ag8990
aS'int verbose = 0; /* if non-zero, describe all mismatches */'
p12280
aS'long nrre = 0; /* number of RR errors tallied in ssrre */'
p12281
aS'double ssrre = 0.; /* sum of squares of RR errors */'
p12282
ag8990
aS'void pair(int ref, int test) /* count a beat label pair */'
p12283
ag9675
ag5852
ag9675
aS"case 'N':"
p12284
ag5389
ag9675
aS"case 'N':"
p12285
aS'Nn++;'
p12286
aS'break;'
p12287
aS"case 'S':"
p12288
aS'Ns++;'
p12289
aS'break;'
p12290
aS"case 'V':"
p12291
aS'Nv++;'
p12292
aS'break;'
p12293
aS"case 'F':"
p12294
aS'Nf++;'
p12295
aS'break;'
p12296
aS"case 'Q':"
p12297
aS'Nq++;'
p12298
aS'break;'
p12299
aS"case 'O':"
p12300
aS'No++;'
p12301
aS'break;'
p12302
aS"case 'X':"
p12303
aS'Nx++;'
p12304
aS'break;'
p12305
ag9114
aS'break;'
p12306
aS"case 'S':"
p12307
ag5472
ag9675
aS"case 'N':"
p12308
aS'Sn++;'
p12309
aS'break;'
p12310
aS"case 'S':"
p12311
aS'Ss++;'
p12312
aS'break;'
p12313
aS"case 'V':"
p12314
aS'Sv++;'
p12315
aS'break;'
p12316
aS"case 'F':"
p12317
aS'Sf++;'
p12318
aS'break;'
p12319
aS"case 'Q':"
p12320
aS'Sq++;'
p12321
aS'break;'
p12322
aS"case 'O':"
p12323
aS'So++;'
p12324
aS'break;'
p12325
aS"case 'X':"
p12326
aS'Sx++;'
p12327
aS'break;'
p12328
ag9114
aS'break;'
p12329
aS"case 'V':"
p12330
ag5555
ag9675
aS"case 'N':"
p12331
aS'Vn++;'
p12332
aS'break;'
p12333
aS"case 'S':"
p12334
aS'Vs++;'
p12335
aS'break;'
p12336
aS"case 'V':"
p12337
aS'Vv++;'
p12338
aS'break;'
p12339
aS"case 'F':"
p12340
aS'Vf++;'
p12341
aS'break;'
p12342
aS"case 'Q':"
p12343
aS'Vq++;'
p12344
aS'break;'
p12345
aS"case 'O':"
p12346
aS'Vo++;'
p12347
aS'break;'
p12348
aS"case 'X':"
p12349
aS'Vx++;'
p12350
aS'break;'
p12351
ag9114
aS'break;'
p12352
aS"case 'F':"
p12353
ag5638
ag9675
aS"case 'N':"
p12354
aS'Fn++;'
p12355
aS'break;'
p12356
aS"case 'S':"
p12357
aS'Fs++;'
p12358
aS'break;'
p12359
aS"case 'V':"
p12360
aS'Fv++;'
p12361
aS'break;'
p12362
aS"case 'F':"
p12363
aS'Ff++;'
p12364
aS'break;'
p12365
aS"case 'Q':"
p12366
aS'Fq++;'
p12367
aS'break;'
p12368
aS"case 'O':"
p12369
aS'Fo++;'
p12370
aS'break;'
p12371
aS"case 'X':"
p12372
aS'Fx++;'
p12373
aS'break;'
p12374
ag9114
aS'break;'
p12375
aS"case 'Q':"
p12376
ag5721
ag9675
aS"case 'N':"
p12377
aS'Qn++;'
p12378
aS'break;'
p12379
aS"case 'S':"
p12380
aS'Qs++;'
p12381
aS'break;'
p12382
aS"case 'V':"
p12383
aS'Qv++;'
p12384
aS'break;'
p12385
aS"case 'F':"
p12386
aS'Qf++;'
p12387
aS'break;'
p12388
aS"case 'Q':"
p12389
aS'Qq++;'
p12390
aS'break;'
p12391
aS"case 'O':"
p12392
aS'Qo++;'
p12393
aS'break;'
p12394
aS"case 'X':"
p12395
aS'Qx++;'
p12396
aS'break;'
p12397
ag9114
aS'break;'
p12398
aS"case 'O':"
p12399
ag5784
ag9675
aS"case 'N':"
p12400
aS'On++;'
p12401
aS'break;'
p12402
aS"case 'S':"
p12403
aS'Os++;'
p12404
aS'break;'
p12405
aS"case 'V':"
p12406
aS'Ov++;'
p12407
aS'break;'
p12408
aS"case 'F':"
p12409
aS'Of++;'
p12410
aS'break;'
p12411
aS"case 'Q':"
p12412
aS'Oq++;'
p12413
aS'break;'
p12414
ag9114
aS'break;'
p12415
aS"case 'X':"
p12416
ag5847
ag9675
aS"case 'N':"
p12417
aS'Xn++;'
p12418
aS'break;'
p12419
aS"case 'S':"
p12420
aS'Xs++;'
p12421
aS'break;'
p12422
aS"case 'V':"
p12423
aS'Xv++;'
p12424
aS'break;'
p12425
aS"case 'F':"
p12426
aS'Xf++;'
p12427
aS'break;'
p12428
aS"case 'Q':"
p12429
aS'Xq++;'
p12430
aS'break;'
p12431
ag9114
aS'break;'
p12432
ag9114
ag8990
aS'/* Compute the RR interval error and update the sum of squared errors. */'
p12433
ag5867
ag9675
aS'double rre = RR - rr;'
p12434
ag8990
aS'ssrre += rre * rre;'
p12435
aS'nrre++;'
p12436
ag9114
ag8990
ag5926
ag9675
ag5900
aS'(void)putann(0, &test_annot);'
p12437
aS'else'
p12438
ag9675
aS'struct WFDB_ann out_annot;'
p12439
aS'char auxp[3];'
p12440
ag8990
aS'auxp[0] = 2;'
p12441
aS'auxp[1] = ref;'
p12442
aS"auxp[2] = test - 'A' + 'a';"
p12443
ag5923
aS'out_annot.time = T;'
p12444
aS'else'
p12445
aS'out_annot.time = t;'
p12446
aS'out_annot.anntyp = NOTE;'
p12447
aS'out_annot.subtyp = out_annot.chan = out_annot.num = 0;'
p12448
aS'out_annot.aux = auxp;'
p12449
aS'(void)putann(0, &out_annot);'
p12450
ag9114
ag9114
ag5962
ag9675
ag5959
aS'(void)fprintf(stderr, "%c(%ld)/%c(%ld)\\n", ref, t, test, t);'
p12451
aS"else if (test == 'O' || test == 'X')"
p12452
aS'(void)fprintf(stderr, "%c(%ld)/%c(%ld)\\n", ref, T, test, T);'
p12453
aS'else'
p12454
aS'(void)fprintf(stderr, "%c(%ld)/%c(%ld)\\n", ref, T, test, t);'
p12455
ag9114
ag9114
ag8990
aS'FILE *ofile, *sfile; /* files for beat-by-beat and shutdown reports */'
p12456
ag8990
aS"/* `pstat' prints a statistic described by s, defined as the quotient of a and"
p12457
aS"b expressed in percentage units.  Undefined values are indicated by `-'. */"
p12458
ag8990
aS'void pstat(char* s, char* f, long a, long b)'
p12459
ag9675
ag6027
ag9675
aS'(void)fprintf(ofile, "%s: ", s);'
p12460
ag6004
aS'(void)fprintf(ofile, "     - ");'
p12461
aS'else'
p12462
ag9675
aS'(void)fprintf(ofile, f, (100. * a) / b);'
p12463
aS'(void)fprintf(ofile, "%%");'
p12464
ag9114
aS'(void)fprintf(ofile, " (%ld/%ld)\\n", a, b);'
p12465
ag9114
aS'else if (b <= 0)'
p12466
aS'(void)fprintf(ofile, "      -");'
p12467
aS'else'
p12468
ag9675
aS'(void)fprintf(ofile, " ");'
p12469
aS'(void)fprintf(ofile, f, (100. * a) / b);'
p12470
ag9114
ag9114
ag8990
aS"/* `sstat' prints a statistic as for `pstat', but the output goes to sfile. */"
p12471
ag8990
aS'void sstat(char* s, char* f, long a, long b)'
p12472
ag9675
ag6092
ag9675
aS'(void)fprintf(sfile, "%s: ", s);'
p12473
ag6069
aS'(void)fprintf(sfile, "     - ");'
p12474
aS'else'
p12475
ag9675
aS'(void)fprintf(sfile, f, (100. * a) / b);'
p12476
aS'(void)fprintf(sfile, "%%");'
p12477
ag9114
aS'(void)fprintf(sfile, " (%ld/%ld)\\n", a, b);'
p12478
ag9114
aS'else if (b <= 0)'
p12479
aS'(void)fprintf(sfile, "      -");'
p12480
aS'else'
p12481
ag9675
aS'(void)fprintf(sfile, " ");'
p12482
aS'(void)fprintf(sfile, f, (100. * a) / b);'
p12483
ag9114
ag9114
ag8990
aS'char *ofname = "-", *sfname; /* filenames for reports */'
p12484
ag8990
aS'/* Read and interpret command-line arguments. */'
p12485
aS'void init(int argc, char* argv[])'
p12486
ag9675
aS'int i;'
p12487
aS'void help();'
p12488
ag8990
aS'pname = prog_name(argv[0]);'
p12489
aS'for (i = 1; i < argc; i++)'
p12490
ag9675
ag6119
aS'switch (*(argv[i] + 1))'
p12491
ag9675
aS"case 'a': /* annotator names follow */"
p12492
ag6132
ag9675
aS'(void)fprintf(stderr,'
p12493
aS'"%s: reference and test annotator names must follow -a\\n", pname);'
p12494
aS'exit(0);'
p12495
ag9114
aS'an[0].name = argv[i];'
p12496
aS'an[1].name = argv[++i];'
p12497
aS'break;'
p12498
aS"case 'c': /* condensed output */"
p12499
ag6145
ag9675
aS'(void)fprintf(stderr, "%s: output file name must follow -c\\n", pname);'
p12500
aS'exit(0);'
p12501
ag9114
aS'ofname = argv[i];'
p12502
aS'fflag = 1;'
p12503
aS'break;'
p12504
aS"case 'C': /* condensed output with SVEB statistics */"
p12505
ag6158
ag9675
aS'(void)fprintf(stderr, "%s: output file name must follow -C\\n", pname);'
p12506
aS'exit(0);'
p12507
ag9114
aS'ofname = argv[i];'
p12508
aS'fflag = 4;'
p12509
aS'break;'
p12510
aS"case 'f': /* start time follows */"
p12511
ag6171
ag9675
aS'(void)fprintf(stderr, "%s: start time must follow -f\\n", pname);'
p12512
aS'exit(0);'
p12513
ag9114
aS'start = i; /* save arg index, convert to samples later, when'
p12514
aS'record has been opened and sampling frequency is'
p12515
aS'known */'
p12516
aS'break;'
p12517
aS"case 'h': /* print usage summary */"
p12518
aS'help();'
p12519
aS'exit(0);'
p12520
aS'break;'
p12521
aS"case 'l': /* line-format output */"
p12522
ag6184
ag9675
aS'(void)fprintf(stderr, "%s: two output file names must follow -l\\n", pname);'
p12523
aS'exit(0);'
p12524
ag9114
aS'ofname = argv[i];'
p12525
aS'sfname = argv[++i];'
p12526
aS'fflag = 2;'
p12527
aS'break;'
p12528
aS"case 'L': /* line-format output, with SVEB statistics */"
p12529
ag6197
ag9675
aS'(void)fprintf(stderr, "%s: two output file names must follow -L\\n", pname);'
p12530
aS'exit(0);'
p12531
ag9114
aS'ofname = argv[i];'
p12532
aS'sfname = argv[++i];'
p12533
aS'fflag = 5;'
p12534
aS'break;'
p12535
aS"case 'o': /* generate output annotation file */"
p12536
aS'oflag = 1;'
p12537
aS'break;'
p12538
aS"case 'O': /* generate expanded output annotation file */"
p12539
aS'oflag = 1;'
p12540
aS'Oflag = 1;'
p12541
aS'fflag = 0;'
p12542
aS'break;'
p12543
aS"case 'r': /* record name follows */"
p12544
ag6210
ag9675
aS'(void)fprintf(stderr, "%s: record name must follow -r\\n", pname);'
p12545
aS'exit(0);'
p12546
ag9114
aS'//\t record = argv[i];'
p12547
aS'break;'
p12548
aS"case 's': /* standard-format output */"
p12549
ag6223
ag9675
aS'(void)fprintf(stderr, "%s: output file name must follow -s\\n", pname);'
p12550
aS'exit(0);'
p12551
ag9114
aS'ofname = argv[i];'
p12552
aS'fflag = 3;'
p12553
aS'break;'
p12554
aS"case 'S': /* standard-format output, with SVEB statistics */"
p12555
ag6236
ag9675
aS'(void)fprintf(stderr, "%s: output file name must follow -S\\n", pname);'
p12556
aS'exit(0);'
p12557
ag9114
aS'ofname = argv[i];'
p12558
aS'fflag = 6;'
p12559
aS'break;'
p12560
aS"case 't': /* end time follows */"
p12561
ag6249
ag9675
aS'(void)fprintf(stderr, "%s: end time must follow -t\\n", pname);'
p12562
aS'exit(0);'
p12563
ag9114
aS'end_time = i;'
p12564
aS'break;'
p12565
aS"case 'v': /* verbose mode */"
p12566
aS'verbose = 1;'
p12567
aS'break;'
p12568
aS"case 'w': /* match window follows */"
p12569
ag6262
ag9675
aS'(void)fprintf(stderr, "%s: match window must follow -w\\n", pname);'
p12570
aS'exit(0);'
p12571
ag9114
aS'match_dt = i;'
p12572
aS'break;'
p12573
aS'default:'
p12574
aS'(void)fprintf(stderr, "%s: unrecognized option %s\\n", pname, argv[i]);'
p12575
aS'exit(0);'
p12576
ag9114
aS'else'
p12577
ag9675
aS'(void)fprintf(stderr, "%s: unrecognized argument %s\\n", pname, argv[i]);'
p12578
aS'exit(0);'
p12579
ag9114
ag9114
ag8990
ag6293
ag9675
aS'help();'
p12580
aS'exit(0);'
p12581
ag9114
ag8990
ag6306
aS'(void)fprintf(stderr, "%s: (warning) nonstandard comparison selected\\n", pname);'
p12582
ag8990
ag6319
ag9675
aS'(void)fprintf('
p12583
aS'stderr, "%s: (warning) %g Hz sampling frequency assumed\\n", pname, WFDB_DEFFREQ);'
p12584
aS'(void)setsampfreq(WFDB_DEFFREQ);'
p12585
ag9114
ag8990
aS'/* Set the match window and the times of the start and end of the test'
p12586
aS'period.  Initialize the shutdown tally to 1/2 second so that it will be'
p12587
aS'properly rounded to the nearest second at the end. */'
p12588
ag6342
aS'match_dt = (int)strtim(argv[match_dt]);'
p12589
aS'else'
p12590
aS'match_dt = (int)strtim(".15"); /* 150 milliseconds */'
p12591
ag6365
aS'start = strtim(argv[(int)start]);'
p12592
aS'else'
p12593
aS'start = strtim("5:0"); /* 5 minutes */'
p12594
ag6388
aS'end_time = strtim(argv[(int)end_time]);'
p12595
aS'else if ((end_time = strtim("e")) == 0L)'
p12596
aS'end_time = -1L; /* record length unavailable -- go to end of'
p12597
aS'reference annotation file */'
p12598
ag6401
ag9675
aS'(void)fprintf(stderr, "%s: improper interval specified\\n", pname);'
p12599
aS'exit(0);'
p12600
ag9114
aS'shut_down = strtim(".5"); /* 1/2 second */'
p12601
ag8990
aS'an[0].stat = an[1].stat = WFDB_READ;'
p12602
ag6414
ag9675
aS'an[2].name = "bxb";'
p12603
aS'an[2].stat = WFDB_WRITE;'
p12604
ag9114
ag6427
aS'exit(0);'
p12605
ag9114
ag8990
aS'void print_results(int fflag)'
p12606
ag9675
aS'long QTP, QFN, QFP, STP, SFN, SFP, VTP, VFN, VTN, VFP;'
p12607
ag8990
aS'/* Open output files.  If line-format output was selected, write column'
p12608
aS'headings only if the files must be created from scratch. */'
p12609
ag6594
ag9675
ag6581
ag9675
ag6532
ag9675
aS'(void)fprintf(stderr, "%s: can\'t create %s\\n", pname, ofname);'
p12610
aS'exit(0);'
p12611
ag9114
ag6555
ag9675
aS'(void)fprintf(ofile, "Record Nn\' Vn\' Fn\' On\'  Nv   Vv  Fv\' Ov\' No\'");'
p12612
aS'(void)fprintf(ofile, " Vo\' Fo\'  Q Se   Q +P   V Se   V +P  V FPR\\n");'
p12613
ag9114
aS'else if (fflag == 5)'
p12614
ag9675
aS'(void)fprintf(ofile, "Record Nn\' Sn\' Vn\' Fn\' On\'  Ns  Ss  Vs  Fs\'");'
p12615
aS'(void)fprintf(ofile, " Os\' Nv  Sv   Vv  Fv\' Ov\' No\' So\' Vo\' Fo\'");'
p12616
aS'(void)fprintf(ofile, "  Q Se   Q +P   V Se   V +P   S Se   S +P RR err\\n");'
p12617
ag9114
ag9114
aS'else'
p12618
ag9675
aS'(void)fclose(ofile);'
p12619
ag6578
ag9675
aS'(void)fprintf(stderr, "%s: can\'t modify %s\\n", pname, ofname);'
p12620
aS'exit(0);'
p12621
ag9114
ag9114
ag9114
aS'else'
p12622
aS'ofile = stdout;'
p12623
ag6712
ag9675
ag6699
ag9675
ag6686
ag9675
ag6637
ag9675
aS'(void)fprintf(stderr, "%s: can\'t create %s\\n", pname, sfname);'
p12624
aS'exit(0);'
p12625
ag9114
ag6660
ag9675
aS'(void)fprintf(sfile, "Record Nx   Vx   Fx   Qx  %% beats  %% N    ");'
p12626
aS'(void)fprintf(sfile, "%% V    %% F   Total Shutdown\\n");'
p12627
aS'(void)fprintf(sfile, "                           missed missed ");'
p12628
aS'(void)fprintf(sfile, "missed missed      Time\\n");'
p12629
ag9114
aS'else'
p12630
ag9675
aS'(void)fprintf(sfile, "Record Nx   Sx   Vx   Fx   Qx  %% beats  %% N    ");'
p12631
aS'(void)fprintf(sfile, "%% S    %% V    %% F   Total Shutdown\\n");'
p12632
aS'(void)fprintf(sfile, "                                missed missed ");'
p12633
aS'(void)fprintf(sfile, "missed missed missed      Time\\n");'
p12634
ag9114
ag9114
aS'else'
p12635
ag9675
aS'(void)fclose(sfile);'
p12636
ag6683
ag9675
aS'(void)fprintf(stderr, "%s: can\'t modify %s\\n", pname, sfname);'
p12637
aS'exit(0);'
p12638
ag9114
ag9114
ag9114
aS'else'
p12639
aS'sfile = stdout;'
p12640
ag9114
aS'else'
p12641
aS'sfile = stdout;'
p12642
ag8990
ag6725
ag9675
aS'(void)fprintf(ofile, "Beat-by-beat comparison results for record %s\\n", record);'
p12643
aS'(void)fprintf(ofile, "Reference annotator: %s\\n", an[0].name);'
p12644
aS'(void)fprintf(ofile, "     Test annotator: %s\\n\\n", an[1].name);'
p12645
ag9114
ag8990
ag6497
ag9675
aS'case 1: /* print condensed format summary tables */'
p12646
aS'(void)fprintf(ofile, "         Algorithm\\n");'
p12647
aS'(void)fprintf(ofile, "      n+f+q    v  o+x\\n");'
p12648
aS'(void)fprintf(ofile, "     ________________\\n");'
p12649
aS'(void)fprintf(ofile, "  N  | %4ld %4ld %4ld\\n", Nn + Ns + Nf + Nq + Sn + Ss + Sf + Sq,'
p12650
aS'Nv + Sv, No + Nx + So + Sx);'
p12651
aS'(void)fprintf(ofile, "  V  | %4ld %4ld %4ld\\n", Vn + Vs + Vf + Vq, Vv, Vo + Vx);'
p12652
aS'(void)fprintf(ofile, " F+Q | %4ld %4ld %4ld\\n", Fn + Fs + Ff + Fq + Qn + Qs + Qf + Qq,'
p12653
aS'Fv + Qv, Fo + Fx + Qo + Qx);'
p12654
aS'(void)fprintf('
p12655
aS'ofile, " O+X | %4ld %4ld\\n\\n", On + Os + Of + Oq + Xn + Xs + Xf + Xq, Ov + Xv);'
p12656
aS'break;'
p12657
aS'case 2: /* print line-format output */'
p12658
aS'(void)fprintf(ofile, "%4s %5ld %3ld %3ld %3ld %3ld %4ld %3ld %3ld %3ld %3ld %3ld",'
p12659
aS'record, Nn + Ns + Nf + Nq + Sn + Ss + Sf + Sq, Vn + Vs + Vf + Vq,'
p12660
aS'Fn + Fs + Ff + Fq + Qn + Qs + Qf + Qq, On + Os + Of + Oq + Xn + Xs + Xf + Xq,'
p12661
aS'Nv + Sv, Vv, Fv + Qv, Ov + Xv, No + Nx + So + Sx, Vo + Vx, Fo + Fx + Qo + Qx);'
p12662
aS'(void)fprintf(sfile, "%4s %4ld %4ld %4ld %4ld  ", record, Nx + Sx, Vx, Fx, Qx);'
p12663
aS'break;'
p12664
aS'case 3: /* print standard format summary tables */'
p12665
aS'(void)fprintf(ofile, "               Algorithm\\n");'
p12666
aS'(void)fprintf(ofile, "        n    v    f    q    o    x\\n");'
p12667
aS'(void)fprintf(ofile, "   _______________________________\\n");'
p12668
aS'(void)fprintf(ofile, " N | %4ld %4ld %4ld %4ld %4ld %4ld\\n", Nn + Ns + Sn + Ss, Nv + Sv,'
p12669
aS'Nf + Sf, Nq + Sq, No + So, Nx + Sx);'
p12670
aS'(void)fprintf('
p12671
aS'ofile, " V | %4ld %4ld %4ld %4ld %4ld %4ld\\n", Vn + Vs, Vv, Vf, Vq, Vo, Vx);'
p12672
aS'(void)fprintf('
p12673
aS'ofile, " F | %4ld %4ld %4ld %4ld %4ld %4ld\\n", Fn + Fs, Fv, Ff, Fq, Fo, Fx);'
p12674
aS'(void)fprintf('
p12675
aS'ofile, " Q | %4ld %4ld %4ld %4ld %4ld %4ld\\n", Qn + Qs, Qv, Qf, Qq, Qo, Qx);'
p12676
aS'(void)fprintf(ofile, " O | %4ld %4ld %4ld %4ld\\n", On + Os, Ov, Of, Oq);'
p12677
aS'(void)fprintf(ofile, " X | %4ld %4ld %4ld %4ld\\n\\n", Xn + Xs, Xv, Xf, Xq);'
p12678
aS'break;'
p12679
aS'case 4: /* print condensed format summary tables, with SVEBs */'
p12680
aS'(void)fprintf(ofile, "         Algorithm\\n");'
p12681
aS'(void)fprintf(ofile, "      n+f+q    s    v  o+x\\n");'
p12682
aS'(void)fprintf(ofile, "     _____________________\\n");'
p12683
aS'(void)fprintf(ofile, "  N  | %4ld %4ld %4ld %4ld\\n", Nn + Nf + Nq, Ns, Nv, No + Nx);'
p12684
aS'(void)fprintf(ofile, "  S  | %4ld %4ld %4ld %4ld\\n", Sn + Sf + Sq, Ss, Sv, So + Sx);'
p12685
aS'(void)fprintf(ofile, "  V  | %4ld %4ld %4ld %4ld\\n", Vn + Vf + Vq, Vs, Vv, Vo + Vx);'
p12686
aS'(void)fprintf(ofile, " F+Q | %4ld %4ld %4ld %4ld\\n", Fn + Ff + Fq + Qn + Qf + Qq,'
p12687
aS'Fs + Qs, Fv + Qv, Fo + Fx + Qo + Qx);'
p12688
aS'(void)fprintf('
p12689
aS'ofile, " O+X | %4ld %4ld %4ld\\n\\n", On + Of + Oq + Xn + Xf + Xq, Os + Xs, Ov + Xv);'
p12690
aS'break;'
p12691
aS'case 5: /* print line-format output, with SVEBs */'
p12692
aS'(void)fprintf(ofile, "%4s %5ld %3ld %3ld %3ld %3ld %3ld %3ld %3ld %3ld %3ld", record,'
p12693
aS'Nn + Nf + Nq, Sn + Sf + Sq, Vn + Vf + Vq, Fn + Ff + Fq + Qn + Qf + Qq,'
p12694
aS'On + Of + Oq + Xn + Xf + Xq, Ns, Ss, Vs, Fs + Qs, Os + Xs);'
p12695
aS'(void)fprintf(ofile, " %3ld %3ld %4ld %3ld %3ld %3ld %3ld %3ld %3ld", Nv, Sv, Vv,'
p12696
aS'Fv + Qv, Ov + Xv, No + Nx, So + Sx, Vo + Vx, Fo + Fx + Qo + Qx);'
p12697
aS'(void)fprintf(sfile, "%4s %4ld %4ld %4ld %4ld %4ld  ", record, Nx, Sx, Vx, Fx, Qx);'
p12698
aS'break;'
p12699
aS'case 6: /* print standard format summary tables, with SVEBs */'
p12700
aS'default:'
p12701
aS'(void)fprintf(ofile, "               Algorithm\\n");'
p12702
aS'(void)fprintf(ofile, "        n    s    v    f    q    o    x\\n");'
p12703
aS'(void)fprintf(ofile, "   ____________________________________\\n");'
p12704
aS'(void)fprintf('
p12705
aS'ofile, " N | %4ld %4ld %4ld %4ld %4ld %4ld %4ld\\n", Nn, Ns, Nv, Nf, Nq, No, Nx);'
p12706
aS'(void)fprintf('
p12707
aS'ofile, " S | %4ld %4ld %4ld %4ld %4ld %4ld %4ld\\n", Sn, Ss, Sv, Sf, Sq, So, Sx);'
p12708
aS'(void)fprintf('
p12709
aS'ofile, " V | %4ld %4ld %4ld %4ld %4ld %4ld %4ld\\n", Vn, Vs, Vv, Vf, Vq, Vo, Vx);'
p12710
aS'(void)fprintf('
p12711
aS'ofile, " F | %4ld %4ld %4ld %4ld %4ld %4ld %4ld\\n", Fn, Fs, Fv, Ff, Fq, Fo, Fx);'
p12712
aS'(void)fprintf('
p12713
aS'ofile, " Q | %4ld %4ld %4ld %4ld %4ld %4ld %4ld\\n", Qn, Qs, Qv, Qf, Qq, Qo, Qx);'
p12714
aS'(void)fprintf(ofile, " O | %4ld %4ld %4ld %4ld %4ld\\n", On, Os, Ov, Of, Oq);'
p12715
aS'(void)fprintf(ofile, " X | %4ld %4ld %4ld %4ld %4ld\\n\\n", Xn, Xs, Xv, Xf, Xq);'
p12716
aS'break;'
p12717
ag9114
aS'QTP = Nn + Ns + Nv + Nf + Nq + Sn + Ss + Sv + Sf + Sq + Vn + Vs + Vv + Vf + Vq + Fn + Fs + Fv'
p12718
aS'+ Ff + Fq + Qn + Qs + Qv + Qf + Qq;'
p12719
aS'QFN = No + Nx + So + Sx + Vo + Vx + Fo + Fx + Qo + Qx;'
p12720
aS'QFP = On + Os + Ov + Of + Oq + Xn + Xs + Xv + Xf + Xq;'
p12721
aS'VTP = Vv;'
p12722
aS'VFN = Vn + Vs + Vf + Vq + Vo + Vx;'
p12723
aS'VTN = Nn + Ns + Nf + Nq + Sn + Ss + Sf + Sq + Fn + Fs + Ff + Fq + Qn + Qs + Qf + Qq + On + Os'
p12724
aS'+ Of + Oq + Xn + Xs + Xf + Xq;'
p12725
aS'VFP = Nv + Sv + Ov + Xv;'
p12726
aS'STP = Ss;'
p12727
aS'SFN = Sn + Sv + Sf + Sq + So + Sx;'
p12728
aS'SFP = Ns + Vs + Fs + Os + Xs;'
p12729
aS'pstat("           QRS sensitivity", "%6.2f", QTP, QTP + QFN);'
p12730
aS'pstat(" QRS positive predictivity", "%6.2f", QTP, QTP + QFP);'
p12731
aS'pstat("           VEB sensitivity", "%6.2f", VTP, VTP + VFN);'
p12732
aS'pstat(" VEB positive predictivity", "%6.2f", VTP, VTP + VFP);'
p12733
ag6748
aS'pstat("   VEB false positive rate", "%6.3f", VFP, VTN + VFP);'
p12734
aS'else'
p12735
ag9675
aS'pstat("          SVEB sensitivity", "%6.2f", STP, STP + SFN);'
p12736
aS'pstat("SVEB positive predictivity", "%6.2f", STP, STP + SFP);'
p12737
ag9114
ag6817
ag9675
aS'(void)fprintf(ofile, "     RMS RR interval error: ");'
p12738
ag6781
aS'(void)fprintf(ofile, "%6.2f ms", sqrt(ssrre / nrre) * 1000. / strtim("1"));'
p12739
aS'else'
p12740
aS'(void)fprintf(ofile, "     -");'
p12741
ag9114
aS'else if (fflag == 5)'
p12742
ag9675
ag6814
aS'(void)fprintf(ofile, " %6.2f", sqrt(ssrre / nrre) * 1000. / strtim("1"));'
p12743
aS'else'
p12744
aS'(void)fprintf(ofile, "     -");'
p12745
ag9114
aS'(void)fprintf(ofile, "\\n");'
p12746
aS'sstat("\\n  Beats missed in shutdown", "%6.2f", Nx + Vx + Fx + Qx, QTP + QFN);'
p12747
aS'sstat("      N missed in shutdown", "%6.2f", Nx, Nn + Ns + Nv + Nf + Nq + No + Nx);'
p12748
ag6830
aS'sstat("      S missed in shutdown", "%6.2f", Sx, Sn + Ss + Sv + Sf + Sq + So + Sx);'
p12749
aS'sstat("      V missed in shutdown", "%6.2f", Vx, Vn + Vs + Vv + Vf + Vq + Vo + Vx);'
p12750
aS'sstat("      F missed in shutdown", "%6.2f", Fx, Fn + Fs + Fv + Ff + Fq + Fo + Fx);'
p12751
ag6843
aS'(void)fprintf(sfile, "       Total shutdown time: ");'
p12752
aS'(void)fprintf(sfile, "%5ld seconds\\n", shut_down);'
p12753
ag8990
ag6856
aS'fclose(ofile);'
p12754
ag9114
ag8990
aS'static char* help_strings[] = { "usage: %s -r RECORD -a REF TEST [OPTIONS ...]\\n",'
p12755
aS'"where RECORD is the record name;  REF is reference annotator name;  TEST is",'
p12756
aS'"the test annotator name; and OPTIONS may include any of:",'
p12757
aS'" -c FILE        append condensed reports (AAMI RP Table 6 format) to FILE",'
p12758
aS'" -C FILE        as for -c, but report SVEB statistics also",'
p12759
aS'" -f TIME        begin comparison at specified TIME (default: 5 minutes",'
p12760
aS'"                 after beginning of record)", " -h             print this usage summary",'
p12761
aS'" -l FILE1 FILE2 append line-format reports (AAMI RP Tables 7 and 8 format)",'
p12762
aS'"                 to FILE1 and FILE2 respectively",'
p12763
aS'" -L FILE1 FILE2 as for -l, but report SVEB statistics also",'
p12764
aS'" -o             generate an output annotation file",'
p12765
aS'" -O             generate an expanded output annotation file only",'
p12766
aS'" -s FILE        append standard reports (AAMI RP Table 3 format) to FILE",'
p12767
aS'" -S FILE        as for -s, but report SVEB statistics also",'
p12768
aS'" -t TIME        stop comparison at specified TIME (default: end of record",'
p12769
aS'"                 if defined, end of reference annotation file otherwise;",'
p12770
aS'"                 if TIME is 0, the comparison ends when the end of either",'
p12771
aS'"                 annotation file is reached)",'
p12772
aS'" -v             verbose mode:  list all beat label discrepancies",'
p12773
aS'" -w TIME        set match window (default: 0.15 seconds)", NULL };'
p12774
ag8990
aS'void help()'
p12775
ag9675
aS'int i;'
p12776
ag8990
aS'(void)fprintf(stderr, help_strings[0], pname);'
p12777
aS'for (i = 1; help_strings[i] != NULL; i++)'
p12778
aS'(void)fprintf(stderr, "%s\\n", help_strings[i]);'
p12779
ag9114
ag8990
aS'char* prog_name(char* s)'
p12780
ag9675
aS'char* p = s + strlen(s);'
p12781
ag8990
aS'#ifdef MSDOS'
p12782
aS"while (p >= s && *p != '\\\\' && *p != ':')"
p12783
ag9675
aS"if (*p == '.')"
p12784
aS"*p = '\\0'; /* strip off extension */"
p12785
aS"if ('A' <= *p && *p <= 'Z')"
p12786
aS"*p += 'a' - 'A'; /* convert to lower case */"
p12787
aS'p--;'
p12788
ag9114
aS'#else'
p12789
aS"while (p >= s && *p != '/')"
p12790
aS'p--;'
p12791
aS'#endif'
p12792
aS'return (p + 1);'
p12793
ag9114
ag8990
aS"/* Function `genxcmp' is used only when generating an expanded output"
p12794
aS'annotation file. */'
p12795
ag8990
aS'void genxcmp()'
p12796
ag9675
aS'int alen;'
p12797
aS'static char mstring[550], *p, nullaux[1];'
p12798
ag8990
ag6953
aS'getref();'
p12799
ag6966
aS'gettest();'
p12800
ag6979
aS'ref_annot.aux = nullaux;'
p12801
ag6992
aS'test_annot.aux = nullaux;'
p12802
aS'while ((end_time > 0L && (T <= end_time || t <= end_time))'
p12803
aS'|| (end_time == -1L && T != huge_time)'
p12804
aS'|| (end_time == 0L && T != huge_time && t != huge_time))'
p12805
ag9675
aS'for (p = mstring + 1; p < mstring + *mstring; p++)'
p12806
aS"*p = '\\0';"
p12807
ag7321
ag9675
aS'/* Test annotation precedes reference annotation. */'
p12808
ag7155
ag9675
aS'/* Annotation times match within the window. */'
p12809
ag7025
aS'|| test_annot.chan != ref_annot.chan || test_annot.num != ref_annot.num'
p12810
aS'|| strcmp(test_annot.aux, ref_annot.aux))'
p12811
ag9675
aS"/* Annotation types, subtypes, ..., don't match. */"
p12812
aS'p = mstring + 1;'
p12813
aS'(void)strcat(p, annstr(ref_annot.anntyp));'
p12814
aS'p += strlen(p);'
p12815
ag7038
aS'|| test_annot.num != ref_annot.num)'
p12816
ag9675
aS'(void)sprintf('
p12817
aS'p, "[%d,%d,%d]", ref_annot.subtyp, ref_annot.chan, ref_annot.num);'
p12818
aS'p += strlen(p);'
p12819
ag9114
ag7051
ag9675
aS'(void)sprintf(p, " (%s)", ref_annot.aux + 1);'
p12820
aS'p += strlen(p);'
p12821
ag9114
aS'(void)sprintf(p, "/%s", annstr(test_annot.anntyp));'
p12822
aS'p += strlen(p);'
p12823
ag7064
aS'(void)sprintf(p, " (%s)", test_annot.aux + 1);'
p12824
aS'alen = strlen(mstring + 1);'
p12825
ag7077
ag9675
aS'(void)fprintf(stderr, "aux string truncated at %s (%ld)\\n",'
p12826
aS'timstr(test_annot.time), test_annot.time);'
p12827
aS'alen = 254;'
p12828
aS"mstring[alen + 1] = '\\0';"
p12829
ag9114
aS'mstring[0] = alen;'
p12830
aS'test_annot.aux = mstring;'
p12831
aS'test_annot.anntyp = NOTE;'
p12832
ag9114
aS'(void)putann(0, &test_annot);'
p12833
aS'getref();'
p12834
aS'gettest();'
p12835
ag7090
aS'ref_annot.aux = nullaux;'
p12836
ag7103
aS'test_annot.aux = nullaux;'
p12837
ag9114
aS'else'
p12838
ag9675
aS'/* No matching reference annotation. */'
p12839
aS'p = mstring + 1;'
p12840
aS'(void)sprintf(p, "%c/%s", rpann(test_annot.time), annstr(test_annot.anntyp));'
p12841
aS'p += strlen(p);'
p12842
ag7126
aS'(void)sprintf(p, " (%s)", test_annot.aux + 1);'
p12843
aS'alen = strlen(mstring + 1);'
p12844
ag7139
ag9675
aS'(void)fprintf(stderr, "aux string truncated at %s (%ld)\\n",'
p12845
aS'timstr(test_annot.time), test_annot.time);'
p12846
aS'alen = 254;'
p12847
aS"mstring[alen + 1] = '\\0';"
p12848
ag9114
aS'mstring[0] = alen;'
p12849
aS'test_annot.aux = mstring;'
p12850
aS'test_annot.anntyp = NOTE;'
p12851
aS'(void)putann(0, &test_annot);'
p12852
aS'gettest();'
p12853
ag7152
aS'test_annot.aux = nullaux;'
p12854
ag9114
ag9114
aS'else'
p12855
ag9675
aS'/* Reference annotation precedes test annotation. */'
p12856
ag7318
ag9675
aS'/* Annotation times match within the window. */'
p12857
ag7188
aS'|| test_annot.chan != ref_annot.chan || test_annot.num != ref_annot.num'
p12858
aS'|| strcmp(test_annot.aux, ref_annot.aux))'
p12859
ag9675
aS"/* Annotation types, subtypes, ..., don't match. */"
p12860
aS'p = mstring + 1;'
p12861
aS'(void)strcat(p, annstr(ref_annot.anntyp));'
p12862
aS'p += strlen(p);'
p12863
ag7201
aS'|| test_annot.num != ref_annot.num)'
p12864
ag9675
aS'(void)sprintf('
p12865
aS'p, "[%d,%d,%d]", ref_annot.subtyp, ref_annot.chan, ref_annot.num);'
p12866
aS'p += strlen(p);'
p12867
ag9114
ag7214
ag9675
aS'(void)sprintf(p, " (%s)", ref_annot.aux + 1);'
p12868
aS'p += strlen(p);'
p12869
ag9114
aS'(void)sprintf(p, "/%s", annstr(test_annot.anntyp));'
p12870
aS'p += strlen(p);'
p12871
ag7227
aS'(void)sprintf(p, " (%s)", test_annot.aux + 1);'
p12872
aS'alen = strlen(mstring + 1);'
p12873
ag7240
ag9675
aS'(void)fprintf(stderr, "aux string truncated at %s (%ld)\\n",'
p12874
aS'timstr(test_annot.time), test_annot.time);'
p12875
aS'alen = 254;'
p12876
aS"mstring[alen + 1] = '\\0';"
p12877
ag9114
aS'mstring[0] = alen;'
p12878
aS'test_annot.aux = mstring;'
p12879
aS'test_annot.anntyp = NOTE;'
p12880
ag9114
aS'(void)putann(0, &test_annot);'
p12881
aS'getref();'
p12882
aS'gettest();'
p12883
ag7253
aS'ref_annot.aux = nullaux;'
p12884
ag7266
aS'test_annot.aux = nullaux;'
p12885
ag9114
aS'else'
p12886
ag9675
aS'/* No matching test annotation. */'
p12887
aS'p = mstring + 1;'
p12888
aS'(void)sprintf(p, "%s", annstr(ref_annot.anntyp));'
p12889
aS'p += strlen(p);'
p12890
ag7289
ag9675
aS'(void)sprintf(p, " (%s)", ref_annot.aux + 1);'
p12891
aS'p += strlen(p);'
p12892
ag9114
aS'(void)sprintf(p, "/%c", tpann(ref_annot.time));'
p12893
aS'alen = strlen(mstring + 1);'
p12894
ag7302
ag9675
aS'(void)fprintf(stderr, "aux string truncated at %s (%ld)\\n",'
p12895
aS'timstr(ref_annot.time), ref_annot.time);'
p12896
aS'alen = 254;'
p12897
aS"mstring[alen + 1] = '\\0';"
p12898
ag9114
aS'mstring[0] = alen;'
p12899
aS'ref_annot.aux = mstring;'
p12900
aS'ref_annot.anntyp = NOTE;'
p12901
aS'(void)putann(0, &ref_annot);'
p12902
aS'getref();'
p12903
ag7315
aS'ref_annot.aux = nullaux;'
p12904
ag9114
ag9114
ag9114
ag9114
ag8990
ag8990
aS'void NewInit(void)'
p12905
ag9675
aS'char testAnnName[20], rec;'
p12906
ag8990
aS'// Initialize counts.'
p12907
aS'Nn = Ns = Nv = Nf = Nq = No = Nx = 0;'
p12908
aS'Sn = Ss = Sv = Sf = Sq = So = Sx = 0;'
p12909
aS'Vn = Vs = Vv = Vf = Vq = Vo = Vx = 0;'
p12910
aS'Fn = Fs = Fv = Ff = Fq = Fo = Fx = 0;'
p12911
aS'Qn = Qs = Qv = Qf = Qq = Qo = Qx = 0;'
p12912
aS'On = Os = Ov = Of = Oq = 0;'
p12913
aS'Xn = Xs = Xv = Xf = Xq = 0;'
p12914
ag8990
aS'T = Tprime = 0;'
p12915
aS't = tprime = 0;'
p12916
ag8990
ag8990
aS'setwfdb(ECG_DB_PATH);'
p12917
ag8990
aS'//\tprintf("Enter record: ") ;'
p12918
aS'//\tgets(record) ;'
p12919
ag8990
aS'sampfreq(record);'
p12920
aS'an[0].name = "atruth";'
p12921
aS'an[1].name = "atest";'
p12922
aS'an[0].stat = an[1].stat = WFDB_READ;'
p12923
ag7343
ag9675
aS'printf("Couldn\'t open annotation files.\\n");'
p12924
aS'exit(0);'
p12925
ag9114
ag8990
aS'fflag = 3;'
p12926
ag8990
aS'ofname = "testrpt.txt"; // Name of file for report.'
p12927
aS'match_dt = (int)strtim(".15");'
p12928
aS'start = strtim("5:0");'
p12929
aS'end_time = -1L;'
p12930
aS'shut_down = (int)strtim(".5");'
p12931
ag9114
ag8990
aS'void NewPrintResults(void)'
p12932
ag9675
aS'int QTP, QFN, QFP, VTP, VFN, VTN, VFP;'
p12933
aS'FILE* results;'
p12934
ag8990
aS'QTP = Nn + Ns + Nv + Nf + Nq + Sn + Ss + Sv + Sf + Sq + Vn + Vs + Vv + Vf + Vq + Fn + Fs + Fv'
p12935
aS'+ Ff + Fq + Qn + Qs + Qv + Qf + Qq;'
p12936
aS'QFN = No + Nx + So + Sx + Vo + Vx + Fo + Fx + Qo + Qx;'
p12937
aS'QFP = On + Os + Ov + Of + Oq + Xn + Xs + Xv + Xf + Xq;'
p12938
aS'VTP = Vv;'
p12939
aS'VFN = Vn + Vs + Vf + Vq + Vo + Vx;'
p12940
aS'VTN = Nn + Ns + Nf + Nq + Sn + Ss + Sf + Sq + Fn + Fs + Ff + Fq + Qn + Qs + Qf + Qq + On + Os'
p12941
aS'+ Of + Oq + Xn + Xs + Xf + Xq;'
p12942
aS'VFP = Nv + Sv + Ov + Xv;'
p12943
aS'results = fopen("C:\\\\pcdeve~1\\\\arrhyt~1\\\\adtstat.txt", "a");'
p12944
aS'fprintf(results, "%s\\t%d\\t%d\\t%d\\t%d\\t%d\\t%d\\t\\n", record, QTP, QFN, QFP, VTP, VFN, VFP);'
p12945
aS'fclose(results);'
p12946
ag9114
aa(lp12947
S'/* file: ecgmap.h\tG. Moody        8 June 1983'
p12948
aS'Last revised:\t4 May 1999\twfdblib 10.0.0'
p12949
aS'ECG annotation code mapping macros'
p12950
ag8990
aS'_______________________________________________________________________________'
p12951
aS'wfdb: a library for reading and writing annotated waveforms (time series data)'
p12952
aS'Copyright (C) 1999 George B. Moody'
p12953
ag8990
aS'This library is free software; you can redistribute it and/or modify it under'
p12954
aS'the terms of the GNU Library General Public License as published by the Free'
p12955
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p12956
aS'later version.'
p12957
ag8990
aS'This library is distributed in the hope that it will be useful, but WITHOUT ANY'
p12958
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p12959
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p12960
aS'details.'
p12961
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p12962
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p12963
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p12964
ag8990
aS'You may contact the author by e-mail (george@mit.edu) or postal mail'
p12965
aS'(MIT Room E25-505A, Cambridge, MA 02139 USA).  For updates to this software,'
p12966
aS'please visit PhysioNet (http://www.physionet.org/).'
p12967
aS'_______________________________________________________________________________'
p12968
ag8990
aS'These macros evaluate their arguments only once, so that they behave like'
p12969
aS"functions with respect to side-effects (e.g., `isqrs(x++)' is safe).  With"
p12970
aS'the exception of isann(), each macro uses a table;  to avoid wasting space'
p12971
aS'in programs compiled from more than one source, try to keep all references'
p12972
aS'to these macros in a single source file so that multiple instances of the'
p12973
aS'tables are not required.  To save even more space, simply define the unneeded'
p12974
aS"macros before including this file (e.g., `#define map1').*/"
p12975
ag8990
aS'#ifndef wfdb_ECGMAP_H /* avoid multiple definitions */'
p12976
aS'#define wfdb_ECGMAP_H'
p12977
ag8990
aS'#ifndef wfdb_ECGCODES_H'
p12978
aS'#include "ecgcodes.h"'
p12979
aS'#endif'
p12980
ag8990
aS'/* isann(A) is true if A is a legal annotation code, false otherwise */'
p12981
aS'#define isann(A) (0 < (wfdb_mt = (A)) && wfdb_mt <= ACMAX)'
p12982
aS'static int wfdb_mt; /* macro temporary variable */'
p12983
ag8990
aS'/* isqrs(A) is true (1) if A denotes a QRS complex, false (0) otherwise */'
p12984
aS'#ifndef isqrs'
p12985
aS'#define isqrs(A) (isann(A) ? wfdb_qrs[wfdb_mt] : 0)'
p12986
aS'#define setisqrs(A, X) (isann(A) ? (wfdb_qrs[wfdb_mt] = (X)) : 0)'
p12987
aS'static char wfdb_qrs[] = {'
p12988
aS'0, 1, 1, 1, 1, 1, 1, 1, 1, 1, /* 0 - 9 */'
p12989
aS'1, 1, 1, 1, 0, 0, 0, 0, 0, 0, /* 10 - 19 */'
p12990
aS'0, 0, 0, 0, 0, 1, 0, 0, 0, 0, /* 20 - 29 */'
p12991
aS'1, 1, 0, 0, 1, 1, 0, 0, 1, 0, /* 30 - 39 */'
p12992
aS'0, 1, 0, 0, 0, 0, 0, 0, 0, 0 /* 40 - 49 */'
p12993
aS'};'
p12994
aS'#endif'
p12995
ag8990
aS'/* map1(A) maps A into one of {NOTQRS, NORMAL, PVC, FUSION, LEARN} */'
p12996
aS'#ifndef map1'
p12997
aS'#define map1(A) (isann(A) ? wfdb_mp1[wfdb_mt] : NOTQRS)'
p12998
aS'#define setmap1(A, X) (isann(A) ? (wfdb_mp1[wfdb_mt] = (X)) : NOTQRS)'
p12999
aS'static char wfdb_mp1[] = {'
p13000
aS'NOTQRS, NORMAL, NORMAL, NORMAL, NORMAL, /* 0 - 4 */'
p13001
aS'PVC, FUSION, NORMAL, NORMAL, NORMAL, /* 5 - 9 */'
p13002
aS'PVC, NORMAL, NORMAL, NORMAL, NOTQRS, /* 10 - 14 */'
p13003
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 15 - 19 */'
p13004
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 20 - 24 */'
p13005
aS'NORMAL, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 25 - 29 */'
p13006
aS'LEARN, PVC, NOTQRS, NOTQRS, NORMAL, /* 30 - 34 */'
p13007
aS'NORMAL, NOTQRS, NOTQRS, NORMAL, NOTQRS, /* 35 - 39 */'
p13008
aS'NOTQRS, PVC, NOTQRS, NOTQRS, NOTQRS, /* 40 - 44 */'
p13009
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS /* 45 - 49 */'
p13010
aS'};'
p13011
aS'#endif'
p13012
ag8990
aS'/* map2(A) maps A into one of {NOTQRS, NORMAL, SVPB, PVC, FUSION, LEARN} */'
p13013
aS'#ifndef map2'
p13014
aS'#define map2(A) (isann(A) ? wfdb_mp2[wfdb_mt] : NOTQRS)'
p13015
aS'#define setmap2(A, X) (isann(A) ? (wfdb_mp2[wfdb_mt] = (X)) : NOTQRS)'
p13016
aS'static char wfdb_mp2[] = {'
p13017
aS'NOTQRS, NORMAL, NORMAL, NORMAL, SVPB, /* 0 - 4 */'
p13018
aS'PVC, FUSION, SVPB, SVPB, SVPB, /* 5 - 9 */'
p13019
aS'PVC, NORMAL, NORMAL, NORMAL, NOTQRS, /* 10 - 14 */'
p13020
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 15 - 19 */'
p13021
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 20 - 24 */'
p13022
aS'NORMAL, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 25 - 29 */'
p13023
aS'LEARN, PVC, NOTQRS, NOTQRS, NORMAL, /* 30 - 34 */'
p13024
aS'NORMAL, NOTQRS, NOTQRS, NORMAL, NOTQRS, /* 35 - 39 */'
p13025
aS'NOTQRS, PVC, NOTQRS, NOTQRS, NOTQRS, /* 40 - 44 */'
p13026
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS /* 45 - 49 */'
p13027
aS'};'
p13028
aS'#endif'
p13029
ag8990
aS'/* ammap(A) maps an AHA annotation code, A, into an MIT annotation code */'
p13030
aS'#ifndef ammap'
p13031
aS"#define ammap(A) (('D' < (wfdb_mt = (A)) && wfdb_mt <= ']') ? wfdb_ammp[wfdb_mt - 'E'] : NOTQRS)"
p13032
aS'static char wfdb_ammp[] = {'
p13033
aS"VESC, FUSION, NOTQRS, NOTQRS, NOTQRS, /* 'E' - 'I' */"
p13034
aS"NOTQRS, NOTQRS, NOTQRS, NOTQRS, NORMAL, /* 'J' - 'N' */"
p13035
aS"NOTE, PACE, UNKNOWN, RONT, NOTQRS, /* 'O' - 'S' */"
p13036
aS"NOTQRS, NOISE, PVC, NOTQRS, NOTQRS, /* 'T' - 'X' */"
p13037
aS"NOTQRS, NOTQRS, VFON, NOTQRS, VFOFF /* 'Y' - ']' */"
p13038
aS'};'
p13039
aS'#endif'
p13040
ag8990
aS'/* mamap(A,S) maps MIT code A, subtype S, into an AHA annotation code */'
p13041
aS'#ifndef mamap'
p13042
aS'#define mamap(A, S)                                                                                \\'
p13043
aS"(isann(A) ? (((wfdb_mt = wfdb_mamp[wfdb_mt]) == 'U' && (S) != -1) ? 'O' : wfdb_mt) : 'O')"
p13044
aS'static char wfdb_mamp[] = {'
p13045
aS"'O', 'N', 'N', 'N', 'N', /* 0 - 4 */"
p13046
aS"'V', 'F', 'N', 'N', 'N', /* 5 - 9 */"
p13047
aS"'E', 'N', 'P', 'Q', 'U', /* 10 - 14 */"
p13048
aS"'O', 'O', 'O', 'O', 'O', /* 15 - 19 */"
p13049
aS"'O', 'O', 'O', 'O', 'O', /* 20 - 24 */"
p13050
aS"'N', 'O', 'O', 'O', 'O', /* 25 - 29 */"
p13051
aS"'Q', 'O', '[', ']', 'N', /* 30 - 34 */"
p13052
aS"'N', 'O', 'O', 'N', 'O', /* 35 - 39 */"
p13053
aS"'O', 'R', 'O', 'O', 'O', /* 40 - 44 */"
p13054
aS"'O', 'O', 'O', 'O', 'O' /* 45 - 49 */"
p13055
aS'};'
p13056
aS'#endif'
p13057
ag8990
aS'/* Annotation position codes.  These may be used by applications which plot'
p13058
aS'signals and annotations to determine where to print annotation mnemonics. */'
p13059
aS'#define APUNDEF 0 /* for undefined annotation types */'
p13060
aS'#define APSTD 1 /* standard position */'
p13061
aS'#define APHIGH 2 /* a level above APSTD */'
p13062
aS'#define APLOW 3 /* a level below APSTD */'
p13063
aS"#define APATT 4 /* attached to the signal specified by `chan' */"
p13064
aS'#define APAHIGH 5 /* a level above APATT */'
p13065
aS'#define APALOW 6 /* a level below APATT */'
p13066
ag8990
aS'/* annpos(A) returns the appropriate position code for A */'
p13067
aS'#ifndef annpos'
p13068
aS'#define annpos(A) (isann(A) ? wfdb_annp[wfdb_mt] : APUNDEF)'
p13069
aS'#define setannpos(A, X) (isann(A) ? (wfdb_annp[wfdb_mt] = (X)) : APUNDEF)'
p13070
aS'static char wfdb_annp[] = {'
p13071
aS'APUNDEF, APSTD, APSTD, APSTD, APSTD, /* 0 - 4 */'
p13072
aS'APSTD, APSTD, APSTD, APSTD, APSTD, /* 5 - 9 */'
p13073
aS'APSTD, APSTD, APSTD, APSTD, APHIGH, /* 10 - 14 */'
p13074
aS'APUNDEF, APHIGH, APUNDEF, APHIGH, APHIGH, /* 15 - 19 */'
p13075
aS'APHIGH, APHIGH, APHIGH, APHIGH, APHIGH, /* 20 - 24 */'
p13076
aS'APSTD, APHIGH, APHIGH, APLOW, APHIGH, /* 25 - 29 */'
p13077
aS'APSTD, APSTD, APSTD, APSTD, APSTD, /* 30 - 34 */'
p13078
aS'APSTD, APHIGH, APHIGH, APSTD, APHIGH, /* 35 - 39 */'
p13079
aS'APHIGH, APSTD, APUNDEF, APUNDEF, APUNDEF, /* 40 - 44 */'
p13080
aS'APUNDEF, APUNDEF, APUNDEF, APUNDEF, APUNDEF /* 45 - 49 */'
p13081
aS'};'
p13082
aS'#endif'
p13083
ag8990
aS'#endif'
p13084
aa(lp13085
S'/*****************************************************************************'
p13086
aS'FILE:  bdac.h'
p13087
aS'AUTHOR:\tPatrick S. Hamilton'
p13088
aS'REVISED:\t9/25/2001'
p13089
aS'___________________________________________________________________________'
p13090
ag8990
aS'bdac.h: Beat detection and classification parameter definitions.'
p13091
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p13092
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p13093
aS'the terms of the GNU Library General Public License as published by the Free'
p13094
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p13095
aS'later version.'
p13096
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p13097
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p13098
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p13099
aS'details.'
p13100
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p13101
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p13102
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p13103
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p13104
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p13105
aS'MA 02143 USA).  For updates to this software, please visit our website'
p13106
aS'(http://www.eplimited.com).'
p13107
aS'******************************************************************************/'
p13108
aS'#define BEAT_SAMPLE_RATE 100'
p13109
aS'#define BEAT_MS_PER_SAMPLE ((double)1000 / (double)BEAT_SAMPLE_RATE)'
p13110
ag8990
aS'#define BEAT_MS10 ((int)(10 / BEAT_MS_PER_SAMPLE + 0.5))'
p13111
aS'#define BEAT_MS20 ((int)(20 / BEAT_MS_PER_SAMPLE + 0.5))'
p13112
aS'#define BEAT_MS40 ((int)(40 / BEAT_MS_PER_SAMPLE + 0.5))'
p13113
aS'#define BEAT_MS50 ((int)(50 / BEAT_MS_PER_SAMPLE + 0.5))'
p13114
aS'#define BEAT_MS60 ((int)(60 / BEAT_MS_PER_SAMPLE + 0.5))'
p13115
aS'#define BEAT_MS70 ((int)(70 / BEAT_MS_PER_SAMPLE + 0.5))'
p13116
aS'#define BEAT_MS80 ((int)(80 / BEAT_MS_PER_SAMPLE + 0.5))'
p13117
aS'#define BEAT_MS90 ((int)(90 / BEAT_MS_PER_SAMPLE + 0.5))'
p13118
aS'#define BEAT_MS100 ((int)(100 / BEAT_MS_PER_SAMPLE + 0.5))'
p13119
aS'#define BEAT_MS110 ((int)(110 / BEAT_MS_PER_SAMPLE + 0.5))'
p13120
aS'#define BEAT_MS130 ((int)(130 / BEAT_MS_PER_SAMPLE + 0.5))'
p13121
aS'#define BEAT_MS140 ((int)(140 / BEAT_MS_PER_SAMPLE + 0.5))'
p13122
aS'#define BEAT_MS150 ((int)(150 / BEAT_MS_PER_SAMPLE + 0.5))'
p13123
aS'#define BEAT_MS250 ((int)(250 / BEAT_MS_PER_SAMPLE + 0.5))'
p13124
aS'#define BEAT_MS280 ((int)(280 / BEAT_MS_PER_SAMPLE + 0.5))'
p13125
aS'#define BEAT_MS300 ((int)(300 / BEAT_MS_PER_SAMPLE + 0.5))'
p13126
aS'#define BEAT_MS350 ((int)(350 / BEAT_MS_PER_SAMPLE + 0.5))'
p13127
aS'#define BEAT_MS400 ((int)(400 / BEAT_MS_PER_SAMPLE + 0.5))'
p13128
aS'#define BEAT_MS1000 BEAT_SAMPLE_RATE'
p13129
ag8990
aS'#define BEATLGTH BEAT_MS1000'
p13130
aS'#define MAXTYPES 8'
p13131
aS'#define FIDMARK BEAT_MS400'
p13132
aa(lp13133
S'void ResetPostClassify();'
p13134
aS'void PostClassify('
p13135
aS'int* recentTypes, int domType, int* recentRRs, int width, double mi2, int rhythmClass);'
p13136
aS'int CheckPostClass(int type);'
p13137
aS'int CheckPCRhythm(int type);'
p13138
ag8990
aS'// yo yo yo stuff'
p13139
aa(lp13140
S'/*****************************************************************************'
p13141
aS'FILE:  match.cpp'
p13142
aS'AUTHOR:\tPatrick S. Hamilton'
p13143
aS'REVISED:\t5/13/2002'
p13144
aS'___________________________________________________________________________'
p13145
ag8990
aS'match.cpp: Match beats to previous beats.'
p13146
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p13147
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p13148
aS'the terms of the GNU Library General Public License as published by the Free'
p13149
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p13150
aS'later version.'
p13151
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p13152
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p13153
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p13154
aS'details.'
p13155
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p13156
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p13157
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p13158
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p13159
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p13160
aS'MA 02143 USA).  For updates to this software, please visit our website'
p13161
aS'(http://www.eplimited.com).'
p13162
aS'__________________________________________________________________________'
p13163
ag8990
aS'Match.cpp contains functions for managing template matching of beats and'
p13164
aS'managing of feature data associated with each beat type.  These'
p13165
aS'functions are called functions in classify.cpp.  Beats are matched to'
p13166
aS'previoiusly detected beats types based on how well they match point by point'
p13167
aS'in a MATCH_LENGTH region centered on FIDMARK (R-wave location).  The following'
p13168
aS'is a list of functions that are available for calling by classify.'
p13169
ag8990
aS'ResetMatch -- Resets global variables used in template matching.'
p13170
aS'CompareBeats -- Measures the difference between two beats with'
p13171
aS'beats scaled to produce the best match.'
p13172
aS'CompareBeats2 -- Measures the difference between two beats without'
p13173
aS'beat scaling.'
p13174
aS'NewBeatType -- Start a new beat type with the present beat.'
p13175
aS'BestMorphMatch -- Finds the beat template that best matches a new beat.'
p13176
aS'UpdateBeatType -- Updates existing beat template and associated features'
p13177
aS'based on a new beat.'
p13178
aS'GetDominantType -- Returns the NORMAL beat type that has occorred most often.'
p13179
aS'ClearLastNewType -- Removes the last new beat type from the possible beat'
p13180
aS'types.'
p13181
aS'DomCompare -- Compares the template for a given beat type to the template'
p13182
aS'of the dominant normal beat type.'
p13183
aS'DomCompare2 -- Compares a given beat template to the templat of the'
p13184
aS'dominant normal beat type.'
p13185
ag8990
aS'PostClassify -- Classifies beats based on preceding and following beats'
p13186
aS'and R-to-R intervals.'
p13187
ag8990
aS'ResetPostClassify -- Resets variables used for post classification.'
p13188
ag8990
aS'CheckPostClass -- Check type classification based on last eight post'
p13189
aS'classifications.'
p13190
ag8990
aS'CheckPCClass -- Check post beat rhythm classification for the last eight'
p13191
aS'beats.'
p13192
ag8990
aS'A number of simple functions allow access to beat features while maintaining'
p13193
aS'some level of encapsulation:'
p13194
ag8990
aS'GetTypesCount -- Returns number of beat types that have been detected.'
p13195
aS'GetBeatTypeCount -- Returns the number of beats of a given type'
p13196
aS'that have been detected.'
p13197
aS'GetBeatWidth -- Returns the width estimate for a given beat type.'
p13198
aS'SetBeatClass -- Associates a beat classification with a beat type.'
p13199
aS'GetBeatBegin -- Returns the beginning point for a given beat type.'
p13200
aS'GetBeatEnd -- Returns the ending point for a given beat type.'
p13201
ag8990
aS'******************************************************************************/'
p13202
aS'#include <stdlib.h>'
p13203
aS'#include <stdio.h>'
p13204
aS'#include "ecgcodes.h"'
p13205
ag8990
aS'#include "bdac.h"'
p13206
aS'#define MATCH_LENGTH BEAT_MS300 // Number of points used for beat matching.'
p13207
aS'#define MATCH_LIMIT 1.2 // Match limit used testing whether two'
p13208
aS'// beat types might be combined.'
p13209
aS'#define COMBINE_LIMIT 0.8 // Limit used for deciding whether two types'
p13210
aS'// can be combined.'
p13211
ag8990
aS'#define MATCH_START (FIDMARK - (MATCH_LENGTH / 2)) // Starting point for beat matching'
p13212
aS'#define MATCH_END (FIDMARK + (MATCH_LENGTH / 2)) // End point for beat matching.'
p13213
aS'#define MAXPREV 8 // Number of preceeding beats used as beat features.'
p13214
aS'#define MAX_SHIFT BEAT_MS40'
p13215
ag8990
aS'// Local prototypes.'
p13216
ag8990
aS'int NoiseCheck(int* beat);'
p13217
aS'double CompareBeats(int* beat1, int* beat2, int* shiftAdj);'
p13218
aS'double CompareBeats2(int* beat1, int* beat2, int* shiftAdj);'
p13219
aS'void UpdateBeat(int* aveBeat, int* newBeat, int shift);'
p13220
aS'void BeatCopy(int srcBeat, int destBeat);'
p13221
aS'int MinimumBeatVariation(int type);'
p13222
ag8990
aS'// External prototypes.'
p13223
ag8990
aS'void AnalyzeBeat('
p13224
aS'int* beat, int* onset, int* offset, int* isoLevel, int* beatBegin, int* beatEnd, int* amp);'
p13225
aS'void AdjustDomData(int oldType, int newType);'
p13226
aS'void CombineDomData(int oldType, int newType);'
p13227
ag8990
aS'// Global variables.'
p13228
ag8990
aS'int BeatTemplates[MAXTYPES][BEATLGTH];'
p13229
aS'int BeatCounts[MAXTYPES];'
p13230
aS'int BeatWidths[MAXTYPES];'
p13231
aS'int BeatClassifications[MAXTYPES];'
p13232
aS'int BeatBegins[MAXTYPES];'
p13233
aS'int BeatEnds[MAXTYPES];'
p13234
aS'int BeatsSinceLastMatch[MAXTYPES];'
p13235
aS'int BeatAmps[MAXTYPES];'
p13236
aS'int BeatCenters[MAXTYPES];'
p13237
aS'double MIs[MAXTYPES][8];'
p13238
ag8990
aS'// Need access to these in postclas.cpp when beat types are combined'
p13239
aS'// and moved.'
p13240
ag8990
aS'extern int PostClass[MAXTYPES][8];'
p13241
aS'extern int PCRhythm[MAXTYPES][8];'
p13242
ag8990
aS'int TypeCount = 0;'
p13243
ag8990
aS'/***************************************************************************'
p13244
aS'ResetMatch() resets static variables involved with template matching.'
p13245
aS'****************************************************************************/'
p13246
ag8990
aS'void ResetMatch(void)'
p13247
ag9675
aS'int i, j;'
p13248
aS'TypeCount = 0;'
p13249
aS'for (i = 0; i < MAXTYPES; ++i)'
p13250
ag9675
aS'BeatCounts[i] = 0;'
p13251
aS'BeatClassifications[i] = UNKNOWN;'
p13252
aS'for (j = 0; j < 8; ++j)'
p13253
ag9675
aS'MIs[i][j] = 0;'
p13254
ag9114
ag9114
ag9114
ag8990
aS'/**************************************************************************'
p13255
aS'CompareBeats() takes two beat buffers and compares how well they match'
p13256
aS'point-by-point.  Beat2 is shifted and scaled to produce the closest'
p13257
aS'possible match.  The metric returned is the sum of the absolute'
p13258
aS'differences between beats divided by the amplitude of the beats.  The'
p13259
aS'shift used for the match is returned via the pointer *shiftAdj.'
p13260
aS'***************************************************************************/'
p13261
ag8990
aS'#define MATCH_START (FIDMARK - (MATCH_LENGTH / 2))'
p13262
aS'#define MATCH_END (FIDMARK + (MATCH_LENGTH / 2))'
p13263
ag8990
aS'double CompareBeats(int* beat1, int* beat2, int* shiftAdj)'
p13264
ag9675
aS'int i, max, min, magSum, shift;'
p13265
aS'long beatDiff, meanDiff, minDiff, minShift;'
p13266
aS'double metric, scaleFactor, tempD;'
p13267
ag8990
aS'// Calculate the magnitude of each beat.'
p13268
ag8990
aS'max = min = beat1[MATCH_START];'
p13269
aS'for (i = MATCH_START + 1; i < MATCH_END; ++i)'
p13270
ag9675
ag7443
aS'max = beat1[i];'
p13271
aS'else if (beat1[i] < min)'
p13272
aS'min = beat1[i];'
p13273
ag9114
aS'magSum = max - min;'
p13274
ag8990
aS'i = MATCH_START;'
p13275
aS'max = min = beat2[i];'
p13276
aS'for (i = MATCH_START + 1; i < MATCH_END; ++i)'
p13277
ag9675
ag7488
aS'max = beat2[i];'
p13278
aS'else if (beat2[i] < min)'
p13279
aS'min = beat2[i];'
p13280
ag9114
aS'// magSum += max - min ;'
p13281
aS'scaleFactor = magSum;'
p13282
aS'scaleFactor /= max - min;'
p13283
aS'magSum *= 2;'
p13284
ag8990
aS'// Calculate the sum of the point-by-point'
p13285
aS'// absolute differences for five possible shifts.'
p13286
ag8990
aS'for (shift = -MAX_SHIFT; shift <= MAX_SHIFT; ++shift)'
p13287
ag9675
aS'for (i = FIDMARK - (MATCH_LENGTH >> 1), meanDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p13288
aS'++i)'
p13289
ag9675
aS'tempD = beat2[i + shift];'
p13290
aS'tempD *= scaleFactor;'
p13291
aS'meanDiff += beat1[i] - tempD; // beat2[i+shift] ;'
p13292
ag9114
aS'meanDiff /= MATCH_LENGTH;'
p13293
ag8990
aS'for (i = FIDMARK - (MATCH_LENGTH >> 1), beatDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p13294
aS'++i)'
p13295
ag9675
aS'tempD = beat2[i + shift];'
p13296
aS'tempD *= scaleFactor;'
p13297
aS'beatDiff += abs(beat1[i] - meanDiff - tempD); // beat2[i+shift]  ) ;'
p13298
ag9114
ag8990
ag8990
ag7577
ag9675
aS'minDiff = beatDiff;'
p13299
aS'minShift = -MAX_SHIFT;'
p13300
ag9114
aS'else if (beatDiff < minDiff)'
p13301
ag9675
aS'minDiff = beatDiff;'
p13302
aS'minShift = shift;'
p13303
ag9114
ag9114
ag8990
aS'metric = minDiff;'
p13304
aS'*shiftAdj = minShift;'
p13305
aS'metric /= magSum;'
p13306
ag8990
aS'// Metric scales inversely with match length.'
p13307
aS'// algorithm was originally tuned with a match'
p13308
aS'// length of 30.'
p13309
ag8990
aS'metric *= 30;'
p13310
aS'metric /= MATCH_LENGTH;'
p13311
aS'return (metric);'
p13312
ag9114
ag8990
aS'/***************************************************************************'
p13313
aS'CompareBeats2 is nearly the same as CompareBeats above, but beat2 is'
p13314
aS'not scaled before calculating the match metric.  The match metric is'
p13315
aS'then the sum of the absolute differences divided by the average amplitude'
p13316
aS'of the two beats.'
p13317
aS'****************************************************************************/'
p13318
ag8990
aS'double CompareBeats2(int* beat1, int* beat2, int* shiftAdj)'
p13319
ag9675
aS'int i, max, min, shift;'
p13320
aS'int mag1, mag2;'
p13321
aS'long beatDiff, meanDiff, minDiff, minShift;'
p13322
aS'double metric;'
p13323
ag8990
aS'// Calculate the magnitude of each beat.'
p13324
ag8990
aS'max = min = beat1[MATCH_START];'
p13325
aS'for (i = MATCH_START + 1; i < MATCH_END; ++i)'
p13326
ag9675
ag7631
aS'max = beat1[i];'
p13327
aS'else if (beat1[i] < min)'
p13328
aS'min = beat1[i];'
p13329
ag9114
aS'mag1 = max - min;'
p13330
ag8990
aS'i = MATCH_START;'
p13331
aS'max = min = beat2[i];'
p13332
aS'for (i = MATCH_START + 1; i < MATCH_END; ++i)'
p13333
ag9675
ag7676
aS'max = beat2[i];'
p13334
aS'else if (beat2[i] < min)'
p13335
aS'min = beat2[i];'
p13336
ag9114
aS'mag2 = max - min;'
p13337
ag8990
aS'// Calculate the sum of the point-by-point'
p13338
aS'// absolute differences for five possible shifts.'
p13339
ag8990
aS'for (shift = -MAX_SHIFT; shift <= MAX_SHIFT; ++shift)'
p13340
ag9675
aS'for (i = FIDMARK - (MATCH_LENGTH >> 1), meanDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p13341
aS'++i)'
p13342
aS'meanDiff += beat1[i] - beat2[i + shift];'
p13343
aS'meanDiff /= MATCH_LENGTH;'
p13344
ag8990
aS'for (i = FIDMARK - (MATCH_LENGTH >> 1), beatDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p13345
aS'++i)'
p13346
aS'beatDiff += abs(beat1[i] - meanDiff - beat2[i + shift]);'
p13347
ag9714
ag8990
ag7765
ag9675
aS'minDiff = beatDiff;'
p13348
aS'minShift = -MAX_SHIFT;'
p13349
ag9114
aS'else if (beatDiff < minDiff)'
p13350
ag9675
aS'minDiff = beatDiff;'
p13351
aS'minShift = shift;'
p13352
ag9114
ag9114
ag8990
aS'metric = minDiff;'
p13353
aS'*shiftAdj = minShift;'
p13354
aS'metric /= (mag1 + mag2);'
p13355
ag8990
aS'// Metric scales inversely with match length.'
p13356
aS'// algorithm was originally tuned with a match'
p13357
aS'// length of 30.'
p13358
ag8990
aS'metric *= 30;'
p13359
aS'metric /= MATCH_LENGTH;'
p13360
ag8990
aS'return (metric);'
p13361
ag9114
ag8990
aS'/************************************************************************'
p13362
aS'UpdateBeat() averages a new beat into an average beat template by adding'
p13363
aS'1/8th of the new beat to 7/8ths of the average beat.'
p13364
aS'*************************************************************************/'
p13365
ag8990
aS'void UpdateBeat(int* aveBeat, int* newBeat, int shift)'
p13366
ag9675
aS'int i;'
p13367
aS'long tempLong;'
p13368
ag8990
aS'for (i = 0; i < BEATLGTH; ++i)'
p13369
ag9675
ag7809
ag9675
aS'tempLong = aveBeat[i];'
p13370
aS'tempLong *= 7;'
p13371
aS'tempLong += newBeat[i + shift];'
p13372
aS'tempLong >>= 3;'
p13373
aS'aveBeat[i] = tempLong;'
p13374
ag9114
ag9114
ag9114
ag8990
aS'/*******************************************************'
p13375
aS'GetTypesCount returns the number of types that have'
p13376
aS'been detected.'
p13377
aS'*******************************************************/'
p13378
ag8990
aS'int GetTypesCount(void)'
p13379
ag9675
aS'return (TypeCount);'
p13380
ag9114
ag8990
aS'/********************************************************'
p13381
aS'GetBeatTypeCount returns the number of beats of a'
p13382
aS'a particular type have been detected.'
p13383
aS'********************************************************/'
p13384
ag8990
aS'int GetBeatTypeCount(int type)'
p13385
ag9675
aS'return (BeatCounts[type]);'
p13386
ag9114
ag8990
aS'/*******************************************************'
p13387
aS'GetBeatWidth returns the QRS width estimate for'
p13388
aS'a given type of beat.'
p13389
aS'*******************************************************/'
p13390
aS'int GetBeatWidth(int type)'
p13391
ag9675
aS'return (BeatWidths[type]);'
p13392
ag9114
ag8990
aS'/*******************************************************'
p13393
aS'GetBeatCenter returns the point between the onset and'
p13394
aS'offset of a beat.'
p13395
aS'********************************************************/'
p13396
ag8990
aS'int GetBeatCenter(int type)'
p13397
ag9675
aS'return (BeatCenters[type]);'
p13398
ag9114
ag8990
aS'/*******************************************************'
p13399
aS'GetBeatClass returns the present classification for'
p13400
aS'a given beat type (NORMAL, PVC, or UNKNOWN).'
p13401
aS'********************************************************/'
p13402
ag8990
aS'int GetBeatClass(int type)'
p13403
ag9675
ag7884
aS'return (UNKNOWN);'
p13404
aS'return (BeatClassifications[type]);'
p13405
ag9114
ag8990
aS'/******************************************************'
p13406
aS'SetBeatClass sets up a beat classifation for a'
p13407
aS'given type.'
p13408
aS'******************************************************/'
p13409
ag8990
aS'void SetBeatClass(int type, int beatClass)'
p13410
ag9675
aS'BeatClassifications[type] = beatClass;'
p13411
ag9114
ag8990
aS'/******************************************************************************'
p13412
aS'NewBeatType starts a new beat type by storing the new beat and its'
p13413
aS'features as the next available beat type.'
p13414
aS'******************************************************************************/'
p13415
ag8990
aS'int NewBeatType(int* newBeat)'
p13416
ag9675
aS'int i, onset, offset, isoLevel, beatBegin, beatEnd;'
p13417
aS'int mcType, amp;'
p13418
ag8990
aS'// Update count of beats since each template was matched.'
p13419
ag8990
aS'for (i = 0; i < TypeCount; ++i)'
p13420
aS'++BeatsSinceLastMatch[i];'
p13421
ag8990
ag7981
ag9675
aS'for (i = 0; i < BEATLGTH; ++i)'
p13422
aS'BeatTemplates[TypeCount][i] = newBeat[i];'
p13423
ag8990
aS'BeatCounts[TypeCount] = 1;'
p13424
aS'BeatClassifications[TypeCount] = UNKNOWN;'
p13425
aS'AnalyzeBeat('
p13426
aS'&BeatTemplates[TypeCount][0], &onset, &offset, &isoLevel, &beatBegin, &beatEnd, &amp);'
p13427
aS'BeatWidths[TypeCount] = offset - onset;'
p13428
aS'BeatCenters[TypeCount] = (offset + onset) / 2;'
p13429
aS'BeatBegins[TypeCount] = beatBegin;'
p13430
aS'BeatEnds[TypeCount] = beatEnd;'
p13431
aS'BeatAmps[TypeCount] = amp;'
p13432
ag8990
aS'BeatsSinceLastMatch[TypeCount] = 0;'
p13433
ag8990
aS'++TypeCount;'
p13434
aS'return (TypeCount - 1);'
p13435
ag9114
ag8990
aS'// If we have used all the template space, replace the beat'
p13436
aS'// that has occurred the fewest number of times.'
p13437
ag8990
aS'else'
p13438
ag9675
aS'// Find the template with the fewest occurances,'
p13439
aS"// that hasn't been matched in at least 500 beats."
p13440
ag8990
aS'mcType = -1;'
p13441
ag8990
ag8052
ag9675
aS'mcType = 0;'
p13442
aS'for (i = 1; i < MAXTYPES; ++i)'
p13443
ag9675
ag8019
aS'mcType = i;'
p13444
aS'else if (BeatCounts[i] == BeatCounts[mcType])'
p13445
ag9675
ag8032
aS'mcType = i;'
p13446
ag9114
ag9114
ag9114
ag8990
aS'// Adjust dominant beat monitor data.'
p13447
ag8990
aS'AdjustDomData(mcType, MAXTYPES);'
p13448
ag8990
aS'// Substitute this beat.'
p13449
ag8990
aS'for (i = 0; i < BEATLGTH; ++i)'
p13450
aS'BeatTemplates[mcType][i] = newBeat[i];'
p13451
ag8990
aS'BeatCounts[mcType] = 1;'
p13452
aS'BeatClassifications[mcType] = UNKNOWN;'
p13453
aS'AnalyzeBeat('
p13454
aS'&BeatTemplates[mcType][0], &onset, &offset, &isoLevel, &beatBegin, &beatEnd, &amp);'
p13455
aS'BeatWidths[mcType] = offset - onset;'
p13456
aS'BeatCenters[mcType] = (offset + onset) / 2;'
p13457
aS'BeatBegins[mcType] = beatBegin;'
p13458
aS'BeatEnds[mcType] = beatEnd;'
p13459
aS'BeatsSinceLastMatch[mcType] = 0;'
p13460
aS'BeatAmps[mcType] = amp;'
p13461
aS'return (mcType);'
p13462
ag9114
ag9114
ag8990
aS'/***************************************************************************'
p13463
aS'BestMorphMatch tests a new beat against all available beat types and'
p13464
aS'returns (via pointers) the existing type that best matches, the match'
p13465
aS'metric for that type, and the shift used for that match.'
p13466
aS'***************************************************************************/'
p13467
ag8990
aS'void BestMorphMatch(int* newBeat, int* matchType, double* matchIndex, double* mi2, int* shiftAdj)'
p13468
ag9675
aS'int type, i, bestMatch, nextBest, minShift, shift, temp;'
p13469
aS'int bestShift2, nextShift2;'
p13470
aS'double bestDiff2, nextDiff2;'
p13471
aS'double beatDiff, minDiff, nextDiff = 10000;'
p13472
ag8990
ag8139
ag9675
aS'*matchType = 0;'
p13473
aS'*matchIndex = 1000; // Make sure there is no match so a new beat is'
p13474
aS'*shiftAdj = 0; // created.'
p13475
aS'return;'
p13476
ag9114
ag8990
aS'// Compare the new beat to all type beat'
p13477
aS'// types that have been saved.'
p13478
ag8990
aS'for (type = 0; type < TypeCount; ++type)'
p13479
ag9675
aS'beatDiff = CompareBeats(&BeatTemplates[type][0], newBeat, &shift);'
p13480
ag8109
ag9675
aS'bestMatch = 0;'
p13481
aS'minDiff = beatDiff;'
p13482
aS'minShift = shift;'
p13483
ag9114
aS'else if (beatDiff < minDiff)'
p13484
ag9675
aS'nextBest = bestMatch;'
p13485
aS'nextDiff = minDiff;'
p13486
aS'bestMatch = type;'
p13487
aS'minDiff = beatDiff;'
p13488
aS'minShift = shift;'
p13489
ag9114
aS'else if ((TypeCount > 1) && (type == 1))'
p13490
ag9675
aS'nextBest = type;'
p13491
aS'nextDiff = beatDiff;'
p13492
ag9114
aS'else if (beatDiff < nextDiff)'
p13493
ag9675
aS'nextBest = type;'
p13494
aS'nextDiff = beatDiff;'
p13495
ag9114
ag9114
ag8990
aS'// If this beat was close to two different'
p13496
aS'// templates, see if the templates which template'
p13497
aS'// is the best match when no scaling is used.'
p13498
aS'// Then check whether the two close types can be combined.'
p13499
ag8990
ag8354
ag9675
aS'// Compare without scaling.'
p13500
ag8990
aS'bestDiff2 = CompareBeats2(&BeatTemplates[bestMatch][0], newBeat, &bestShift2);'
p13501
aS'nextDiff2 = CompareBeats2(&BeatTemplates[nextBest][0], newBeat, &nextShift2);'
p13502
ag8172
ag9675
aS'temp = bestMatch;'
p13503
aS'bestMatch = nextBest;'
p13504
aS'nextBest = temp;'
p13505
aS'temp = minDiff;'
p13506
aS'minDiff = nextDiff;'
p13507
aS'nextDiff = temp;'
p13508
aS'minShift = nextShift2;'
p13509
aS'*mi2 = bestDiff2;'
p13510
ag9114
aS'else'
p13511
aS'*mi2 = nextDiff2;'
p13512
ag8990
aS'beatDiff = CompareBeats(&BeatTemplates[bestMatch][0], &BeatTemplates[nextBest][0], &shift);'
p13513
ag8990
ag8351
ag9675
ag8990
aS'// Combine beats into bestMatch'
p13514
ag8990
ag8322
ag9675
aS'for (i = 0; i < BEATLGTH; ++i)'
p13515
ag9675
ag8254
ag9675
aS'BeatTemplates[bestMatch][i] += BeatTemplates[nextBest][i + shift];'
p13516
aS'BeatTemplates[bestMatch][i] >>= 1;'
p13517
ag9114
ag9114
ag8990
ag8306
aS'|| (BeatClassifications[nextBest] == NORMAL))'
p13518
aS'BeatClassifications[bestMatch] = NORMAL;'
p13519
ag8319
aS'|| (BeatClassifications[nextBest] == PVC))'
p13520
aS'BeatClassifications[bestMatch] = PVC;'
p13521
ag8990
aS'BeatCounts[bestMatch] += BeatCounts[nextBest];'
p13522
ag8990
aS'CombineDomData(nextBest, bestMatch);'
p13523
ag8990
aS'// Shift other templates over.'
p13524
ag8990
aS'for (type = nextBest; type < TypeCount - 1; ++type)'
p13525
aS'BeatCopy(type + 1, type);'
p13526
ag9114
ag8990
aS'// Otherwise combine beats it nextBest.'
p13527
ag8990
aS'else'
p13528
ag9675
aS'for (i = 0; i < BEATLGTH; ++i)'
p13529
ag9675
aS'BeatTemplates[nextBest][i] += BeatTemplates[bestMatch][i];'
p13530
aS'BeatTemplates[nextBest][i] >>= 1;'
p13531
ag9114
ag8990
ag8335
aS'|| (BeatClassifications[nextBest] == NORMAL))'
p13532
aS'BeatClassifications[nextBest] = NORMAL;'
p13533
ag8348
aS'|| (BeatClassifications[nextBest] == PVC))'
p13534
aS'BeatClassifications[nextBest] = PVC;'
p13535
ag8990
aS'BeatCounts[nextBest] += BeatCounts[bestMatch];'
p13536
ag8990
aS'CombineDomData(bestMatch, nextBest);'
p13537
ag8990
aS'// Shift other templates over.'
p13538
ag8990
aS'for (type = bestMatch; type < TypeCount - 1; ++type)'
p13539
aS'BeatCopy(type + 1, type);'
p13540
ag8990
ag8990
aS'bestMatch = nextBest;'
p13541
ag9114
aS'--TypeCount;'
p13542
aS'BeatClassifications[TypeCount] = UNKNOWN;'
p13543
ag9114
ag9114
aS'*mi2 = CompareBeats2(&BeatTemplates[bestMatch][0], newBeat, &bestShift2);'
p13544
aS'*matchType = bestMatch;'
p13545
aS'*matchIndex = minDiff;'
p13546
aS'*shiftAdj = minShift;'
p13547
ag9114
ag8990
aS'/***************************************************************************'
p13548
aS'UpdateBeatType updates the beat template and features of a given beat type'
p13549
aS'using a new beat.'
p13550
aS'***************************************************************************/'
p13551
ag8990
aS'void UpdateBeatType(int matchType, int* newBeat, double mi2, int shiftAdj)'
p13552
ag9675
aS'int i, onset, offset, isoLevel, beatBegin, beatEnd;'
p13553
aS'int amp;'
p13554
ag8990
aS'// Update beats since templates were matched.'
p13555
ag8990
aS'for (i = 0; i < TypeCount; ++i)'
p13556
ag9675
ag8391
aS'++BeatsSinceLastMatch[i];'
p13557
aS'else'
p13558
aS'BeatsSinceLastMatch[i] = 0;'
p13559
ag9114
ag8990
aS'// If this is only the second beat, average it with the existing'
p13560
aS'// template.'
p13561
ag8990
ag8443
aS'for (i = 0; i < BEATLGTH; ++i)'
p13562
ag9675
ag8456
aS'BeatTemplates[matchType][i]'
p13563
aS'= (BeatTemplates[matchType][i] + newBeat[i + shiftAdj]) >> 1;'
p13564
ag9114
ag8990
aS'// Otherwise do a normal update.'
p13565
ag8990
aS'else'
p13566
aS'UpdateBeat(&BeatTemplates[matchType][0], newBeat, shiftAdj);'
p13567
ag8990
aS'// Determine beat features for the new average beat.'
p13568
ag8990
aS'AnalyzeBeat('
p13569
aS'&BeatTemplates[matchType][0], &onset, &offset, &isoLevel, &beatBegin, &beatEnd, &amp);'
p13570
ag8990
aS'BeatWidths[matchType] = offset - onset;'
p13571
aS'BeatCenters[matchType] = (offset + onset) / 2;'
p13572
aS'BeatBegins[matchType] = beatBegin;'
p13573
aS'BeatEnds[matchType] = beatEnd;'
p13574
aS'BeatAmps[matchType] = amp;'
p13575
ag8990
aS'++BeatCounts[matchType];'
p13576
ag8990
aS'for (i = MAXPREV - 1; i > 0; --i)'
p13577
aS'MIs[matchType][i] = MIs[matchType][i - 1];'
p13578
aS'MIs[matchType][0] = mi2;'
p13579
ag9114
ag8990
ag8990
aS'/****************************************************************************'
p13580
aS'GetDominantType returns the NORMAL beat type that has occurred most'
p13581
aS'frequently.'
p13582
aS'****************************************************************************/'
p13583
ag8990
aS'int GetDominantType(void)'
p13584
ag9675
aS'int maxCount = 0, maxType = -1;'
p13585
aS'int type, totalCount;'
p13586
ag8990
aS'for (type = 0; type < MAXTYPES; ++type)'
p13587
ag9675
ag8483
ag9675
aS'maxType = type;'
p13588
aS'maxCount = BeatCounts[type];'
p13589
ag9114
ag9114
ag8990
aS'// If no normals are found and at least 300 beats have occurred, just use'
p13590
aS'// the most frequently occurring beat.'
p13591
ag8990
ag8561
ag9675
aS'for (type = 0, totalCount = 0; type < TypeCount; ++type)'
p13592
aS'totalCount += BeatCounts[type];'
p13593
ag8545
aS'for (type = 0; type < TypeCount; ++type)'
p13594
ag8558
ag9675
aS'maxType = type;'
p13595
aS'maxCount = BeatCounts[type];'
p13596
ag9114
ag9114
ag8990
aS'return (maxType);'
p13597
ag9114
ag8990
ag8990
aS'/***********************************************************************'
p13598
aS'ClearLastNewType removes the last new type that was initiated'
p13599
aS'************************************************************************/'
p13600
ag8990
aS'void ClearLastNewType(void)'
p13601
ag9675
ag8583
aS'--TypeCount;'
p13602
ag9114
ag8990
aS'/****************************************************************'
p13603
aS'GetBeatBegin returns the offset from the R-wave for the'
p13604
aS'beginning of the beat (P-wave onset if a P-wave is found).'
p13605
aS'*****************************************************************/'
p13606
ag8990
aS'int GetBeatBegin(int type)'
p13607
ag9675
aS'return (BeatBegins[type]);'
p13608
ag9114
ag8990
aS'/****************************************************************'
p13609
aS'GetBeatEnd returns the offset from the R-wave for the end of'
p13610
aS'a beat (T-wave offset).'
p13611
aS'*****************************************************************/'
p13612
ag8990
aS'int GetBeatEnd(int type)'
p13613
ag9675
aS'return (BeatEnds[type]);'
p13614
ag9114
ag8990
aS'int GetBeatAmp(int type)'
p13615
ag9675
aS'return (BeatAmps[type]);'
p13616
ag9114
ag8990
ag8990
aS'/************************************************************************'
p13617
aS'DomCompare2 and DomCompare return similarity indexes between a given'
p13618
aS'beat and the dominant normal type or a given type and the dominant'
p13619
aS'normal type.'
p13620
aS'************************************************************************/'
p13621
ag8990
aS'double DomCompare2(int* newBeat, int domType)'
p13622
ag9675
aS'int shift;'
p13623
aS'return (CompareBeats2(&BeatTemplates[domType][0], newBeat, &shift));'
p13624
ag9114
ag8990
aS'double DomCompare(int newType, int domType)'
p13625
ag9675
aS'int shift;'
p13626
aS'return (CompareBeats2(&BeatTemplates[domType][0], &BeatTemplates[newType][0], &shift));'
p13627
ag9114
ag8990
aS'/*************************************************************************'
p13628
aS'BeatCopy copies beat data from a source beat to a destination beat.'
p13629
aS'*************************************************************************/'
p13630
ag8990
aS'void BeatCopy(int srcBeat, int destBeat)'
p13631
ag9675
aS'int i;'
p13632
ag8990
aS'// Copy template.'
p13633
ag8990
aS'for (i = 0; i < BEATLGTH; ++i)'
p13634
aS'BeatTemplates[destBeat][i] = BeatTemplates[srcBeat][i];'
p13635
ag8990
aS'// Move feature information.'
p13636
ag8990
aS'BeatCounts[destBeat] = BeatCounts[srcBeat];'
p13637
aS'BeatWidths[destBeat] = BeatWidths[srcBeat];'
p13638
aS'BeatCenters[destBeat] = BeatCenters[srcBeat];'
p13639
aS'for (i = 0; i < MAXPREV; ++i)'
p13640
ag9675
aS'PostClass[destBeat][i] = PostClass[srcBeat][i];'
p13641
aS'PCRhythm[destBeat][i] = PCRhythm[srcBeat][i];'
p13642
ag9114
ag8990
aS'BeatClassifications[destBeat] = BeatClassifications[srcBeat];'
p13643
aS'BeatBegins[destBeat] = BeatBegins[srcBeat];'
p13644
aS'BeatEnds[destBeat] = BeatBegins[srcBeat];'
p13645
aS'BeatsSinceLastMatch[destBeat] = BeatsSinceLastMatch[srcBeat];'
p13646
aS'BeatAmps[destBeat] = BeatAmps[srcBeat];'
p13647
ag8990
aS'// Adjust data in dominant beat monitor.'
p13648
ag8990
aS'AdjustDomData(srcBeat, destBeat);'
p13649
ag9114
ag8990
aS'/********************************************************************'
p13650
aS'Minimum beat variation returns a 1 if the previous eight beats'
p13651
aS'have all had similarity indexes less than 0.5.'
p13652
aS'*********************************************************************/'
p13653
ag8990
aS'int MinimumBeatVariation(int type)'
p13654
ag9675
aS'int i;'
p13655
aS'for (i = 0; i < MAXTYPES; ++i)'
p13656
ag9675
ag8708
aS'i = MAXTYPES + 2;'
p13657
ag9114
ag8748
aS'return (1);'
p13658
aS'else'
p13659
aS'return (0);'
p13660
ag9114
ag8990
aS'/**********************************************************************'
p13661
aS'WideBeatVariation returns true if the average similarity index'
p13662
aS'for a given beat type to its template is greater than WIDE_VAR_LIMIT.'
p13663
aS'***********************************************************************/'
p13664
ag8990
aS'#define WIDE_VAR_LIMIT 0.50'
p13665
ag8990
aS'int WideBeatVariation(int type)'
p13666
ag9675
aS'int i, n;'
p13667
aS'double aveMI;'
p13668
ag8990
aS'n = BeatCounts[type];'
p13669
ag8792
aS'n = 8;'
p13670
ag8990
aS'for (i = 0, aveMI = 0; i < n; ++i)'
p13671
aS'aveMI += MIs[type][i];'
p13672
ag8990
aS'aveMI /= n;'
p13673
ag8815
aS'return (1);'
p13674
aS'else'
p13675
aS'return (0);'
p13676
ag9114
aa(lp13677
S'/*****************************************************************************'
p13678
aS'FILE:  match.h'
p13679
aS'AUTHOR:\tPatrick S. Hamilton'
p13680
aS'REVISED:\t12/4/2001'
p13681
aS'___________________________________________________________________________'
p13682
ag8990
aS'match.h: Beat matching prototype definitions.'
p13683
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p13684
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p13685
aS'the terms of the GNU Library General Public License as published by the Free'
p13686
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p13687
aS'later version.'
p13688
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p13689
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p13690
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p13691
aS'details.'
p13692
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p13693
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p13694
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p13695
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p13696
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p13697
aS'MA 02143 USA).  For updates to this software, please visit our website'
p13698
aS'(http://www.eplimited.com).'
p13699
aS'******************************************************************************/'
p13700
ag8990
aS'int NewBeatType(int* beat);'
p13701
aS'void BestMorphMatch(int* newBeat, int* matchType, double* matchIndex, double* mi2, int* shiftAdj);'
p13702
aS'void UpdateBeatType(int matchType, int* newBeat, double mi2, int shiftAdj);'
p13703
aS'int GetTypesCount(void);'
p13704
aS'int GetBeatTypeCount(int type);'
p13705
aS'int IsTypeIsolated(int type);'
p13706
aS'void SetBeatClass(int type, int beatClass);'
p13707
aS'int GetBeatClass(int type);'
p13708
aS'int GetDominantType(void);'
p13709
aS'int GetBeatWidth(int type);'
p13710
aS'int GetPolarity(int type);'
p13711
aS'int GetRhythmIndex(int type);'
p13712
aS'void ResetMatch(void);'
p13713
aS'void ClearLastNewType(void);'
p13714
aS'int GetBeatBegin(int type);'
p13715
aS'int GetBeatEnd(int type);'
p13716
aS'int GetBeatAmp(int type);'
p13717
aS'int MinimumBeatVariation(int type);'
p13718
aS'int GetBeatCenter(int type);'
p13719
aS'int WideBeatVariation(int type);'
p13720
aS'double DomCompare2(int* newBeat, int domType);'
p13721
aS'double DomCompare(int newType, int domType);'
p13722
ag8990
aS'// hey yo'
p13723
aa(lp13724
S'/*****************************************************************************'
p13725
aS'FILE:  analbeat.h'
p13726
aS'AUTHOR:\tPatrick S. Hamilton'
p13727
aS'REVISED:\t12/4/2001'
p13728
aS'___________________________________________________________________________'
p13729
ag8990
aS'analbeat.h: Beat analysis prototype definition.'
p13730
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p13731
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p13732
aS'the terms of the GNU Library General Public License as published by the Free'
p13733
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p13734
aS'later version.'
p13735
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p13736
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p13737
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p13738
aS'details.'
p13739
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p13740
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p13741
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p13742
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p13743
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p13744
aS'MA 02143 USA).  For updates to this software, please visit our website'
p13745
aS'(http://www.eplimited.com).'
p13746
aS'******************************************************************************/'
p13747
ag8990
aS'// External prototypes for analbeat.cpp'
p13748
ag8990
aS'void AnalyzeBeat(int* beat, int* onset, int* offset, int* isoLevel, int* beatBegin, int* beatEnd, int* amp);'
p13749
aS'// hey yo'
p13750
aa(lp13751
S'/*****************************************************************************'
p13752
aS'FILE:  noisechk.cpp'
p13753
aS'AUTHOR:\tPatrick S. Hamilton'
p13754
aS'REVISED:\t5/13/2002'
p13755
aS'___________________________________________________________________________'
p13756
ag8990
aS'noisechk.cpp: Noise Check'
p13757
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p13758
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p13759
aS'the terms of the GNU Library General Public License as published by the Free'
p13760
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p13761
aS'later version.'
p13762
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p13763
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p13764
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p13765
aS'details.'
p13766
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p13767
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p13768
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p13769
ag8990
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p13770
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p13771
aS'MA 02143 USA).  For updates to this software, please visit our website'
p13772
aS'(http://www.eplimited.com).'
p13773
aS'__________________________________________________________________________'
p13774
ag8990
aS'This file contains functions for evaluating the noise content of a beat.'
p13775
ag8990
aS'*****************************************************************************/'
p13776
ag8990
aS'#include <stdlib.h>'
p13777
aS'#include "qrsdet.h"'
p13778
ag8990
aS'#define NB_LENGTH MS1500'
p13779
aS'#define NS_LENGTH MS50'
p13780
ag8990
aS'int NoiseBuffer[NB_LENGTH], NBPtr = 0;'
p13781
aS'int NoiseEstimate;'
p13782
ag8990
aS'/************************************************************************'
p13783
aS'GetNoiseEstimate() allows external access the present noise estimate.'
p13784
aS'this function is only used for debugging.'
p13785
aS'*************************************************************************/'
p13786
ag8990
aS'int GetNoiseEstimate()'
p13787
ag9675
aS'return (NoiseEstimate);'
p13788
ag9114
ag8990
aS'/***********************************************************************'
p13789
aS'NoiseCheck() must be called for every sample of data.  The data is'
p13790
aS'stored in a circular buffer to facilitate noise analysis.  When a'
p13791
aS'beat is detected NoiseCheck() is passed the sample delay since the'
p13792
aS'R-wave of the beat occurred (delay), the RR interval between this'
p13793
aS'beat and the next most recent beat, the estimated offset from the'
p13794
aS'R-wave to the beginning of the beat (beatBegin), and the estimated'
p13795
aS'offset from the R-wave to the end of the beat.'
p13796
ag8990
aS'NoiseCheck() estimates the noise in the beat by the maximum and'
p13797
aS'minimum signal values in either a window from the end of the'
p13798
aS'previous beat to the beginning of the present beat, or a 250 ms'
p13799
aS'window preceding the present beat, which ever is shorter.'
p13800
ag8990
aS'NoiseCheck() returns ratio of the signal variation in the window'
p13801
aS'between beats to the length of the window between the beats.  If'
p13802
aS'the heart rate is too high and the beat durations are too long,'
p13803
aS'NoiseCheck() returns 0.'
p13804
ag8990
aS'***********************************************************************/'
p13805
ag8990
aS'int NoiseCheck(int datum, int delay, int RR, int beatBegin, int beatEnd)'
p13806
ag9675
aS'int ptr, i;'
p13807
aS'int ncStart, ncEnd, ncMax, ncMin;'
p13808
aS'double noiseIndex;'
p13809
ag8990
aS'NoiseBuffer[NBPtr] = datum;'
p13810
ag8847
aS'NBPtr = 0;'
p13811
ag8990
aS'// Check for noise in region that is 300 ms following'
p13812
aS'// last R-wave and 250 ms preceding present R-wave.'
p13813
ag8990
aS'ncStart = delay + RR - beatEnd; // Calculate offset to end of previous beat.'
p13814
aS'ncEnd = delay + beatBegin; // Calculate offset to beginning of this beat.'
p13815
ag8860
aS'ncStart = ncEnd + MS250;'
p13816
ag8990
ag8990
aS'// Estimate noise if delay indicates a beat has been detected,'
p13817
aS'// the delay is not to long for the data buffer, and there is'
p13818
aS'// some space between the end of the last beat and the beginning'
p13819
aS'// of this beat.'
p13820
ag8990
ag8954
ag9675
ag8990
aS'ptr = NBPtr - ncStart; // Find index to end of last beat in'
p13821
aS'if (ptr < 0) // the circular buffer.'
p13822
aS'ptr += NB_LENGTH;'
p13823
ag8990
aS'// Find the maximum and minimum values in the'
p13824
aS'// isoelectric region between beats.'
p13825
ag8990
aS'ncMax = ncMin = NoiseBuffer[ptr];'
p13826
aS'for (i = 0; i < ncStart - ncEnd; ++i)'
p13827
ag9675
ag8898
aS'ncMax = NoiseBuffer[ptr];'
p13828
aS'else if (NoiseBuffer[ptr] < ncMin)'
p13829
aS'ncMin = NoiseBuffer[ptr];'
p13830
ag8911
aS'ptr = 0;'
p13831
ag9114
ag8990
aS'// The noise index is the ratio of the signal variation'
p13832
aS'// over the isoelectric window length, scaled by 10.'
p13833
ag8990
aS'noiseIndex = (ncMax - ncMin);'
p13834
aS'noiseIndex /= (ncStart - ncEnd);'
p13835
aS'NoiseEstimate = noiseIndex * 10;'
p13836
ag9114
aS'else'
p13837
aS'NoiseEstimate = 0;'
p13838
aS'return (NoiseEstimate);'
p13839
ag9114
aa(lp13840
S'/*****************************************************************************'
p13841
aS'FILE:  qrsdet.h'
p13842
aS'AUTHOR:\tPatrick S. Hamilton'
p13843
aS'REVISED:\t4/16/2002'
p13844
aS'___________________________________________________________________________'
p13845
ag8990
aS'qrsdet.h QRS detector parameter definitions'
p13846
aS'Copywrite (C) 2000 Patrick S. Hamilton'
p13847
ag8990
aS'This file is free software; you can redistribute it and/or modify it under'
p13848
aS'the terms of the GNU Library General Public License as published by the Free'
p13849
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p13850
aS'later version.'
p13851
ag8990
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p13852
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p13853
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p13854
aS'details.'
p13855
ag8990
aS'You should have received a copy of the GNU Library General Public License along'
p13856
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p13857
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p13858
ag8990
aS'You may contact the author by e-mail (pat@eplimited.com) or postal mail'
p13859
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p13860
aS'MA 02143 USA).  For updates to this software, please visit our website'
p13861
aS'(http://www.eplimited.com).'
p13862
aS'__________________________________________________________________________'
p13863
aS'Revisions:'
p13864
aS'4/16: Modified to allow simplified modification of digital filters in'
p13865
aS'qrsfilt().'
p13866
aS'*****************************************************************************/'
p13867
ag8990
ag8990
aS'#define SAMPLE_RATE 200 /* Sample rate in Hz. */'
p13868
aS'#define MS_PER_SAMPLE ((double)1000 / (double)SAMPLE_RATE)'
p13869
aS'#define MS10 ((int)(10 / MS_PER_SAMPLE + 0.5))'
p13870
aS'#define MS25 ((int)(25 / MS_PER_SAMPLE + 0.5))'
p13871
aS'#define MS30 ((int)(30 / MS_PER_SAMPLE + 0.5))'
p13872
aS'#define MS80 ((int)(80 / MS_PER_SAMPLE + 0.5))'
p13873
aS'#define MS95 ((int)(95 / MS_PER_SAMPLE + 0.5))'
p13874
aS'#define MS100 ((int)(100 / MS_PER_SAMPLE + 0.5))'
p13875
aS'#define MS125 ((int)(125 / MS_PER_SAMPLE + 0.5))'
p13876
aS'#define MS150 ((int)(150 / MS_PER_SAMPLE + 0.5))'
p13877
aS'#define MS160 ((int)(160 / MS_PER_SAMPLE + 0.5))'
p13878
aS'#define MS175 ((int)(175 / MS_PER_SAMPLE + 0.5))'
p13879
aS'#define MS195 ((int)(195 / MS_PER_SAMPLE + 0.5))'
p13880
aS'#define MS200 ((int)(200 / MS_PER_SAMPLE + 0.5))'
p13881
aS'#define MS220 ((int)(220 / MS_PER_SAMPLE + 0.5))'
p13882
aS'#define MS250 ((int)(250 / MS_PER_SAMPLE + 0.5))'
p13883
aS'#define MS300 ((int)(300 / MS_PER_SAMPLE + 0.5))'
p13884
aS'#define MS360 ((int)(360 / MS_PER_SAMPLE + 0.5))'
p13885
aS'#define MS450 ((int)(450 / MS_PER_SAMPLE + 0.5))'
p13886
aS'#define MS1000 SAMPLE_RATE'
p13887
aS'#define MS1500 ((int)(1500 / MS_PER_SAMPLE))'
p13888
aS'#define DERIV_LENGTH MS10'
p13889
aS'#define LPBUFFER_LGTH ((int)(2 * MS25))'
p13890
aS'#define HPBUFFER_LGTH MS125'
p13891
ag8990
aS'#define WINDOW_WIDTH MS80 // Moving window integration width.'
p13892
aS'#define FILTER_DELAY                                                                               \\'
p13893
aS'(int)(((double)DERIV_LENGTH / 2) + ((double)LPBUFFER_LGTH / 2 - 1)                             \\'
p13894
aS'+ (((double)HPBUFFER_LGTH - 1) / 2)                                                        \\'
p13895
aS'+ PRE_BLANK) // filter delays plus 200 ms blanking delay'
p13896
aS'#define DER_DELAY WINDOW_WIDTH + FILTER_DELAY + MS100'
p13897
aa(lp13898
S'int abs(int a)'
p13899
ag9675
ag8987
ag9675
aS'return a'
p13900
ag9114
aS'else'
p13901
ag9675
aS'return *a'
p13902
ag9114
aS'}'
p13903
aaa(lp13904
(g2
(lp13905
g9676
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9681
ag9114
ag80
tp13906
a(g3
(lp13907
g9769
ag8990
ag8990
ag8990
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9777
ag9114
ag80
tp13908
a(g4
(lp13909
g9785
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9789
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9794
ag9795
ag80
tp13910
a(g5
(lp13911
g10052
ag10053
ag10054
ag10055
ag10056
ag10057
ag10058
ag10059
ag8990
ag10060
ag10061
ag8990
ag10062
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10071
ag8990
ag8990
ag10072
ag8990
ag10073
ag8990
ag8990
ag8990
ag10075
ag10076
ag10077
ag8990
ag10078
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10093
ag10094
ag8990
ag10095
ag8990
ag8990
ag8990
ag10097
ag10098
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10111
ag9675
ag10112
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10144
ag10145
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9114
ag10160
ag8990
ag10161
ag10162
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10179
ag9114
ag389
tp13912
a(g6
(lp13913
g10185
ag10186
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10199
ag10200
ag9114
ag389
tp13914
a(g7
(lp13915
g10206
ag10207
ag8990
ag8990
ag8990
ag10210
ag10211
ag9114
ag389
tp13916
a(g8
(lp13917
g10217
ag10218
ag10219
ag10220
ag10221
ag10222
ag10223
ag10224
ag9114
ag389
tp13918
a(g9
(lp13919
g10231
ag10232
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10241
ag10242
ag8990
ag10243
ag10244
ag8990
ag8990
ag8990
ag8990
ag10246
ag10247
ag9114
ag389
tp13920
a(g10
(lp13921
g10251
ag10252
ag10253
ag10254
ag10255
ag10256
ag10257
ag10258
ag8990
ag10259
ag10260
ag8990
ag10261
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10270
ag8990
ag8990
ag10271
ag8990
ag10272
ag8990
ag8990
ag8990
ag10274
ag10275
ag10276
ag8990
ag10277
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10292
ag10293
ag8990
ag10294
ag8990
ag8990
ag8990
ag10296
ag10297
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10310
ag9675
ag10311
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10343
ag10344
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9114
ag10359
ag8990
ag10360
ag10361
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10378
ag9114
ag389
tp13922
a(g11
(lp13923
g10384
ag10385
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10398
ag10399
ag9114
ag389
tp13924
a(g12
(lp13925
g10405
ag10406
ag8990
ag8990
ag8990
ag10409
ag10410
ag9114
ag389
tp13926
a(g13
(lp13927
g10416
ag10417
ag10418
ag10419
ag10420
ag10421
ag10422
ag10423
ag9114
ag389
tp13928
a(g14
(lp13929
g10430
ag10431
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10440
ag10441
ag8990
ag10442
ag10443
ag8990
ag8990
ag8990
ag8990
ag10445
ag10446
ag9114
ag389
tp13930
a(g15
(lp13931
g10605
ag10606
ag10607
ag10608
ag10609
ag10610
ag10611
ag10612
ag8990
ag10613
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10620
ag10621
ag8990
ag10622
ag8990
ag10623
ag8990
ag10624
ag10625
ag8990
ag10626
ag8990
ag8990
ag8990
ag8990
ag10629
ag10630
ag10631
ag10632
ag8990
ag8990
ag8990
ag8990
ag10634
ag8990
ag10635
ag8990
ag10636
ag8990
ag10637
ag8990
ag8990
ag8990
ag8990
ag10639
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10642
ag8990
ag8990
ag8990
ag10643
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10646
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10649
ag8990
ag10650
ag10651
ag8990
ag10652
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag10656
ag10657
ag8990
ag10658
ag10659
ag8990
ag10660
ag10661
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10670
ag10671
ag8990
ag10672
ag9675
ag10673
ag10674
ag10675
ag9114
ag8990
ag10676
ag8990
ag10677
ag10678
ag8990
ag10679
ag8990
ag8990
ag8990
ag8990
ag10682
ag10683
ag10684
ag8990
ag10685
ag8990
ag10686
ag8990
ag10687
ag10688
ag8990
ag10689
ag8990
ag10690
ag10691
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10708
ag8990
ag10709
ag8990
ag10710
ag8990
ag10711
ag10712
ag10713
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10716
ag8990
ag10717
ag9114
ag1502
tp13932
a(g16
(lp13933
g10729
ag10730
ag10731
ag8990
ag10732
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10748
ag9114
ag1502
tp13934
a(g17
(lp13935
g10853
ag10854
ag8990
ag10855
ag8990
ag10856
ag8990
ag8990
ag10858
ag8990
ag10859
ag10860
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10869
ag10870
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10874
ag10875
ag10876
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10904
ag10905
ag8990
ag10906
ag9675
ag10907
ag10908
ag9114
ag8990
ag10909
ag8990
ag8990
ag8990
ag8990
ag10911
ag10912
ag8990
ag10913
ag8990
ag9675
ag8990
ag8990
ag8990
ag10916
ag8990
ag9675
ag8990
ag8990
ag8990
ag10919
ag10920
ag8990
ag8990
ag8990
ag8990
ag10923
ag10924
ag10925
ag8990
ag8990
ag8990
ag8990
ag10927
ag10928
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag10931
ag10932
ag8990
ag10933
ag10934
ag9114
ag1502
tp13936
a(g18
(lp13937
g10936
ag9114
ag1502
tp13938
a(g19
(lp13939
g8990
ag8990
ag8990
ag10940
ag9114
ag1502
tp13940
a(g20
(lp13941
g10942
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10947
ag9114
ag1502
tp13942
a(g21
(lp13943
g10949
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag10954
ag9114
ag1502
tp13944
a(g22
(lp13945
g11069
ag11070
ag11071
ag11072
ag11073
ag8990
ag11074
ag11075
ag11076
ag11077
ag8990
ag11078
ag8990
ag11079
ag8990
ag11080
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9114
ag2448
tp13946
a(g23
(lp13947
g11143
ag11144
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11152
ag9675
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11162
ag9114
ag8990
ag11163
ag9114
ag2448
tp13948
a(g24
(lp13949
g8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag11170
ag9114
ag2448
tp13950
a(g25
(lp13951
g11353
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11359
ag9114
ag2721
tp13952
a(g26
(lp13953
g11372
ag11373
ag11374
ag11375
ag8990
ag11376
ag11377
ag8990
ag8990
ag8990
ag8990
ag11379
ag11380
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11385
ag11386
ag8990
ag8990
ag8990
ag11388
ag8990
ag11389
ag11390
ag8990
ag11391
ag11392
ag11393
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11401
ag8990
ag8990
ag8990
ag8990
ag11404
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11435
ag9675
ag8990
ag11436
ag8990
ag8990
ag8990
ag11438
ag8990
ag11439
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11443
ag8990
ag11444
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11448
ag8990
ag8990
ag8990
ag11450
ag8990
ag11451
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11455
ag8990
ag11456
ag11457
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9114
ag8990
ag11461
ag11462
ag11463
ag8990
ag8990
ag8990
ag8990
ag11466
ag11467
ag8990
ag8990
ag8990
ag8990
ag11469
ag11470
ag8990
ag8990
ag8990
ag8990
ag11472
ag8990
ag8990
ag11473
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag11478
ag11479
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11488
ag11489
ag11490
ag8990
ag8990
ag8990
ag11492
ag8990
ag11493
ag11494
ag11495
ag11496
ag11497
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11500
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11504
ag11505
ag8990
ag8990
ag8990
ag11507
ag8990
ag8990
ag11508
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag11513
ag9114
ag2721
tp13954
a(g27
(lp13955
g11666
ag11667
ag11668
ag11669
ag11670
ag11671
ag9114
ag3943
tp13956
a(g28
(lp13957
g11689
ag11690
ag11691
ag11692
ag11693
ag8990
ag11694
ag8990
ag11695
ag8990
ag8990
ag8990
ag11697
ag8990
ag11698
ag8990
ag11699
ag8990
ag8990
ag8990
ag8990
ag11702
ag8990
ag11703
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11706
ag8990
ag8990
ag8990
ag9675
ag11708
ag11709
ag9114
ag8990
ag11710
ag8990
ag11711
ag11712
ag8990
ag11713
ag11714
ag8990
ag11715
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11721
ag8990
ag11722
ag11723
ag11724
ag8990
ag11725
ag8990
ag8990
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag11730
ag8990
ag11731
ag8990
ag8990
ag8990
ag11734
ag8990
ag8990
ag11735
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11740
ag8990
ag11741
ag9675
ag11742
ag11743
ag9114
ag8990
ag11744
ag11745
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11748
ag11749
ag8990
ag8990
ag8990
ag8990
ag11752
ag8990
ag11753
ag9114
ag3943
tp13958
a(g29
(lp13959
g11755
ag8990
ag8990
ag8990
ag9114
ag3943
tp13960
a(g30
(lp13961
g11812
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11818
ag11819
ag11820
ag11821
ag11822
ag11823
ag9114
ag4196
tp13962
a(g31
(lp13963
g11831
ag11832
ag11833
ag11834
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11839
ag8990
ag8990
ag11842
ag11843
ag11844
ag11845
ag11846
ag8990
ag8990
ag11849
ag9114
ag4196
tp13964
a(g32
(lp13965
g8990
ag9675
ag8990
ag8990
ag9114
ag4196
tp13966
a(g33
(lp13967
g11861
ag11862
ag11863
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11868
ag11869
ag8990
ag8990
ag11871
ag8990
ag11872
ag8990
ag8990
ag8990
ag11874
ag9114
ag4196
tp13968
a(g34
(lp13969
g11882
ag11883
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11888
ag11889
ag8990
ag8990
ag11891
ag9114
ag4196
tp13970
a(g35
(lp13971
g11893
ag11894
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11899
ag11900
ag8990
ag8990
ag11902
ag9114
ag4196
tp13972
a(g36
(lp13973
g11908
ag11909
ag11910
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag11915
ag11916
ag11917
ag8990
ag8990
ag8990
ag8990
ag8990
ag11921
ag11922
ag9114
ag4196
tp13974
a(g37
(lp13975
g12024
ag12025
ag8990
ag12026
ag8990
ag12027
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag12108
ag9114
ag4584
tp13976
a(g38
(lp13977
g12124
ag12125
ag8990
ag12126
ag12127
ag12128
ag8990
ag12129
ag12130
ag12131
ag8990
ag8990
ag8990
ag12134
ag8990
ag8990
ag8990
ag8990
ag12136
ag12137
ag12138
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag12186
ag12187
ag12188
ag12189
ag9114
ag4584
tp13978
a(g39
(lp13979
g12201
ag12202
ag8990
ag12203
ag12204
ag12205
ag8990
ag12206
ag8990
ag8990
ag12208
ag12209
ag12210
ag12211
ag8990
ag8990
ag8990
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag12249
ag12250
ag9114
ag4584
tp13980
a(g40
(lp13981
g8990
ag8990
ag12259
ag12260
ag12261
ag8990
ag8990
ag12263
ag12264
ag12265
ag12266
ag12267
ag9114
ag4584
tp13982
a(g41
(lp13983
g12269
ag8990
ag8990
ag12271
ag12272
ag12273
ag12274
ag12275
ag9114
ag4584
tp13984
a(g42
(lp13985
g5852
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag12433
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9114
ag4584
tp13986
a(g43
(lp13987
g8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9675
ag12469
ag12470
ag9114
ag9114
ag4584
tp13988
a(g44
(lp13989
g8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9675
ag12482
ag12483
ag9114
ag9114
ag4584
tp13990
a(g45
(lp13991
g12487
ag12488
ag8990
ag12489
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag12586
ag12587
ag12588
ag8990
ag8990
ag8990
ag12591
ag8990
ag8990
ag8990
ag12594
ag8990
ag8990
ag8990
ag12597
ag12598
ag8990
ag8990
ag8990
ag8990
ag8990
ag12601
ag8990
ag12602
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9114
ag4584
tp13992
a(g46
(lp13993
g12607
ag8990
ag12608
ag12609
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag6497
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag12718
ag12719
ag12720
ag12721
ag12722
ag12723
ag12724
ag12725
ag12726
ag12727
ag12728
ag12729
ag12730
ag12731
ag12732
ag12733
ag8990
ag8990
ag8990
ag9675
ag12736
ag12737
ag9114
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag12746
ag12747
ag12748
ag8990
ag8990
ag12750
ag12751
ag8990
ag8990
ag12753
ag8990
ag8990
ag8990
ag9114
ag4584
tp13994
a(g47
(lp13995
g12776
ag8990
ag12777
ag8990
ag8990
ag9114
ag4584
tp13996
a(g48
(lp13997
g12797
ag12798
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag12805
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9114
ag9114
ag4584
tp13998
a(g49
(lp13999
g12906
ag8990
ag12907
ag12908
ag12909
ag12910
ag12911
ag12912
ag12913
ag12914
ag8990
ag12915
ag12916
ag8990
ag8990
ag12917
ag8990
ag12918
ag12919
ag8990
ag12920
ag12921
ag12922
ag12923
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag12926
ag8990
ag12927
ag12928
ag12929
ag12930
ag12931
ag9114
ag4584
tp14000
a(g50
(lp14001
g12933
ag12934
ag8990
ag12935
ag12936
ag12937
ag12938
ag12939
ag12940
ag12941
ag12942
ag12943
ag12944
ag12945
ag12946
ag9114
ag4584
tp14002
a(g51
(lp14003
g13248
ag13249
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9114
ag7355
tp14004
a(g52
(lp14005
g13265
ag13266
ag13267
ag8990
ag13268
ag8990
ag13269
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag13274
ag8990
ag13275
ag13276
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag13281
ag13282
ag13283
ag13284
ag8990
ag13285
ag13286
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag13304
ag13305
ag13306
ag8990
ag13307
ag13308
ag13309
ag8990
ag13310
ag13311
ag13312
ag9114
ag7355
tp14006
a(g53
(lp14007
g13320
ag13321
ag13322
ag13323
ag8990
ag13324
ag8990
ag13325
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag13330
ag8990
ag13331
ag13332
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag13337
ag8990
ag13338
ag13339
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag13353
ag13354
ag13355
ag8990
ag13356
ag13357
ag13358
ag8990
ag13359
ag13360
ag8990
ag13361
ag9114
ag7355
tp14008
a(g54
(lp14009
g13367
ag13368
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag9114
ag7355
tp14010
a(g55
(lp14011
g13380
ag9114
ag7355
tp14012
a(g56
(lp14013
g13386
ag9114
ag7355
tp14014
a(g57
(lp14015
g13392
ag9114
ag7355
tp14016
a(g58
(lp14017
g13398
ag9114
ag7355
tp14018
a(g59
(lp14019
g8990
ag8990
ag13405
ag9114
ag7355
tp14020
a(g60
(lp14021
g13411
ag9114
ag7355
tp14022
a(g61
(lp14023
g13417
ag13418
ag8990
ag13419
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag13436
ag13437
ag8990
ag13438
ag9675
ag13439
ag13440
ag8990
ag13441
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag13447
ag8990
ag13448
ag8990
ag13449
ag8990
ag8990
ag8990
ag8990
ag13452
ag13453
ag13454
ag13455
ag13456
ag13457
ag13458
ag13459
ag13460
ag13461
ag13462
ag9114
ag9114
ag7355
tp14024
a(g62
(lp14025
g13469
ag13470
ag13471
ag13472
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag13477
ag13478
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag13496
ag13497
ag13498
ag13499
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag13544
ag13545
ag13546
ag13547
ag9114
ag7355
tp14026
a(g63
(lp14027
g13553
ag13554
ag8990
ag13555
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag13560
ag13561
ag8990
ag8990
ag8990
ag9675
ag8990
ag8990
ag13564
ag9114
ag8990
ag13565
ag8990
ag13566
ag13567
ag8990
ag13568
ag8990
ag13569
ag13570
ag8990
ag13571
ag13572
ag13573
ag13574
ag13575
ag8990
ag13576
ag8990
ag8990
ag8990
ag13579
ag9114
ag7355
tp14028
a(g64
(lp14029
g13585
ag13586
ag8990
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag13590
ag13591
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag13597
ag9114
ag7355
tp14030
a(g65
(lp14031
g8990
ag8990
ag9114
ag7355
tp14032
a(g66
(lp14033
g13608
ag9114
ag7355
tp14034
a(g67
(lp14035
g13614
ag9114
ag7355
tp14036
a(g68
(lp14037
g13616
ag9114
ag7355
tp14038
a(g69
(lp14039
g13623
ag13624
ag9114
ag7355
tp14040
a(g70
(lp14041
g13626
ag13627
ag9114
ag7355
tp14042
a(g71
(lp14043
g13632
ag8990
ag13633
ag8990
ag8990
ag8990
ag8990
ag13636
ag8990
ag13637
ag13638
ag13639
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag13643
ag13644
ag13645
ag13646
ag13647
ag8990
ag13648
ag8990
ag13649
ag9114
ag7355
tp14044
a(g72
(lp14045
g13655
ag8990
ag9675
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag13660
ag9114
ag7355
tp14046
a(g73
(lp14047
g13667
ag13668
ag8990
ag13669
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag13673
ag8990
ag8990
ag8990
ag13676
ag9114
ag7355
tp14048
a(g74
(lp14049
g13788
ag9114
ag8818
tp14050
a(g75
(lp14051
g13807
ag13808
ag13809
ag8990
ag13810
ag8990
ag8990
ag8990
ag13812
ag13813
ag8990
ag13814
ag13815
ag8990
ag8990
ag8990
ag8990
ag13817
ag13818
ag13819
ag13820
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag13839
ag9114
ag8818
tp14052
a(g76
(lp14053
g8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag8990
ag13903
ag8957
tp14054
aag77
a.