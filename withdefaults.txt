(lp0
(lp1
S'ResetPostClassify'
p2
aS'CheckPostClass'
p3
aS'CheckPCRhythm'
p4
aS'QRSDet'
p5
aS'Peak'
p6
aS'mean'
p7
aS'thresh'
p8
aS'BLSCheck'
p9
aS'QRSDet'
p10
aS'Peak'
p11
aS'mean'
p12
aS'thresh'
p13
aS'BLSCheck'
p14
aS'Classify'
p15
aS'HFNoiseCheck'
p16
aS'DomMonitor'
p17
aS'GetNewDominantType'
p18
aS'GetDomRhythm'
p19
aS'AdjustDomData'
p20
aS'CombineDomData'
p21
aS'main'
p22
aS'NextSample'
p23
aS'gcd'
p24
aS'IsoCheck'
p25
aS'AnalyzeBeat'
p26
aS'ResetBDAC'
p27
aS'BeatDetectAndClassify'
p28
aS'DownSampleBeat'
p29
aS'QRSFilter'
p30
aS'lpfilt'
p31
aS'testfunction'
p32
aS'hpfilt'
p33
aS'deriv1'
p34
aS'deriv2'
p35
aS'mvwint'
p36
aS'main'
p37
aS'getref'
p38
aS'gettest'
p39
aS'rpann'
p40
aS'tpann'
p41
aS'pair'
p42
aS'pstat'
p43
aS'sstat'
p44
aS'init'
p45
aS'print_results'
p46
aS'help'
p47
aS'genxcmp'
p48
aS'NewInit'
p49
aS'NewPrintResults'
p50
aS'ResetMatch'
p51
aS'CompareBeats'
p52
aS'CompareBeats2'
p53
aS'UpdateBeat'
p54
aS'GetTypesCount'
p55
aS'GetBeatTypeCount'
p56
aS'GetBeatWidth'
p57
aS'GetBeatCenter'
p58
aS'GetBeatClass'
p59
aS'SetBeatClass'
p60
aS'NewBeatType'
p61
aS'BestMorphMatch'
p62
aS'UpdateBeatType'
p63
aS'GetDominantType'
p64
aS'ClearLastNewType'
p65
aS'GetBeatBegin'
p66
aS'GetBeatEnd'
p67
aS'GetBeatAmp'
p68
aS'DomCompare2'
p69
aS'DomCompare'
p70
aS'BeatCopy'
p71
aS'MinimumBeatVariation'
p72
aS'WideBeatVariation'
p73
aS'GetNoiseEstimate'
p74
aS'NoiseCheck'
p75
aS'abs'
p76
aa(lp77
(dp78
S'finalcost'
p79
(dp80
S'division'
p81
F0.0
sS'return'
p82
F0.0
sS'addition'
p83
F0.0
sS'varassignment'
p84
F138.0
sS'bitshift'
p85
F0.0
sS'multiplication'
p86
F0.0
sS'incrementation'
p87
F72.0
sS'if'
p88
F72.0
ssS'costs'
p89
(dp90
S'baseline'
p91
(dp92
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sS'amount'
p93
I1
sg86
I0
sg87
I0
ssS'for'
p94
(lp95
(dp96
S'bodycost'
p97
(dp98
g79
(dp99
g81
F0.0
sg82
F0.0
sg83
F0.0
sg84
F17.0
sg85
F0.0
sg86
F0.0
sg87
F8.0
sg88
F8.0
ssg89
(dp100
g91
(dp101
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp102
(dp103
g97
(dp104
g79
(dp105
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp106
g91
(dp107
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp108
sS'while'
p109
(lp110
sS'switch'
p111
(lp112
sS'other_functions'
p113
(dp114
sg88
(lp115
ssS'name'
p116
S'ResetPostClassify for: 1 for: 1'
p117
sS'in file'
p118
S'POSTCLAS.CPP'
p119
ssS'numloops'
p120
F8.0
sS'default'
p121
S'no'
p122
sg79
(dp123
g81
F0.0
sg82
F0.0
sg83
F0.0
sg84
F17.0
sg85
F0.0
sg86
F0.0
sg87
F8.0
sg88
F8.0
ssS'conditions'
p124
S'tor (j = 0; j < 8; ++j)'
p125
sS'optioncost'
p126
(dp127
g79
(dp128
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp129
g91
(dp130
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp131
sg109
(lp132
sg111
(lp133
sg113
(dp134
sg88
(lp135
ssg116
S'for conditions'
p136
sg118
g119
ssasg109
(lp137
sg111
(lp138
sg113
(dp139
sg88
(lp140
ssg116
S'ResetPostClassify for: 1'
p141
sg118
g119
ssg120
I8
sg121
g122
sg79
(dp142
g81
F0.0
sg82
F0.0
sg83
F0.0
sg84
F137.0
sg85
F0.0
sg86
F0.0
sg87
F72.0
sg88
F72.0
ssg124
S'tor (i = 0; i < MAXTYPES; ++i)'
p143
sg126
(dp144
g79
(dp145
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp146
g91
(dp147
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp148
sg109
(lp149
sg111
(lp150
sg113
(dp151
sg88
(lp152
ssg116
g136
sg118
g119
ssasg109
(lp153
sg111
(lp154
sg113
(dp155
sg88
(lp156
ssg116
g2
sg118
g119
sa(dp157
g79
(dp158
g81
F0.0
sg82
F1.0
sg83
F16.0
sg84
F3.0
sg85
F0.0
sg86
F0.0
sg87
F8.0
sg88
F20.0
ssg89
(dp159
g91
(dp160
g81
I0
sg82
I1
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp161
(dp162
g97
(dp163
g79
(dp164
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp165
g91
(dp166
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp167
sg109
(lp168
sg111
(lp169
sg113
(dp170
sg88
(lp171
(dp172
S'options'
p173
(lp174
(dp175
g79
(dp176
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp177
g91
(dp178
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp179
sg109
(lp180
sg111
(lp181
sg113
(dp182
sg88
(lp183
ssg116
S'CheckPostClass for: 1 if: 1 option: 1'
p184
sg118
g119
sasS'condition'
p185
S'if (PostClass[type][i] == PVC)'
p186
sassg116
S'CheckPostClass for: 1'
p187
sg118
g119
ssg120
F4.0
sg121
g122
sg79
(dp188
g81
F0.0
sg82
F0.0
sg83
F8.0
sg84
F1.0
sg85
F0.0
sg86
F0.0
sg87
F4.0
sg88
F8.0
ssg124
S'tor (i = 0; i < 4; ++i)'
p189
sg126
(dp190
g79
(dp191
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp192
g91
(dp193
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp194
sg109
(lp195
sg111
(lp196
sg113
(dp197
sg88
(lp198
ssg116
g136
sg118
g119
ssa(dp199
g97
(dp200
g79
(dp201
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp202
g91
(dp203
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp204
sg109
(lp205
sg111
(lp206
sg113
(dp207
sg88
(lp208
(dp209
g173
(lp210
(dp211
g79
(dp212
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp213
g91
(dp214
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp215
sg109
(lp216
sg111
(lp217
sg113
(dp218
sg88
(lp219
ssg116
S'CheckPostClass for: 2 if: 1 option: 1'
p220
sg118
g119
sasg185
S'if (PostClass[type][i] == PVC)'
p221
sassg116
S'CheckPostClass for: 2'
p222
sg118
g119
ssg120
F4.0
sg121
g122
sg79
(dp223
g81
F0.0
sg82
F0.0
sg83
F8.0
sg84
F1.0
sg85
F0.0
sg86
F0.0
sg87
F4.0
sg88
F8.0
ssg124
S'tor (pvcs8 = pvcs4; i < 8; ++i)'
p224
sg126
(dp225
g79
(dp226
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp227
g91
(dp228
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp229
sg109
(lp230
sg111
(lp231
sg113
(dp232
sg88
(lp233
ssg116
g136
sg118
g119
ssasg109
(lp234
sg111
(lp235
sg113
(dp236
sg88
(lp237
(dp238
g173
(lp239
(dp240
g79
(dp241
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp242
g91
(dp243
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp244
sg109
(lp245
sg111
(lp246
sg113
(dp247
sg88
(lp248
ssg116
S'CheckPostClass if: 1 option: 1'
p249
sg118
g119
sasg185
S'if (type == MAXTYPES)'
p250
sa(dp251
g173
(lp252
(dp253
g79
(dp254
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp255
g91
(dp256
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp257
sg109
(lp258
sg111
(lp259
sg113
(dp260
sg88
(lp261
ssg116
S'CheckPostClass if: 2 option: 1'
p262
sg118
g119
sa(dp263
g79
(dp264
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp265
g91
(dp266
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp267
sg109
(lp268
sg111
(lp269
sg113
(dp270
sg88
(lp271
ssg116
S'CheckPostClass if: 2 option: 2'
p272
sg118
g119
sasg185
S'if ((pvcs4 >= 3) || (pvcs8 >= 6))'
p273
sassg116
g3
sg118
g119
sa(dp274
g79
(dp275
g81
I0
sg82
I2
sg83
I17
sg84
I4
sg85
I0
sg86
I0
sg87
I8
sg88
I27
ssg89
(dp276
g91
(dp277
g81
I0
sg82
I1
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp278
(dp279
g97
(dp280
g79
(dp281
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp282
g91
(dp283
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp284
sg109
(lp285
sg111
(lp286
sg113
(dp287
sg88
(lp288
(dp289
g173
(lp290
(dp291
g79
(dp292
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp293
g91
(dp294
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp295
sg109
(lp296
sg111
(lp297
sg113
(dp298
sg88
(lp299
ssg116
S'CheckPCRhythm for: 1 if: 1 option: 1'
p300
sg118
g119
sasg185
S'if (PCRhythm[type][i] == NORMAL)'
p301
sassg116
S'CheckPCRhythm for: 1'
p302
sg118
g119
ssg120
I8
sg121
g122
sg79
(dp303
g81
I0
sg82
I0
sg83
I16
sg84
I2
sg85
I0
sg86
I0
sg87
I8
sg88
I16
ssg124
S'tor (i = normCount = 0; i < n; ++i)'
p304
sg126
(dp305
g79
(dp306
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp307
g91
(dp308
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp309
sg109
(lp310
sg111
(lp311
sg113
(dp312
sg88
(lp313
ssg116
g136
sg118
g119
ssasg109
(lp314
sg111
(lp315
sg113
(dp316
g56
I1
ssg88
(lp317
(dp318
g173
(lp319
(dp320
g79
(dp321
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp322
g91
(dp323
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp324
sg109
(lp325
sg111
(lp326
sg113
(dp327
sg88
(lp328
ssg116
S'CheckPCRhythm if: 1 option: 1'
p329
sg118
g119
sasg185
S'if (type == MAXTYPES)'
p330
sa(dp331
g173
(lp332
(dp333
g79
(dp334
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp335
g91
(dp336
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp337
sg109
(lp338
sg111
(lp339
sg113
(dp340
sg88
(lp341
ssg116
S'CheckPCRhythm if: 2 option: 1'
p342
sg118
g119
sa(dp343
g79
(dp344
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp345
g91
(dp346
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp347
sg109
(lp348
sg111
(lp349
sg113
(dp350
sg88
(lp351
ssg116
S'CheckPCRhythm if: 2 option: 2'
p352
sg118
g119
sasg185
S'if (GetBeatTypeCount(type) < 9)'
p353
sa(dp354
g173
(lp355
(dp356
g79
(dp357
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp358
g91
(dp359
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp360
sg109
(lp361
sg111
(lp362
sg113
(dp363
sg88
(lp364
ssg116
S'CheckPCRhythm if: 3 option: 1'
p365
sg118
g119
sasg185
S'if (normCount >= 7)'
p366
sa(dp367
g173
(lp368
(dp369
g79
(dp370
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp371
g91
(dp372
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp373
sg109
(lp374
sg111
(lp375
sg113
(dp376
sg88
(lp377
ssg116
S'CheckPCRhythm if: 4 option: 1'
p378
sg118
g119
sasg185
S'if (((normCount == 0) && (n < 4)) || ((normCount <= 1) && (n >= 4) && (n < 7))|| ((normCount <= 2) && (n >= 7)))'
p379
sassg116
g4
sg118
g119
sa(dp380
g79
(dp381
g81
F50.0
sg82
F63.0
sg83
F233.0
sg84
F1171.0
sg85
F19.0
sg86
F30.0
sg87
F549.0
sg88
F823.0
ssg89
(dp382
g91
(dp383
g81
I0
sg82
I1
sg83
I1
sg84
I9
sg85
I1
sg93
I1
sg86
I0
sg87
I2
ssg94
(lp384
sg109
(lp385
sg111
(lp386
sg113
(dp387
g34
I1
sg6
I2
sg30
I1
ssg88
(lp388
(dp389
g173
(lp390
(dp391
g79
(dp392
g81
F18.0
sg82
F16.0
sg83
F49.0
sg84
F267.0
sg85
F6.0
sg86
F3.0
sg87
F125.0
sg88
F159.0
ssg89
(dp393
g91
(dp394
g81
I0
sg82
I0
sg83
I0
sg84
I10
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp395
(dp396
g97
(dp397
g79
(dp398
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp399
g91
(dp400
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp401
sg109
(lp402
sg111
(lp403
sg113
(dp404
sg88
(lp405
ssg116
S'QRSDet if: 1 option: 1 for: 1'
p406
sg118
S'QRSDET2.CPP'
p407
ssg120
F8.0
sg121
g122
sg79
(dp408
g81
F0.0
sg82
F0.0
sg83
F16.0
sg84
F17.0
sg85
F0.0
sg86
F0.0
sg87
F8.0
sg88
F8.0
ssg124
S'tor (i = 0; i < 8; ++i)'
p409
sg126
(dp410
g79
(dp411
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp412
g91
(dp413
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp414
sg109
(lp415
sg111
(lp416
sg113
(dp417
sg88
(lp418
ssg116
g136
sg118
g407
ssasg109
(lp419
sg111
(lp420
sg113
(dp421
g6
I2
sg30
I1
ssg88
(lp422
ssg116
S'QRSDet if: 1 option: 1'
p423
sg118
g407
sasg185
S'if (init)'
p424
sa(dp425
g173
(lp426
(dp427
g79
(dp428
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp429
g91
(dp430
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp431
sg109
(lp432
sg111
(lp433
sg113
(dp434
sg88
(lp435
ssg116
S'QRSDet if: 2 option: 1'
p436
sg118
g407
sasg185
S'if (aPeak < MIN_PEAK_AMP)'
p437
sa(dp438
g173
(lp439
(dp440
g79
(dp441
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp442
g91
(dp443
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp444
sg109
(lp445
sg111
(lp446
sg113
(dp447
sg88
(lp448
ssg116
S'QRSDet if: 3 option: 1'
p449
sg118
g407
sasg185
S'if (aPeak && !preBlankCnt) '
p450
sa(dp451
g173
(lp452
(dp453
g79
(dp454
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I1
ssg89
(dp455
g91
(dp456
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp457
sg109
(lp458
sg111
(lp459
sg113
(dp460
sg88
(lp461
(dp462
g173
(lp463
(dp464
g79
(dp465
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp466
g91
(dp467
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp468
sg109
(lp469
sg111
(lp470
sg113
(dp471
sg88
(lp472
ssg116
S'QRSDet if: 4 option: 1 if: 1 option: 1'
p473
sg118
g407
sasg185
S'if (--preBlankCnt == 0)'
p474
sassg116
S'QRSDet if: 4 option: 1'
p475
sg118
g407
sasg185
S'else if (!aPeak && preBlankCnt) '
p476
sa(dp477
g173
(lp478
(dp479
g79
(dp480
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp481
g91
(dp482
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp483
sg109
(lp484
sg111
(lp485
sg113
(dp486
sg88
(lp487
(dp488
g173
(lp489
(dp490
g79
(dp491
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp492
g91
(dp493
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp494
sg109
(lp495
sg111
(lp496
sg113
(dp497
sg88
(lp498
ssg116
S'QRSDet if: 5 option: 1 if: 1 option: 1'
p499
sg118
g407
sa(dp500
g79
(dp501
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp502
g91
(dp503
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp504
sg109
(lp505
sg111
(lp506
sg113
(dp507
sg88
(lp508
ssg116
S'QRSDet if: 5 option: 1 if: 1 option: 2'
p509
sg118
g407
sasg185
S'if (aPeak > tempPeak) '
p510
sassg116
S'QRSDet if: 5 option: 1'
p511
sg118
g407
sasg185
S'else if (aPeak) '
p512
sa(dp513
g173
(lp514
(dp515
g79
(dp516
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp517
g91
(dp518
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp519
sg109
(lp520
sg111
(lp521
sg113
(dp522
sg88
(lp523
ssg116
S'QRSDet if: 6 option: 1'
p524
sg118
g407
sasg185
S'if (++DDPtr == DER_DELAY)'
p525
sa(dp526
g173
(lp527
(dp528
g79
(dp529
g81
I2
sg82
I4
sg83
I21
sg84
I42
sg85
I0
sg86
I4
sg87
I19
sg88
I20
ssg89
(dp530
g91
(dp531
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I2
ssg94
(lp532
sg109
(lp533
sg111
(lp534
sg113
(dp535
sg88
(lp536
(dp537
g173
(lp538
(dp539
g79
(dp540
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp541
g91
(dp542
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp543
sg109
(lp544
sg111
(lp545
sg113
(dp546
sg88
(lp547
ssg116
S'QRSDet if: 7 option: 1 if: 1 option: 1'
p548
sg118
g407
sasg185
S'if (newPeak > 0)'
p549
sa(dp550
g173
(lp551
(dp552
g79
(dp553
g81
I2
sg82
I4
sg83
I21
sg84
I40
sg85
I0
sg86
I4
sg87
I17
sg88
I17
ssg89
(dp554
g91
(dp555
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp556
sg109
(lp557
sg111
(lp558
sg113
(dp559
sg88
(lp560
(dp561
g173
(lp562
(dp563
g79
(dp564
g81
I2
sg82
I4
sg83
I21
sg84
I37
sg85
I0
sg86
I4
sg87
I16
sg88
I16
ssg89
(dp565
g91
(dp566
g81
I0
sg82
I0
sg83
I1
sg84
I5
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp567
sg109
(lp568
sg111
(lp569
sg113
(dp570
g8
I2
sg7
I2
ssg88
(lp571
ssg116
S'QRSDet if: 7 option: 1 if: 2 option: 1 if: 1 option: 1'
p572
sg118
g407
sasg185
S'if (qpkcnt == 8)'
p573
sassg116
S'QRSDet if: 7 option: 1 if: 2 option: 1'
p574
sg118
g407
sasg185
S'if (++initBlank == MS1000)'
p575
sa(dp576
g173
(lp577
(dp578
g79
(dp579
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp580
g91
(dp581
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp582
sg109
(lp583
sg111
(lp584
sg113
(dp585
sg88
(lp586
ssg116
S'QRSDet if: 7 option: 1 if: 3 option: 1'
p587
sg118
g407
sasg185
S'if (newPeak > initMax)'
p588
sassg116
S'QRSDet if: 7 option: 1'
p589
sg118
g407
sasg185
S'if (qpkcnt < 8)'
p590
sa(dp591
g173
(lp592
(dp593
g79
(dp594
g81
I6
sg82
I14
sg83
I67
sg84
I467
sg85
I5
sg86
I12
sg87
I224
sg88
I414
ssg89
(dp595
g91
(dp596
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp597
sg109
(lp598
sg111
(lp599
sg113
(dp600
g9
I2
ssg88
(lp601
(dp602
g173
(lp603
(dp604
g79
(dp605
g81
I6
sg82
I10
sg83
I62
sg84
I105
sg85
I1
sg86
I8
sg87
I48
sg88
I51
ssg89
(dp606
g91
(dp607
g81
I0
sg82
I0
sg83
I1
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp608
sg109
(lp609
sg111
(lp610
sg113
(dp611
g8
I2
sg7
I2
ssg88
(lp612
(dp613
g173
(lp614
(dp615
g79
(dp616
g81
I4
sg82
I6
sg83
I40
sg84
I68
sg85
I1
sg86
I4
sg87
I32
sg88
I32
ssg89
(dp617
g91
(dp618
g81
I0
sg82
I0
sg83
I4
sg84
I14
sg85
I1
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp619
sg109
(lp620
sg111
(lp621
sg113
(dp622
g8
I2
sg7
I4
ssg88
(lp623
ssg116
S'QRSDet if: 8 option: 1 if: 1 option: 1 if: 1 option: 1'
p624
sg118
g407
sasg185
S'if (newPeak > det_thresh)'
p625
sa(dp626
g173
(lp627
(dp628
g79
(dp629
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp630
g91
(dp631
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp632
sg109
(lp633
sg111
(lp634
sg113
(dp635
sg88
(lp636
ssg116
S'QRSDet if: 8 option: 1 if: 1 option: 1 if: 2 option: 1'
p637
sg118
g407
sasg185
S'if ((newPeak > sbpeak) && ((count - WINDOW_WIDTH) >= MS360))'
p638
sassg116
S'QRSDet if: 8 option: 1 if: 1 option: 1'
p639
sg118
g407
sasg185
S'if (!BLSCheck(DDBuffer, DDPtr, &maxder))'
p640
sassg116
S'QRSDet if: 8 option: 1'
p641
sg118
g407
sasg185
S'if (newPeak > 0)'
p642
sa(dp643
g173
(lp644
(dp645
g79
(dp646
g81
I4
sg82
I6
sg83
I40
sg84
I69
sg85
I1
sg86
I4
sg87
I32
sg88
I32
ssg89
(dp647
g91
(dp648
g81
I0
sg82
I0
sg83
I4
sg84
I15
sg85
I1
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp649
sg109
(lp650
sg111
(lp651
sg113
(dp652
g8
I2
sg7
I4
ssg88
(lp653
ssg116
S'QRSDet if: 9 option: 1'
p654
sg118
g407
sasg185
S'if ((count > sbcount) && (sbpeak > (det_thresh >> 1)))'
p655
sa(dp656
g173
(lp657
(dp658
g79
(dp659
g81
F2.0
sg82
F4.0
sg83
F21.0
sg84
F61.0
sg85
F0.0
sg86
F4.0
sg87
F26.0
sg88
F27.0
ssg89
(dp660
g91
(dp661
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp662
sg109
(lp663
sg111
(lp664
sg113
(dp665
sg88
(lp666
(dp667
g173
(lp668
(dp669
g79
(dp670
g81
F2.0
sg82
F4.0
sg83
F21.0
sg84
F60.0
sg85
F0.0
sg86
F4.0
sg87
F25.0
sg88
F25.0
ssg89
(dp671
g91
(dp672
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp673
sg109
(lp674
sg111
(lp675
sg113
(dp676
sg88
(lp677
(dp678
g173
(lp679
(dp680
g79
(dp681
g81
F2.0
sg82
F4.0
sg83
F21.0
sg84
F57.0
sg85
F0.0
sg86
F4.0
sg87
F24.0
sg88
F24.0
ssg89
(dp682
g91
(dp683
g81
I0
sg82
I0
sg83
I1
sg84
I8
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp684
(dp685
g97
(dp686
g79
(dp687
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp688
g91
(dp689
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp690
sg109
(lp691
sg111
(lp692
sg113
(dp693
sg88
(lp694
ssg116
S'QRSDet if: 10 option: 1 if: 1 option: 1 if: 1 option: 1 for: 1'
p695
sg118
g407
ssg120
F8.0
sg121
g122
sg79
(dp696
g81
F0.0
sg82
F0.0
sg83
F0.0
sg84
F17.0
sg85
F0.0
sg86
F0.0
sg87
F8.0
sg88
F8.0
ssg124
S'tor (i = 0; i < 8; ++i)'
p697
sg126
(dp698
g79
(dp699
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp700
g91
(dp701
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp702
sg109
(lp703
sg111
(lp704
sg113
(dp705
sg88
(lp706
ssg116
g136
sg118
g407
ssasg109
(lp707
sg111
(lp708
sg113
(dp709
g8
I2
sg7
I2
ssg88
(lp710
ssg116
S'QRSDet if: 10 option: 1 if: 1 option: 1 if: 1 option: 1'
p711
sg118
g407
sasg185
S'if (rsetCount == 8)'
p712
sassg116
S'QRSDet if: 10 option: 1 if: 1 option: 1'
p713
sg118
g407
sasg185
S'if (++initBlank == MS1000)'
p714
sa(dp715
g173
(lp716
(dp717
g79
(dp718
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp719
g91
(dp720
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp721
sg109
(lp722
sg111
(lp723
sg113
(dp724
sg88
(lp725
ssg116
S'QRSDet if: 10 option: 1 if: 2 option: 1'
p726
sg118
g407
sasg185
S'if (newPeak > initMax)'
p727
sassg116
S'QRSDet if: 10 option: 1'
p728
sg118
g407
sasg185
S'if (qpkcnt == 8)'
p729
sassg116
g5
sg118
g407
sa(dp730
g79
(dp731
g81
I0
sg82
I1
sg83
I2
sg84
I16
sg85
I1
sg86
I0
sg87
I0
sg88
I7
ssg89
(dp732
g91
(dp733
g81
I0
sg82
I1
sg83
I0
sg84
I4
sg85
I1
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp734
sg109
(lp735
sg111
(lp736
sg113
(dp737
sg88
(lp738
(dp739
g173
(lp740
(dp741
g79
(dp742
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp743
g91
(dp744
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp745
sg109
(lp746
sg111
(lp747
sg113
(dp748
sg88
(lp749
ssg116
S'Peak if: 1 option: 1'
p750
sg118
g407
sasg185
S'if (init)'
p751
sa(dp752
g173
(lp753
(dp754
g79
(dp755
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp756
g91
(dp757
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp758
sg109
(lp759
sg111
(lp760
sg113
(dp761
sg88
(lp762
ssg116
S'Peak if: 2 option: 1'
p763
sg118
g407
sasg185
S'if (timeSinceMax > 0)'
p764
sa(dp765
g173
(lp766
(dp767
g79
(dp768
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp769
g91
(dp770
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp771
sg109
(lp772
sg111
(lp773
sg113
(dp774
sg88
(lp775
(dp776
g173
(lp777
(dp778
g79
(dp779
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp780
g91
(dp781
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp782
sg109
(lp783
sg111
(lp784
sg113
(dp785
sg88
(lp786
ssg116
S'Peak if: 3 option: 1 if: 1 option: 1'
p787
sg118
g407
sasg185
S'if (max > 2)'
p788
sassg116
S'Peak if: 3 option: 1'
p789
sg118
g407
sasg185
S'if ((datum > lastDatum) && (datum > max))'
p790
sa(dp791
g173
(lp792
(dp793
g79
(dp794
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp795
g91
(dp796
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp797
sg109
(lp798
sg111
(lp799
sg113
(dp800
sg88
(lp801
ssg116
S'Peak if: 4 option: 1'
p802
sg118
g407
sasg185
S'else if (datum < (max >> 1))'
p803
sa(dp804
g173
(lp805
(dp806
g79
(dp807
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp808
g91
(dp809
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp810
sg109
(lp811
sg111
(lp812
sg113
(dp813
sg88
(lp814
ssg116
S'Peak if: 5 option: 1'
p815
sg118
g407
sasg185
S'else if (timeSinceMax > MS95)'
p816
sassg116
g6
sg118
g407
sa(dp817
g79
(dp818
g81
I1
sg82
I1
sg83
I8
sg84
I11
sg85
I0
sg86
I0
sg87
I8
sg88
I8
ssg89
(dp819
g91
(dp820
g81
I1
sg82
I1
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp821
(dp822
g97
(dp823
g79
(dp824
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp825
g91
(dp826
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp827
sg109
(lp828
sg111
(lp829
sg113
(dp830
sg88
(lp831
ssg116
S'mean for: 1'
p832
sg118
g407
ssg120
I8
sg121
g122
sg79
(dp833
g81
I0
sg82
I0
sg83
I8
sg84
I10
sg85
I0
sg86
I0
sg87
I8
sg88
I8
ssg124
S'tor (i = 0, sum = 0; i < datnum; ++i)'
p834
sg126
(dp835
g79
(dp836
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp837
g91
(dp838
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp839
sg109
(lp840
sg111
(lp841
sg113
(dp842
sg88
(lp843
ssg116
g136
sg118
g407
ssasg109
(lp844
sg111
(lp845
sg113
(dp846
sg88
(lp847
ssg116
g7
sg118
g407
sa(dp848
g79
(dp849
g81
I0
sg82
I1
sg83
I2
sg84
I5
sg85
I0
sg86
I2
sg87
I0
sg88
I0
ssg89
(dp850
g91
(dp851
g81
I0
sg82
I1
sg83
I2
sg84
I5
sg85
I0
sg93
I1
sg86
I2
sg87
I0
ssg94
(lp852
sg109
(lp853
sg111
(lp854
sg113
(dp855
sg88
(lp856
ssg116
g8
sg118
g407
sa(dp857
g79
(dp858
g81
I0
sg82
I2
sg83
I2
sg84
I181
sg85
I2
sg86
I2
sg87
I88
sg88
I181
ssg89
(dp859
g91
(dp860
g81
I0
sg82
I1
sg83
I2
sg84
I4
sg85
I2
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp861
(dp862
g97
(dp863
g79
(dp864
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg86
I0
sg87
I1
sg88
I3
ssg89
(dp865
g91
(dp866
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp867
sg109
(lp868
sg111
(lp869
sg113
(dp870
sg88
(lp871
(dp872
g173
(lp873
(dp874
g79
(dp875
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp876
g91
(dp877
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp878
sg109
(lp879
sg111
(lp880
sg113
(dp881
sg88
(lp882
ssg116
S'BLSCheck for: 1 if: 1 option: 1'
p883
sg118
g407
sa(dp884
g79
(dp885
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp886
g91
(dp887
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp888
sg109
(lp889
sg111
(lp890
sg113
(dp891
sg88
(lp892
ssg116
S'BLSCheck for: 1 if: 1 option: 2'
p893
sg118
g407
sasg185
S'if (x > max)'
p894
sa(dp895
g173
(lp896
(dp897
g79
(dp898
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp899
g91
(dp900
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp901
sg109
(lp902
sg111
(lp903
sg113
(dp904
sg88
(lp905
ssg116
S'BLSCheck for: 1 if: 2 option: 1'
p906
sg118
g407
sasg185
S'if (++dbPtr == DER_DELAY)'
p907
sassg116
S'BLSCheck for: 1'
p908
sg118
g407
ssg120
I44
sg121
g122
sg79
(dp909
g81
I0
sg82
I0
sg83
I0
sg84
I177
sg85
I0
sg86
I0
sg87
I88
sg88
I176
ssg124
S'tor (t = 0; t < MS220; ++t)'
p910
sg126
(dp911
g79
(dp912
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp913
g91
(dp914
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp915
sg109
(lp916
sg111
(lp917
sg113
(dp918
sg88
(lp919
ssg116
g136
sg118
g407
ssasg109
(lp920
sg111
(lp921
sg113
(dp922
g76
I1
ssg88
(lp923
(dp924
g173
(lp925
(dp926
g79
(dp927
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp928
g91
(dp929
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp930
sg109
(lp931
sg111
(lp932
sg113
(dp933
sg88
(lp934
ssg116
S'BLSCheck if: 1 option: 1'
p935
sg118
g407
sasg185
S'if ((max > (min >> 3)) && (min > (max >> 3)) && (abs(maxt - mint) < MS150))'
p936
sassg116
g9
sg118
g407
sa(dp937
g79
(dp938
g81
F50.0
sg82
F63.0
sg83
F233.0
sg84
F1171.0
sg85
F19.0
sg86
F30.0
sg87
F549.0
sg88
F823.0
ssg89
(dp939
g91
(dp940
g81
I0
sg82
I1
sg83
I1
sg84
I9
sg85
I1
sg93
I1
sg86
I0
sg87
I2
ssg94
(lp941
sg109
(lp942
sg111
(lp943
sg113
(dp944
g34
I1
sg6
I2
sg30
I1
ssg88
(lp945
(dp946
g173
(lp947
(dp948
g79
(dp949
g81
F18.0
sg82
F16.0
sg83
F49.0
sg84
F267.0
sg85
F6.0
sg86
F3.0
sg87
F125.0
sg88
F159.0
ssg89
(dp950
g91
(dp951
g81
I0
sg82
I0
sg83
I0
sg84
I10
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp952
(dp953
g97
(dp954
g79
(dp955
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp956
g91
(dp957
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp958
sg109
(lp959
sg111
(lp960
sg113
(dp961
sg88
(lp962
ssg116
S'QRSDet if: 1 option: 1 for: 1'
p963
sg118
g407
ssg120
F8.0
sg121
g122
sg79
(dp964
g81
F0.0
sg82
F0.0
sg83
F16.0
sg84
F17.0
sg85
F0.0
sg86
F0.0
sg87
F8.0
sg88
F8.0
ssg124
S'tor (i = 0; i < 8; ++i)'
p965
sg126
(dp966
g79
(dp967
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp968
g91
(dp969
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp970
sg109
(lp971
sg111
(lp972
sg113
(dp973
sg88
(lp974
ssg116
g136
sg118
g407
ssasg109
(lp975
sg111
(lp976
sg113
(dp977
g6
I2
sg30
I1
ssg88
(lp978
ssg116
S'QRSDet if: 1 option: 1'
p979
sg118
g407
sasg185
S'if (init)'
p980
sa(dp981
g173
(lp982
(dp983
g79
(dp984
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp985
g91
(dp986
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp987
sg109
(lp988
sg111
(lp989
sg113
(dp990
sg88
(lp991
ssg116
S'QRSDet if: 2 option: 1'
p992
sg118
g407
sasg185
S'if (aPeak < MIN_PEAK_AMP)'
p993
sa(dp994
g173
(lp995
(dp996
g79
(dp997
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp998
g91
(dp999
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1000
sg109
(lp1001
sg111
(lp1002
sg113
(dp1003
sg88
(lp1004
ssg116
S'QRSDet if: 3 option: 1'
p1005
sg118
g407
sasg185
S'if (aPeak && !preBlankCnt) '
p1006
sa(dp1007
g173
(lp1008
(dp1009
g79
(dp1010
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I1
ssg89
(dp1011
g91
(dp1012
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1013
sg109
(lp1014
sg111
(lp1015
sg113
(dp1016
sg88
(lp1017
(dp1018
g173
(lp1019
(dp1020
g79
(dp1021
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1022
g91
(dp1023
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1024
sg109
(lp1025
sg111
(lp1026
sg113
(dp1027
sg88
(lp1028
ssg116
S'QRSDet if: 4 option: 1 if: 1 option: 1'
p1029
sg118
g407
sasg185
S'if (--preBlankCnt == 0)'
p1030
sassg116
S'QRSDet if: 4 option: 1'
p1031
sg118
g407
sasg185
S'else if (!aPeak && preBlankCnt) '
p1032
sa(dp1033
g173
(lp1034
(dp1035
g79
(dp1036
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp1037
g91
(dp1038
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1039
sg109
(lp1040
sg111
(lp1041
sg113
(dp1042
sg88
(lp1043
(dp1044
g173
(lp1045
(dp1046
g79
(dp1047
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1048
g91
(dp1049
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1050
sg109
(lp1051
sg111
(lp1052
sg113
(dp1053
sg88
(lp1054
ssg116
S'QRSDet if: 5 option: 1 if: 1 option: 1'
p1055
sg118
g407
sa(dp1056
g79
(dp1057
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1058
g91
(dp1059
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1060
sg109
(lp1061
sg111
(lp1062
sg113
(dp1063
sg88
(lp1064
ssg116
S'QRSDet if: 5 option: 1 if: 1 option: 2'
p1065
sg118
g407
sasg185
S'if (aPeak > tempPeak) '
p1066
sassg116
S'QRSDet if: 5 option: 1'
p1067
sg118
g407
sasg185
S'else if (aPeak) '
p1068
sa(dp1069
g173
(lp1070
(dp1071
g79
(dp1072
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1073
g91
(dp1074
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1075
sg109
(lp1076
sg111
(lp1077
sg113
(dp1078
sg88
(lp1079
ssg116
S'QRSDet if: 6 option: 1'
p1080
sg118
g407
sasg185
S'if (++DDPtr == DER_DELAY)'
p1081
sa(dp1082
g173
(lp1083
(dp1084
g79
(dp1085
g81
I2
sg82
I4
sg83
I21
sg84
I42
sg85
I0
sg86
I4
sg87
I19
sg88
I20
ssg89
(dp1086
g91
(dp1087
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I2
ssg94
(lp1088
sg109
(lp1089
sg111
(lp1090
sg113
(dp1091
sg88
(lp1092
(dp1093
g173
(lp1094
(dp1095
g79
(dp1096
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1097
g91
(dp1098
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1099
sg109
(lp1100
sg111
(lp1101
sg113
(dp1102
sg88
(lp1103
ssg116
S'QRSDet if: 7 option: 1 if: 1 option: 1'
p1104
sg118
g407
sasg185
S'if (newPeak > 0)'
p1105
sa(dp1106
g173
(lp1107
(dp1108
g79
(dp1109
g81
I2
sg82
I4
sg83
I21
sg84
I40
sg85
I0
sg86
I4
sg87
I17
sg88
I17
ssg89
(dp1110
g91
(dp1111
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1112
sg109
(lp1113
sg111
(lp1114
sg113
(dp1115
sg88
(lp1116
(dp1117
g173
(lp1118
(dp1119
g79
(dp1120
g81
I2
sg82
I4
sg83
I21
sg84
I37
sg85
I0
sg86
I4
sg87
I16
sg88
I16
ssg89
(dp1121
g91
(dp1122
g81
I0
sg82
I0
sg83
I1
sg84
I5
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1123
sg109
(lp1124
sg111
(lp1125
sg113
(dp1126
g8
I2
sg7
I2
ssg88
(lp1127
ssg116
S'QRSDet if: 7 option: 1 if: 2 option: 1 if: 1 option: 1'
p1128
sg118
g407
sasg185
S'if (qpkcnt == 8)'
p1129
sassg116
S'QRSDet if: 7 option: 1 if: 2 option: 1'
p1130
sg118
g407
sasg185
S'if (++initBlank == MS1000)'
p1131
sa(dp1132
g173
(lp1133
(dp1134
g79
(dp1135
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1136
g91
(dp1137
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1138
sg109
(lp1139
sg111
(lp1140
sg113
(dp1141
sg88
(lp1142
ssg116
S'QRSDet if: 7 option: 1 if: 3 option: 1'
p1143
sg118
g407
sasg185
S'if (newPeak > initMax)'
p1144
sassg116
S'QRSDet if: 7 option: 1'
p1145
sg118
g407
sasg185
S'if (qpkcnt < 8)'
p1146
sa(dp1147
g173
(lp1148
(dp1149
g79
(dp1150
g81
I6
sg82
I14
sg83
I67
sg84
I467
sg85
I5
sg86
I12
sg87
I224
sg88
I414
ssg89
(dp1151
g91
(dp1152
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1153
sg109
(lp1154
sg111
(lp1155
sg113
(dp1156
g9
I2
ssg88
(lp1157
(dp1158
g173
(lp1159
(dp1160
g79
(dp1161
g81
I6
sg82
I10
sg83
I62
sg84
I105
sg85
I1
sg86
I8
sg87
I48
sg88
I51
ssg89
(dp1162
g91
(dp1163
g81
I0
sg82
I0
sg83
I1
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1164
sg109
(lp1165
sg111
(lp1166
sg113
(dp1167
g8
I2
sg7
I2
ssg88
(lp1168
(dp1169
g173
(lp1170
(dp1171
g79
(dp1172
g81
I4
sg82
I6
sg83
I40
sg84
I68
sg85
I1
sg86
I4
sg87
I32
sg88
I32
ssg89
(dp1173
g91
(dp1174
g81
I0
sg82
I0
sg83
I4
sg84
I14
sg85
I1
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1175
sg109
(lp1176
sg111
(lp1177
sg113
(dp1178
g8
I2
sg7
I4
ssg88
(lp1179
ssg116
S'QRSDet if: 8 option: 1 if: 1 option: 1 if: 1 option: 1'
p1180
sg118
g407
sasg185
S'if (newPeak > det_thresh)'
p1181
sa(dp1182
g173
(lp1183
(dp1184
g79
(dp1185
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1186
g91
(dp1187
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1188
sg109
(lp1189
sg111
(lp1190
sg113
(dp1191
sg88
(lp1192
ssg116
S'QRSDet if: 8 option: 1 if: 1 option: 1 if: 2 option: 1'
p1193
sg118
g407
sasg185
S'if ((newPeak > sbpeak) && ((count - WINDOW_WIDTH) >= MS360))'
p1194
sassg116
S'QRSDet if: 8 option: 1 if: 1 option: 1'
p1195
sg118
g407
sasg185
S'if (!BLSCheck(DDBuffer, DDPtr, &maxder))'
p1196
sassg116
S'QRSDet if: 8 option: 1'
p1197
sg118
g407
sasg185
S'if (newPeak > 0)'
p1198
sa(dp1199
g173
(lp1200
(dp1201
g79
(dp1202
g81
I4
sg82
I6
sg83
I40
sg84
I69
sg85
I1
sg86
I4
sg87
I32
sg88
I32
ssg89
(dp1203
g91
(dp1204
g81
I0
sg82
I0
sg83
I4
sg84
I15
sg85
I1
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1205
sg109
(lp1206
sg111
(lp1207
sg113
(dp1208
g8
I2
sg7
I4
ssg88
(lp1209
ssg116
S'QRSDet if: 9 option: 1'
p1210
sg118
g407
sasg185
S'if ((count > sbcount) && (sbpeak > (det_thresh >> 1)))'
p1211
sa(dp1212
g173
(lp1213
(dp1214
g79
(dp1215
g81
F2.0
sg82
F4.0
sg83
F21.0
sg84
F61.0
sg85
F0.0
sg86
F4.0
sg87
F26.0
sg88
F27.0
ssg89
(dp1216
g91
(dp1217
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1218
sg109
(lp1219
sg111
(lp1220
sg113
(dp1221
sg88
(lp1222
(dp1223
g173
(lp1224
(dp1225
g79
(dp1226
g81
F2.0
sg82
F4.0
sg83
F21.0
sg84
F60.0
sg85
F0.0
sg86
F4.0
sg87
F25.0
sg88
F25.0
ssg89
(dp1227
g91
(dp1228
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1229
sg109
(lp1230
sg111
(lp1231
sg113
(dp1232
sg88
(lp1233
(dp1234
g173
(lp1235
(dp1236
g79
(dp1237
g81
F2.0
sg82
F4.0
sg83
F21.0
sg84
F57.0
sg85
F0.0
sg86
F4.0
sg87
F24.0
sg88
F24.0
ssg89
(dp1238
g91
(dp1239
g81
I0
sg82
I0
sg83
I1
sg84
I8
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1240
(dp1241
g97
(dp1242
g79
(dp1243
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1244
g91
(dp1245
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1246
sg109
(lp1247
sg111
(lp1248
sg113
(dp1249
sg88
(lp1250
ssg116
S'QRSDet if: 10 option: 1 if: 1 option: 1 if: 1 option: 1 for: 1'
p1251
sg118
g407
ssg120
F8.0
sg121
g122
sg79
(dp1252
g81
F0.0
sg82
F0.0
sg83
F0.0
sg84
F17.0
sg85
F0.0
sg86
F0.0
sg87
F8.0
sg88
F8.0
ssg124
S'tor (i = 0; i < 8; ++i)'
p1253
sg126
(dp1254
g79
(dp1255
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp1256
g91
(dp1257
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1258
sg109
(lp1259
sg111
(lp1260
sg113
(dp1261
sg88
(lp1262
ssg116
g136
sg118
g407
ssasg109
(lp1263
sg111
(lp1264
sg113
(dp1265
g8
I2
sg7
I2
ssg88
(lp1266
ssg116
S'QRSDet if: 10 option: 1 if: 1 option: 1 if: 1 option: 1'
p1267
sg118
g407
sasg185
S'if (rsetCount == 8)'
p1268
sassg116
S'QRSDet if: 10 option: 1 if: 1 option: 1'
p1269
sg118
g407
sasg185
S'if (++initBlank == MS1000)'
p1270
sa(dp1271
g173
(lp1272
(dp1273
g79
(dp1274
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1275
g91
(dp1276
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1277
sg109
(lp1278
sg111
(lp1279
sg113
(dp1280
sg88
(lp1281
ssg116
S'QRSDet if: 10 option: 1 if: 2 option: 1'
p1282
sg118
g407
sasg185
S'if (newPeak > initMax)'
p1283
sassg116
S'QRSDet if: 10 option: 1'
p1284
sg118
g407
sasg185
S'if (qpkcnt == 8)'
p1285
sassg116
g10
sg118
g407
sa(dp1286
g79
(dp1287
g81
I0
sg82
I1
sg83
I2
sg84
I16
sg85
I1
sg86
I0
sg87
I0
sg88
I7
ssg89
(dp1288
g91
(dp1289
g81
I0
sg82
I1
sg83
I0
sg84
I4
sg85
I1
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1290
sg109
(lp1291
sg111
(lp1292
sg113
(dp1293
sg88
(lp1294
(dp1295
g173
(lp1296
(dp1297
g79
(dp1298
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1299
g91
(dp1300
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1301
sg109
(lp1302
sg111
(lp1303
sg113
(dp1304
sg88
(lp1305
ssg116
S'Peak if: 1 option: 1'
p1306
sg118
g407
sasg185
S'if (init)'
p1307
sa(dp1308
g173
(lp1309
(dp1310
g79
(dp1311
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1312
g91
(dp1313
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1314
sg109
(lp1315
sg111
(lp1316
sg113
(dp1317
sg88
(lp1318
ssg116
S'Peak if: 2 option: 1'
p1319
sg118
g407
sasg185
S'if (timeSinceMax > 0)'
p1320
sa(dp1321
g173
(lp1322
(dp1323
g79
(dp1324
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp1325
g91
(dp1326
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1327
sg109
(lp1328
sg111
(lp1329
sg113
(dp1330
sg88
(lp1331
(dp1332
g173
(lp1333
(dp1334
g79
(dp1335
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1336
g91
(dp1337
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1338
sg109
(lp1339
sg111
(lp1340
sg113
(dp1341
sg88
(lp1342
ssg116
S'Peak if: 3 option: 1 if: 1 option: 1'
p1343
sg118
g407
sasg185
S'if (max > 2)'
p1344
sassg116
S'Peak if: 3 option: 1'
p1345
sg118
g407
sasg185
S'if ((datum > lastDatum) && (datum > max))'
p1346
sa(dp1347
g173
(lp1348
(dp1349
g79
(dp1350
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1351
g91
(dp1352
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1353
sg109
(lp1354
sg111
(lp1355
sg113
(dp1356
sg88
(lp1357
ssg116
S'Peak if: 4 option: 1'
p1358
sg118
g407
sasg185
S'else if (datum < (max >> 1))'
p1359
sa(dp1360
g173
(lp1361
(dp1362
g79
(dp1363
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1364
g91
(dp1365
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1366
sg109
(lp1367
sg111
(lp1368
sg113
(dp1369
sg88
(lp1370
ssg116
S'Peak if: 5 option: 1'
p1371
sg118
g407
sasg185
S'else if (timeSinceMax > MS95)'
p1372
sassg116
g11
sg118
g407
sa(dp1373
g79
(dp1374
g81
I1
sg82
I1
sg83
I8
sg84
I11
sg85
I0
sg86
I0
sg87
I8
sg88
I8
ssg89
(dp1375
g91
(dp1376
g81
I1
sg82
I1
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1377
(dp1378
g97
(dp1379
g79
(dp1380
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1381
g91
(dp1382
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1383
sg109
(lp1384
sg111
(lp1385
sg113
(dp1386
sg88
(lp1387
ssg116
S'mean for: 1'
p1388
sg118
g407
ssg120
I8
sg121
g122
sg79
(dp1389
g81
I0
sg82
I0
sg83
I8
sg84
I10
sg85
I0
sg86
I0
sg87
I8
sg88
I8
ssg124
S'tor (i = 0, sum = 0; i < datnum; ++i)'
p1390
sg126
(dp1391
g79
(dp1392
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp1393
g91
(dp1394
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1395
sg109
(lp1396
sg111
(lp1397
sg113
(dp1398
sg88
(lp1399
ssg116
g136
sg118
g407
ssasg109
(lp1400
sg111
(lp1401
sg113
(dp1402
sg88
(lp1403
ssg116
g12
sg118
g407
sa(dp1404
g79
(dp1405
g81
I0
sg82
I1
sg83
I2
sg84
I5
sg85
I0
sg86
I2
sg87
I0
sg88
I0
ssg89
(dp1406
g91
(dp1407
g81
I0
sg82
I1
sg83
I2
sg84
I5
sg85
I0
sg93
I1
sg86
I2
sg87
I0
ssg94
(lp1408
sg109
(lp1409
sg111
(lp1410
sg113
(dp1411
sg88
(lp1412
ssg116
g13
sg118
g407
sa(dp1413
g79
(dp1414
g81
I0
sg82
I2
sg83
I2
sg84
I181
sg85
I2
sg86
I2
sg87
I88
sg88
I181
ssg89
(dp1415
g91
(dp1416
g81
I0
sg82
I1
sg83
I2
sg84
I4
sg85
I2
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp1417
(dp1418
g97
(dp1419
g79
(dp1420
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg86
I0
sg87
I1
sg88
I3
ssg89
(dp1421
g91
(dp1422
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1423
sg109
(lp1424
sg111
(lp1425
sg113
(dp1426
sg88
(lp1427
(dp1428
g173
(lp1429
(dp1430
g79
(dp1431
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1432
g91
(dp1433
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1434
sg109
(lp1435
sg111
(lp1436
sg113
(dp1437
sg88
(lp1438
ssg116
S'BLSCheck for: 1 if: 1 option: 1'
p1439
sg118
g407
sa(dp1440
g79
(dp1441
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1442
g91
(dp1443
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1444
sg109
(lp1445
sg111
(lp1446
sg113
(dp1447
sg88
(lp1448
ssg116
S'BLSCheck for: 1 if: 1 option: 2'
p1449
sg118
g407
sasg185
S'if (x > max)'
p1450
sa(dp1451
g173
(lp1452
(dp1453
g79
(dp1454
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1455
g91
(dp1456
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1457
sg109
(lp1458
sg111
(lp1459
sg113
(dp1460
sg88
(lp1461
ssg116
S'BLSCheck for: 1 if: 2 option: 1'
p1462
sg118
g407
sasg185
S'if (++dbPtr == DER_DELAY)'
p1463
sassg116
S'BLSCheck for: 1'
p1464
sg118
g407
ssg120
I44
sg121
g122
sg79
(dp1465
g81
I0
sg82
I0
sg83
I0
sg84
I177
sg85
I0
sg86
I0
sg87
I88
sg88
I176
ssg124
S'tor (t = 0; t < MS220; ++t)'
p1466
sg126
(dp1467
g79
(dp1468
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp1469
g91
(dp1470
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1471
sg109
(lp1472
sg111
(lp1473
sg113
(dp1474
sg88
(lp1475
ssg116
g136
sg118
g407
ssasg109
(lp1476
sg111
(lp1477
sg113
(dp1478
g76
I1
ssg88
(lp1479
(dp1480
g173
(lp1481
(dp1482
g79
(dp1483
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1484
g91
(dp1485
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1486
sg109
(lp1487
sg111
(lp1488
sg113
(dp1489
sg88
(lp1490
ssg116
S'BLSCheck if: 1 option: 1'
p1491
sg118
g407
sasg185
S'if ((max > (min >> 3)) && (min > (max >> 3)) && (abs(maxt - mint) < MS150))'
p1492
sassg116
g14
sg118
g407
sa(dp1493
g79
(dp1494
g81
F614.0
sg82
F1378.0
sg83
F125035.0
sg84
F35983.0
sg85
F106746.0
sg86
F4173.0
sg87
F77721.0
sg88
F101971.0
ssg89
(dp1495
g91
(dp1496
g81
I1
sg82
I1
sg83
I4
sg84
I31
sg85
I0
sg93
I1
sg86
I2
sg87
I0
ssg94
(lp1497
(dp1498
g97
(dp1499
g79
(dp1500
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1501
g91
(dp1502
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1503
sg109
(lp1504
sg111
(lp1505
sg113
(dp1506
sg88
(lp1507
ssg116
S'Classify for: 1'
p1508
sg118
S'CLASSIFY.CPP'
p1509
ssg120
I100
sg121
g122
sg79
(dp1510
g81
I0
sg82
I0
sg83
I100
sg84
I101
sg85
I0
sg86
I0
sg87
I100
sg88
I100
ssg124
S'tor (i = 0; i < BEATLGTH; ++i)'
p1511
sg126
(dp1512
g79
(dp1513
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp1514
g91
(dp1515
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1516
sg109
(lp1517
sg111
(lp1518
sg113
(dp1519
sg88
(lp1520
ssg116
g136
sg118
g1509
ssa(dp1521
g97
(dp1522
g79
(dp1523
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1524
g91
(dp1525
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1526
sg109
(lp1527
sg111
(lp1528
sg113
(dp1529
sg88
(lp1530
ssg116
S'Classify for: 2'
p1531
sg118
g1509
ssg120
F-7.0
sg121
g122
sg79
(dp1532
g81
F-0.0
sg82
F-0.0
sg83
F-14.0
sg84
F-13.0
sg85
F-0.0
sg86
F-0.0
sg87
F-7.0
sg88
F-7.0
ssg124
S'tor (i = 7; i > 0; --i)'
p1533
sg126
(dp1534
g79
(dp1535
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp1536
g91
(dp1537
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1538
sg109
(lp1539
sg111
(lp1540
sg113
(dp1541
sg88
(lp1542
ssg116
g136
sg118
g1509
ssasg109
(lp1543
sg111
(lp1544
sg113
(dp1545
g69
I1
sg26
I1
sg59
I1
sg76
I1
sg57
I1
sg17
I1
sg62
I1
sg3
I1
sg72
I1
sg16
I1
sg75
I1
sg63
I1
sg15
I1
ssg88
(lp1546
(dp1547
g173
(lp1548
(dp1549
g79
(dp1550
g81
F305.0
sg82
F570.0
sg83
F61248.0
sg84
F17438.0
sg85
F53022.0
sg86
F1633.0
sg87
F37405.0
sg88
F49194.0
ssg89
(dp1551
g91
(dp1552
g81
I0
sg82
I1
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1553
sg109
(lp1554
sg111
(lp1555
sg113
(dp1556
g2
I1
sg51
I1
sg17
I1
sg15
I1
ssg88
(lp1557
ssg116
S'Classify if: 1 option: 1'
p1558
sg118
g1509
sasg185
S'if (init)'
p1559
sa(dp1560
g173
(lp1561
(dp1562
g79
(dp1563
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1564
g91
(dp1565
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1566
sg109
(lp1567
sg111
(lp1568
sg113
(dp1569
sg88
(lp1570
ssg116
S'Classify if: 2 option: 1'
p1571
sg118
g1509
sasg185
S'if ((blShift > BL_SHIFT_LIMIT) && (lastBeatWasNew == 1) && (lastRhythmClass == NORMAL)&& (rhythmClass == NORMAL))'
p1572
sa(dp1573
g173
(lp1574
(dp1575
g79
(dp1576
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1577
g91
(dp1578
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1579
sg109
(lp1580
sg111
(lp1581
sg113
(dp1582
sg88
(lp1583
ssg116
S'Classify if: 3 option: 1'
p1584
sg118
g1509
sasg185
S'if (matchIndex < MATCH_NOISE_THRESHOLD)'
p1585
sa(dp1586
g173
(lp1587
(dp1588
g79
(dp1589
g81
I2
sg82
I82
sg83
I881
sg84
I556
sg85
I234
sg86
I302
sg87
I1063
sg88
I1299
ssg89
(dp1590
g91
(dp1591
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1592
sg109
(lp1593
sg111
(lp1594
sg113
(dp1595
g61
I1
ssg88
(lp1596
ssg116
S'Classify if: 4 option: 1'
p1597
sg118
g1509
sasg185
S'if ((matchIndex < MATCH_LIMIT) && (rhythmClass == PVC) && MinimumBeatVariation(morphType)&& (mi2 > PVC_MATCH_WITH_AMP_LIMIT))'
p1598
sa(dp1599
g173
(lp1600
(dp1601
g79
(dp1602
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1603
g91
(dp1604
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1605
sg109
(lp1606
sg111
(lp1607
sg113
(dp1608
sg88
(lp1609
ssg116
S'Classify if: 5 option: 1'
p1610
sg118
g1509
sasg185
S'else if ((matchIndex < MATCH_LIMIT) && (mi2 <= MATCH_WITH_AMP_LIMIT))UpdateBeatType(morphType, newBeat, mi2, shiftAdj);'
p1611
sa(dp1612
g173
(lp1613
(dp1614
g79
(dp1615
g81
I2
sg82
I82
sg83
I881
sg84
I556
sg85
I234
sg86
I302
sg87
I1063
sg88
I1299
ssg89
(dp1616
g91
(dp1617
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1618
sg109
(lp1619
sg111
(lp1620
sg113
(dp1621
g61
I1
ssg88
(lp1622
ssg116
S'Classify if: 6 option: 1'
p1623
sg118
g1509
sasg185
S'else if ((blShift < BL_SHIFT_LIMIT) && (noiseLevel < NEW_TYPE_NOISE_THRESHOLD)&& (hfNoise < NEW_TYPE_HF_NOISE_LIMIT))'
p1624
sa(dp1625
g173
(lp1626
(dp1627
g79
(dp1628
g81
I2
sg82
I82
sg83
I881
sg84
I556
sg85
I234
sg86
I302
sg87
I1063
sg88
I1299
ssg89
(dp1629
g91
(dp1630
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1631
sg109
(lp1632
sg111
(lp1633
sg113
(dp1634
g61
I1
ssg88
(lp1635
ssg116
S'Classify if: 7 option: 1'
p1636
sg118
g1509
sasg185
S'else if ((lastRhythmClass != NORMAL) || (rhythmClass != NORMAL))'
p1637
sa(dp1638
g173
(lp1639
(dp1640
g79
(dp1641
g81
I1
sg82
I4
sg83
I5
sg84
I5
sg85
I0
sg86
I2
sg87
I0
sg88
I3
ssg89
(dp1642
g91
(dp1643
g81
I0
sg82
I0
sg83
I2
sg84
I3
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp1644
sg109
(lp1645
sg111
(lp1646
sg113
(dp1647
g57
I1
sg59
I1
sg56
I1
sg58
I1
ssg88
(lp1648
(dp1649
g173
(lp1650
(dp1651
g79
(dp1652
g81
I1
sg82
I0
sg83
I3
sg84
I2
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp1653
g91
(dp1654
g81
I1
sg82
I0
sg83
I3
sg84
I2
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp1655
sg109
(lp1656
sg111
(lp1657
sg113
(dp1658
sg88
(lp1659
ssg116
S'Classify if: 8 option: 1 if: 1 option: 1'
p1660
sg118
g1509
sasg185
S'if ((beatWidth > offset - onset) && (GetBeatTypeCount(morphType) <= 4))'
p1661
sassg116
S'Classify if: 8 option: 1'
p1662
sg118
g1509
sasg185
S'if (morphType != MAXTYPES)'
p1663
sa(dp1664
g173
(lp1665
(dp1666
g79
(dp1667
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1668
g91
(dp1669
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1670
sg109
(lp1671
sg111
(lp1672
sg113
(dp1673
sg88
(lp1674
ssg116
S'Classify if: 9 option: 1'
p1675
sg118
g1509
sa(dp1676
g79
(dp1677
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1678
g91
(dp1679
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1680
sg109
(lp1681
sg111
(lp1682
sg113
(dp1683
sg88
(lp1684
ssg116
S'Classify if: 9 option: 2'
p1685
sg118
g1509
sasg185
S'if ((morphType != domType) && (morphType != 8))'
p1686
sa(dp1687
g173
(lp1688
(dp1689
g79
(dp1690
g81
I0
sg82
I0
sg83
I3
sg84
I5
sg85
I0
sg86
I0
sg87
I0
sg88
I9
ssg89
(dp1691
g91
(dp1692
g81
I0
sg82
I0
sg83
I3
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1693
sg109
(lp1694
sg111
(lp1695
sg113
(dp1696
sg88
(lp1697
(dp1698
g173
(lp1699
(dp1700
g79
(dp1701
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1702
g91
(dp1703
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1704
sg109
(lp1705
sg111
(lp1706
sg113
(dp1707
sg88
(lp1708
ssg116
S'Classify if: 10 option: 1 if: 1 option: 1'
p1709
sg118
g1509
sasg185
S'if ((runCount >= 3) && (domType != -1) && (beatWidth < domWidth + BEAT_MS20))'
p1710
sa(dp1711
g173
(lp1712
(dp1713
g79
(dp1714
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1715
g91
(dp1716
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1717
sg109
(lp1718
sg111
(lp1719
sg113
(dp1720
sg88
(lp1721
ssg116
S'Classify if: 10 option: 1 if: 2 option: 1'
p1722
sg118
g1509
sasg185
S'else if ((runCount >= 6) && (domType == -1))'
p1723
sa(dp1724
g173
(lp1725
(dp1726
g79
(dp1727
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg86
I0
sg87
I0
sg88
I3
ssg89
(dp1728
g91
(dp1729
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1730
sg109
(lp1731
sg111
(lp1732
sg113
(dp1733
g60
I1
ssg88
(lp1734
(dp1735
g173
(lp1736
(dp1737
g79
(dp1738
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1739
g91
(dp1740
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1741
sg109
(lp1742
sg111
(lp1743
sg113
(dp1744
sg88
(lp1745
ssg116
S'Classify if: 10 option: 1 if: 3 option: 1 if: 1 option: 1'
p1746
sg118
g1509
sa(dp1747
g79
(dp1748
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1749
g91
(dp1750
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1751
sg109
(lp1752
sg111
(lp1753
sg113
(dp1754
sg88
(lp1755
ssg116
S'Classify if: 10 option: 1 if: 3 option: 1 if: 1 option: 2'
p1756
sg118
g1509
sasg185
S'if ((rhythmClass == PVC) && (beatWidth > BEAT_MS100))'
p1757
sassg116
S'Classify if: 10 option: 1 if: 3 option: 1'
p1758
sg118
g1509
sasg185
S'else if (IsBigeminy() == 1)'
p1759
sassg116
S'Classify if: 10 option: 1'
p1760
sg118
g1509
sasg185
S'if ((beatClass == UNKNOWN) && (morphType < MAXTYPES))'
p1761
sa(dp1762
g173
(lp1763
(dp1764
g79
(dp1765
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1766
g91
(dp1767
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1768
sg109
(lp1769
sg111
(lp1770
sg113
(dp1771
sg88
(lp1772
ssg116
S'Classify if: 11 option: 1'
p1773
sg118
g1509
sasg185
S'if (beatClass != UNKNOWN)'
p1774
sa(dp1775
g173
(lp1776
(dp1777
g79
(dp1778
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1779
g91
(dp1780
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1781
sg109
(lp1782
sg111
(lp1783
sg113
(dp1784
sg88
(lp1785
ssg116
S'Classify if: 12 option: 1'
p1786
sg118
g1509
sasg185
S'if (CheckPostClass(morphType) == PVC)'
p1787
sassg116
g15
sg118
g1509
sa(dp1788
g79
(dp1789
g81
I2
sg82
I57
sg83
I592
sg84
I323
sg85
I56
sg86
I113
sg87
I132
sg88
I388
ssg89
(dp1790
g91
(dp1791
g81
I0
sg82
I1
sg83
I1
sg84
I5
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1792
(dp1793
g97
(dp1794
g79
(dp1795
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp1796
g91
(dp1797
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1798
sg109
(lp1799
sg111
(lp1800
sg113
(dp1801
sg88
(lp1802
(dp1803
g173
(lp1804
(dp1805
g79
(dp1806
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1807
g91
(dp1808
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1809
sg109
(lp1810
sg111
(lp1811
sg113
(dp1812
sg88
(lp1813
ssg116
S'HFNoiseCheck for: 1 if: 1 option: 1'
p1814
sg118
g1509
sa(dp1815
g79
(dp1816
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1817
g91
(dp1818
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1819
sg109
(lp1820
sg111
(lp1821
sg113
(dp1822
sg88
(lp1823
ssg116
S'HFNoiseCheck for: 1 if: 1 option: 2'
p1824
sg118
g1509
sasg185
S'if (beat[i] > qrsMax)'
p1825
sassg116
S'HFNoiseCheck for: 1'
p1826
sg118
g1509
ssg120
I15
sg121
g122
sg79
(dp1827
g81
I0
sg82
I0
sg83
I30
sg84
I31
sg85
I0
sg86
I0
sg87
I15
sg88
I45
ssg124
S'tor (i = FIDMARK - BEAT_MS70; i < FIDMARK + BEAT_MS80; ++i)'
p1828
sg126
(dp1829
g79
(dp1830
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp1831
g91
(dp1832
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1833
sg109
(lp1834
sg111
(lp1835
sg113
(dp1836
sg88
(lp1837
ssg116
g136
sg118
g1509
ssa(dp1838
g97
(dp1839
g79
(dp1840
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1841
g91
(dp1842
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1843
sg109
(lp1844
sg111
(lp1845
sg113
(dp1846
sg88
(lp1847
ssg116
S'HFNoiseCheck for: 2'
p1848
sg118
g1509
ssg120
I5
sg121
g122
sg79
(dp1849
g81
I0
sg82
I0
sg83
I0
sg84
I6
sg85
I0
sg86
I0
sg87
I5
sg88
I5
ssg124
S'tor (i = 0; i < AVELENGTH; ++i)'
p1850
sg126
(dp1851
g79
(dp1852
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp1853
g91
(dp1854
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1855
sg109
(lp1856
sg111
(lp1857
sg113
(dp1858
sg88
(lp1859
ssg116
g136
sg118
g1509
ssa(dp1860
g97
(dp1861
g79
(dp1862
g81
I0
sg82
I1
sg83
I8
sg84
I5
sg85
I1
sg86
I2
sg87
I1
sg88
I5
ssg89
(dp1863
g91
(dp1864
g81
I0
sg82
I0
sg83
I8
sg84
I4
sg85
I1
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp1865
sg109
(lp1866
sg111
(lp1867
sg113
(dp1868
g76
I1
ssg88
(lp1869
(dp1870
g173
(lp1871
(dp1872
g79
(dp1873
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1874
g91
(dp1875
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1876
sg109
(lp1877
sg111
(lp1878
sg113
(dp1879
sg88
(lp1880
ssg116
S'HFNoiseCheck for: 3 if: 1 option: 1'
p1881
sg118
g1509
sasg185
S'if (++avePtr == AVELENGTH)'
p1882
sa(dp1883
g173
(lp1884
(dp1885
g79
(dp1886
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1887
g91
(dp1888
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1889
sg109
(lp1890
sg111
(lp1891
sg113
(dp1892
sg88
(lp1893
ssg116
S'HFNoiseCheck for: 3 if: 2 option: 1'
p1894
sg118
g1509
sasg185
S'if ((i < (FIDMARK - BEAT_MS50)) || (i > (FIDMARK + BEAT_MS110)))'
p1895
sassg116
S'HFNoiseCheck for: 3'
p1896
sg118
g1509
ssg120
I56
sg121
g122
sg79
(dp1897
g81
I0
sg82
I56
sg83
I560
sg84
I281
sg85
I56
sg86
I112
sg87
I112
sg88
I336
ssg124
S'tor (i = FIDMARK - BEAT_MS280; i < FIDMARK + BEAT_MS280; ++i)'
p1898
sg126
(dp1899
g79
(dp1900
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp1901
g91
(dp1902
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1903
sg109
(lp1904
sg111
(lp1905
sg113
(dp1906
sg88
(lp1907
ssg116
g136
sg118
g1509
ssasg109
(lp1908
sg111
(lp1909
sg113
(dp1910
sg88
(lp1911
(dp1912
g173
(lp1913
(dp1914
g79
(dp1915
g81
I2
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp1916
g91
(dp1917
g81
I2
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp1918
sg109
(lp1919
sg111
(lp1920
sg113
(dp1921
sg88
(lp1922
ssg116
S'HFNoiseCheck if: 1 option: 1'
p1923
sg118
g1509
sa(dp1924
g79
(dp1925
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1926
g91
(dp1927
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1928
sg109
(lp1929
sg111
(lp1930
sg113
(dp1931
sg88
(lp1932
ssg116
S'HFNoiseCheck if: 1 option: 2'
p1933
sg118
g1509
sasg185
S'if ((qrsMax - qrsMin) >= 4)'
p1934
sassg116
g16
sg118
g1509
sa(dp1935
g79
(dp1936
g81
F3.0
sg82
F11.0
sg83
F198.0
sg84
F435.0
sg85
F0.0
sg86
F1.0
sg87
F227.0
sg88
F299.0
ssg89
(dp1937
g91
(dp1938
g81
I2
sg82
I1
sg83
I3
sg84
I12
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1939
(dp1940
g97
(dp1941
g79
(dp1942
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp1943
g91
(dp1944
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1945
sg109
(lp1946
sg111
(lp1947
sg113
(dp1948
sg88
(lp1949
(dp1950
g173
(lp1951
(dp1952
g79
(dp1953
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1954
g91
(dp1955
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1956
sg109
(lp1957
sg111
(lp1958
sg113
(dp1959
sg88
(lp1960
ssg116
S'DomMonitor for: 1 if: 1 option: 1'
p1961
sg118
g1509
sasg185
S'if (DMNormCounts[i] > DMNormCounts[dom])'
p1962
sassg116
S'DomMonitor for: 1'
p1963
sg118
g1509
ssg120
F7.0
sg121
g122
sg79
(dp1964
g81
F0.0
sg82
F0.0
sg83
F0.0
sg84
F8.0
sg85
F0.0
sg86
F0.0
sg87
F7.0
sg88
F14.0
ssg124
S'tor (i = 1; i < 8; ++i)'
p1965
sg126
(dp1966
g79
(dp1967
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp1968
g91
(dp1969
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp1970
sg109
(lp1971
sg111
(lp1972
sg113
(dp1973
sg88
(lp1974
ssg116
g136
sg118
g1509
ssa(dp1975
g97
(dp1976
g79
(dp1977
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp1978
g91
(dp1979
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1980
sg109
(lp1981
sg111
(lp1982
sg113
(dp1983
sg88
(lp1984
(dp1985
g173
(lp1986
(dp1987
g79
(dp1988
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp1989
g91
(dp1990
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp1991
sg109
(lp1992
sg111
(lp1993
sg113
(dp1994
sg88
(lp1995
ssg116
S'DomMonitor for: 2 if: 1 option: 1'
p1996
sg118
g1509
sasg185
S'if (DMBeatCounts[i] > DMBeatCounts[max])'
p1997
sassg116
S'DomMonitor for: 2'
p1998
sg118
g1509
ssg120
F7.0
sg121
g122
sg79
(dp1999
g81
F0.0
sg82
F0.0
sg83
F0.0
sg84
F8.0
sg85
F0.0
sg86
F0.0
sg87
F7.0
sg88
F14.0
ssg124
S'tor (i = 1; i < 8; ++i)'
p2000
sg126
(dp2001
g79
(dp2002
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2003
g91
(dp2004
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2005
sg109
(lp2006
sg111
(lp2007
sg113
(dp2008
sg88
(lp2009
ssg116
g136
sg118
g1509
ssa(dp2010
g97
(dp2011
g79
(dp2012
g81
I0
sg82
I1
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I5
ssg89
(dp2013
g91
(dp2014
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2015
sg109
(lp2016
sg111
(lp2017
sg113
(dp2018
g59
I1
ssg88
(lp2019
(dp2020
g173
(lp2021
(dp2022
g79
(dp2023
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2024
g91
(dp2025
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2026
sg109
(lp2027
sg111
(lp2028
sg113
(dp2029
sg88
(lp2030
ssg116
S'DomMonitor for: 3 if: 1 option: 1'
p2031
sg118
g1509
sasg185
S'if ((DMBeatCounts[i] > 10) && (DMNormCounts[i] == 0) && (i != dom)  && (GetBeatClass(i) == NORMAL))'
p2032
sassg116
S'DomMonitor for: 3'
p2033
sg118
g1509
ssg120
F8.0
sg121
g122
sg79
(dp2034
g81
F0.0
sg82
F8.0
sg83
F0.0
sg84
F9.0
sg85
F0.0
sg86
F0.0
sg87
F8.0
sg88
F48.0
ssg124
S'tor (i = 0; i < 8; ++i)'
p2035
sg126
(dp2036
g79
(dp2037
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2038
g91
(dp2039
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2040
sg109
(lp2041
sg111
(lp2042
sg113
(dp2043
sg88
(lp2044
ssg116
g136
sg118
g1509
ssasg109
(lp2045
sg111
(lp2046
sg113
(dp2047
sg88
(lp2048
(dp2049
g173
(lp2050
(dp2051
g79
(dp2052
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2053
g91
(dp2054
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2055
sg109
(lp2056
sg111
(lp2057
sg113
(dp2058
sg88
(lp2059
ssg116
S'DomMonitor if: 1 option: 1'
p2060
sg118
g1509
sasg185
S'if (i < 0)'
p2061
sa(dp2062
g173
(lp2063
(dp2064
g79
(dp2065
g81
F0.0
sg82
F1.0
sg83
F180.0
sg84
F379.0
sg85
F0.0
sg86
F0.0
sg87
F188.0
sg88
F188.0
ssg89
(dp2066
g91
(dp2067
g81
I0
sg82
I1
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2068
(dp2069
g97
(dp2070
g79
(dp2071
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2072
g91
(dp2073
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2074
sg109
(lp2075
sg111
(lp2076
sg113
(dp2077
sg88
(lp2078
ssg116
S'DomMonitor if: 2 option: 1 for: 1'
p2079
sg118
g1509
ssg120
I180
sg121
g122
sg79
(dp2080
g81
I0
sg82
I0
sg83
I180
sg84
I361
sg85
I0
sg86
I0
sg87
I180
sg88
I180
ssg124
S'tor (i = 0; i < DM_BUFFER_LENGTH; ++i)'
p2081
sg126
(dp2082
g79
(dp2083
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2084
g91
(dp2085
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2086
sg109
(lp2087
sg111
(lp2088
sg113
(dp2089
sg88
(lp2090
ssg116
g136
sg118
g1509
ssa(dp2091
g97
(dp2092
g79
(dp2093
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2094
g91
(dp2095
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2096
sg109
(lp2097
sg111
(lp2098
sg113
(dp2099
sg88
(lp2100
ssg116
S'DomMonitor if: 2 option: 1 for: 2'
p2101
sg118
g1509
ssg120
F8.0
sg121
g122
sg79
(dp2102
g81
F0.0
sg82
F0.0
sg83
F0.0
sg84
F17.0
sg85
F0.0
sg86
F0.0
sg87
F8.0
sg88
F8.0
ssg124
S'tor (i = 0; i < 8; ++i)'
p2103
sg126
(dp2104
g79
(dp2105
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2106
g91
(dp2107
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2108
sg109
(lp2109
sg111
(lp2110
sg113
(dp2111
sg88
(lp2112
ssg116
g136
sg118
g1509
ssasg109
(lp2113
sg111
(lp2114
sg113
(dp2115
sg88
(lp2116
ssg116
S'DomMonitor if: 2 option: 1'
p2117
sg118
g1509
sasg185
S'if (reset != 0)'
p2118
sa(dp2119
g173
(lp2120
(dp2121
g79
(dp2122
g81
I0
sg82
I0
sg83
I3
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I1
ssg89
(dp2123
g91
(dp2124
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2125
sg109
(lp2126
sg111
(lp2127
sg113
(dp2128
sg88
(lp2129
(dp2130
g173
(lp2131
(dp2132
g79
(dp2133
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2134
g91
(dp2135
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2136
sg109
(lp2137
sg111
(lp2138
sg113
(dp2139
sg88
(lp2140
ssg116
S'DomMonitor if: 3 option: 1 if: 1 option: 1'
p2141
sg118
g1509
sasg185
S'if (DMBeatRhythms[brIndex] == UNKNOWN)'
p2142
sassg116
S'DomMonitor if: 3 option: 1'
p2143
sg118
g1509
sasg185
S'if ((DMBeatTypes[brIndex] != -1) && (DMBeatTypes[brIndex] != MAXTYPES))'
p2144
sa(dp2145
g173
(lp2146
(dp2147
g79
(dp2148
g81
I1
sg82
I1
sg83
I11
sg84
I14
sg85
I0
sg86
I1
sg87
I15
sg88
I25
ssg89
(dp2149
g91
(dp2150
g81
I1
sg82
I0
sg83
I2
sg84
I4
sg85
I0
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp2151
(dp2152
g97
(dp2153
g79
(dp2154
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I1
ssg89
(dp2155
g91
(dp2156
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2157
sg109
(lp2158
sg111
(lp2159
sg113
(dp2160
sg88
(lp2161
(dp2162
g173
(lp2163
(dp2164
g79
(dp2165
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2166
g91
(dp2167
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2168
sg109
(lp2169
sg111
(lp2170
sg113
(dp2171
sg88
(lp2172
ssg116
S'DomMonitor if: 4 option: 1 for: 1 if: 1 option: 1'
p2173
sg118
g1509
sasg185
S'if (--i < 0)'
p2174
sassg116
S'DomMonitor if: 4 option: 1 for: 1'
p2175
sg118
g1509
ssg120
I6
sg121
g122
sg79
(dp2176
g81
I0
sg82
I0
sg83
I6
sg84
I7
sg85
I0
sg86
I0
sg87
I12
sg88
I18
ssg124
S'tor (runCount = 0; (DMBeatTypes[i] == morphType) && (runCount < 6); ++runCount)'
p2177
sg126
(dp2178
g79
(dp2179
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2180
g91
(dp2181
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2182
sg109
(lp2183
sg111
(lp2184
sg113
(dp2185
sg88
(lp2186
ssg116
g136
sg118
g1509
ssasg109
(lp2187
sg111
(lp2188
sg113
(dp2189
g66
I1
ssg88
(lp2190
(dp2191
g173
(lp2192
(dp2193
g79
(dp2194
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2195
g91
(dp2196
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2197
sg109
(lp2198
sg111
(lp2199
sg113
(dp2200
sg88
(lp2201
ssg116
S'DomMonitor if: 4 option: 1 if: 1 option: 1'
p2202
sg118
g1509
sasg185
S'if (rhythmClass == UNKNOWN)'
p2203
sa(dp2204
g173
(lp2205
(dp2206
g79
(dp2207
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2208
g91
(dp2209
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2210
sg109
(lp2211
sg111
(lp2212
sg113
(dp2213
sg88
(lp2214
ssg116
S'DomMonitor if: 4 option: 1 if: 2 option: 1'
p2215
sg118
g1509
sasg185
S'if (i < 0)'
p2216
sa(dp2217
g173
(lp2218
(dp2219
g79
(dp2220
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2221
g91
(dp2222
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2223
sg109
(lp2224
sg111
(lp2225
sg113
(dp2226
sg88
(lp2227
ssg116
S'DomMonitor if: 4 option: 1 if: 3 option: 1'
p2228
sg118
g1509
sasg185
S'if ((rhythmClass == NORMAL) && (beatWidth < BEAT_MS130) && (runCount >= 1))'
p2229
sa(dp2230
g173
(lp2231
(dp2232
g79
(dp2233
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2234
g91
(dp2235
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2236
sg109
(lp2237
sg111
(lp2238
sg113
(dp2239
sg88
(lp2240
ssg116
S'DomMonitor if: 4 option: 1 if: 4 option: 1'
p2241
sg118
g1509
sasg185
S'else if (rr < ((FIDMARK - GetBeatBegin(morphType)) * SAMPLE_RATE / BEAT_SAMPLE_RATE) && (oldType == morphType))'
p2242
sassg116
S'DomMonitor if: 4 option: 1'
p2243
sg118
g1509
sasg185
S'if (morphType != 8)'
p2244
sa(dp2245
g173
(lp2246
(dp2247
g79
(dp2248
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2249
g91
(dp2250
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2251
sg109
(lp2252
sg111
(lp2253
sg113
(dp2254
sg88
(lp2255
ssg116
S'DomMonitor if: 5 option: 1'
p2256
sg118
g1509
sasg185
S'if (++brIndex == DM_BUFFER_LENGTH)'
p2257
sa(dp2258
g173
(lp2259
(dp2260
g79
(dp2261
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2262
g91
(dp2263
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2264
sg109
(lp2265
sg111
(lp2266
sg113
(dp2267
sg88
(lp2268
ssg116
S'DomMonitor if: 6 option: 1'
p2269
sg118
g1509
sasg185
S'if ((DMNormCounts[dom] == 0) || (DMBeatCounts[max] / DMBeatCounts[dom] >= 2)) '
p2270
sa(dp2271
g173
(lp2272
(dp2273
g79
(dp2274
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2275
g91
(dp2276
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2277
sg109
(lp2278
sg111
(lp2279
sg113
(dp2280
sg88
(lp2281
ssg116
S'DomMonitor if: 7 option: 1'
p2282
sg118
g1509
sasg185
S'else if (DMBeatCounts[dom] / DMNormCounts[dom] >= 2)'
p2283
sassg116
g17
sg118
g1509
sa(dp2284
g79
(dp2285
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2286
g91
(dp2287
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2288
sg109
(lp2289
sg111
(lp2290
sg113
(dp2291
sg88
(lp2292
ssg116
g18
sg118
g1509
sa(dp2293
g79
(dp2294
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp2295
g91
(dp2296
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2297
sg109
(lp2298
sg111
(lp2299
sg113
(dp2300
sg88
(lp2301
(dp2302
g173
(lp2303
(dp2304
g79
(dp2305
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2306
g91
(dp2307
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2308
sg109
(lp2309
sg111
(lp2310
sg113
(dp2311
sg88
(lp2312
ssg116
S'GetDomRhythm if: 1 option: 1'
p2313
sg118
g1509
sa(dp2314
g79
(dp2315
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2316
g91
(dp2317
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2318
sg109
(lp2319
sg111
(lp2320
sg113
(dp2321
sg88
(lp2322
ssg116
S'GetDomRhythm if: 1 option: 2'
p2323
sg118
g1509
sasg185
S'if (DMIrregCount > IRREG_RR_LIMIT)'
p2324
sassg116
g19
sg118
g1509
sa(dp2325
g79
(dp2326
g81
I0
sg82
I0
sg83
I0
sg84
I186
sg85
I0
sg86
I0
sg87
I180
sg88
I361
ssg89
(dp2327
g91
(dp2328
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2329
(dp2330
g97
(dp2331
g79
(dp2332
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp2333
g91
(dp2334
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2335
sg109
(lp2336
sg111
(lp2337
sg113
(dp2338
sg88
(lp2339
(dp2340
g173
(lp2341
(dp2342
g79
(dp2343
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2344
g91
(dp2345
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2346
sg109
(lp2347
sg111
(lp2348
sg113
(dp2349
sg88
(lp2350
ssg116
S'AdjustDomData for: 1 if: 1 option: 1'
p2351
sg118
g1509
sasg185
S'if (DMBeatTypes[i] == oldType)'
p2352
sassg116
S'AdjustDomData for: 1'
p2353
sg118
g1509
ssg120
I180
sg121
g122
sg79
(dp2354
g81
I0
sg82
I0
sg83
I0
sg84
I181
sg85
I0
sg86
I0
sg87
I180
sg88
I360
ssg124
S'tor (i = 0; i < DM_BUFFER_LENGTH; ++i)'
p2355
sg126
(dp2356
g79
(dp2357
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2358
g91
(dp2359
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2360
sg109
(lp2361
sg111
(lp2362
sg113
(dp2363
sg88
(lp2364
ssg116
g136
sg118
g1509
ssasg109
(lp2365
sg111
(lp2366
sg113
(dp2367
sg88
(lp2368
(dp2369
g173
(lp2370
(dp2371
g79
(dp2372
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2373
g91
(dp2374
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2375
sg109
(lp2376
sg111
(lp2377
sg113
(dp2378
sg88
(lp2379
ssg116
S'AdjustDomData if: 1 option: 1'
p2380
sg118
g1509
sasg185
S'if (newType != MAXTYPES)'
p2381
sassg116
g20
sg118
g1509
sa(dp2382
g79
(dp2383
g81
I0
sg82
I0
sg83
I2
sg84
I186
sg85
I0
sg86
I0
sg87
I180
sg88
I361
ssg89
(dp2384
g91
(dp2385
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2386
(dp2387
g97
(dp2388
g79
(dp2389
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp2390
g91
(dp2391
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2392
sg109
(lp2393
sg111
(lp2394
sg113
(dp2395
sg88
(lp2396
(dp2397
g173
(lp2398
(dp2399
g79
(dp2400
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2401
g91
(dp2402
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2403
sg109
(lp2404
sg111
(lp2405
sg113
(dp2406
sg88
(lp2407
ssg116
S'CombineDomData for: 1 if: 1 option: 1'
p2408
sg118
g1509
sasg185
S'if (DMBeatTypes[i] == oldType)'
p2409
sassg116
S'CombineDomData for: 1'
p2410
sg118
g1509
ssg120
I180
sg121
g122
sg79
(dp2411
g81
I0
sg82
I0
sg83
I0
sg84
I181
sg85
I0
sg86
I0
sg87
I180
sg88
I360
ssg124
S'tor (i = 0; i < DM_BUFFER_LENGTH; ++i)'
p2412
sg126
(dp2413
g79
(dp2414
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2415
g91
(dp2416
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2417
sg109
(lp2418
sg111
(lp2419
sg113
(dp2420
sg88
(lp2421
ssg116
g136
sg118
g1509
ssasg109
(lp2422
sg111
(lp2423
sg113
(dp2424
sg88
(lp2425
(dp2426
g173
(lp2427
(dp2428
g79
(dp2429
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2430
g91
(dp2431
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2432
sg109
(lp2433
sg111
(lp2434
sg113
(dp2435
sg88
(lp2436
ssg116
S'CombineDomData if: 1 option: 1'
p2437
sg118
g1509
sasg185
S'if (newType != MAXTYPES)'
p2438
sassg116
g21
sg118
g1509
sa(dp2439
g79
(dp2440
g81
F405408.0
sg82
F766416.0
sg83
F66248016.0
sg84
F19895330.0
sg85
F56444832.0
sg86
F2273714.0
sg87
F41538720.0
sg88
F54550848.0
ssg89
(dp2441
g91
(dp2442
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I2
sg87
I0
ssg94
(lp2443
(dp2444
g97
(dp2445
g79
(dp2446
g81
F8446.0
sg82
F15967.0
sg83
F1380167.0
sg84
F414486.0
sg85
F1175934.0
sg86
F47369.0
sg87
F865389.0
sg88
F1136475.0
ssg89
(dp2447
g91
(dp2448
g81
I0
sg82
I0
sg83
I0
sg84
I8
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2449
sg109
(lp2450
(dp2451
g97
(dp2452
g79
(dp2453
g81
F1538.0
sg82
F2890.0
sg83
F250890.0
sg84
F75215.0
sg85
F213830.0
sg86
F8620.0
sg87
F157278.0
sg88
F206558.0
ssg89
(dp2454
g91
(dp2455
g81
I1
sg82
I0
sg83
I1
sg84
I6
sg85
I0
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp2456
sg109
(lp2457
sg111
(lp2458
sg113
(dp2459
g15
I1
sg28
I1
ssg88
(lp2460
(dp2461
g173
(lp2462
(dp2463
g79
(dp2464
g81
I1
sg82
I0
sg83
I1
sg84
I6
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp2465
g91
(dp2466
g81
I1
sg82
I0
sg83
I1
sg84
I6
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp2467
sg109
(lp2468
sg111
(lp2469
sg113
(dp2470
sg88
(lp2471
ssg116
S'main for: 1 while: 1 if: 1 option: 1'
p2472
sg118
S'EASYTEST.CPP'
p2473
sasg185
S'if (delay != 0)'
p2474
sassg116
S'main for: 1 while: 1'
p2475
sg118
g2473
ssg120
I5
sg121
S'yes'
p2476
sg79
(dp2477
g81
F7725.0
sg82
F14460.0
sg83
F1254630.0
sg84
F376075.0
sg85
F1069150.0
sg86
F43130.0
sg87
F786540.0
sg88
F1032795.0
ssg124
S'vhile (NextSample(ecg, 2, InputFileSampleFrequency, SAMPLE_RATE, 0) >= 0)'
p2478
sg126
(dp2479
g79
(dp2480
g81
I7
sg82
I2
sg83
I36
sg84
I75
sg85
I0
sg86
I6
sg87
I30
sg88
I56
ssg89
(dp2481
g91
(dp2482
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2483
sg109
(lp2484
sg111
(lp2485
sg113
(dp2486
g23
I1
ssg88
(lp2487
ssg116
S'while conditions'
p2488
sg118
g2473
ssa(dp2489
g97
(dp2490
g79
(dp2491
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2492
g91
(dp2493
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2494
sg109
(lp2495
sg111
(lp2496
sg113
(dp2497
sg88
(lp2498
ssg116
S'main for: 1 while: 2'
p2499
sg118
g2473
ssg120
I5
sg121
g2476
sg79
(dp2500
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I5
ssg124
S'vhile (fread(&byte, sizeof(char), 1, newAnn0) == 1)'
p2501
sg126
(dp2502
g79
(dp2503
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2504
g91
(dp2505
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2506
sg109
(lp2507
sg111
(lp2508
sg113
(dp2509
sg88
(lp2510
ssg116
g2488
sg118
g2473
ssasg111
(lp2511
sg113
(dp2512
g27
I1
sg23
I1
ssg88
(lp2513
(dp2514
g173
(lp2515
(dp2516
g79
(dp2517
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2518
g91
(dp2519
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2520
sg109
(lp2521
sg111
(lp2522
sg113
(dp2523
sg88
(lp2524
ssg116
S'main for: 1 if: 1 option: 1'
p2525
sg118
g2473
sasg185
S'if (isigopen(record, s, 2) < 1)'
p2526
sa(dp2527
g173
(lp2528
(dp2529
g79
(dp2530
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2531
g91
(dp2532
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2533
sg109
(lp2534
sg111
(lp2535
sg113
(dp2536
sg88
(lp2537
ssg116
S'main for: 1 if: 2 option: 1'
p2538
sg118
g2473
sasg185
S'if (annopen(record, a, 1) < 0)'
p2539
sassg116
S'main for: 1'
p2540
sg118
g2473
ssg120
I48
sg121
g122
sg79
(dp2541
g81
F405408.0
sg82
F766416.0
sg83
F66248016.0
sg84
F19895329.0
sg85
F56444832.0
sg86
F2273712.0
sg87
F41538720.0
sg88
F54550848.0
ssg124
S'tor (recNum = 0; recNum < REC_COUNT; ++recNum)'
p2542
sg126
(dp2543
g79
(dp2544
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2545
g91
(dp2546
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2547
sg109
(lp2548
sg111
(lp2549
sg113
(dp2550
sg88
(lp2551
ssg116
g136
sg118
g2473
ssasg109
(lp2552
sg111
(lp2553
sg113
(dp2554
sg88
(lp2555
ssg116
g22
sg118
g2473
sa(dp2556
g79
(dp2557
g81
I7
sg82
I2
sg83
I36
sg84
I75
sg85
I0
sg86
I6
sg87
I30
sg88
I56
ssg89
(dp2558
g91
(dp2559
g81
I0
sg82
I1
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2560
(dp2561
g97
(dp2562
g79
(dp2563
g81
I1
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp2564
g91
(dp2565
g81
I1
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp2566
sg109
(lp2567
sg111
(lp2568
sg113
(dp2569
sg88
(lp2570
ssg116
S'NextSample for: 1'
p2571
sg118
g2473
ssg120
I5
sg121
g2476
sg79
(dp2572
g81
I5
sg82
I0
sg83
I10
sg84
I6
sg85
I0
sg86
I5
sg87
I5
sg88
I5
ssg124
S'tor (i = 0; i < nosig; ++i)'
p2573
sg126
(dp2574
g79
(dp2575
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2576
g91
(dp2577
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2578
sg109
(lp2579
sg111
(lp2580
sg113
(dp2581
sg88
(lp2582
ssg116
g136
sg118
g2473
ssasg109
(lp2583
(dp2584
g97
(dp2585
g79
(dp2586
g81
I0
sg82
I0
sg83
I3
sg84
I10
sg85
I0
sg86
I0
sg87
I5
sg88
I6
ssg89
(dp2587
g91
(dp2588
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2589
(dp2590
g97
(dp2591
g79
(dp2592
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2593
g91
(dp2594
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2595
sg109
(lp2596
sg111
(lp2597
sg113
(dp2598
sg88
(lp2599
ssg116
S'NextSample while: 1 for: 1'
p2600
sg118
g2473
ssg120
I5
sg121
g2476
sg79
(dp2601
g81
I0
sg82
I0
sg83
I0
sg84
I6
sg85
I0
sg86
I0
sg87
I5
sg88
I5
ssg124
S'tor (i = 0; i < nosig; ++i)'
p2602
sg126
(dp2603
g79
(dp2604
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2605
g91
(dp2606
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2607
sg109
(lp2608
sg111
(lp2609
sg113
(dp2610
sg88
(lp2611
ssg116
g136
sg118
g2473
ssasg109
(lp2612
sg111
(lp2613
sg113
(dp2614
sg88
(lp2615
(dp2616
g173
(lp2617
(dp2618
g79
(dp2619
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2620
g91
(dp2621
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2622
sg109
(lp2623
sg111
(lp2624
sg113
(dp2625
sg88
(lp2626
ssg116
S'NextSample while: 1 if: 1 option: 1'
p2627
sg118
g2473
sasg185
S'if (it > mn)'
p2628
sassg116
S'NextSample while: 1'
p2629
sg118
g2473
ssg120
I5
sg121
g2476
sg79
(dp2630
g81
I0
sg82
I0
sg83
I15
sg84
I50
sg85
I0
sg86
I0
sg87
I25
sg88
I35
ssg124
S'vhile (ot > it)'
p2631
sg126
(dp2632
g79
(dp2633
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2634
g91
(dp2635
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2636
sg109
(lp2637
sg111
(lp2638
sg113
(dp2639
sg88
(lp2640
ssg116
g2488
sg118
g2473
ssasg111
(lp2641
sg113
(dp2642
sg88
(lp2643
(dp2644
g173
(lp2645
(dp2646
g79
(dp2647
g81
I2
sg82
I1
sg83
I10
sg84
I18
sg85
I0
sg86
I1
sg87
I0
sg88
I15
ssg89
(dp2648
g91
(dp2649
g81
I2
sg82
I0
sg83
I0
sg84
I7
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp2650
sg109
(lp2651
sg111
(lp2652
sg113
(dp2653
g24
I1
ssg88
(lp2654
ssg116
S'NextSample if: 1 option: 1'
p2655
sg118
g2473
sasg185
S'if (init)'
p2656
sassg116
g23
sg118
g2473
sa(dp2657
g79
(dp2658
g81
I0
sg82
I1
sg83
I10
sg84
I11
sg85
I0
sg86
I0
sg87
I0
sg88
I15
ssg89
(dp2659
g91
(dp2660
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2661
sg109
(lp2662
(dp2663
g97
(dp2664
g79
(dp2665
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp2666
g91
(dp2667
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2668
sg109
(lp2669
sg111
(lp2670
sg113
(dp2671
sg88
(lp2672
(dp2673
g173
(lp2674
(dp2675
g79
(dp2676
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2677
g91
(dp2678
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2679
sg109
(lp2680
sg111
(lp2681
sg113
(dp2682
sg88
(lp2683
ssg116
S'gcd while: 1 if: 1 option: 1'
p2684
sg118
g2473
sa(dp2685
g79
(dp2686
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2687
g91
(dp2688
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2689
sg109
(lp2690
sg111
(lp2691
sg113
(dp2692
sg88
(lp2693
ssg116
S'gcd while: 1 if: 1 option: 2'
p2694
sg118
g2473
sasg185
S'if (x > y)'
p2695
sassg116
S'gcd while: 1'
p2696
sg118
g2473
ssg120
I5
sg121
g2476
sg79
(dp2697
g81
I0
sg82
I0
sg83
I10
sg84
I11
sg85
I0
sg86
I0
sg87
I0
sg88
I15
ssg124
S'vhile (x != y)'
p2698
sg126
(dp2699
g79
(dp2700
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2701
g91
(dp2702
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2703
sg109
(lp2704
sg111
(lp2705
sg113
(dp2706
sg88
(lp2707
ssg116
g2488
sg118
g2473
ssasg111
(lp2708
sg113
(dp2709
sg88
(lp2710
ssg116
g24
sg118
g2473
sa(dp2711
g79
(dp2712
g81
I0
sg82
I1
sg83
I1
sg84
I13
sg85
I0
sg86
I0
sg87
I5
sg88
I16
ssg89
(dp2713
g91
(dp2714
g81
I0
sg82
I1
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2715
(dp2716
g97
(dp2717
g79
(dp2718
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp2719
g91
(dp2720
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2721
sg109
(lp2722
sg111
(lp2723
sg113
(dp2724
sg88
(lp2725
(dp2726
g173
(lp2727
(dp2728
g79
(dp2729
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2730
g91
(dp2731
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2732
sg109
(lp2733
sg111
(lp2734
sg113
(dp2735
sg88
(lp2736
ssg116
S'IsoCheck for: 1 if: 1 option: 1'
p2737
sg118
S'ANALBEAT.CPP'
p2738
sa(dp2739
g79
(dp2740
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2741
g91
(dp2742
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2743
sg109
(lp2744
sg111
(lp2745
sg113
(dp2746
sg88
(lp2747
ssg116
S'IsoCheck for: 1 if: 1 option: 2'
p2748
sg118
g2738
sasg185
S'if (data[i] > max)'
p2749
sassg116
S'IsoCheck for: 1'
p2750
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp2751
g81
I0
sg82
I0
sg83
I0
sg84
I13
sg85
I0
sg86
I0
sg87
I5
sg88
I15
ssg124
S'tor (i = 1, max = min = data[0]; i < isoLength; ++i)'
p2752
sg126
(dp2753
g79
(dp2754
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2755
g91
(dp2756
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2757
sg109
(lp2758
sg111
(lp2759
sg113
(dp2760
sg88
(lp2761
ssg116
g136
sg118
g2738
ssasg109
(lp2762
sg111
(lp2763
sg113
(dp2764
sg88
(lp2765
(dp2766
g173
(lp2767
(dp2768
g79
(dp2769
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2770
g91
(dp2771
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2772
sg109
(lp2773
sg111
(lp2774
sg113
(dp2775
sg88
(lp2776
ssg116
S'IsoCheck if: 1 option: 1'
p2777
sg118
g2738
sasg185
S'if (max - min < ISO_LIMIT)'
p2778
sassg116
g25
sg118
g2738
sa(dp2779
g79
(dp2780
g81
I0
sg82
I40
sg83
I437
sg84
I107
sg85
I117
sg86
I151
sg87
I375
sg88
I394
ssg89
(dp2781
g91
(dp2782
g81
I0
sg82
I0
sg83
I21
sg84
I19
sg85
I2
sg93
I1
sg86
I20
sg87
I0
ssg94
(lp2783
(dp2784
g97
(dp2785
g79
(dp2786
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2787
g91
(dp2788
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2789
sg109
(lp2790
sg111
(lp2791
sg113
(dp2792
sg88
(lp2793
ssg116
S'AnalyzeBeat for: 1'
p2794
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp2795
g81
I0
sg82
I5
sg83
I10
sg84
I1
sg85
I0
sg86
I0
sg87
I30
sg88
I10
ssg124
S'tor (i = FIDMARK - ISO_LENGTH2; (i > 0) && (IsoCheck(&beat[i], ISO_LENGTH2) == 0); --i)'
p2796
sg126
(dp2797
g79
(dp2798
g81
I0
sg82
I1
sg83
I2
sg84
I14
sg85
I0
sg86
I0
sg87
I6
sg88
I16
ssg89
(dp2799
g91
(dp2800
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2801
sg109
(lp2802
sg111
(lp2803
sg113
(dp2804
g25
I1
ssg88
(lp2805
ssg116
g136
sg118
g2738
ssa(dp2806
g97
(dp2807
g79
(dp2808
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2809
g91
(dp2810
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2811
sg109
(lp2812
sg111
(lp2813
sg113
(dp2814
sg88
(lp2815
ssg116
S'AnalyzeBeat for: 2'
p2816
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp2817
g81
I0
sg82
I5
sg83
I5
sg84
I1
sg85
I0
sg86
I0
sg87
I30
sg88
I10
ssg124
S'tor (i = FIDMARK; (i < BEATLGTH) && (IsoCheck(&beat[i], ISO_LENGTH1) == 0); ++i)'
p2818
sg126
(dp2819
g79
(dp2820
g81
I0
sg82
I1
sg83
I1
sg84
I14
sg85
I0
sg86
I0
sg87
I6
sg88
I16
ssg89
(dp2821
g91
(dp2822
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2823
sg109
(lp2824
sg111
(lp2825
sg113
(dp2826
g25
I1
ssg88
(lp2827
ssg116
g136
sg118
g2738
ssa(dp2828
g97
(dp2829
g79
(dp2830
g81
I0
sg82
I0
sg83
I2
sg84
I3
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp2831
g91
(dp2832
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2833
sg109
(lp2834
sg111
(lp2835
sg113
(dp2836
sg88
(lp2837
(dp2838
g173
(lp2839
(dp2840
g79
(dp2841
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2842
g91
(dp2843
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2844
sg109
(lp2845
sg111
(lp2846
sg113
(dp2847
sg88
(lp2848
ssg116
S'AnalyzeBeat for: 3 if: 1 option: 1'
p2849
sg118
g2738
sa(dp2850
g79
(dp2851
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2852
g91
(dp2853
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2854
sg109
(lp2855
sg111
(lp2856
sg113
(dp2857
sg88
(lp2858
ssg116
S'AnalyzeBeat for: 3 if: 1 option: 2'
p2859
sg118
g2738
sasg185
S'if (slope > maxSlope)'
p2860
sassg116
S'AnalyzeBeat for: 3'
p2861
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp2862
g81
I0
sg82
I0
sg83
I15
sg84
I15
sg85
I0
sg86
I0
sg87
I5
sg88
I15
ssg124
S'tor (; i < FIDMARK + BEAT_MS150; ++i)'
p2863
sg126
(dp2864
g79
(dp2865
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2866
g91
(dp2867
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2868
sg109
(lp2869
sg111
(lp2870
sg113
(dp2871
sg88
(lp2872
ssg116
g136
sg118
g2738
ssa(dp2873
g97
(dp2874
g79
(dp2875
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2876
g91
(dp2877
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2878
sg109
(lp2879
sg111
(lp2880
sg113
(dp2881
sg88
(lp2882
ssg116
S'AnalyzeBeat for: 4'
p2883
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp2884
g81
I0
sg82
I0
sg83
I10
sg84
I1
sg85
I5
sg86
I0
sg87
I5
sg88
I10
ssg124
S'tor (i = minSlopeI; (i > 0) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); --i)'
p2885
sg126
(dp2886
g79
(dp2887
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I1
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2888
g91
(dp2889
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2890
sg109
(lp2891
sg111
(lp2892
sg113
(dp2893
sg88
(lp2894
ssg116
g136
sg118
g2738
ssa(dp2895
g97
(dp2896
g79
(dp2897
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2898
g91
(dp2899
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2900
sg109
(lp2901
sg111
(lp2902
sg113
(dp2903
sg88
(lp2904
ssg116
S'AnalyzeBeat for: 5'
p2905
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp2906
g81
I0
sg82
I0
sg83
I15
sg84
I0
sg85
I5
sg86
I5
sg87
I5
sg88
I10
ssg124
S'tor (; (i > *onset - INF_CHK_N) && ((beat[i] - beat[i - 1]) >= (minSlope >> 2)); --i)'
p2907
sg126
(dp2908
g79
(dp2909
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg86
I1
sg87
I1
sg88
I0
ssg89
(dp2910
g91
(dp2911
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp2912
sg109
(lp2913
sg111
(lp2914
sg113
(dp2915
sg88
(lp2916
ssg116
g136
sg118
g2738
ssa(dp2917
g97
(dp2918
g79
(dp2919
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2920
g91
(dp2921
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2922
sg109
(lp2923
sg111
(lp2924
sg113
(dp2925
sg88
(lp2926
ssg116
S'AnalyzeBeat for: 6'
p2927
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp2928
g81
I0
sg82
I0
sg83
I15
sg84
I0
sg85
I5
sg86
I5
sg87
I5
sg88
I10
ssg124
S'tor (; (i > *onset - INF_CHK_N) && ((beat[i - 1] - beat[i]) > (minSlope >> 2)); --i)'
p2929
sg126
(dp2930
g79
(dp2931
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg86
I1
sg87
I1
sg88
I0
ssg89
(dp2932
g91
(dp2933
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp2934
sg109
(lp2935
sg111
(lp2936
sg113
(dp2937
sg88
(lp2938
ssg116
g136
sg118
g2738
ssa(dp2939
g97
(dp2940
g79
(dp2941
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2942
g91
(dp2943
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2944
sg109
(lp2945
sg111
(lp2946
sg113
(dp2947
sg88
(lp2948
ssg116
S'AnalyzeBeat for: 7'
p2949
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp2950
g81
I0
sg82
I0
sg83
I10
sg84
I1
sg85
I5
sg86
I0
sg87
I5
sg88
I10
ssg124
S'tor (i = maxSlopeI; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); ++i)'
p2951
sg126
(dp2952
g79
(dp2953
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I1
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp2954
g91
(dp2955
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp2956
sg109
(lp2957
sg111
(lp2958
sg113
(dp2959
sg88
(lp2960
ssg116
g136
sg118
g2738
ssa(dp2961
g97
(dp2962
g79
(dp2963
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2964
g91
(dp2965
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2966
sg109
(lp2967
sg111
(lp2968
sg113
(dp2969
sg88
(lp2970
ssg116
S'AnalyzeBeat for: 8'
p2971
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp2972
g81
I0
sg82
I0
sg83
I15
sg84
I0
sg85
I5
sg86
I5
sg87
I5
sg88
I10
ssg124
S'tor (; (i < *offset + INF_CHK_N) && ((beat[i] - beat[i - 1]) <= (maxSlope >> 2)); ++i)'
p2973
sg126
(dp2974
g79
(dp2975
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg86
I1
sg87
I1
sg88
I0
ssg89
(dp2976
g91
(dp2977
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp2978
sg109
(lp2979
sg111
(lp2980
sg113
(dp2981
sg88
(lp2982
ssg116
g136
sg118
g2738
ssa(dp2983
g97
(dp2984
g79
(dp2985
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp2986
g91
(dp2987
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp2988
sg109
(lp2989
sg111
(lp2990
sg113
(dp2991
sg88
(lp2992
ssg116
S'AnalyzeBeat for: 9'
p2993
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp2994
g81
I0
sg82
I0
sg83
I15
sg84
I0
sg85
I5
sg86
I5
sg87
I5
sg88
I10
ssg124
S'tor (; (i < *offset + BEAT_MS40) && ((beat[i - 1] - beat[i]) < (maxSlope >> 2)); ++i)'
p2995
sg126
(dp2996
g79
(dp2997
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg86
I1
sg87
I1
sg88
I0
ssg89
(dp2998
g91
(dp2999
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp3000
sg109
(lp3001
sg111
(lp3002
sg113
(dp3003
sg88
(lp3004
ssg116
g136
sg118
g2738
ssa(dp3005
g97
(dp3006
g79
(dp3007
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp3008
g91
(dp3009
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3010
sg109
(lp3011
sg111
(lp3012
sg113
(dp3013
sg88
(lp3014
(dp3015
g173
(lp3016
(dp3017
g79
(dp3018
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3019
g91
(dp3020
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3021
sg109
(lp3022
sg111
(lp3023
sg113
(dp3024
sg88
(lp3025
ssg116
S'AnalyzeBeat for: 10 if: 1 option: 1'
p3026
sg118
g2738
sa(dp3027
g79
(dp3028
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3029
g91
(dp3030
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3031
sg109
(lp3032
sg111
(lp3033
sg113
(dp3034
sg88
(lp3035
ssg116
S'AnalyzeBeat for: 10 if: 1 option: 2'
p3036
sg118
g2738
sasg185
S'if (beat[i] > maxV)'
p3037
sassg116
S'AnalyzeBeat for: 10'
p3038
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3039
g81
I0
sg82
I0
sg83
I0
sg84
I13
sg85
I0
sg86
I15
sg87
I5
sg88
I15
ssg124
S'tor (i = *onset, maxV = minV = beat[*onset]; i < *offset; ++i)'
p3040
sg126
(dp3041
g79
(dp3042
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg86
I3
sg87
I1
sg88
I0
ssg89
(dp3043
g91
(dp3044
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I3
sg87
I1
ssg94
(lp3045
sg109
(lp3046
sg111
(lp3047
sg113
(dp3048
sg88
(lp3049
ssg116
g136
sg118
g2738
ssa(dp3050
g97
(dp3051
g79
(dp3052
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3053
g91
(dp3054
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3055
sg109
(lp3056
sg111
(lp3057
sg113
(dp3058
sg88
(lp3059
ssg116
S'AnalyzeBeat for: 11'
p3060
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3061
g81
I0
sg82
I5
sg83
I15
sg84
I1
sg85
I0
sg86
I0
sg87
I30
sg88
I10
ssg124
S'tor (i = FIDMARK - BEAT_MS250;(i >= BEAT_MS80) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 0); --i)'
p3062
sg126
(dp3063
g79
(dp3064
g81
I0
sg82
I1
sg83
I3
sg84
I14
sg85
I0
sg86
I0
sg87
I6
sg88
I16
ssg89
(dp3065
g91
(dp3066
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3067
sg109
(lp3068
sg111
(lp3069
sg113
(dp3070
g25
I1
ssg88
(lp3071
ssg116
g136
sg118
g2738
ssa(dp3072
g97
(dp3073
g79
(dp3074
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3075
g91
(dp3076
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3077
sg109
(lp3078
sg111
(lp3079
sg113
(dp3080
sg88
(lp3081
ssg116
S'AnalyzeBeat for: 12'
p3082
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3083
g81
I0
sg82
I5
sg83
I10
sg84
I1
sg85
I0
sg86
I0
sg87
I30
sg88
I10
ssg124
S'tor (i = FIDMARK + BEAT_MS300; (i < BEATLGTH) && (IsoCheck(&beat[i], BEAT_MS80) == 0); ++i)'
p3084
sg126
(dp3085
g79
(dp3086
g81
I0
sg82
I1
sg83
I2
sg84
I14
sg85
I0
sg86
I0
sg87
I6
sg88
I16
ssg89
(dp3087
g91
(dp3088
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3089
sg109
(lp3090
sg111
(lp3091
sg113
(dp3092
g25
I1
ssg88
(lp3093
ssg116
g136
sg118
g2738
ssa(dp3094
g97
(dp3095
g79
(dp3096
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp3097
g91
(dp3098
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3099
sg109
(lp3100
sg111
(lp3101
sg113
(dp3102
sg88
(lp3103
(dp3104
g173
(lp3105
(dp3106
g79
(dp3107
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3108
g91
(dp3109
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3110
sg109
(lp3111
sg111
(lp3112
sg113
(dp3113
sg88
(lp3114
ssg116
S'AnalyzeBeat for: 13 if: 1 option: 1'
p3115
sg118
g2738
sa(dp3116
g79
(dp3117
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3118
g91
(dp3119
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3120
sg109
(lp3121
sg111
(lp3122
sg113
(dp3123
sg88
(lp3124
ssg116
S'AnalyzeBeat for: 13 if: 1 option: 2'
p3125
sg118
g2738
sasg185
S'if (beat[i] > maxV)'
p3126
sassg116
S'AnalyzeBeat for: 13'
p3127
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3128
g81
I0
sg82
I0
sg83
I0
sg84
I11
sg85
I0
sg86
I10
sg87
I5
sg88
I15
ssg124
S'tor (i = *onset; i < *offset; ++i)'
p3129
sg126
(dp3130
g79
(dp3131
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I2
sg87
I1
sg88
I0
ssg89
(dp3132
g91
(dp3133
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I2
sg87
I1
ssg94
(lp3134
sg109
(lp3135
sg111
(lp3136
sg113
(dp3137
sg88
(lp3138
ssg116
g136
sg118
g2738
ssasg109
(lp3139
sg111
(lp3140
sg113
(dp3141
sg88
(lp3142
(dp3143
g173
(lp3144
(dp3145
g79
(dp3146
g81
I0
sg82
I5
sg83
I12
sg84
I2
sg85
I0
sg86
I0
sg87
I30
sg88
I10
ssg89
(dp3147
g91
(dp3148
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3149
(dp3150
g97
(dp3151
g79
(dp3152
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3153
g91
(dp3154
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3155
sg109
(lp3156
sg111
(lp3157
sg113
(dp3158
sg88
(lp3159
ssg116
S'AnalyzeBeat if: 1 option: 1 for: 1'
p3160
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3161
g81
I0
sg82
I5
sg83
I10
sg84
I1
sg85
I0
sg86
I0
sg87
I30
sg88
I10
ssg124
S'tor (i = FIDMARK - ISO_LENGTH1; (i > 0) && (IsoCheck(&beat[i], ISO_LENGTH1) == 0); --i)'
p3162
sg126
(dp3163
g79
(dp3164
g81
I0
sg82
I1
sg83
I2
sg84
I14
sg85
I0
sg86
I0
sg87
I6
sg88
I16
ssg89
(dp3165
g91
(dp3166
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3167
sg109
(lp3168
sg111
(lp3169
sg113
(dp3170
g25
I1
ssg88
(lp3171
ssg116
g136
sg118
g2738
ssasg109
(lp3172
sg111
(lp3173
sg113
(dp3174
sg88
(lp3175
ssg116
S'AnalyzeBeat if: 1 option: 1'
p3176
sg118
g2738
sa(dp3177
g79
(dp3178
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3179
g91
(dp3180
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3181
sg109
(lp3182
sg111
(lp3183
sg113
(dp3184
sg88
(lp3185
ssg116
S'AnalyzeBeat if: 1 option: 2'
p3186
sg118
g2738
sasg185
S'if (i == 0)'
p3187
sa(dp3188
g173
(lp3189
(dp3190
g79
(dp3191
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3192
g91
(dp3193
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3194
sg109
(lp3195
sg111
(lp3196
sg113
(dp3197
sg88
(lp3198
ssg116
S'AnalyzeBeat if: 2 option: 1'
p3199
sg118
g2738
sa(dp3200
g79
(dp3201
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3202
g91
(dp3203
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3204
sg109
(lp3205
sg111
(lp3206
sg113
(dp3207
sg88
(lp3208
ssg116
S'AnalyzeBeat if: 2 option: 2'
p3209
sg118
g2738
sasg185
S'if (maxSlope > -minSlope)'
p3210
sa(dp3211
g173
(lp3212
(dp3213
g79
(dp3214
g81
I0
sg82
I0
sg83
I154
sg84
I11
sg85
I60
sg86
I39
sg87
I60
sg88
I125
ssg89
(dp3215
g91
(dp3216
g81
I0
sg82
I0
sg83
I6
sg84
I4
sg85
I0
sg93
I1
sg86
I8
sg87
I0
ssg94
(lp3217
(dp3218
g97
(dp3219
g79
(dp3220
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3221
g91
(dp3222
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3223
sg109
(lp3224
sg111
(lp3225
sg113
(dp3226
sg88
(lp3227
ssg116
S'AnalyzeBeat if: 3 option: 1 for: 1'
p3228
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3229
g81
I0
sg82
I0
sg83
I10
sg84
I1
sg85
I5
sg86
I0
sg87
I5
sg88
I10
ssg124
S'tor (i = maxSlopeI; (i > 0) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); --i)'
p3230
sg126
(dp3231
g79
(dp3232
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I1
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp3233
g91
(dp3234
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3235
sg109
(lp3236
sg111
(lp3237
sg113
(dp3238
sg88
(lp3239
ssg116
g136
sg118
g2738
ssa(dp3240
g97
(dp3241
g79
(dp3242
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3243
g91
(dp3244
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3245
sg109
(lp3246
sg111
(lp3247
sg113
(dp3248
sg88
(lp3249
ssg116
S'AnalyzeBeat if: 3 option: 1 for: 2'
p3250
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3251
g81
I0
sg82
I0
sg83
I15
sg84
I0
sg85
I5
sg86
I5
sg87
I5
sg88
I10
ssg124
S'tor (; (i > *onset - INF_CHK_N) && ((beat[i] - beat[i - 1]) <= (maxSlope >> 2)); --i)'
p3252
sg126
(dp3253
g79
(dp3254
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg86
I1
sg87
I1
sg88
I0
ssg89
(dp3255
g91
(dp3256
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp3257
sg109
(lp3258
sg111
(lp3259
sg113
(dp3260
sg88
(lp3261
ssg116
g136
sg118
g2738
ssa(dp3262
g97
(dp3263
g79
(dp3264
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3265
g91
(dp3266
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3267
sg109
(lp3268
sg111
(lp3269
sg113
(dp3270
sg88
(lp3271
ssg116
S'AnalyzeBeat if: 3 option: 1 for: 3'
p3272
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3273
g81
I0
sg82
I0
sg83
I15
sg84
I0
sg85
I5
sg86
I5
sg87
I5
sg88
I10
ssg124
S'tor (; (i > *onset - INF_CHK_N) && ((beat[i - 1] - beat[i]) < (maxSlope >> 2)); --i)'
p3274
sg126
(dp3275
g79
(dp3276
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg86
I1
sg87
I1
sg88
I0
ssg89
(dp3277
g91
(dp3278
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp3279
sg109
(lp3280
sg111
(lp3281
sg113
(dp3282
sg88
(lp3283
ssg116
g136
sg118
g2738
ssa(dp3284
g97
(dp3285
g79
(dp3286
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3287
g91
(dp3288
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3289
sg109
(lp3290
sg111
(lp3291
sg113
(dp3292
sg88
(lp3293
ssg116
S'AnalyzeBeat if: 3 option: 1 for: 4'
p3294
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3295
g81
I0
sg82
I0
sg83
I10
sg84
I1
sg85
I5
sg86
I0
sg87
I5
sg88
I10
ssg124
S'tor (i = minSlopeI; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); ++i)'
p3296
sg126
(dp3297
g79
(dp3298
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I1
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp3299
g91
(dp3300
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3301
sg109
(lp3302
sg111
(lp3303
sg113
(dp3304
sg88
(lp3305
ssg116
g136
sg118
g2738
ssa(dp3306
g97
(dp3307
g79
(dp3308
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3309
g91
(dp3310
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3311
sg109
(lp3312
sg111
(lp3313
sg113
(dp3314
sg88
(lp3315
ssg116
S'AnalyzeBeat if: 3 option: 1 for: 5'
p3316
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3317
g81
I0
sg82
I0
sg83
I15
sg84
I0
sg85
I5
sg86
I5
sg87
I5
sg88
I10
ssg124
S'tor (; (i < *offset + INF_CHK_N) && ((beat[i] - beat[i - 1]) >= (minSlope >> 2)); ++i)'
p3318
sg126
(dp3319
g79
(dp3320
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg86
I1
sg87
I1
sg88
I0
ssg89
(dp3321
g91
(dp3322
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp3323
sg109
(lp3324
sg111
(lp3325
sg113
(dp3326
sg88
(lp3327
ssg116
g136
sg118
g2738
ssa(dp3328
g97
(dp3329
g79
(dp3330
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3331
g91
(dp3332
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3333
sg109
(lp3334
sg111
(lp3335
sg113
(dp3336
sg88
(lp3337
ssg116
S'AnalyzeBeat if: 3 option: 1 for: 6'
p3338
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3339
g81
I0
sg82
I0
sg83
I15
sg84
I0
sg85
I5
sg86
I5
sg87
I5
sg88
I10
ssg124
S'tor (; (i < *offset + BEAT_MS40) && ((beat[i - 1] - beat[i]) > (minSlope >> 2)); ++i)'
p3340
sg126
(dp3341
g79
(dp3342
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg86
I1
sg87
I1
sg88
I0
ssg89
(dp3343
g91
(dp3344
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp3345
sg109
(lp3346
sg111
(lp3347
sg113
(dp3348
sg88
(lp3349
ssg116
g136
sg118
g2738
ssasg109
(lp3350
sg111
(lp3351
sg113
(dp3352
sg88
(lp3353
(dp3354
g173
(lp3355
(dp3356
g79
(dp3357
g81
I0
sg82
I0
sg83
I11
sg84
I1
sg85
I5
sg86
I1
sg87
I5
sg88
I10
ssg89
(dp3358
g91
(dp3359
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3360
(dp3361
g97
(dp3362
g79
(dp3363
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3364
g91
(dp3365
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3366
sg109
(lp3367
sg111
(lp3368
sg113
(dp3369
sg88
(lp3370
ssg116
S'AnalyzeBeat if: 3 option: 1 if: 1 option: 1 for: 1'
p3371
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3372
g81
I0
sg82
I0
sg83
I10
sg84
I0
sg85
I5
sg86
I0
sg87
I5
sg88
I10
ssg124
S'tor (; (i > 0) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); --i)'
p3373
sg126
(dp3374
g79
(dp3375
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp3376
g91
(dp3377
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3378
sg109
(lp3379
sg111
(lp3380
sg113
(dp3381
sg88
(lp3382
ssg116
g136
sg118
g2738
ssasg109
(lp3383
sg111
(lp3384
sg113
(dp3385
sg88
(lp3386
ssg116
S'AnalyzeBeat if: 3 option: 1 if: 1 option: 1'
p3387
sg118
g2738
sasg185
S'if (i > *onset - INF_CHK_N)'
p3388
sa(dp3389
g173
(lp3390
(dp3391
g79
(dp3392
g81
I0
sg82
I0
sg83
I11
sg84
I1
sg85
I5
sg86
I1
sg87
I5
sg88
I10
ssg89
(dp3393
g91
(dp3394
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3395
(dp3396
g97
(dp3397
g79
(dp3398
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3399
g91
(dp3400
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3401
sg109
(lp3402
sg111
(lp3403
sg113
(dp3404
sg88
(lp3405
ssg116
S'AnalyzeBeat if: 3 option: 1 if: 2 option: 1 for: 1'
p3406
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3407
g81
I0
sg82
I0
sg83
I10
sg84
I0
sg85
I5
sg86
I0
sg87
I5
sg88
I10
ssg124
S'tor (; (i > 0) && ((beat[i - 1] - beat[i]) > (maxSlope >> 2)); --i)'
p3408
sg126
(dp3409
g79
(dp3410
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp3411
g91
(dp3412
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3413
sg109
(lp3414
sg111
(lp3415
sg113
(dp3416
sg88
(lp3417
ssg116
g136
sg118
g2738
ssasg109
(lp3418
sg111
(lp3419
sg113
(dp3420
sg88
(lp3421
ssg116
S'AnalyzeBeat if: 3 option: 1 if: 2 option: 1'
p3422
sg118
g2738
sasg185
S'if (i > *onset - INF_CHK_N)'
p3423
sa(dp3424
g173
(lp3425
(dp3426
g79
(dp3427
g81
I0
sg82
I0
sg83
I10
sg84
I1
sg85
I5
sg86
I1
sg87
I5
sg88
I10
ssg89
(dp3428
g91
(dp3429
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3430
(dp3431
g97
(dp3432
g79
(dp3433
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3434
g91
(dp3435
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3436
sg109
(lp3437
sg111
(lp3438
sg113
(dp3439
sg88
(lp3440
ssg116
S'AnalyzeBeat if: 3 option: 1 if: 3 option: 1 for: 1'
p3441
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3442
g81
I0
sg82
I0
sg83
I10
sg84
I0
sg85
I5
sg86
I0
sg87
I5
sg88
I10
ssg124
S'tor (; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); ++i)'
p3443
sg126
(dp3444
g79
(dp3445
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp3446
g91
(dp3447
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3448
sg109
(lp3449
sg111
(lp3450
sg113
(dp3451
sg88
(lp3452
ssg116
g136
sg118
g2738
ssasg109
(lp3453
sg111
(lp3454
sg113
(dp3455
sg88
(lp3456
ssg116
S'AnalyzeBeat if: 3 option: 1 if: 3 option: 1'
p3457
sg118
g2738
sasg185
S'if (i < *offset + INF_CHK_N)'
p3458
sa(dp3459
g173
(lp3460
(dp3461
g79
(dp3462
g81
I0
sg82
I0
sg83
I36
sg84
I2
sg85
I15
sg86
I8
sg87
I15
sg88
I31
ssg89
(dp3463
g91
(dp3464
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I2
sg87
I0
ssg94
(lp3465
(dp3466
g97
(dp3467
g79
(dp3468
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3469
g91
(dp3470
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3471
sg109
(lp3472
sg111
(lp3473
sg113
(dp3474
sg88
(lp3475
ssg116
S'AnalyzeBeat if: 3 option: 1 if: 4 option: 1 for: 1'
p3476
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3477
g81
I0
sg82
I0
sg83
I10
sg84
I0
sg85
I5
sg86
I0
sg87
I5
sg88
I10
ssg124
S'tor (; (i < BEATLGTH) && ((beat[i - 1] - beat[i]) < (minSlope >> 2)); ++i)'
p3478
sg126
(dp3479
g79
(dp3480
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp3481
g91
(dp3482
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3483
sg109
(lp3484
sg111
(lp3485
sg113
(dp3486
sg88
(lp3487
ssg116
g136
sg118
g2738
ssa(dp3488
g97
(dp3489
g79
(dp3490
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3491
g91
(dp3492
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3493
sg109
(lp3494
sg111
(lp3495
sg113
(dp3496
sg88
(lp3497
ssg116
S'AnalyzeBeat if: 3 option: 1 if: 4 option: 1 for: 2'
p3498
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3499
g81
I0
sg82
I0
sg83
I15
sg84
I0
sg85
I5
sg86
I5
sg87
I5
sg88
I10
ssg124
S'tor (; (i < *offset + BEAT_MS60) && (beat[i] - beat[i - 1] > (minSlope >> 2)); ++i)'
p3500
sg126
(dp3501
g79
(dp3502
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg86
I1
sg87
I1
sg88
I0
ssg89
(dp3503
g91
(dp3504
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I1
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp3505
sg109
(lp3506
sg111
(lp3507
sg113
(dp3508
sg88
(lp3509
ssg116
g136
sg118
g2738
ssasg109
(lp3510
sg111
(lp3511
sg113
(dp3512
sg88
(lp3513
(dp3514
g173
(lp3515
(dp3516
g79
(dp3517
g81
I0
sg82
I0
sg83
I10
sg84
I1
sg85
I5
sg86
I1
sg87
I5
sg88
I10
ssg89
(dp3518
g91
(dp3519
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3520
(dp3521
g97
(dp3522
g79
(dp3523
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3524
g91
(dp3525
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3526
sg109
(lp3527
sg111
(lp3528
sg113
(dp3529
sg88
(lp3530
ssg116
S'AnalyzeBeat if: 3 option: 1 if: 4 option: 1 if: 1 option: 1 for: 1'
p3531
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3532
g81
I0
sg82
I0
sg83
I10
sg84
I0
sg85
I5
sg86
I0
sg87
I5
sg88
I10
ssg124
S'tor (; (i < BEATLGTH) && (beat[i] - beat[i - 1] < (minSlope >> 2)); ++i)'
p3533
sg126
(dp3534
g79
(dp3535
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp3536
g91
(dp3537
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3538
sg109
(lp3539
sg111
(lp3540
sg113
(dp3541
sg88
(lp3542
ssg116
g136
sg118
g2738
ssasg109
(lp3543
sg111
(lp3544
sg113
(dp3545
sg88
(lp3546
ssg116
S'AnalyzeBeat if: 3 option: 1 if: 4 option: 1 if: 1 option: 1'
p3547
sg118
g2738
sasg185
S'if (i < *offset + BEAT_MS60)'
p3548
sassg116
S'AnalyzeBeat if: 3 option: 1 if: 4 option: 1'
p3549
sg118
g2738
sasg185
S'if (i < *offset + BEAT_MS40)'
p3550
sassg116
S'AnalyzeBeat if: 3 option: 1'
p3551
sg118
g2738
sasg185
S'if (maxSlopeI < minSlopeI)'
p3552
sa(dp3553
g173
(lp3554
(dp3555
g79
(dp3556
g81
I0
sg82
I0
sg83
I11
sg84
I1
sg85
I5
sg86
I1
sg87
I5
sg88
I10
ssg89
(dp3557
g91
(dp3558
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3559
(dp3560
g97
(dp3561
g79
(dp3562
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3563
g91
(dp3564
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3565
sg109
(lp3566
sg111
(lp3567
sg113
(dp3568
sg88
(lp3569
ssg116
S'AnalyzeBeat if: 4 option: 1 for: 1'
p3570
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3571
g81
I0
sg82
I0
sg83
I10
sg84
I0
sg85
I5
sg86
I0
sg87
I5
sg88
I10
ssg124
S'tor (; (i > 0) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); --i)'
p3572
sg126
(dp3573
g79
(dp3574
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp3575
g91
(dp3576
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3577
sg109
(lp3578
sg111
(lp3579
sg113
(dp3580
sg88
(lp3581
ssg116
g136
sg118
g2738
ssasg109
(lp3582
sg111
(lp3583
sg113
(dp3584
sg88
(lp3585
ssg116
S'AnalyzeBeat if: 4 option: 1'
p3586
sg118
g2738
sasg185
S'if (i > *onset - INF_CHK_N)'
p3587
sa(dp3588
g173
(lp3589
(dp3590
g79
(dp3591
g81
I0
sg82
I0
sg83
I11
sg84
I1
sg85
I5
sg86
I1
sg87
I5
sg88
I10
ssg89
(dp3592
g91
(dp3593
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3594
(dp3595
g97
(dp3596
g79
(dp3597
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3598
g91
(dp3599
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3600
sg109
(lp3601
sg111
(lp3602
sg113
(dp3603
sg88
(lp3604
ssg116
S'AnalyzeBeat if: 5 option: 1 for: 1'
p3605
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3606
g81
I0
sg82
I0
sg83
I10
sg84
I0
sg85
I5
sg86
I0
sg87
I5
sg88
I10
ssg124
S'tor (; (i > 0) && ((beat[i - 1] - beat[i]) < (minSlope >> 2)); --i)'
p3607
sg126
(dp3608
g79
(dp3609
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp3610
g91
(dp3611
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3612
sg109
(lp3613
sg111
(lp3614
sg113
(dp3615
sg88
(lp3616
ssg116
g136
sg118
g2738
ssasg109
(lp3617
sg111
(lp3618
sg113
(dp3619
sg88
(lp3620
ssg116
S'AnalyzeBeat if: 5 option: 1'
p3621
sg118
g2738
sasg185
S'if (i > *onset - INF_CHK_N)'
p3622
sa(dp3623
g173
(lp3624
(dp3625
g79
(dp3626
g81
I0
sg82
I0
sg83
I10
sg84
I1
sg85
I5
sg86
I1
sg87
I5
sg88
I10
ssg89
(dp3627
g91
(dp3628
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3629
(dp3630
g97
(dp3631
g79
(dp3632
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3633
g91
(dp3634
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3635
sg109
(lp3636
sg111
(lp3637
sg113
(dp3638
sg88
(lp3639
ssg116
S'AnalyzeBeat if: 6 option: 1 for: 1'
p3640
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3641
g81
I0
sg82
I0
sg83
I10
sg84
I0
sg85
I5
sg86
I0
sg87
I5
sg88
I10
ssg124
S'tor (; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); ++i)'
p3642
sg126
(dp3643
g79
(dp3644
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp3645
g91
(dp3646
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3647
sg109
(lp3648
sg111
(lp3649
sg113
(dp3650
sg88
(lp3651
ssg116
g136
sg118
g2738
ssasg109
(lp3652
sg111
(lp3653
sg113
(dp3654
sg88
(lp3655
ssg116
S'AnalyzeBeat if: 6 option: 1'
p3656
sg118
g2738
sasg185
S'if (i < *offset + INF_CHK_N)'
p3657
sa(dp3658
g173
(lp3659
(dp3660
g79
(dp3661
g81
I0
sg82
I0
sg83
I10
sg84
I1
sg85
I5
sg86
I1
sg87
I5
sg88
I10
ssg89
(dp3662
g91
(dp3663
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3664
(dp3665
g97
(dp3666
g79
(dp3667
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3668
g91
(dp3669
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3670
sg109
(lp3671
sg111
(lp3672
sg113
(dp3673
sg88
(lp3674
ssg116
S'AnalyzeBeat if: 7 option: 1 for: 1'
p3675
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3676
g81
I0
sg82
I0
sg83
I10
sg84
I0
sg85
I5
sg86
I0
sg87
I5
sg88
I10
ssg124
S'tor (; (i < BEATLGTH) && ((beat[i - 1] - beat[i]) > (maxSlope >> 2)); ++i)'
p3677
sg126
(dp3678
g79
(dp3679
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp3680
g91
(dp3681
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3682
sg109
(lp3683
sg111
(lp3684
sg113
(dp3685
sg88
(lp3686
ssg116
g136
sg118
g2738
ssasg109
(lp3687
sg111
(lp3688
sg113
(dp3689
sg88
(lp3690
ssg116
S'AnalyzeBeat if: 7 option: 1'
p3691
sg118
g2738
sasg185
S'if (i < *offset + BEAT_MS40)'
p3692
sa(dp3693
g173
(lp3694
(dp3695
g79
(dp3696
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp3697
g91
(dp3698
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3699
sg109
(lp3700
sg111
(lp3701
sg113
(dp3702
sg88
(lp3703
ssg116
S'AnalyzeBeat if: 8 option: 1'
p3704
sg118
g2738
sasg185
S'if ((isoStart == ISO_LENGTH1 - 1) && (*onset > isoStart)) '
p3705
sa(dp3706
g173
(lp3707
(dp3708
g79
(dp3709
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp3710
g91
(dp3711
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3712
sg109
(lp3713
sg111
(lp3714
sg113
(dp3715
sg88
(lp3716
ssg116
S'AnalyzeBeat if: 9 option: 1'
p3717
sg118
g2738
sasg185
S'else if (*onset - isoStart < BEAT_MS50)'
p3718
sa(dp3719
g173
(lp3720
(dp3721
g79
(dp3722
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp3723
g91
(dp3724
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3725
sg109
(lp3726
sg111
(lp3727
sg113
(dp3728
sg88
(lp3729
ssg116
S'AnalyzeBeat if: 10 option: 1'
p3730
sg118
g2738
sasg185
S'if (isoEnd - *offset < BEAT_MS50)'
p3731
sa(dp3732
g173
(lp3733
(dp3734
g79
(dp3735
g81
I0
sg82
I0
sg83
I35
sg84
I20
sg85
I5
sg86
I21
sg87
I10
sg88
I26
ssg89
(dp3736
g91
(dp3737
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3738
(dp3739
g97
(dp3740
g79
(dp3741
g81
I0
sg82
I0
sg83
I2
sg84
I3
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp3742
g91
(dp3743
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3744
sg109
(lp3745
sg111
(lp3746
sg113
(dp3747
sg88
(lp3748
(dp3749
g173
(lp3750
(dp3751
g79
(dp3752
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3753
g91
(dp3754
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3755
sg109
(lp3756
sg111
(lp3757
sg113
(dp3758
sg88
(lp3759
ssg116
S'AnalyzeBeat if: 11 option: 1 for: 1 if: 1 option: 1'
p3760
sg118
g2738
sasg185
S'if (slope > maxSlope)'
p3761
sassg116
S'AnalyzeBeat if: 11 option: 1 for: 1'
p3762
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3763
g81
I0
sg82
I0
sg83
I25
sg84
I18
sg85
I0
sg86
I20
sg87
I5
sg88
I15
ssg124
S'tor (i = maxSlopeI = *offset, maxSlope = beat[*offset] - beat[*offset - 1];(i < *offset + BEAT_MS100) && (i < BEATLGTH); ++i)'
p3764
sg126
(dp3765
g79
(dp3766
g81
I0
sg82
I0
sg83
I3
sg84
I3
sg85
I0
sg86
I4
sg87
I1
sg88
I0
ssg89
(dp3767
g91
(dp3768
g81
I0
sg82
I0
sg83
I3
sg84
I3
sg85
I0
sg93
I1
sg86
I4
sg87
I1
ssg94
(lp3769
sg109
(lp3770
sg111
(lp3771
sg113
(dp3772
sg88
(lp3773
ssg116
g136
sg118
g2738
ssasg109
(lp3774
sg111
(lp3775
sg113
(dp3776
sg88
(lp3777
(dp3778
g173
(lp3779
(dp3780
g79
(dp3781
g81
I0
sg82
I0
sg83
I10
sg84
I2
sg85
I5
sg86
I1
sg87
I5
sg88
I10
ssg89
(dp3782
g91
(dp3783
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3784
(dp3785
g97
(dp3786
g79
(dp3787
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3788
g91
(dp3789
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3790
sg109
(lp3791
sg111
(lp3792
sg113
(dp3793
sg88
(lp3794
ssg116
S'AnalyzeBeat if: 11 option: 1 if: 1 option: 1 for: 1'
p3795
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3796
g81
I0
sg82
I0
sg83
I10
sg84
I1
sg85
I5
sg86
I0
sg87
I5
sg88
I10
ssg124
S'tor (i = maxSlopeI; (i < BEATLGTH) && (beat[i] - beat[i - 1] > (maxSlope >> 1)); ++i)'
p3797
sg126
(dp3798
g79
(dp3799
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I1
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp3800
g91
(dp3801
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3802
sg109
(lp3803
sg111
(lp3804
sg113
(dp3805
sg88
(lp3806
ssg116
g136
sg118
g2738
ssasg109
(lp3807
sg111
(lp3808
sg113
(dp3809
sg88
(lp3810
ssg116
S'AnalyzeBeat if: 11 option: 1 if: 1 option: 1'
p3811
sg118
g2738
sasg185
S'if (maxSlope > 0)'
p3812
sassg116
S'AnalyzeBeat if: 11 option: 1'
p3813
sg118
g2738
sasg185
S'if ((beat[*onset] - beat[*offset] > ((maxV - minV) >> 2) + ((maxV - minV) >> 3)))'
p3814
sa(dp3815
g173
(lp3816
(dp3817
g79
(dp3818
g81
I0
sg82
I5
sg83
I16
sg84
I1
sg85
I0
sg86
I6
sg87
I30
sg88
I10
ssg89
(dp3819
g91
(dp3820
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3821
(dp3822
g97
(dp3823
g79
(dp3824
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3825
g91
(dp3826
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3827
sg109
(lp3828
sg111
(lp3829
sg113
(dp3830
sg88
(lp3831
ssg116
S'AnalyzeBeat if: 12 option: 1 for: 1'
p3832
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3833
g81
I0
sg82
I5
sg83
I15
sg84
I0
sg85
I0
sg86
I5
sg87
I30
sg88
I10
ssg124
S'tor (; (i < *onset - BEAT_MS50) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 1); ++i)'
p3834
sg126
(dp3835
g79
(dp3836
g81
I0
sg82
I1
sg83
I3
sg84
I13
sg85
I0
sg86
I1
sg87
I6
sg88
I16
ssg89
(dp3837
g91
(dp3838
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp3839
sg109
(lp3840
sg111
(lp3841
sg113
(dp3842
g25
I1
ssg88
(lp3843
ssg116
g136
sg118
g2738
ssasg109
(lp3844
sg111
(lp3845
sg113
(dp3846
sg88
(lp3847
ssg116
S'AnalyzeBeat if: 12 option: 1'
p3848
sg118
g2738
sasg185
S'if (*beatBegin == FIDMARK - BEAT_MS250)'
p3849
sa(dp3850
g173
(lp3851
(dp3852
g79
(dp3853
g81
I0
sg82
I10
sg83
I21
sg84
I1
sg85
I0
sg86
I13
sg87
I60
sg88
I22
ssg89
(dp3854
g91
(dp3855
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3856
(dp3857
g97
(dp3858
g79
(dp3859
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3860
g91
(dp3861
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3862
sg109
(lp3863
sg111
(lp3864
sg113
(dp3865
sg88
(lp3866
ssg116
S'AnalyzeBeat if: 13 option: 1 for: 1'
p3867
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3868
g81
I0
sg82
I5
sg83
I10
sg84
I0
sg85
I0
sg86
I5
sg87
I30
sg88
I10
ssg124
S'tor (; (i < *onset) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 0); ++i)'
p3869
sg126
(dp3870
g79
(dp3871
g81
I0
sg82
I1
sg83
I2
sg84
I13
sg85
I0
sg86
I1
sg87
I6
sg88
I16
ssg89
(dp3872
g91
(dp3873
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp3874
sg109
(lp3875
sg111
(lp3876
sg113
(dp3877
g25
I1
ssg88
(lp3878
ssg116
g136
sg118
g2738
ssasg109
(lp3879
sg111
(lp3880
sg113
(dp3881
sg88
(lp3882
(dp3883
g173
(lp3884
(dp3885
g79
(dp3886
g81
I0
sg82
I5
sg83
I11
sg84
I1
sg85
I0
sg86
I7
sg87
I30
sg88
I11
ssg89
(dp3887
g91
(dp3888
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3889
(dp3890
g97
(dp3891
g79
(dp3892
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3893
g91
(dp3894
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3895
sg109
(lp3896
sg111
(lp3897
sg113
(dp3898
sg88
(lp3899
ssg116
S'AnalyzeBeat if: 13 option: 1 if: 1 option: 1 for: 1'
p3900
sg118
g2738
ssg120
I5
sg121
g2476
sg79
(dp3901
g81
I0
sg82
I5
sg83
I10
sg84
I0
sg85
I0
sg86
I5
sg87
I30
sg88
I10
ssg124
S'tor (; (i < *onset) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 1); ++i)'
p3902
sg126
(dp3903
g79
(dp3904
g81
I0
sg82
I1
sg83
I2
sg84
I13
sg85
I0
sg86
I1
sg87
I6
sg88
I16
ssg89
(dp3905
g91
(dp3906
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp3907
sg109
(lp3908
sg111
(lp3909
sg113
(dp3910
g25
I1
ssg88
(lp3911
ssg116
g136
sg118
g2738
ssasg109
(lp3912
sg111
(lp3913
sg113
(dp3914
sg88
(lp3915
(dp3916
g173
(lp3917
(dp3918
g79
(dp3919
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp3920
g91
(dp3921
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp3922
sg109
(lp3923
sg111
(lp3924
sg113
(dp3925
sg88
(lp3926
ssg116
S'AnalyzeBeat if: 13 option: 1 if: 1 option: 1 if: 1 option: 1'
p3927
sg118
g2738
sasg185
S'if (i < *onset)'
p3928
sassg116
S'AnalyzeBeat if: 13 option: 1 if: 1 option: 1'
p3929
sg118
g2738
sasg185
S'if (i < *onset)'
p3930
sassg116
S'AnalyzeBeat if: 13 option: 1'
p3931
sg118
g2738
sasg185
S'else if (*beatBegin == BEAT_MS80 - 1)'
p3932
sassg116
g26
sg118
g2738
sa(dp3933
g79
(dp3934
g81
F714.0
sg82
F1504.0
sg83
F125501.0
sg84
F38328.0
sg85
F106784.0
sg86
F4233.0
sg87
F78819.0
sg88
F103617.0
ssg89
(dp3935
g91
(dp3936
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3937
sg109
(lp3938
sg111
(lp3939
sg113
(dp3940
g5
I2
sg15
I1
ssg88
(lp3941
ssg116
g27
sg118
S'BDAC.CPP'
p3942
sa(dp3943
g79
(dp3944
g81
F922.0
sg82
F1512.0
sg83
F125853.0
sg84
F39220.0
sg85
F107084.0
sg86
F4445.0
sg87
F79556.0
sg88
F104586.0
ssg89
(dp3945
g91
(dp3946
g81
I4
sg82
I2
sg83
I7
sg84
I13
sg85
I0
sg93
I1
sg86
I6
sg87
I3
ssg94
(lp3947
(dp3948
g97
(dp3949
g79
(dp3950
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp3951
g91
(dp3952
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3953
sg109
(lp3954
sg111
(lp3955
sg113
(dp3956
sg88
(lp3957
ssg116
S'BeatDetectAndClassify for: 1'
p3958
sg118
g3942
ssg120
I5
sg121
g2476
sg79
(dp3959
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I10
sg88
I5
ssg124
S'tor (i = 0; i < BeatQueCount; ++i)'
p3960
sg126
(dp3961
g79
(dp3962
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp3963
g91
(dp3964
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3965
sg109
(lp3966
sg111
(lp3967
sg113
(dp3968
sg88
(lp3969
ssg116
g136
sg118
g3942
ssa(dp3970
g97
(dp3971
g79
(dp3972
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I1
sg88
I1
ssg89
(dp3973
g91
(dp3974
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp3975
sg109
(lp3976
sg111
(lp3977
sg113
(dp3978
sg88
(lp3979
(dp3980
g173
(lp3981
(dp3982
g79
(dp3983
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp3984
g91
(dp3985
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp3986
sg109
(lp3987
sg111
(lp3988
sg113
(dp3989
sg88
(lp3990
ssg116
S'BeatDetectAndClassify for: 2 if: 1 option: 1'
p3991
sg118
g3942
sasg185
S'if (++j == ECG_BUFFER_LENGTH)'
p3992
sassg116
S'BeatDetectAndClassify for: 2'
p3993
sg118
g3942
ssg120
I200
sg121
g122
sg79
(dp3994
g81
I200
sg82
I0
sg83
I0
sg84
I401
sg85
I0
sg86
I200
sg87
I400
sg88
I400
ssg124
S'tor (i = 0; i < (SAMPLE_RATE / BEAT_SAMPLE_RATE) * BEATLGTH; ++i)'
p3995
sg126
(dp3996
g79
(dp3997
g81
I1
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I1
sg87
I1
sg88
I0
ssg89
(dp3998
g91
(dp3999
g81
I1
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp4000
sg109
(lp4001
sg111
(lp4002
sg113
(dp4003
sg88
(lp4004
ssg116
g136
sg118
g3942
ssa(dp4005
g97
(dp4006
g79
(dp4007
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4008
g91
(dp4009
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4010
sg109
(lp4011
sg111
(lp4012
sg113
(dp4013
sg88
(lp4014
ssg116
S'BeatDetectAndClassify for: 3'
p4015
sg118
g3942
ssg120
I5
sg121
g2476
sg79
(dp4016
g81
I0
sg82
I0
sg83
I10
sg84
I6
sg85
I0
sg86
I0
sg87
I5
sg88
I5
ssg124
S'tor (i = 0; i < BeatQueCount - 1; ++i)'
p4017
sg126
(dp4018
g79
(dp4019
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp4020
g91
(dp4021
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp4022
sg109
(lp4023
sg111
(lp4024
sg113
(dp4025
sg88
(lp4026
ssg116
g136
sg118
g3942
ssasg109
(lp4027
sg111
(lp4028
sg113
(dp4029
g5
I2
sg75
I2
sg15
I1
sg29
I1
sg64
I1
ssg88
(lp4030
(dp4031
g173
(lp4032
(dp4033
g79
(dp4034
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4035
g91
(dp4036
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4037
sg109
(lp4038
sg111
(lp4039
sg113
(dp4040
sg88
(lp4041
ssg116
S'BeatDetectAndClassify if: 1 option: 1'
p4042
sg118
g3942
sasg185
S'if (++ECGBufferIndex == ECG_BUFFER_LENGTH)'
p4043
sa(dp4044
g173
(lp4045
(dp4046
g79
(dp4047
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp4048
g91
(dp4049
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp4050
sg109
(lp4051
sg111
(lp4052
sg113
(dp4053
sg88
(lp4054
ssg116
S'BeatDetectAndClassify if: 2 option: 1'
p4055
sg118
g3942
sasg185
S'if (detectDelay != 0)'
p4056
sa(dp4057
g173
(lp4058
(dp4059
g79
(dp4060
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4061
g91
(dp4062
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4063
sg109
(lp4064
sg111
(lp4065
sg113
(dp4066
sg88
(lp4067
ssg116
S'BeatDetectAndClassify if: 3 option: 1'
p4068
sg118
g3942
sasg185
S'if ((BeatQue[0] < (BEATLGTH - FIDMARK) * (SAMPLE_RATE / BEAT_SAMPLE_RATE))'
p4069
sa(dp4070
g173
(lp4071
(dp4072
g79
(dp4073
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4074
g91
(dp4075
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4076
sg109
(lp4077
sg111
(lp4078
sg113
(dp4079
sg88
(lp4080
ssg116
S'BeatDetectAndClassify if: 4 option: 1'
p4081
sg118
g3942
sa(dp4082
g79
(dp4083
g81
I2
sg82
I2
sg83
I2
sg84
I2
sg85
I0
sg86
I2
sg87
I0
sg88
I0
ssg89
(dp4084
g91
(dp4085
g81
I2
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg93
I1
sg86
I2
sg87
I0
ssg94
(lp4086
sg109
(lp4087
sg111
(lp4088
sg113
(dp4089
g66
I1
sg67
I1
ssg88
(lp4090
ssg116
S'BeatDetectAndClassify if: 4 option: 2'
p4091
sg118
g3942
sasg185
S'if (domType == -1)'
p4092
sa(dp4093
g173
(lp4094
(dp4095
g79
(dp4096
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4097
g91
(dp4098
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4099
sg109
(lp4100
sg111
(lp4101
sg113
(dp4102
sg88
(lp4103
ssg116
S'BeatDetectAndClassify if: 5 option: 1'
p4104
sg118
g3942
sasg185
S'if (j < 0)'
p4105
sa(dp4106
g173
(lp4107
(dp4108
g79
(dp4109
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg86
I2
sg87
I0
sg88
I0
ssg89
(dp4110
g91
(dp4111
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg93
I1
sg86
I2
sg87
I0
ssg94
(lp4112
sg109
(lp4113
sg111
(lp4114
sg113
(dp4115
sg88
(lp4116
ssg116
S'BeatDetectAndClassify if: 6 option: 1'
p4117
sg118
g3942
sasg185
S'if (InitBeatFlag)'
p4118
sa(dp4119
g173
(lp4120
(dp4121
g79
(dp4122
g81
I0
sg82
I1
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4123
g91
(dp4124
g81
I0
sg82
I1
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4125
sg109
(lp4126
sg111
(lp4127
sg113
(dp4128
sg88
(lp4129
ssg116
S'BeatDetectAndClassify if: 7 option: 1'
p4130
sg118
g3942
sasg185
S'if (*beatType == 100)'
p4131
sa(dp4132
g173
(lp4133
(dp4134
g79
(dp4135
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4136
g91
(dp4137
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4138
sg109
(lp4139
sg111
(lp4140
sg113
(dp4141
sg88
(lp4142
ssg116
S'BeatDetectAndClassify if: 8 option: 1'
p4143
sg118
g3942
sa(dp4144
g79
(dp4145
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4146
g91
(dp4147
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4148
sg109
(lp4149
sg111
(lp4150
sg113
(dp4151
sg88
(lp4152
ssg116
S'BeatDetectAndClassify if: 8 option: 2'
p4153
sg118
g3942
sasg185
S'if (fidAdj > MS80)'
p4154
sassg116
g28
sg118
g3942
sa(dp4155
g79
(dp4156
g81
I0
sg82
I0
sg83
I200
sg84
I101
sg85
I300
sg86
I0
sg87
I100
sg88
I100
ssg89
(dp4157
g91
(dp4158
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4159
(dp4160
g97
(dp4161
g79
(dp4162
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I3
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4163
g91
(dp4164
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I3
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4165
sg109
(lp4166
sg111
(lp4167
sg113
(dp4168
sg88
(lp4169
ssg116
S'DownSampleBeat for: 1'
p4170
sg118
g3942
ssg120
I100
sg121
g122
sg79
(dp4171
g81
I0
sg82
I0
sg83
I200
sg84
I101
sg85
I300
sg86
I0
sg87
I100
sg88
I100
ssg124
S'tor (i = 0; i < BEATLGTH; ++i)'
p4172
sg126
(dp4173
g79
(dp4174
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp4175
g91
(dp4176
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp4177
sg109
(lp4178
sg111
(lp4179
sg113
(dp4180
sg88
(lp4181
ssg116
g136
sg118
g3942
ssasg109
(lp4182
sg111
(lp4183
sg113
(dp4184
sg88
(lp4185
ssg116
g29
sg118
g3942
sa(dp4186
g79
(dp4187
g81
I18
sg82
I14
sg83
I29
sg84
I208
sg85
I4
sg86
I3
sg87
I117
sg88
I137
ssg89
(dp4188
g91
(dp4189
g81
I0
sg82
I1
sg83
I0
sg84
I5
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4190
sg109
(lp4191
sg111
(lp4192
sg113
(dp4193
g31
I1
sg76
I1
sg35
I1
sg33
I1
sg36
I1
ssg88
(lp4194
(dp4195
g173
(lp4196
(dp4197
g79
(dp4198
g81
I9
sg82
I7
sg83
I15
sg84
I106
sg85
I2
sg86
I1
sg87
I60
sg88
I69
ssg89
(dp4199
g91
(dp4200
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4201
sg109
(lp4202
sg111
(lp4203
sg113
(dp4204
g31
I1
sg34
I1
sg35
I1
sg33
I1
sg36
I1
ssg88
(lp4205
ssg116
S'QRSFilter if: 1 option: 1'
p4206
sg118
S'QRSFILT.CPP'
p4207
sasg185
S'if (init)'
p4208
sassg116
g30
sg118
g4207
sa(dp4209
g79
(dp4210
g81
I5
sg82
I1
sg83
I6
sg84
I25
sg85
I2
sg86
I1
sg87
I11
sg88
I13
ssg89
(dp4211
g91
(dp4212
g81
I3
sg82
I1
sg83
I5
sg84
I9
sg85
I2
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp4213
sg109
(lp4214
sg111
(lp4215
sg113
(dp4216
sg88
(lp4217
(dp4218
g173
(lp4219
(dp4220
g79
(dp4221
g81
I0
sg82
I0
sg83
I0
sg84
I14
sg85
I0
sg86
I0
sg87
I10
sg88
I10
ssg89
(dp4222
g91
(dp4223
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4224
(dp4225
g97
(dp4226
g79
(dp4227
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4228
g91
(dp4229
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4230
sg109
(lp4231
sg111
(lp4232
sg113
(dp4233
sg88
(lp4234
ssg116
S'lpfilt if: 1 option: 1 for: 1'
p4235
sg118
g4207
ssg120
I10
sg121
g122
sg79
(dp4236
g81
I0
sg82
I0
sg83
I0
sg84
I11
sg85
I0
sg86
I0
sg87
I10
sg88
I10
ssg124
S'tor (ptr = 0; ptr < LPBUFFER_LGTH; ++ptr)'
p4237
sg126
(dp4238
g79
(dp4239
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp4240
g91
(dp4241
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp4242
sg109
(lp4243
sg111
(lp4244
sg113
(dp4245
sg88
(lp4246
ssg116
g136
sg118
g4207
ssasg109
(lp4247
sg111
(lp4248
sg113
(dp4249
sg88
(lp4250
ssg116
S'lpfilt if: 1 option: 1'
p4251
sg118
g4207
sasg185
S'if (init)'
p4252
sa(dp4253
g173
(lp4254
(dp4255
g79
(dp4256
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4257
g91
(dp4258
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4259
sg109
(lp4260
sg111
(lp4261
sg113
(dp4262
sg88
(lp4263
ssg116
S'lpfilt if: 2 option: 1'
p4264
sg118
g4207
sasg185
S'if (halfPtr < 0) '
p4265
sa(dp4266
g173
(lp4267
(dp4268
g79
(dp4269
g81
I2
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4270
g91
(dp4271
g81
I2
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4272
sg109
(lp4273
sg111
(lp4274
sg113
(dp4275
sg88
(lp4276
ssg116
S'lpfilt if: 3 option: 1'
p4277
sg118
g4207
sasg185
S'if (++ptr == LPBUFFER_LGTH) '
p4278
sassg116
g31
sg118
g4207
sa(dp4279
g79
(dp4280
g81
F0.0
sg82
F0.0
sg83
F0.0
sg84
F9.0
sg85
F0.0
sg86
F0.0
sg87
F8.0
sg88
F8.0
ssg89
(dp4281
g91
(dp4282
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4283
(dp4284
g97
(dp4285
g79
(dp4286
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4287
g91
(dp4288
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4289
sg109
(lp4290
sg111
(lp4291
sg113
(dp4292
sg88
(lp4293
ssg116
S'testfunction for: 1'
p4294
sg118
g4207
ssg120
F8.0
sg121
g122
sg79
(dp4295
g81
F0.0
sg82
F0.0
sg83
F0.0
sg84
F9.0
sg85
F0.0
sg86
F0.0
sg87
F8.0
sg88
F8.0
ssg124
S'tor (int i = 0; i < 8; i++)'
p4296
sg126
(dp4297
g79
(dp4298
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp4299
g91
(dp4300
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp4301
sg109
(lp4302
sg111
(lp4303
sg113
(dp4304
sg88
(lp4305
ssg116
g136
sg118
g4207
ssasg109
(lp4306
sg111
(lp4307
sg113
(dp4308
sg88
(lp4309
ssg116
g32
sg118
g4207
sa(dp4310
g79
(dp4311
g81
I2
sg82
I1
sg83
I5
sg84
I36
sg85
I0
sg86
I0
sg87
I26
sg88
I28
ssg89
(dp4312
g91
(dp4313
g81
I2
sg82
I1
sg83
I4
sg84
I6
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp4314
sg109
(lp4315
sg111
(lp4316
sg113
(dp4317
sg88
(lp4318
(dp4319
g173
(lp4320
(dp4321
g79
(dp4322
g81
I0
sg82
I0
sg83
I0
sg84
I28
sg85
I0
sg86
I0
sg87
I25
sg88
I25
ssg89
(dp4323
g91
(dp4324
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4325
(dp4326
g97
(dp4327
g79
(dp4328
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4329
g91
(dp4330
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4331
sg109
(lp4332
sg111
(lp4333
sg113
(dp4334
sg88
(lp4335
ssg116
S'hpfilt if: 1 option: 1 for: 1'
p4336
sg118
g4207
ssg120
I25
sg121
g122
sg79
(dp4337
g81
I0
sg82
I0
sg83
I0
sg84
I26
sg85
I0
sg86
I0
sg87
I25
sg88
I25
ssg124
S'tor (ptr = 0; ptr < HPBUFFER_LGTH; ++ptr)'
p4338
sg126
(dp4339
g79
(dp4340
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp4341
g91
(dp4342
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp4343
sg109
(lp4344
sg111
(lp4345
sg113
(dp4346
sg88
(lp4347
ssg116
g136
sg118
g4207
ssasg109
(lp4348
sg111
(lp4349
sg113
(dp4350
sg88
(lp4351
ssg116
S'hpfilt if: 1 option: 1'
p4352
sg118
g4207
sasg185
S'if (init)'
p4353
sa(dp4354
g173
(lp4355
(dp4356
g79
(dp4357
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4358
g91
(dp4359
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4360
sg109
(lp4361
sg111
(lp4362
sg113
(dp4363
sg88
(lp4364
ssg116
S'hpfilt if: 2 option: 1'
p4365
sg118
g4207
sasg185
S'if (halfPtr < 0)'
p4366
sa(dp4367
g173
(lp4368
(dp4369
g79
(dp4370
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4371
g91
(dp4372
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4373
sg109
(lp4374
sg111
(lp4375
sg113
(dp4376
sg88
(lp4377
ssg116
S'hpfilt if: 3 option: 1'
p4378
sg118
g4207
sasg185
S'if (++ptr == HPBUFFER_LGTH)'
p4379
sassg116
g33
sg118
g4207
sa(dp4380
g79
(dp4381
g81
I0
sg82
I2
sg83
I1
sg84
I9
sg85
I0
sg86
I0
sg87
I3
sg88
I4
ssg89
(dp4382
g91
(dp4383
g81
I0
sg82
I1
sg83
I1
sg84
I4
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp4384
sg109
(lp4385
sg111
(lp4386
sg113
(dp4387
sg88
(lp4388
(dp4389
g173
(lp4390
(dp4391
g79
(dp4392
g81
I0
sg82
I1
sg83
I0
sg84
I4
sg85
I0
sg86
I0
sg87
I2
sg88
I2
ssg89
(dp4393
g91
(dp4394
g81
I0
sg82
I1
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4395
(dp4396
g97
(dp4397
g79
(dp4398
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4399
g91
(dp4400
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4401
sg109
(lp4402
sg111
(lp4403
sg113
(dp4404
sg88
(lp4405
ssg116
S'deriv1 if: 1 option: 1 for: 1'
p4406
sg118
g4207
ssg120
I2
sg121
g122
sg79
(dp4407
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg86
I0
sg87
I2
sg88
I2
ssg124
S'tor (derI = 0; derI < DERIV_LENGTH; ++derI)'
p4408
sg126
(dp4409
g79
(dp4410
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp4411
g91
(dp4412
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp4413
sg109
(lp4414
sg111
(lp4415
sg113
(dp4416
sg88
(lp4417
ssg116
g136
sg118
g4207
ssasg109
(lp4418
sg111
(lp4419
sg113
(dp4420
sg88
(lp4421
ssg116
S'deriv1 if: 1 option: 1'
p4422
sg118
g4207
sasg185
S'if (init != 0)'
p4423
sa(dp4424
g173
(lp4425
(dp4426
g79
(dp4427
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4428
g91
(dp4429
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4430
sg109
(lp4431
sg111
(lp4432
sg113
(dp4433
sg88
(lp4434
ssg116
S'deriv1 if: 2 option: 1'
p4435
sg118
g4207
sasg185
S'if (++derI == DERIV_LENGTH)'
p4436
sassg116
g34
sg118
g4207
sa(dp4437
g79
(dp4438
g81
I0
sg82
I2
sg83
I1
sg84
I9
sg85
I0
sg86
I0
sg87
I3
sg88
I4
ssg89
(dp4439
g91
(dp4440
g81
I0
sg82
I1
sg83
I1
sg84
I4
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp4441
sg109
(lp4442
sg111
(lp4443
sg113
(dp4444
sg88
(lp4445
(dp4446
g173
(lp4447
(dp4448
g79
(dp4449
g81
I0
sg82
I1
sg83
I0
sg84
I4
sg85
I0
sg86
I0
sg87
I2
sg88
I2
ssg89
(dp4450
g91
(dp4451
g81
I0
sg82
I1
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4452
(dp4453
g97
(dp4454
g79
(dp4455
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4456
g91
(dp4457
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4458
sg109
(lp4459
sg111
(lp4460
sg113
(dp4461
sg88
(lp4462
ssg116
S'deriv2 if: 1 option: 1 for: 1'
p4463
sg118
g4207
ssg120
I2
sg121
g122
sg79
(dp4464
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg86
I0
sg87
I2
sg88
I2
ssg124
S'tor (derI = 0; derI < DERIV_LENGTH; ++derI)'
p4465
sg126
(dp4466
g79
(dp4467
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp4468
g91
(dp4469
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp4470
sg109
(lp4471
sg111
(lp4472
sg113
(dp4473
sg88
(lp4474
ssg116
g136
sg118
g4207
ssasg109
(lp4475
sg111
(lp4476
sg113
(dp4477
sg88
(lp4478
ssg116
S'deriv2 if: 1 option: 1'
p4479
sg118
g4207
sasg185
S'if (init != 0)'
p4480
sa(dp4481
g173
(lp4482
(dp4483
g79
(dp4484
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4485
g91
(dp4486
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4487
sg109
(lp4488
sg111
(lp4489
sg113
(dp4490
sg88
(lp4491
ssg116
S'deriv2 if: 2 option: 1'
p4492
sg118
g4207
sasg185
S'if (++derI == DERIV_LENGTH)'
p4493
sassg116
g35
sg118
g4207
sa(dp4494
g79
(dp4495
g81
I2
sg82
I1
sg83
I2
sg84
I27
sg85
I0
sg86
I0
sg87
I17
sg88
I20
ssg89
(dp4496
g91
(dp4497
g81
I2
sg82
I1
sg83
I2
sg84
I6
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp4498
sg109
(lp4499
sg111
(lp4500
sg113
(dp4501
sg88
(lp4502
(dp4503
g173
(lp4504
(dp4505
g79
(dp4506
g81
I0
sg82
I0
sg83
I0
sg84
I19
sg85
I0
sg86
I0
sg87
I16
sg88
I16
ssg89
(dp4507
g91
(dp4508
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4509
(dp4510
g97
(dp4511
g79
(dp4512
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4513
g91
(dp4514
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4515
sg109
(lp4516
sg111
(lp4517
sg113
(dp4518
sg88
(lp4519
ssg116
S'mvwint if: 1 option: 1 for: 1'
p4520
sg118
g4207
ssg120
I16
sg121
g122
sg79
(dp4521
g81
I0
sg82
I0
sg83
I0
sg84
I17
sg85
I0
sg86
I0
sg87
I16
sg88
I16
ssg124
S'tor (ptr = 0; ptr < WINDOW_WIDTH; ++ptr)'
p4522
sg126
(dp4523
g79
(dp4524
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp4525
g91
(dp4526
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp4527
sg109
(lp4528
sg111
(lp4529
sg113
(dp4530
sg88
(lp4531
ssg116
g136
sg118
g4207
ssasg109
(lp4532
sg111
(lp4533
sg113
(dp4534
sg88
(lp4535
ssg116
S'mvwint if: 1 option: 1'
p4536
sg118
g4207
sasg185
S'if (init)'
p4537
sa(dp4538
g173
(lp4539
(dp4540
g79
(dp4541
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4542
g91
(dp4543
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4544
sg109
(lp4545
sg111
(lp4546
sg113
(dp4547
sg88
(lp4548
ssg116
S'mvwint if: 2 option: 1'
p4549
sg118
g4207
sasg185
S'if (++ptr == WINDOW_WIDTH)'
p4550
sa(dp4551
g173
(lp4552
(dp4553
g79
(dp4554
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4555
g91
(dp4556
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4557
sg109
(lp4558
sg111
(lp4559
sg113
(dp4560
sg88
(lp4561
ssg116
S'mvwint if: 3 option: 1'
p4562
sg118
g4207
sa(dp4563
g79
(dp4564
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4565
g91
(dp4566
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4567
sg109
(lp4568
sg111
(lp4569
sg113
(dp4570
sg88
(lp4571
ssg116
S'mvwint if: 3 option: 2'
p4572
sg118
g4207
sasg185
S'if ((sum / WINDOW_WIDTH) > 32000)'
p4573
sassg116
g36
sg118
g4207
sa(dp4574
g79
(dp4575
g81
I3942
sg82
I77865
sg83
I76254
sg84
I323694
sg85
I0
sg86
I70808
sg87
I1942
sg88
I287865
ssg89
(dp4576
g91
(dp4577
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4578
(dp4579
g97
(dp4580
g79
(dp4581
g81
I82
sg82
I1618
sg83
I1583
sg84
I6723
sg85
I0
sg86
I1471
sg87
I37
sg88
I5979
ssg89
(dp4582
g91
(dp4583
g81
I1
sg82
I0
sg83
I14
sg84
I5
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4584
sg109
(lp4585
(dp4586
g97
(dp4587
g79
(dp4588
g81
I0
sg82
I35
sg83
I17
sg84
I153
sg85
I0
sg86
I31
sg87
I0
sg88
I127
ssg89
(dp4589
g91
(dp4590
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4591
sg109
(lp4592
sg111
(lp4593
sg113
(dp4594
g38
I1
ssg88
(lp4595
ssg116
S'main for: 1do while: 1'
p4596
sg118
S'BXB.CPP'
p4597
ssg120
I5
sg121
g2476
sg79
(dp4598
g81
I0
sg82
I175
sg83
I85
sg84
I765
sg85
I0
sg86
I155
sg87
I0
sg88
I640
ssg124
S'vhile (T < start);'
p4599
sg126
(dp4600
g79
(dp4601
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4602
g91
(dp4603
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4604
sg109
(lp4605
sg111
(lp4606
sg113
(dp4607
sg88
(lp4608
ssg116
S'do while conditions'
p4609
sg118
g4597
ssa(dp4610
g97
(dp4611
g79
(dp4612
g81
I0
sg82
I65
sg83
I53
sg84
I248
sg85
I0
sg86
I57
sg87
I0
sg88
I207
ssg89
(dp4613
g91
(dp4614
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4615
sg109
(lp4616
sg111
(lp4617
sg113
(dp4618
g39
I1
ssg88
(lp4619
ssg116
S'main for: 1do while: 2'
p4620
sg118
g4597
ssg120
I5
sg121
g2476
sg79
(dp4621
g81
I0
sg82
I325
sg83
I265
sg84
I1240
sg85
I0
sg86
I285
sg87
I0
sg88
I1040
ssg124
S'vhile (tprime < start);'
p4622
sg126
(dp4623
g79
(dp4624
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4625
g91
(dp4626
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4627
sg109
(lp4628
sg111
(lp4629
sg113
(dp4630
sg88
(lp4631
ssg116
g4609
sg118
g4597
ssa(dp4632
g97
(dp4633
g79
(dp4634
g81
I9
sg82
I170
sg83
I149
sg84
I708
sg85
I0
sg86
I152
sg87
I6
sg88
I642
ssg89
(dp4635
g91
(dp4636
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4637
sg109
(lp4638
sg111
(lp4639
sg113
(dp4640
sg88
(lp4641
(dp4642
g173
(lp4643
(dp4644
g79
(dp4645
g81
I9
sg82
I170
sg83
I149
sg84
I708
sg85
I0
sg86
I152
sg87
I6
sg88
I640
ssg89
(dp4646
g91
(dp4647
g81
I0
sg82
I0
sg83
I4
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4648
sg109
(lp4649
sg111
(lp4650
sg113
(dp4651
g42
I1
sg76
I1
sg40
I1
sg39
I1
ssg88
(lp4652
(dp4653
g173
(lp4654
(dp4655
g79
(dp4656
g81
I3
sg82
I100
sg83
I74
sg84
I418
sg85
I0
sg86
I89
sg87
I2
sg88
I363
ssg89
(dp4657
g91
(dp4658
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4659
sg109
(lp4660
sg111
(lp4661
sg113
(dp4662
g42
I1
sg38
I1
sg39
I1
ssg88
(lp4663
ssg116
S'main for: 1 while: 3 if: 1 option: 1 if: 1 option: 1'
p4664
sg118
g4597
sasg185
S'if (T - t <= match_dt && T - t < abs(T - tprime))'
p4665
sassg116
S'main for: 1 while: 3 if: 1 option: 1'
p4666
sg118
g4597
sa(dp4667
g79
(dp4668
g81
I6
sg82
I138
sg83
I106
sg84
I592
sg85
I0
sg86
I122
sg87
I4
sg88
I527
ssg89
(dp4669
g91
(dp4670
g81
I0
sg82
I0
sg83
I4
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4671
sg109
(lp4672
sg111
(lp4673
sg113
(dp4674
g41
I1
sg42
I1
sg76
I1
sg38
I1
ssg88
(lp4675
(dp4676
g173
(lp4677
(dp4678
g79
(dp4679
g81
I3
sg82
I100
sg83
I74
sg84
I418
sg85
I0
sg86
I89
sg87
I2
sg88
I363
ssg89
(dp4680
g91
(dp4681
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4682
sg109
(lp4683
sg111
(lp4684
sg113
(dp4685
g42
I1
sg38
I1
sg39
I1
ssg88
(lp4686
ssg116
S'main for: 1 while: 3 if: 1 option: 2 if: 1 option: 1'
p4687
sg118
g4597
sasg185
S'if (t - T <= match_dt && t - T < abs(t - Tprime))'
p4688
sassg116
S'main for: 1 while: 3 if: 1 option: 2'
p4689
sg118
g4597
sasg185
S'if (t < T)'
p4690
sassg116
S'main for: 1 while: 3'
p4691
sg118
g4597
ssg120
I5
sg121
g2476
sg79
(dp4692
g81
I45
sg82
I850
sg83
I750
sg84
I3543
sg85
I0
sg86
I760
sg87
I30
sg88
I3250
ssg124
S'vhile ((end_time > 0L && (T <= end_time || t <= end_time))|| (end_time == -1L && T != huge_time)|| (end_time == 0L && T != huge_time && t != huge_time))'
p4693
sg126
(dp4694
g79
(dp4695
g81
I0
sg82
I0
sg83
I1
sg84
I3
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4696
g91
(dp4697
g81
I0
sg82
I0
sg83
I1
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4698
sg109
(lp4699
sg111
(lp4700
sg113
(dp4701
sg88
(lp4702
ssg116
g2488
sg118
g4597
ssasg111
(lp4703
sg113
(dp4704
g46
I1
sg49
I1
sg50
I1
sg76
I2
sg39
I1
ssg88
(lp4705
(dp4706
g173
(lp4707
(dp4708
g79
(dp4709
g81
I4
sg82
I101
sg83
I97
sg84
I436
sg85
I0
sg86
I102
sg87
I7
sg88
I375
ssg89
(dp4710
g91
(dp4711
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4712
sg109
(lp4713
sg111
(lp4714
sg113
(dp4715
g48
I1
ssg88
(lp4716
ssg116
S'main for: 1 if: 1 option: 1'
p4717
sg118
g4597
sasg185
S'if (Oflag)'
p4718
sa(dp4719
g173
(lp4720
(dp4721
g79
(dp4722
g81
I0
sg82
I100
sg83
I70
sg84
I404
sg85
I0
sg86
I88
sg87
I0
sg88
I336
ssg89
(dp4723
g91
(dp4724
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4725
sg109
(lp4726
sg111
(lp4727
sg113
(dp4728
g38
I1
sg39
I1
ssg88
(lp4729
(dp4730
g173
(lp4731
(dp4732
g79
(dp4733
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4734
g91
(dp4735
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4736
sg109
(lp4737
sg111
(lp4738
sg113
(dp4739
sg88
(lp4740
ssg116
S'main for: 1 if: 2 option: 1 if: 1 option: 1'
p4741
sg118
g4597
sasg185
S'if (A != 0 || a != 0) /* false only if start = 0 */'
p4742
sassg116
S'main for: 1 if: 2 option: 1'
p4743
sg118
g4597
sasg185
S'if (T - t < abs(T - tprime) && T - t <= match_dt)'
p4744
sa(dp4745
g173
(lp4746
(dp4747
g79
(dp4748
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4749
g91
(dp4750
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4751
sg109
(lp4752
sg111
(lp4753
sg113
(dp4754
sg88
(lp4755
ssg116
S'main for: 1 if: 3 option: 1'
p4756
sg118
g4597
sasg185
S'if (t - start <= match_dt && abs(T - tprime) < abs(T - t))'
p4757
sassg116
S'main for: 1'
p4758
sg118
g4597
ssg120
I48
sg121
g122
sg79
(dp4759
g81
I3936
sg82
I77664
sg83
I75984
sg84
I322705
sg85
I0
sg86
I70608
sg87
I1824
sg88
I287040
ssg124
S'tor (recNum = 0; recNum < REC_COUNT; ++recNum)'
p4760
sg126
(dp4761
g79
(dp4762
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp4763
g91
(dp4764
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp4765
sg109
(lp4766
sg111
(lp4767
sg113
(dp4768
sg88
(lp4769
ssg116
g136
sg118
g4597
ssasg109
(lp4770
sg111
(lp4771
sg113
(dp4772
g48
I1
sg45
I1
sg38
I1
sg39
I1
ssg88
(lp4773
ssg116
g37
sg118
g4597
sa(dp4774
g79
(dp4775
g81
I0
sg82
I35
sg83
I17
sg84
I153
sg85
I0
sg86
I31
sg87
I0
sg88
I127
ssg89
(dp4776
g91
(dp4777
g81
I0
sg82
I0
sg83
I2
sg84
I6
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp4778
sg109
(lp4779
(dp4780
g97
(dp4781
g79
(dp4782
g81
I0
sg82
I7
sg83
I3
sg84
I29
sg85
I0
sg86
I6
sg87
I0
sg88
I22
ssg89
(dp4783
g91
(dp4784
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4785
sg109
(lp4786
sg111
(lp4787
sg113
(dp4788
sg88
(lp4789
(dp4790
g173
(lp4791
(dp4792
g79
(dp4793
g81
I0
sg82
I1
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4794
g91
(dp4795
g81
I0
sg82
I1
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4796
sg109
(lp4797
sg111
(lp4798
sg113
(dp4799
sg88
(lp4800
ssg116
S'getref while: 1 if: 1 option: 1'
p4801
sg118
g4597
sasg185
S'if (isqrs(annot.anntyp) || Oflag)'
p4802
sa(dp4803
g173
(lp4804
(dp4805
g79
(dp4806
g81
I0
sg82
I1
sg83
I3
sg84
I12
sg85
I0
sg86
I1
sg87
I0
sg88
I8
ssg89
(dp4807
g91
(dp4808
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4809
sg109
(lp4810
sg111
(lp4811
sg113
(dp4812
sg88
(lp4813
(dp4814
g173
(lp4815
(dp4816
g79
(dp4817
g81
I0
sg82
I1
sg83
I3
sg84
I12
sg85
I0
sg86
I1
sg87
I0
sg88
I7
ssg89
(dp4818
g91
(dp4819
g81
I0
sg82
I0
sg83
I2
sg84
I6
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4820
sg109
(lp4821
sg111
(lp4822
sg113
(dp4823
sg88
(lp4824
(dp4825
g173
(lp4826
(dp4827
g79
(dp4828
g81
I0
sg82
I1
sg83
I0
sg84
I3
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp4829
g91
(dp4830
g81
I0
sg82
I1
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp4831
sg109
(lp4832
sg111
(lp4833
sg113
(dp4834
sg88
(lp4835
ssg116
S'getref while: 1 if: 2 option: 1 if: 1 option: 1 if: 1 option: 1'
p4836
sg118
g4597
sasg185
S'if (getann(0, &annot) < 0)'
p4837
sa(dp4838
g173
(lp4839
(dp4840
g79
(dp4841
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4842
g91
(dp4843
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4844
sg109
(lp4845
sg111
(lp4846
sg113
(dp4847
sg88
(lp4848
ssg116
S'getref while: 1 if: 2 option: 1 if: 1 option: 1 if: 2 option: 1'
p4849
sg118
g4597
sa(dp4850
g79
(dp4851
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4852
g91
(dp4853
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4854
sg109
(lp4855
sg111
(lp4856
sg113
(dp4857
sg88
(lp4858
ssg116
S'getref while: 1 if: 2 option: 1 if: 1 option: 1 if: 2 option: 2'
p4859
sg118
g4597
sasg185
S'if (annot.anntyp == NOISE && (annot.subtyp & 0x30) != 0x30)'
p4860
sa(dp4861
g173
(lp4862
(dp4863
g79
(dp4864
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4865
g91
(dp4866
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4867
sg109
(lp4868
sg111
(lp4869
sg113
(dp4870
sg88
(lp4871
ssg116
S'getref while: 1 if: 2 option: 1 if: 1 option: 1 if: 3 option: 1'
p4872
sg118
g4597
sa(dp4873
g79
(dp4874
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4875
g91
(dp4876
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4877
sg109
(lp4878
sg111
(lp4879
sg113
(dp4880
sg88
(lp4881
ssg116
S'getref while: 1 if: 2 option: 1 if: 1 option: 1 if: 3 option: 2'
p4882
sg118
g4597
sasg185
S'if (vfoffref > T)'
p4883
sa(dp4884
g173
(lp4885
(dp4886
g79
(dp4887
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4888
g91
(dp4889
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4890
sg109
(lp4891
sg111
(lp4892
sg113
(dp4893
sg88
(lp4894
ssg116
S'getref while: 1 if: 2 option: 1 if: 1 option: 1 if: 4 option: 1'
p4895
sg118
g4597
sasg185
S'if (sdonref > sdoffref)'
p4896
sassg116
S'getref while: 1 if: 2 option: 1 if: 1 option: 1'
p4897
sg118
g4597
sasg185
S'if ((annot.subtyp & 0x30) == 0x30)'
p4898
sassg116
S'getref while: 1 if: 2 option: 1'
p4899
sg118
g4597
sasg185
S'else if (annot.anntyp == NOISE)'
p4900
sa(dp4901
g173
(lp4902
(dp4903
g79
(dp4904
g81
I0
sg82
I5
sg83
I0
sg84
I15
sg85
I0
sg86
I5
sg87
I0
sg88
I10
ssg89
(dp4905
g91
(dp4906
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4907
sg109
(lp4908
(dp4909
g97
(dp4910
g79
(dp4911
g81
I0
sg82
I1
sg83
I0
sg84
I2
sg85
I0
sg86
I1
sg87
I0
sg88
I1
ssg89
(dp4912
g91
(dp4913
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4914
sg109
(lp4915
sg111
(lp4916
sg113
(dp4917
sg88
(lp4918
(dp4919
g173
(lp4920
(dp4921
g79
(dp4922
g81
I0
sg82
I1
sg83
I0
sg84
I2
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp4923
g91
(dp4924
g81
I0
sg82
I1
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp4925
sg109
(lp4926
sg111
(lp4927
sg113
(dp4928
sg88
(lp4929
ssg116
S'getref while: 1 if: 3 option: 1do while: 1 if: 1 option: 1'
p4930
sg118
g4597
sasg185
S'if (getann(0, &annot) < 0)'
p4931
sassg116
S'getref while: 1 if: 3 option: 1do while: 1'
p4932
sg118
g4597
ssg120
I5
sg121
g2476
sg79
(dp4933
g81
I0
sg82
I5
sg83
I0
sg84
I11
sg85
I0
sg86
I5
sg87
I0
sg88
I10
ssg124
S'vhile (annot.anntyp != VFOFF);'
p4934
sg126
(dp4935
g79
(dp4936
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4937
g91
(dp4938
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4939
sg109
(lp4940
sg111
(lp4941
sg113
(dp4942
sg88
(lp4943
ssg116
g4609
sg118
g4597
ssasg111
(lp4944
sg113
(dp4945
sg88
(lp4946
ssg116
S'getref while: 1 if: 3 option: 1'
p4947
sg118
g4597
sasg185
S'else if (annot.anntyp == VFON)'
p4948
sassg116
S'getref while: 1'
p4949
sg118
g4597
ssg120
I5
sg121
g2476
sg79
(dp4950
g81
I0
sg82
I35
sg83
I15
sg84
I145
sg85
I0
sg86
I30
sg87
I0
sg88
I115
ssg124
S'vhile (getann(0, &annot) == 0)'
p4951
sg126
(dp4952
g79
(dp4953
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4954
g91
(dp4955
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4956
sg109
(lp4957
sg111
(lp4958
sg113
(dp4959
sg88
(lp4960
ssg116
g2488
sg118
g4597
ssasg111
(lp4961
sg113
(dp4962
sg88
(lp4963
(dp4964
g173
(lp4965
(dp4966
g79
(dp4967
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4968
g91
(dp4969
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4970
sg109
(lp4971
sg111
(lp4972
sg113
(dp4973
sg88
(lp4974
ssg116
S'getref if: 1 option: 1'
p4975
sg118
g4597
sa(dp4976
g79
(dp4977
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4978
g91
(dp4979
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4980
sg109
(lp4981
sg111
(lp4982
sg113
(dp4983
sg88
(lp4984
ssg116
S'getref if: 1 option: 2'
p4985
sg118
g4597
sasg185
S'if (TT == 0L || T == huge_time || (TT <= vfonref && vfonref < T)|| (TT <= sdonref && sdonref < T) || (TT <= pvfonref && pvfonref < T)|| (TT <= psdonref && psdonref < T))'
p4986
sa(dp4987
g173
(lp4988
(dp4989
g79
(dp4990
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp4991
g91
(dp4992
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp4993
sg109
(lp4994
sg111
(lp4995
sg113
(dp4996
sg88
(lp4997
ssg116
S'getref if: 2 option: 1'
p4998
sg118
g4597
sasg185
S'if (oflag)'
p4999
sassg116
g38
sg118
g4597
sa(dp5000
g79
(dp5001
g81
I0
sg82
I65
sg83
I53
sg84
I248
sg85
I0
sg86
I57
sg87
I0
sg88
I207
ssg89
(dp5002
g91
(dp5003
g81
I0
sg82
I0
sg83
I1
sg84
I7
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp5004
sg109
(lp5005
(dp5006
g97
(dp5007
g79
(dp5008
g81
I0
sg82
I6
sg83
I7
sg84
I17
sg85
I0
sg86
I5
sg87
I0
sg88
I14
ssg89
(dp5009
g91
(dp5010
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5011
sg109
(lp5012
sg111
(lp5013
sg113
(dp5014
sg88
(lp5015
(dp5016
g173
(lp5017
(dp5018
g79
(dp5019
g81
I0
sg82
I1
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5020
g91
(dp5021
g81
I0
sg82
I1
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5022
sg109
(lp5023
sg111
(lp5024
sg113
(dp5025
sg88
(lp5026
ssg116
S'gettest while: 1 if: 1 option: 1'
p5027
sg118
g4597
sasg185
S'if (isqrs(annot.anntyp) || Oflag)'
p5028
sa(dp5029
g173
(lp5030
(dp5031
g79
(dp5032
g81
I0
sg82
I1
sg83
I7
sg84
I13
sg85
I0
sg86
I1
sg87
I0
sg88
I10
ssg89
(dp5033
g91
(dp5034
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5035
sg109
(lp5036
sg111
(lp5037
sg113
(dp5038
sg88
(lp5039
(dp5040
g173
(lp5041
(dp5042
g79
(dp5043
g81
I0
sg82
I1
sg83
I7
sg84
I13
sg85
I0
sg86
I1
sg87
I0
sg88
I9
ssg89
(dp5044
g91
(dp5045
g81
I0
sg82
I0
sg83
I4
sg84
I7
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5046
sg109
(lp5047
sg111
(lp5048
sg113
(dp5049
sg88
(lp5050
(dp5051
g173
(lp5052
(dp5053
g79
(dp5054
g81
I0
sg82
I1
sg83
I2
sg84
I3
sg85
I0
sg86
I1
sg87
I0
sg88
I2
ssg89
(dp5055
g91
(dp5056
g81
I0
sg82
I1
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp5057
sg109
(lp5058
sg111
(lp5059
sg113
(dp5060
sg88
(lp5061
(dp5062
g173
(lp5063
(dp5064
g79
(dp5065
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5066
g91
(dp5067
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5068
sg109
(lp5069
sg111
(lp5070
sg113
(dp5071
sg88
(lp5072
ssg116
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 1 option: 1 if: 1 option: 1'
p5073
sg118
g4597
sa(dp5074
g79
(dp5075
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5076
g91
(dp5077
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5078
sg109
(lp5079
sg111
(lp5080
sg113
(dp5081
sg88
(lp5082
ssg116
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 1 option: 1 if: 1 option: 2'
p5083
sg118
g4597
sasg185
S'if (end_time > 0L)'
p5084
sassg116
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 1 option: 1'
p5085
sg118
g4597
sasg185
S'if (getann(1, &annot) < 0)'
p5086
sa(dp5087
g173
(lp5088
(dp5089
g79
(dp5090
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5091
g91
(dp5092
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5093
sg109
(lp5094
sg111
(lp5095
sg113
(dp5096
sg88
(lp5097
ssg116
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 2 option: 1'
p5098
sg118
g4597
sa(dp5099
g79
(dp5100
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5101
g91
(dp5102
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5103
sg109
(lp5104
sg111
(lp5105
sg113
(dp5106
sg88
(lp5107
ssg116
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 2 option: 2'
p5108
sg118
g4597
sasg185
S'if (annot.anntyp == NOISE && (annot.subtyp & 0x30) != 0x30)'
p5109
sa(dp5110
g173
(lp5111
(dp5112
g79
(dp5113
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5114
g91
(dp5115
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5116
sg109
(lp5117
sg111
(lp5118
sg113
(dp5119
sg88
(lp5120
ssg116
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 3 option: 1'
p5121
sg118
g4597
sa(dp5122
g79
(dp5123
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5124
g91
(dp5125
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5126
sg109
(lp5127
sg111
(lp5128
sg113
(dp5129
sg88
(lp5130
ssg116
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 3 option: 2'
p5131
sg118
g4597
sasg185
S'if (vfofftest > t)'
p5132
sa(dp5133
g173
(lp5134
(dp5135
g79
(dp5136
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5137
g91
(dp5138
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5139
sg109
(lp5140
sg111
(lp5141
sg113
(dp5142
sg88
(lp5143
ssg116
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1 if: 4 option: 1'
p5144
sg118
g4597
sasg185
S'if (sdontest > sdofftest)'
p5145
sassg116
S'gettest while: 1 if: 2 option: 1 if: 1 option: 1'
p5146
sg118
g4597
sasg185
S'if ((annot.subtyp & 0x30) == 0x30)'
p5147
sassg116
S'gettest while: 1 if: 2 option: 1'
p5148
sg118
g4597
sa(dp5149
g79
(dp5150
g81
I0
sg82
I5
sg83
I0
sg84
I15
sg85
I0
sg86
I5
sg87
I0
sg88
I10
ssg89
(dp5151
g91
(dp5152
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5153
sg109
(lp5154
(dp5155
g97
(dp5156
g79
(dp5157
g81
I0
sg82
I1
sg83
I0
sg84
I2
sg85
I0
sg86
I1
sg87
I0
sg88
I1
ssg89
(dp5158
g91
(dp5159
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5160
sg109
(lp5161
sg111
(lp5162
sg113
(dp5163
sg88
(lp5164
(dp5165
g173
(lp5166
(dp5167
g79
(dp5168
g81
I0
sg82
I1
sg83
I0
sg84
I2
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp5169
g91
(dp5170
g81
I0
sg82
I1
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp5171
sg109
(lp5172
sg111
(lp5173
sg113
(dp5174
sg88
(lp5175
ssg116
S'gettest while: 1 if: 2 option: 2do while: 1 if: 1 option: 1'
p5176
sg118
g4597
sasg185
S'if (getann(1, &annot) < 0)'
p5177
sassg116
S'gettest while: 1 if: 2 option: 2do while: 1'
p5178
sg118
g4597
ssg120
I5
sg121
g2476
sg79
(dp5179
g81
I0
sg82
I5
sg83
I0
sg84
I11
sg85
I0
sg86
I5
sg87
I0
sg88
I10
ssg124
S'vhile (annot.anntyp != VFOFF);'
p5180
sg126
(dp5181
g79
(dp5182
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5183
g91
(dp5184
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5185
sg109
(lp5186
sg111
(lp5187
sg113
(dp5188
sg88
(lp5189
ssg116
g4609
sg118
g4597
ssasg111
(lp5190
sg113
(dp5191
sg88
(lp5192
ssg116
S'gettest while: 1 if: 2 option: 2'
p5193
sg118
g4597
sasg185
S'if (annot.anntyp == NOISE)'
p5194
sassg116
S'gettest while: 1'
p5195
sg118
g4597
ssg120
I5
sg121
g2476
sg79
(dp5196
g81
I0
sg82
I30
sg83
I35
sg84
I85
sg85
I0
sg86
I25
sg87
I0
sg88
I75
ssg124
S'vhile (getann(1, &annot) == 0)'
p5197
sg126
(dp5198
g79
(dp5199
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5200
g91
(dp5201
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5202
sg109
(lp5203
sg111
(lp5204
sg113
(dp5205
sg88
(lp5206
ssg116
g2488
sg118
g4597
ssasg111
(lp5207
sg113
(dp5208
g38
I1
ssg88
(lp5209
(dp5210
g173
(lp5211
(dp5212
g79
(dp5213
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5214
g91
(dp5215
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5216
sg109
(lp5217
sg111
(lp5218
sg113
(dp5219
sg88
(lp5220
ssg116
S'gettest if: 1 option: 1'
p5221
sg118
g4597
sasg185
S'if (tt == 0L || t == huge_time || (tt <= vfontest && vfontest < t)'
p5222
sa(dp5223
g173
(lp5224
(dp5225
g79
(dp5226
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5227
g91
(dp5228
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5229
sg109
(lp5230
sg111
(lp5231
sg113
(dp5232
sg88
(lp5233
ssg116
S'gettest if: 2 option: 1'
p5234
sg118
g4597
sasg185
S'if (oflag)'
p5235
sassg116
g39
sg118
g4597
sa(dp5236
g79
(dp5237
g81
I3
sg82
I4
sg83
I14
sg84
I25
sg85
I0
sg86
I4
sg87
I2
sg88
I37
ssg89
(dp5238
g91
(dp5239
g81
I0
sg82
I4
sg83
I8
sg84
I2
sg85
I0
sg93
I1
sg86
I3
sg87
I0
ssg94
(lp5240
sg109
(lp5241
sg111
(lp5242
sg113
(dp5243
g42
I1
ssg88
(lp5244
(dp5245
g173
(lp5246
(dp5247
g79
(dp5248
g81
I0
sg82
I0
sg83
I1
sg84
I3
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5249
g91
(dp5250
g81
I0
sg82
I0
sg83
I1
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5251
sg109
(lp5252
sg111
(lp5253
sg113
(dp5254
sg88
(lp5255
ssg116
S'rpann if: 1 option: 1'
p5256
sg118
g4597
sasg185
S'if ((vfonref != -1L && vfonref <= t && (t <= vfoffref || vfoffref == -1L))'
p5257
sa(dp5258
g173
(lp5259
(dp5260
g79
(dp5261
g81
I0
sg82
I0
sg83
I1
sg84
I3
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5262
g91
(dp5263
g81
I0
sg82
I0
sg83
I1
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5264
sg109
(lp5265
sg111
(lp5266
sg113
(dp5267
sg88
(lp5268
ssg116
S'rpann if: 2 option: 1'
p5269
sg118
g4597
sasg185
S'else if ((sdonref != -1L && sdonref <= t && (t <= sdoffref || sdoffref == -1L))'
p5270
sassg116
g40
sg118
g4597
sa(dp5271
g79
(dp5272
g81
I0
sg82
I2
sg83
I7
sg84
I4
sg85
I0
sg86
I0
sg87
I0
sg88
I4
ssg89
(dp5273
g91
(dp5274
g81
I0
sg82
I2
sg83
I6
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5275
sg109
(lp5276
sg111
(lp5277
sg113
(dp5278
sg88
(lp5279
(dp5280
g173
(lp5281
(dp5282
g79
(dp5283
g81
I0
sg82
I0
sg83
I1
sg84
I3
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5284
g91
(dp5285
g81
I0
sg82
I0
sg83
I1
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5286
sg109
(lp5287
sg111
(lp5288
sg113
(dp5289
sg88
(lp5290
ssg116
S'tpann if: 1 option: 1'
p5291
sg118
g4597
sasg185
S'if ((sdontest != -1L && sdontest <= t && (t <= sdofftest || sdofftest == -1L))'
p5292
sassg116
g41
sg118
g4597
sa(dp5293
g79
(dp5294
g81
I3
sg82
I0
sg83
I4
sg84
I17
sg85
I0
sg86
I1
sg87
I2
sg88
I29
ssg89
(dp5295
g91
(dp5296
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5297
sg109
(lp5298
sg111
(lp5299
(dp5300
S'cases'
p5301
(lp5302
(dp5303
g79
(dp5304
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I8
ssg89
(dp5305
g91
(dp5306
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5307
sg109
(lp5308
sg111
(lp5309
(dp5310
g5301
(lp5311
(dp5312
g79
(dp5313
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5314
g91
(dp5315
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5316
sg109
(lp5317
sg111
(lp5318
sg113
(dp5319
sg88
(lp5320
ssg116
S'pair switch: 1 case: 1 switch: 1 case: 1'
p5321
sg118
g4597
sa(dp5322
g79
(dp5323
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5324
g91
(dp5325
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5326
sg109
(lp5327
sg111
(lp5328
sg113
(dp5329
sg88
(lp5330
ssg116
S'pair switch: 1 case: 1 switch: 1 case: 2'
p5331
sg118
g4597
sa(dp5332
g79
(dp5333
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5334
g91
(dp5335
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5336
sg109
(lp5337
sg111
(lp5338
sg113
(dp5339
sg88
(lp5340
ssg116
S'pair switch: 1 case: 1 switch: 1 case: 3'
p5341
sg118
g4597
sa(dp5342
g79
(dp5343
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5344
g91
(dp5345
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5346
sg109
(lp5347
sg111
(lp5348
sg113
(dp5349
sg88
(lp5350
ssg116
S'pair switch: 1 case: 1 switch: 1 case: 4'
p5351
sg118
g4597
sa(dp5352
g79
(dp5353
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5354
g91
(dp5355
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5356
sg109
(lp5357
sg111
(lp5358
sg113
(dp5359
sg88
(lp5360
ssg116
S'pair switch: 1 case: 1 switch: 1 case: 5'
p5361
sg118
g4597
sa(dp5362
g79
(dp5363
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5364
g91
(dp5365
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5366
sg109
(lp5367
sg111
(lp5368
sg113
(dp5369
sg88
(lp5370
ssg116
S'pair switch: 1 case: 1 switch: 1 case: 6'
p5371
sg118
g4597
sa(dp5372
g79
(dp5373
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5374
g91
(dp5375
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5376
sg109
(lp5377
sg111
(lp5378
sg113
(dp5379
sg88
(lp5380
ssg116
S'pair switch: 1 case: 1 switch: 1 case: 7'
p5381
sg118
g4597
sasg185
S'switch (test)'
p5382
sasg113
(dp5383
sg88
(lp5384
ssg116
S'pair switch: 1 case: 1'
p5385
sg118
g4597
sa(dp5386
g79
(dp5387
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I8
ssg89
(dp5388
g91
(dp5389
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5390
sg109
(lp5391
sg111
(lp5392
(dp5393
g5301
(lp5394
(dp5395
g79
(dp5396
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5397
g91
(dp5398
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5399
sg109
(lp5400
sg111
(lp5401
sg113
(dp5402
sg88
(lp5403
ssg116
S'pair switch: 1 case: 2 switch: 1 case: 1'
p5404
sg118
g4597
sa(dp5405
g79
(dp5406
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5407
g91
(dp5408
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5409
sg109
(lp5410
sg111
(lp5411
sg113
(dp5412
sg88
(lp5413
ssg116
S'pair switch: 1 case: 2 switch: 1 case: 2'
p5414
sg118
g4597
sa(dp5415
g79
(dp5416
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5417
g91
(dp5418
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5419
sg109
(lp5420
sg111
(lp5421
sg113
(dp5422
sg88
(lp5423
ssg116
S'pair switch: 1 case: 2 switch: 1 case: 3'
p5424
sg118
g4597
sa(dp5425
g79
(dp5426
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5427
g91
(dp5428
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5429
sg109
(lp5430
sg111
(lp5431
sg113
(dp5432
sg88
(lp5433
ssg116
S'pair switch: 1 case: 2 switch: 1 case: 4'
p5434
sg118
g4597
sa(dp5435
g79
(dp5436
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5437
g91
(dp5438
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5439
sg109
(lp5440
sg111
(lp5441
sg113
(dp5442
sg88
(lp5443
ssg116
S'pair switch: 1 case: 2 switch: 1 case: 5'
p5444
sg118
g4597
sa(dp5445
g79
(dp5446
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5447
g91
(dp5448
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5449
sg109
(lp5450
sg111
(lp5451
sg113
(dp5452
sg88
(lp5453
ssg116
S'pair switch: 1 case: 2 switch: 1 case: 6'
p5454
sg118
g4597
sa(dp5455
g79
(dp5456
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5457
g91
(dp5458
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5459
sg109
(lp5460
sg111
(lp5461
sg113
(dp5462
sg88
(lp5463
ssg116
S'pair switch: 1 case: 2 switch: 1 case: 7'
p5464
sg118
g4597
sasg185
S'switch (test)'
p5465
sasg113
(dp5466
sg88
(lp5467
ssg116
S'pair switch: 1 case: 2'
p5468
sg118
g4597
sa(dp5469
g79
(dp5470
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I8
ssg89
(dp5471
g91
(dp5472
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5473
sg109
(lp5474
sg111
(lp5475
(dp5476
g5301
(lp5477
(dp5478
g79
(dp5479
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5480
g91
(dp5481
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5482
sg109
(lp5483
sg111
(lp5484
sg113
(dp5485
sg88
(lp5486
ssg116
S'pair switch: 1 case: 3 switch: 1 case: 1'
p5487
sg118
g4597
sa(dp5488
g79
(dp5489
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5490
g91
(dp5491
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5492
sg109
(lp5493
sg111
(lp5494
sg113
(dp5495
sg88
(lp5496
ssg116
S'pair switch: 1 case: 3 switch: 1 case: 2'
p5497
sg118
g4597
sa(dp5498
g79
(dp5499
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5500
g91
(dp5501
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5502
sg109
(lp5503
sg111
(lp5504
sg113
(dp5505
sg88
(lp5506
ssg116
S'pair switch: 1 case: 3 switch: 1 case: 3'
p5507
sg118
g4597
sa(dp5508
g79
(dp5509
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5510
g91
(dp5511
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5512
sg109
(lp5513
sg111
(lp5514
sg113
(dp5515
sg88
(lp5516
ssg116
S'pair switch: 1 case: 3 switch: 1 case: 4'
p5517
sg118
g4597
sa(dp5518
g79
(dp5519
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5520
g91
(dp5521
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5522
sg109
(lp5523
sg111
(lp5524
sg113
(dp5525
sg88
(lp5526
ssg116
S'pair switch: 1 case: 3 switch: 1 case: 5'
p5527
sg118
g4597
sa(dp5528
g79
(dp5529
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5530
g91
(dp5531
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5532
sg109
(lp5533
sg111
(lp5534
sg113
(dp5535
sg88
(lp5536
ssg116
S'pair switch: 1 case: 3 switch: 1 case: 6'
p5537
sg118
g4597
sa(dp5538
g79
(dp5539
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5540
g91
(dp5541
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5542
sg109
(lp5543
sg111
(lp5544
sg113
(dp5545
sg88
(lp5546
ssg116
S'pair switch: 1 case: 3 switch: 1 case: 7'
p5547
sg118
g4597
sasg185
S'switch (test)'
p5548
sasg113
(dp5549
sg88
(lp5550
ssg116
S'pair switch: 1 case: 3'
p5551
sg118
g4597
sa(dp5552
g79
(dp5553
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I8
ssg89
(dp5554
g91
(dp5555
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5556
sg109
(lp5557
sg111
(lp5558
(dp5559
g5301
(lp5560
(dp5561
g79
(dp5562
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5563
g91
(dp5564
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5565
sg109
(lp5566
sg111
(lp5567
sg113
(dp5568
sg88
(lp5569
ssg116
S'pair switch: 1 case: 4 switch: 1 case: 1'
p5570
sg118
g4597
sa(dp5571
g79
(dp5572
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5573
g91
(dp5574
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5575
sg109
(lp5576
sg111
(lp5577
sg113
(dp5578
sg88
(lp5579
ssg116
S'pair switch: 1 case: 4 switch: 1 case: 2'
p5580
sg118
g4597
sa(dp5581
g79
(dp5582
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5583
g91
(dp5584
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5585
sg109
(lp5586
sg111
(lp5587
sg113
(dp5588
sg88
(lp5589
ssg116
S'pair switch: 1 case: 4 switch: 1 case: 3'
p5590
sg118
g4597
sa(dp5591
g79
(dp5592
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5593
g91
(dp5594
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5595
sg109
(lp5596
sg111
(lp5597
sg113
(dp5598
sg88
(lp5599
ssg116
S'pair switch: 1 case: 4 switch: 1 case: 4'
p5600
sg118
g4597
sa(dp5601
g79
(dp5602
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5603
g91
(dp5604
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5605
sg109
(lp5606
sg111
(lp5607
sg113
(dp5608
sg88
(lp5609
ssg116
S'pair switch: 1 case: 4 switch: 1 case: 5'
p5610
sg118
g4597
sa(dp5611
g79
(dp5612
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5613
g91
(dp5614
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5615
sg109
(lp5616
sg111
(lp5617
sg113
(dp5618
sg88
(lp5619
ssg116
S'pair switch: 1 case: 4 switch: 1 case: 6'
p5620
sg118
g4597
sa(dp5621
g79
(dp5622
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5623
g91
(dp5624
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5625
sg109
(lp5626
sg111
(lp5627
sg113
(dp5628
sg88
(lp5629
ssg116
S'pair switch: 1 case: 4 switch: 1 case: 7'
p5630
sg118
g4597
sasg185
S'switch (test)'
p5631
sasg113
(dp5632
sg88
(lp5633
ssg116
S'pair switch: 1 case: 4'
p5634
sg118
g4597
sa(dp5635
g79
(dp5636
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I8
ssg89
(dp5637
g91
(dp5638
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5639
sg109
(lp5640
sg111
(lp5641
(dp5642
g5301
(lp5643
(dp5644
g79
(dp5645
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5646
g91
(dp5647
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5648
sg109
(lp5649
sg111
(lp5650
sg113
(dp5651
sg88
(lp5652
ssg116
S'pair switch: 1 case: 5 switch: 1 case: 1'
p5653
sg118
g4597
sa(dp5654
g79
(dp5655
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5656
g91
(dp5657
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5658
sg109
(lp5659
sg111
(lp5660
sg113
(dp5661
sg88
(lp5662
ssg116
S'pair switch: 1 case: 5 switch: 1 case: 2'
p5663
sg118
g4597
sa(dp5664
g79
(dp5665
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5666
g91
(dp5667
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5668
sg109
(lp5669
sg111
(lp5670
sg113
(dp5671
sg88
(lp5672
ssg116
S'pair switch: 1 case: 5 switch: 1 case: 3'
p5673
sg118
g4597
sa(dp5674
g79
(dp5675
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5676
g91
(dp5677
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5678
sg109
(lp5679
sg111
(lp5680
sg113
(dp5681
sg88
(lp5682
ssg116
S'pair switch: 1 case: 5 switch: 1 case: 4'
p5683
sg118
g4597
sa(dp5684
g79
(dp5685
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5686
g91
(dp5687
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5688
sg109
(lp5689
sg111
(lp5690
sg113
(dp5691
sg88
(lp5692
ssg116
S'pair switch: 1 case: 5 switch: 1 case: 5'
p5693
sg118
g4597
sa(dp5694
g79
(dp5695
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5696
g91
(dp5697
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5698
sg109
(lp5699
sg111
(lp5700
sg113
(dp5701
sg88
(lp5702
ssg116
S'pair switch: 1 case: 5 switch: 1 case: 6'
p5703
sg118
g4597
sa(dp5704
g79
(dp5705
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5706
g91
(dp5707
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5708
sg109
(lp5709
sg111
(lp5710
sg113
(dp5711
sg88
(lp5712
ssg116
S'pair switch: 1 case: 5 switch: 1 case: 7'
p5713
sg118
g4597
sasg185
S'switch (test)'
p5714
sasg113
(dp5715
sg88
(lp5716
ssg116
S'pair switch: 1 case: 5'
p5717
sg118
g4597
sa(dp5718
g79
(dp5719
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I6
ssg89
(dp5720
g91
(dp5721
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5722
sg109
(lp5723
sg111
(lp5724
(dp5725
g5301
(lp5726
(dp5727
g79
(dp5728
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5729
g91
(dp5730
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5731
sg109
(lp5732
sg111
(lp5733
sg113
(dp5734
sg88
(lp5735
ssg116
S'pair switch: 1 case: 6 switch: 1 case: 1'
p5736
sg118
g4597
sa(dp5737
g79
(dp5738
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5739
g91
(dp5740
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5741
sg109
(lp5742
sg111
(lp5743
sg113
(dp5744
sg88
(lp5745
ssg116
S'pair switch: 1 case: 6 switch: 1 case: 2'
p5746
sg118
g4597
sa(dp5747
g79
(dp5748
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5749
g91
(dp5750
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5751
sg109
(lp5752
sg111
(lp5753
sg113
(dp5754
sg88
(lp5755
ssg116
S'pair switch: 1 case: 6 switch: 1 case: 3'
p5756
sg118
g4597
sa(dp5757
g79
(dp5758
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5759
g91
(dp5760
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5761
sg109
(lp5762
sg111
(lp5763
sg113
(dp5764
sg88
(lp5765
ssg116
S'pair switch: 1 case: 6 switch: 1 case: 4'
p5766
sg118
g4597
sa(dp5767
g79
(dp5768
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5769
g91
(dp5770
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5771
sg109
(lp5772
sg111
(lp5773
sg113
(dp5774
sg88
(lp5775
ssg116
S'pair switch: 1 case: 6 switch: 1 case: 5'
p5776
sg118
g4597
sasg185
S'switch (test)'
p5777
sasg113
(dp5778
sg88
(lp5779
ssg116
S'pair switch: 1 case: 6'
p5780
sg118
g4597
sa(dp5781
g79
(dp5782
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I6
ssg89
(dp5783
g91
(dp5784
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5785
sg109
(lp5786
sg111
(lp5787
(dp5788
g5301
(lp5789
(dp5790
g79
(dp5791
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5792
g91
(dp5793
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5794
sg109
(lp5795
sg111
(lp5796
sg113
(dp5797
sg88
(lp5798
ssg116
S'pair switch: 1 case: 7 switch: 1 case: 1'
p5799
sg118
g4597
sa(dp5800
g79
(dp5801
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5802
g91
(dp5803
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5804
sg109
(lp5805
sg111
(lp5806
sg113
(dp5807
sg88
(lp5808
ssg116
S'pair switch: 1 case: 7 switch: 1 case: 2'
p5809
sg118
g4597
sa(dp5810
g79
(dp5811
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5812
g91
(dp5813
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5814
sg109
(lp5815
sg111
(lp5816
sg113
(dp5817
sg88
(lp5818
ssg116
S'pair switch: 1 case: 7 switch: 1 case: 3'
p5819
sg118
g4597
sa(dp5820
g79
(dp5821
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5822
g91
(dp5823
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5824
sg109
(lp5825
sg111
(lp5826
sg113
(dp5827
sg88
(lp5828
ssg116
S'pair switch: 1 case: 7 switch: 1 case: 4'
p5829
sg118
g4597
sa(dp5830
g79
(dp5831
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp5832
g91
(dp5833
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp5834
sg109
(lp5835
sg111
(lp5836
sg113
(dp5837
sg88
(lp5838
ssg116
S'pair switch: 1 case: 7 switch: 1 case: 5'
p5839
sg118
g4597
sasg185
S'switch (test)'
p5840
sasg113
(dp5841
sg88
(lp5842
ssg116
S'pair switch: 1 case: 7'
p5843
sg118
g4597
sasg185
S'switch (ref)'
p5844
sasg113
(dp5845
sg88
(lp5846
(dp5847
g173
(lp5848
(dp5849
g79
(dp5850
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg86
I1
sg87
I1
sg88
I0
ssg89
(dp5851
g91
(dp5852
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp5853
sg109
(lp5854
sg111
(lp5855
sg113
(dp5856
sg88
(lp5857
ssg116
S'pair if: 1 option: 1'
p5858
sg118
g4597
sasg185
S'if (RR > 0L && rr > 0L)'
p5859
sa(dp5860
g173
(lp5861
(dp5862
g79
(dp5863
g81
I0
sg82
I0
sg83
I2
sg84
I10
sg85
I0
sg86
I0
sg87
I0
sg88
I5
ssg89
(dp5864
g91
(dp5865
g81
I0
sg82
I0
sg83
I2
sg84
I9
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5866
sg109
(lp5867
sg111
(lp5868
sg113
(dp5869
sg88
(lp5870
(dp5871
g173
(lp5872
(dp5873
g79
(dp5874
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5875
g91
(dp5876
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5877
sg109
(lp5878
sg111
(lp5879
sg113
(dp5880
sg88
(lp5881
ssg116
S'pair if: 2 option: 1 if: 1 option: 1'
p5882
sg118
g4597
sa(dp5883
g79
(dp5884
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5885
g91
(dp5886
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5887
sg109
(lp5888
sg111
(lp5889
sg113
(dp5890
sg88
(lp5891
ssg116
S'pair if: 2 option: 1 if: 1 option: 2'
p5892
sg118
g4597
sasg185
S'if (ref == test)'
p5893
sa(dp5894
g173
(lp5895
(dp5896
g79
(dp5897
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5898
g91
(dp5899
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5900
sg109
(lp5901
sg111
(lp5902
sg113
(dp5903
sg88
(lp5904
ssg116
S'pair if: 2 option: 1 if: 2 option: 1'
p5905
sg118
g4597
sa(dp5906
g79
(dp5907
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5908
g91
(dp5909
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5910
sg109
(lp5911
sg111
(lp5912
sg113
(dp5913
sg88
(lp5914
ssg116
S'pair if: 2 option: 1 if: 2 option: 2'
p5915
sg118
g4597
sasg185
S"if (test == 'O' || test == 'X')"
p5916
sassg116
S'pair if: 2 option: 1'
p5917
sg118
g4597
sasg185
S'if (oflag)'
p5918
sa(dp5919
g173
(lp5920
(dp5921
g79
(dp5922
g81
I3
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg86
I0
sg87
I0
sg88
I3
ssg89
(dp5923
g91
(dp5924
g81
I2
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5925
sg109
(lp5926
sg111
(lp5927
sg113
(dp5928
sg88
(lp5929
(dp5930
g173
(lp5931
(dp5932
g79
(dp5933
g81
I1
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5934
g91
(dp5935
g81
I1
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5936
sg109
(lp5937
sg111
(lp5938
sg113
(dp5939
sg88
(lp5940
ssg116
S'pair if: 3 option: 1 if: 1 option: 1'
p5941
sg118
g4597
sa(dp5942
g79
(dp5943
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5944
g91
(dp5945
g81
I0
sg82
I0
sg83
I0
sg84
I4
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5946
sg109
(lp5947
sg111
(lp5948
sg113
(dp5949
sg88
(lp5950
ssg116
S'pair if: 3 option: 1 if: 1 option: 2'
p5951
sg118
g4597
sasg185
S"if (ref == 'O' || ref == 'X')"
p5952
sassg116
S'pair if: 3 option: 1'
p5953
sg118
g4597
sasg185
S'if (verbose && ref != test)'
p5954
sassg116
g42
sg118
g4597
sa(dp5955
g79
(dp5956
g81
I3
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I2
sg87
I0
sg88
I8
ssg89
(dp5957
g91
(dp5958
g81
I1
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp5959
sg109
(lp5960
sg111
(lp5961
sg113
(dp5962
sg88
(lp5963
(dp5964
g173
(lp5965
(dp5966
g79
(dp5967
g81
I2
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I1
sg87
I0
sg88
I2
ssg89
(dp5968
g91
(dp5969
g81
I2
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp5970
sg109
(lp5971
sg111
(lp5972
sg113
(dp5973
sg88
(lp5974
(dp5975
g173
(lp5976
(dp5977
g79
(dp5978
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5979
g91
(dp5980
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5981
sg109
(lp5982
sg111
(lp5983
sg113
(dp5984
sg88
(lp5985
ssg116
S'pstat if: 1 option: 1 if: 1 option: 1'
p5986
sg118
g4597
sa(dp5987
g79
(dp5988
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp5989
g91
(dp5990
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp5991
sg109
(lp5992
sg111
(lp5993
sg113
(dp5994
sg88
(lp5995
ssg116
S'pstat if: 1 option: 1 if: 1 option: 2'
p5996
sg118
g4597
sasg185
S'if (b <= 0)'
p5997
sassg116
S'pstat if: 1 option: 1'
p5998
sg118
g4597
sa(dp5999
g79
(dp6000
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6001
g91
(dp6002
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6003
sg109
(lp6004
sg111
(lp6005
sg113
(dp6006
sg88
(lp6007
ssg116
S'pstat if: 1 option: 2'
p6008
sg118
g4597
sa(dp6009
g79
(dp6010
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6011
g91
(dp6012
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6013
sg109
(lp6014
sg111
(lp6015
sg113
(dp6016
sg88
(lp6017
ssg116
S'pstat if: 1 option: 3'
p6018
sg118
g4597
sasg185
S'if (fflag == 1 || fflag == 3 || fflag == 4 || fflag == 6)'
p6019
sassg116
g43
sg118
g4597
sa(dp6020
g79
(dp6021
g81
I3
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I2
sg87
I0
sg88
I8
ssg89
(dp6022
g91
(dp6023
g81
I1
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp6024
sg109
(lp6025
sg111
(lp6026
sg113
(dp6027
sg88
(lp6028
(dp6029
g173
(lp6030
(dp6031
g79
(dp6032
g81
I2
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I1
sg87
I0
sg88
I2
ssg89
(dp6033
g91
(dp6034
g81
I2
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp6035
sg109
(lp6036
sg111
(lp6037
sg113
(dp6038
sg88
(lp6039
(dp6040
g173
(lp6041
(dp6042
g79
(dp6043
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6044
g91
(dp6045
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6046
sg109
(lp6047
sg111
(lp6048
sg113
(dp6049
sg88
(lp6050
ssg116
S'sstat if: 1 option: 1 if: 1 option: 1'
p6051
sg118
g4597
sa(dp6052
g79
(dp6053
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6054
g91
(dp6055
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6056
sg109
(lp6057
sg111
(lp6058
sg113
(dp6059
sg88
(lp6060
ssg116
S'sstat if: 1 option: 1 if: 1 option: 2'
p6061
sg118
g4597
sasg185
S'if (b <= 0)'
p6062
sassg116
S'sstat if: 1 option: 1'
p6063
sg118
g4597
sa(dp6064
g79
(dp6065
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6066
g91
(dp6067
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6068
sg109
(lp6069
sg111
(lp6070
sg113
(dp6071
sg88
(lp6072
ssg116
S'sstat if: 1 option: 2'
p6073
sg118
g4597
sa(dp6074
g79
(dp6075
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6076
g91
(dp6077
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6078
sg109
(lp6079
sg111
(lp6080
sg113
(dp6081
sg88
(lp6082
ssg116
S'sstat if: 1 option: 3'
p6083
sg118
g4597
sasg185
S'if (fflag == 1 || fflag == 3 || fflag == 4 || fflag == 6)'
p6084
sassg116
g44
sg118
g4597
sa(dp6085
g79
(dp6086
g81
I2
sg82
I0
sg83
I102
sg84
I152
sg85
I0
sg86
I10
sg87
I111
sg88
I116
ssg89
(dp6087
g91
(dp6088
g81
I2
sg82
I0
sg83
I2
sg84
I10
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp6089
(dp6090
g97
(dp6091
g79
(dp6092
g81
I0
sg82
I0
sg83
I20
sg84
I26
sg85
I0
sg86
I2
sg87
I19
sg88
I17
ssg89
(dp6093
g91
(dp6094
g81
I0
sg82
I0
sg83
I8
sg84
I24
sg85
I0
sg93
I1
sg86
I1
sg87
I14
ssg94
(lp6095
sg109
(lp6096
sg111
(lp6097
sg113
(dp6098
g47
I1
ssg88
(lp6099
(dp6100
g173
(lp6101
(dp6102
g79
(dp6103
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp6104
g91
(dp6105
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp6106
sg109
(lp6107
sg111
(lp6108
sg113
(dp6109
sg88
(lp6110
ssg116
S'init for: 1 if: 1 option: 1'
p6111
sg118
g4597
sasg185
S"if (*argv[i] == '-')"
p6112
sa(dp6113
g173
(lp6114
(dp6115
g79
(dp6116
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6117
g91
(dp6118
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6119
sg109
(lp6120
sg111
(lp6121
sg113
(dp6122
sg88
(lp6123
ssg116
S'init for: 1 if: 2 option: 1'
p6124
sg118
g4597
sasg185
S'if (++i >= argc - 1)'
p6125
sa(dp6126
g173
(lp6127
(dp6128
g79
(dp6129
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6130
g91
(dp6131
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6132
sg109
(lp6133
sg111
(lp6134
sg113
(dp6135
sg88
(lp6136
ssg116
S'init for: 1 if: 3 option: 1'
p6137
sg118
g4597
sasg185
S'if (++i >= argc)'
p6138
sa(dp6139
g173
(lp6140
(dp6141
g79
(dp6142
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6143
g91
(dp6144
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6145
sg109
(lp6146
sg111
(lp6147
sg113
(dp6148
sg88
(lp6149
ssg116
S'init for: 1 if: 4 option: 1'
p6150
sg118
g4597
sasg185
S'if (++i >= argc)'
p6151
sa(dp6152
g173
(lp6153
(dp6154
g79
(dp6155
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6156
g91
(dp6157
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6158
sg109
(lp6159
sg111
(lp6160
sg113
(dp6161
sg88
(lp6162
ssg116
S'init for: 1 if: 5 option: 1'
p6163
sg118
g4597
sasg185
S'if (++i >= argc)'
p6164
sa(dp6165
g173
(lp6166
(dp6167
g79
(dp6168
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6169
g91
(dp6170
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6171
sg109
(lp6172
sg111
(lp6173
sg113
(dp6174
sg88
(lp6175
ssg116
S'init for: 1 if: 6 option: 1'
p6176
sg118
g4597
sasg185
S'if (++i >= argc - 1)'
p6177
sa(dp6178
g173
(lp6179
(dp6180
g79
(dp6181
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6182
g91
(dp6183
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6184
sg109
(lp6185
sg111
(lp6186
sg113
(dp6187
sg88
(lp6188
ssg116
S'init for: 1 if: 7 option: 1'
p6189
sg118
g4597
sasg185
S'if (++i >= argc - 1)'
p6190
sa(dp6191
g173
(lp6192
(dp6193
g79
(dp6194
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6195
g91
(dp6196
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6197
sg109
(lp6198
sg111
(lp6199
sg113
(dp6200
sg88
(lp6201
ssg116
S'init for: 1 if: 8 option: 1'
p6202
sg118
g4597
sasg185
S'if (++i >= argc)'
p6203
sa(dp6204
g173
(lp6205
(dp6206
g79
(dp6207
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6208
g91
(dp6209
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6210
sg109
(lp6211
sg111
(lp6212
sg113
(dp6213
sg88
(lp6214
ssg116
S'init for: 1 if: 9 option: 1'
p6215
sg118
g4597
sasg185
S'if (++i >= argc)'
p6216
sa(dp6217
g173
(lp6218
(dp6219
g79
(dp6220
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6221
g91
(dp6222
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6223
sg109
(lp6224
sg111
(lp6225
sg113
(dp6226
sg88
(lp6227
ssg116
S'init for: 1 if: 10 option: 1'
p6228
sg118
g4597
sasg185
S'if (++i >= argc)'
p6229
sa(dp6230
g173
(lp6231
(dp6232
g79
(dp6233
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6234
g91
(dp6235
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6236
sg109
(lp6237
sg111
(lp6238
sg113
(dp6239
sg88
(lp6240
ssg116
S'init for: 1 if: 11 option: 1'
p6241
sg118
g4597
sasg185
S'if (++i >= argc)'
p6242
sa(dp6243
g173
(lp6244
(dp6245
g79
(dp6246
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6247
g91
(dp6248
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6249
sg109
(lp6250
sg111
(lp6251
sg113
(dp6252
sg88
(lp6253
ssg116
S'init for: 1 if: 12 option: 1'
p6254
sg118
g4597
sasg185
S'if (++i >= argc)'
p6255
sassg116
S'init for: 1'
p6256
sg118
g4597
ssg120
I5
sg121
g2476
sg79
(dp6257
g81
I0
sg82
I0
sg83
I100
sg84
I131
sg85
I0
sg86
I10
sg87
I100
sg88
I90
ssg124
S'tor (i = 1; i < argc; i++)'
p6258
sg126
(dp6259
g79
(dp6260
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp6261
g91
(dp6262
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp6263
sg109
(lp6264
sg111
(lp6265
sg113
(dp6266
sg88
(lp6267
ssg116
g136
sg118
g4597
ssasg109
(lp6268
sg111
(lp6269
sg113
(dp6270
g47
I1
ssg88
(lp6271
(dp6272
g173
(lp6273
(dp6274
g79
(dp6275
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I5
sg88
I5
ssg89
(dp6276
g91
(dp6277
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6278
sg109
(lp6279
sg111
(lp6280
sg113
(dp6281
g47
I1
ssg88
(lp6282
ssg116
S'init if: 1 option: 1'
p6283
sg118
g4597
sasg185
S'if (!record || !an[0].name)'
p6284
sa(dp6285
g173
(lp6286
(dp6287
g79
(dp6288
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6289
g91
(dp6290
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6291
sg109
(lp6292
sg111
(lp6293
sg113
(dp6294
sg88
(lp6295
ssg116
S'init if: 2 option: 1'
p6296
sg118
g4597
sasg185
S'if (start != 0L || end_time != 0L || match_dt != 0)'
p6297
sa(dp6298
g173
(lp6299
(dp6300
g79
(dp6301
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6302
g91
(dp6303
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6304
sg109
(lp6305
sg111
(lp6306
sg113
(dp6307
sg88
(lp6308
ssg116
S'init if: 3 option: 1'
p6309
sg118
g4597
sasg185
S'if (sampfreq(record) <= 0)'
p6310
sa(dp6311
g173
(lp6312
(dp6313
g79
(dp6314
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6315
g91
(dp6316
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6317
sg109
(lp6318
sg111
(lp6319
sg113
(dp6320
sg88
(lp6321
ssg116
S'init if: 4 option: 1'
p6322
sg118
g4597
sa(dp6323
g79
(dp6324
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6325
g91
(dp6326
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6327
sg109
(lp6328
sg111
(lp6329
sg113
(dp6330
sg88
(lp6331
ssg116
S'init if: 4 option: 2'
p6332
sg118
g4597
sasg185
S'if (match_dt)'
p6333
sa(dp6334
g173
(lp6335
(dp6336
g79
(dp6337
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6338
g91
(dp6339
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6340
sg109
(lp6341
sg111
(lp6342
sg113
(dp6343
sg88
(lp6344
ssg116
S'init if: 5 option: 1'
p6345
sg118
g4597
sa(dp6346
g79
(dp6347
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6348
g91
(dp6349
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6350
sg109
(lp6351
sg111
(lp6352
sg113
(dp6353
sg88
(lp6354
ssg116
S'init if: 5 option: 2'
p6355
sg118
g4597
sasg185
S'if (start)'
p6356
sa(dp6357
g173
(lp6358
(dp6359
g79
(dp6360
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6361
g91
(dp6362
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6363
sg109
(lp6364
sg111
(lp6365
sg113
(dp6366
sg88
(lp6367
ssg116
S'init if: 6 option: 1'
p6368
sg118
g4597
sa(dp6369
g79
(dp6370
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6371
g91
(dp6372
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6373
sg109
(lp6374
sg111
(lp6375
sg113
(dp6376
sg88
(lp6377
ssg116
S'init if: 6 option: 2'
p6378
sg118
g4597
sasg185
S'if (end_time)'
p6379
sa(dp6380
g173
(lp6381
(dp6382
g79
(dp6383
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6384
g91
(dp6385
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6386
sg109
(lp6387
sg111
(lp6388
sg113
(dp6389
sg88
(lp6390
ssg116
S'init if: 7 option: 1'
p6391
sg118
g4597
sasg185
S'if (end_time > 0L && end_time < start)'
p6392
sa(dp6393
g173
(lp6394
(dp6395
g79
(dp6396
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6397
g91
(dp6398
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6399
sg109
(lp6400
sg111
(lp6401
sg113
(dp6402
sg88
(lp6403
ssg116
S'init if: 8 option: 1'
p6404
sg118
g4597
sasg185
S'if (oflag)'
p6405
sa(dp6406
g173
(lp6407
(dp6408
g79
(dp6409
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6410
g91
(dp6411
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6412
sg109
(lp6413
sg111
(lp6414
sg113
(dp6415
sg88
(lp6416
ssg116
S'init if: 9 option: 1'
p6417
sg118
g4597
sasg185
S'if (annopen(record, an, 2 + oflag) < 0)'
p6418
sassg116
g45
sg118
g4597
sa(dp6419
g79
(dp6420
g81
I32
sg82
I0
sg83
I175
sg84
I15
sg85
I0
sg86
I21
sg87
I0
sg88
I121
ssg89
(dp6421
g91
(dp6422
g81
I0
sg82
I0
sg83
I112
sg84
I11
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6423
sg109
(lp6424
sg111
(lp6425
(dp6426
g5301
(lp6427
(dp6428
g79
(dp6429
g81
I0
sg82
I0
sg83
I39
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6430
g91
(dp6431
g81
I0
sg82
I0
sg83
I39
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6432
sg109
(lp6433
sg111
(lp6434
sg113
(dp6435
sg88
(lp6436
ssg116
S'print_results switch: 1 case: 1'
p6437
sg118
g4597
sa(dp6438
g79
(dp6439
g81
I0
sg82
I0
sg83
I36
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6440
g91
(dp6441
g81
I0
sg82
I0
sg83
I36
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6442
sg109
(lp6443
sg111
(lp6444
sg113
(dp6445
sg88
(lp6446
ssg116
S'print_results switch: 1 case: 2'
p6447
sg118
g4597
sa(dp6448
g79
(dp6449
g81
I0
sg82
I0
sg83
I13
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6450
g91
(dp6451
g81
I0
sg82
I0
sg83
I13
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6452
sg109
(lp6453
sg111
(lp6454
sg113
(dp6455
sg88
(lp6456
ssg116
S'print_results switch: 1 case: 3'
p6457
sg118
g4597
sa(dp6458
g79
(dp6459
g81
I0
sg82
I0
sg83
I31
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6460
g91
(dp6461
g81
I0
sg82
I0
sg83
I31
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6462
sg109
(lp6463
sg111
(lp6464
sg113
(dp6465
sg88
(lp6466
ssg116
S'print_results switch: 1 case: 4'
p6467
sg118
g4597
sa(dp6468
g79
(dp6469
g81
I0
sg82
I0
sg83
I27
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6470
g91
(dp6471
g81
I0
sg82
I0
sg83
I27
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6472
sg109
(lp6473
sg111
(lp6474
sg113
(dp6475
sg88
(lp6476
ssg116
S'print_results switch: 1 case: 5'
p6477
sg118
g4597
sa(dp6478
g79
(dp6479
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6480
g91
(dp6481
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6482
sg109
(lp6483
sg111
(lp6484
sg113
(dp6485
sg88
(lp6486
ssg116
S'print_results switch: 1 case: 6'
p6487
sg118
g4597
sasg185
S'switch (fflag)'
p6488
sasg113
(dp6489
g43
I6
sg44
I4
ssg88
(lp6490
(dp6491
g173
(lp6492
(dp6493
g79
(dp6494
g81
I0
sg82
I0
sg83
I3
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I5
ssg89
(dp6495
g91
(dp6496
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6497
sg109
(lp6498
sg111
(lp6499
sg113
(dp6500
sg88
(lp6501
(dp6502
g173
(lp6503
(dp6504
g79
(dp6505
g81
I0
sg82
I0
sg83
I3
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I3
ssg89
(dp6506
g91
(dp6507
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6508
sg109
(lp6509
sg111
(lp6510
sg113
(dp6511
sg88
(lp6512
(dp6513
g173
(lp6514
(dp6515
g79
(dp6516
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6517
g91
(dp6518
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6519
sg109
(lp6520
sg111
(lp6521
sg113
(dp6522
sg88
(lp6523
ssg116
S'print_results if: 1 option: 1 if: 1 option: 1 if: 1 option: 1'
p6524
sg118
g4597
sasg185
S'if ((ofile = fopen(ofname, "w")) == NULL)'
p6525
sa(dp6526
g173
(lp6527
(dp6528
g79
(dp6529
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6530
g91
(dp6531
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6532
sg109
(lp6533
sg111
(lp6534
sg113
(dp6535
sg88
(lp6536
ssg116
S'print_results if: 1 option: 1 if: 1 option: 1 if: 2 option: 1'
p6537
sg118
g4597
sa(dp6538
g79
(dp6539
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6540
g91
(dp6541
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6542
sg109
(lp6543
sg111
(lp6544
sg113
(dp6545
sg88
(lp6546
ssg116
S'print_results if: 1 option: 1 if: 1 option: 1 if: 2 option: 2'
p6547
sg118
g4597
sasg185
S'if (fflag == 2)'
p6548
sassg116
S'print_results if: 1 option: 1 if: 1 option: 1'
p6549
sg118
g4597
sa(dp6550
g79
(dp6551
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp6552
g91
(dp6553
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6554
sg109
(lp6555
sg111
(lp6556
sg113
(dp6557
sg88
(lp6558
(dp6559
g173
(lp6560
(dp6561
g79
(dp6562
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6563
g91
(dp6564
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6565
sg109
(lp6566
sg111
(lp6567
sg113
(dp6568
sg88
(lp6569
ssg116
S'print_results if: 1 option: 1 if: 1 option: 2 if: 1 option: 1'
p6570
sg118
g4597
sasg185
S'if ((ofile = fopen(ofname, "a")) == NULL)'
p6571
sassg116
S'print_results if: 1 option: 1 if: 1 option: 2'
p6572
sg118
g4597
sasg185
S'if ((ofile = fopen(ofname, "r")) == NULL)'
p6573
sassg116
S'print_results if: 1 option: 1'
p6574
sg118
g4597
sa(dp6575
g79
(dp6576
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6577
g91
(dp6578
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6579
sg109
(lp6580
sg111
(lp6581
sg113
(dp6582
sg88
(lp6583
ssg116
S'print_results if: 1 option: 2'
p6584
sg118
g4597
sasg185
S'if (strcmp(ofname, "-"))'
p6585
sa(dp6586
g173
(lp6587
(dp6588
g79
(dp6589
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I7
ssg89
(dp6590
g91
(dp6591
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6592
sg109
(lp6593
sg111
(lp6594
sg113
(dp6595
sg88
(lp6596
(dp6597
g173
(lp6598
(dp6599
g79
(dp6600
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I5
ssg89
(dp6601
g91
(dp6602
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6603
sg109
(lp6604
sg111
(lp6605
sg113
(dp6606
sg88
(lp6607
(dp6608
g173
(lp6609
(dp6610
g79
(dp6611
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I3
ssg89
(dp6612
g91
(dp6613
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6614
sg109
(lp6615
sg111
(lp6616
sg113
(dp6617
sg88
(lp6618
(dp6619
g173
(lp6620
(dp6621
g79
(dp6622
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6623
g91
(dp6624
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6625
sg109
(lp6626
sg111
(lp6627
sg113
(dp6628
sg88
(lp6629
ssg116
S'print_results if: 2 option: 1 if: 1 option: 1 if: 1 option: 1 if: 1 option: 1'
p6630
sg118
g4597
sasg185
S'if ((sfile = fopen(sfname, "w")) == NULL)'
p6631
sa(dp6632
g173
(lp6633
(dp6634
g79
(dp6635
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6636
g91
(dp6637
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6638
sg109
(lp6639
sg111
(lp6640
sg113
(dp6641
sg88
(lp6642
ssg116
S'print_results if: 2 option: 1 if: 1 option: 1 if: 1 option: 1 if: 2 option: 1'
p6643
sg118
g4597
sa(dp6644
g79
(dp6645
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6646
g91
(dp6647
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6648
sg109
(lp6649
sg111
(lp6650
sg113
(dp6651
sg88
(lp6652
ssg116
S'print_results if: 2 option: 1 if: 1 option: 1 if: 1 option: 1 if: 2 option: 2'
p6653
sg118
g4597
sasg185
S'if (fflag == 2)'
p6654
sassg116
S'print_results if: 2 option: 1 if: 1 option: 1 if: 1 option: 1'
p6655
sg118
g4597
sa(dp6656
g79
(dp6657
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp6658
g91
(dp6659
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6660
sg109
(lp6661
sg111
(lp6662
sg113
(dp6663
sg88
(lp6664
(dp6665
g173
(lp6666
(dp6667
g79
(dp6668
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6669
g91
(dp6670
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6671
sg109
(lp6672
sg111
(lp6673
sg113
(dp6674
sg88
(lp6675
ssg116
S'print_results if: 2 option: 1 if: 1 option: 1 if: 1 option: 2 if: 1 option: 1'
p6676
sg118
g4597
sasg185
S'if ((sfile = fopen(sfname, "a")) == NULL)'
p6677
sassg116
S'print_results if: 2 option: 1 if: 1 option: 1 if: 1 option: 2'
p6678
sg118
g4597
sasg185
S'if ((sfile = fopen(sfname, "r")) == NULL)'
p6679
sassg116
S'print_results if: 2 option: 1 if: 1 option: 1'
p6680
sg118
g4597
sa(dp6681
g79
(dp6682
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6683
g91
(dp6684
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6685
sg109
(lp6686
sg111
(lp6687
sg113
(dp6688
sg88
(lp6689
ssg116
S'print_results if: 2 option: 1 if: 1 option: 2'
p6690
sg118
g4597
sasg185
S'if (strcmp(sfname, "-"))'
p6691
sassg116
S'print_results if: 2 option: 1'
p6692
sg118
g4597
sa(dp6693
g79
(dp6694
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6695
g91
(dp6696
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6697
sg109
(lp6698
sg111
(lp6699
sg113
(dp6700
sg88
(lp6701
ssg116
S'print_results if: 2 option: 2'
p6702
sg118
g4597
sasg185
S'if (fflag == 2 || fflag == 5)'
p6703
sa(dp6704
g173
(lp6705
(dp6706
g79
(dp6707
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6708
g91
(dp6709
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6710
sg109
(lp6711
sg111
(lp6712
sg113
(dp6713
sg88
(lp6714
ssg116
S'print_results if: 3 option: 1'
p6715
sg118
g4597
sasg185
S'if (fflag == 1 || fflag == 3 || fflag == 4 || fflag == 6)'
p6716
sa(dp6717
g173
(lp6718
(dp6719
g79
(dp6720
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6721
g91
(dp6722
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6723
sg109
(lp6724
sg111
(lp6725
sg113
(dp6726
sg88
(lp6727
ssg116
S'print_results if: 4 option: 1'
p6728
sg118
g4597
sa(dp6729
g79
(dp6730
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6731
g91
(dp6732
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6733
sg109
(lp6734
sg111
(lp6735
sg113
(dp6736
sg88
(lp6737
ssg116
S'print_results if: 4 option: 2'
p6738
sg118
g4597
sasg185
S'if (fflag < 4)'
p6739
sa(dp6740
g173
(lp6741
(dp6742
g79
(dp6743
g81
I2
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I1
sg87
I0
sg88
I2
ssg89
(dp6744
g91
(dp6745
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6746
sg109
(lp6747
sg111
(lp6748
sg113
(dp6749
sg88
(lp6750
(dp6751
g173
(lp6752
(dp6753
g79
(dp6754
g81
I2
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp6755
g91
(dp6756
g81
I2
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp6757
sg109
(lp6758
sg111
(lp6759
sg113
(dp6760
sg88
(lp6761
ssg116
S'print_results if: 5 option: 1 if: 1 option: 1'
p6762
sg118
g4597
sa(dp6763
g79
(dp6764
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6765
g91
(dp6766
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6767
sg109
(lp6768
sg111
(lp6769
sg113
(dp6770
sg88
(lp6771
ssg116
S'print_results if: 5 option: 1 if: 1 option: 2'
p6772
sg118
g4597
sasg185
S'if (nrre)'
p6773
sassg116
S'print_results if: 5 option: 1'
p6774
sg118
g4597
sa(dp6775
g79
(dp6776
g81
I2
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I1
sg87
I0
sg88
I2
ssg89
(dp6777
g91
(dp6778
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6779
sg109
(lp6780
sg111
(lp6781
sg113
(dp6782
sg88
(lp6783
(dp6784
g173
(lp6785
(dp6786
g79
(dp6787
g81
I2
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp6788
g91
(dp6789
g81
I2
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp6790
sg109
(lp6791
sg111
(lp6792
sg113
(dp6793
sg88
(lp6794
ssg116
S'print_results if: 5 option: 2 if: 1 option: 1'
p6795
sg118
g4597
sa(dp6796
g79
(dp6797
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6798
g91
(dp6799
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6800
sg109
(lp6801
sg111
(lp6802
sg113
(dp6803
sg88
(lp6804
ssg116
S'print_results if: 5 option: 2 if: 1 option: 2'
p6805
sg118
g4597
sasg185
S'if (nrre)'
p6806
sassg116
S'print_results if: 5 option: 2'
p6807
sg118
g4597
sasg185
S'if (fflag == 4 || fflag == 6)'
p6808
sa(dp6809
g173
(lp6810
(dp6811
g79
(dp6812
g81
I0
sg82
I0
sg83
I6
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6813
g91
(dp6814
g81
I0
sg82
I0
sg83
I6
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6815
sg109
(lp6816
sg111
(lp6817
sg113
(dp6818
sg88
(lp6819
ssg116
S'print_results if: 6 option: 1'
p6820
sg118
g4597
sasg185
S'if (fflag >= 4)'
p6821
sa(dp6822
g173
(lp6823
(dp6824
g79
(dp6825
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6826
g91
(dp6827
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6828
sg109
(lp6829
sg111
(lp6830
sg113
(dp6831
sg88
(lp6832
ssg116
S'print_results if: 7 option: 1'
p6833
sg118
g4597
sasg185
S'if (fflag == 1 || fflag == 3 || fflag == 4 || fflag == 6)'
p6834
sa(dp6835
g173
(lp6836
(dp6837
g79
(dp6838
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6839
g91
(dp6840
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6841
sg109
(lp6842
sg111
(lp6843
sg113
(dp6844
sg88
(lp6845
ssg116
S'print_results if: 8 option: 1'
p6846
sg118
g4597
sasg185
S'if (ofile != NULL)'
p6847
sassg116
g46
sg118
g4597
sa(dp6848
g79
(dp6849
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I5
sg88
I5
ssg89
(dp6850
g91
(dp6851
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6852
(dp6853
g97
(dp6854
g79
(dp6855
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6856
g91
(dp6857
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6858
sg109
(lp6859
sg111
(lp6860
sg113
(dp6861
sg88
(lp6862
ssg116
S'help for: 1'
p6863
sg118
g4597
ssg120
I5
sg121
g2476
sg79
(dp6864
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I5
sg88
I5
ssg124
S'tor (i = 1; help_strings[i] != NULL; i++)'
p6865
sg126
(dp6866
g79
(dp6867
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp6868
g91
(dp6869
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp6870
sg109
(lp6871
sg111
(lp6872
sg113
(dp6873
sg88
(lp6874
ssg116
g136
sg118
g4597
ssasg109
(lp6875
sg111
(lp6876
sg113
(dp6877
sg88
(lp6878
ssg116
g47
sg118
g4597
sa(dp6879
g79
(dp6880
g81
I4
sg82
I101
sg83
I97
sg84
I436
sg85
I0
sg86
I102
sg87
I7
sg88
I375
ssg89
(dp6881
g91
(dp6882
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp6883
(dp6884
g97
(dp6885
g79
(dp6886
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp6887
g91
(dp6888
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp6889
sg109
(lp6890
sg111
(lp6891
sg113
(dp6892
sg88
(lp6893
ssg116
S'genxcmp for: 1'
p6894
sg118
g4597
ssg120
I5
sg121
g2476
sg79
(dp6895
g81
I0
sg82
I0
sg83
I10
sg84
I6
sg85
I0
sg86
I10
sg87
I5
sg88
I5
ssg124
S'tor (p = mstring + 1; p < mstring + *mstring; p++)'
p6896
sg126
(dp6897
g79
(dp6898
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg86
I1
sg87
I1
sg88
I0
ssg89
(dp6899
g91
(dp6900
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I1
ssg94
(lp6901
sg109
(lp6902
sg111
(lp6903
sg113
(dp6904
sg88
(lp6905
ssg116
g136
sg118
g4597
ssasg109
(lp6906
(dp6907
g97
(dp6908
g79
(dp6909
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6910
g91
(dp6911
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6912
sg109
(lp6913
sg111
(lp6914
sg113
(dp6915
sg88
(lp6916
ssg116
S'genxcmp while: 1'
p6917
sg118
g4597
ssg120
I5
sg121
g2476
sg79
(dp6918
g81
I0
sg82
I0
sg83
I5
sg84
I5
sg85
I0
sg86
I0
sg87
I0
sg88
I15
ssg124
S'vhile ((end_time > 0L && (T <= end_time || t <= end_time))'
p6919
sg126
(dp6920
g79
(dp6921
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6922
g91
(dp6923
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6924
sg109
(lp6925
sg111
(lp6926
sg113
(dp6927
sg88
(lp6928
ssg116
g2488
sg118
g4597
ssasg111
(lp6929
sg113
(dp6930
sg88
(lp6931
(dp6932
g173
(lp6933
(dp6934
g79
(dp6935
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6936
g91
(dp6937
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6938
sg109
(lp6939
sg111
(lp6940
sg113
(dp6941
sg88
(lp6942
ssg116
S'genxcmp if: 1 option: 1'
p6943
sg118
g4597
sasg185
S'if (ref_annot.anntyp == 0)'
p6944
sa(dp6945
g173
(lp6946
(dp6947
g79
(dp6948
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6949
g91
(dp6950
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6951
sg109
(lp6952
sg111
(lp6953
sg113
(dp6954
sg88
(lp6955
ssg116
S'genxcmp if: 2 option: 1'
p6956
sg118
g4597
sasg185
S'if (test_annot.anntyp == 0)'
p6957
sa(dp6958
g173
(lp6959
(dp6960
g79
(dp6961
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6962
g91
(dp6963
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6964
sg109
(lp6965
sg111
(lp6966
sg113
(dp6967
sg88
(lp6968
ssg116
S'genxcmp if: 3 option: 1'
p6969
sg118
g4597
sasg185
S'if (!ref_annot.aux)'
p6970
sa(dp6971
g173
(lp6972
(dp6973
g79
(dp6974
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp6975
g91
(dp6976
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6977
sg109
(lp6978
sg111
(lp6979
sg113
(dp6980
sg88
(lp6981
ssg116
S'genxcmp if: 4 option: 1'
p6982
sg118
g4597
sasg185
S'if (!test_annot.aux)'
p6983
sa(dp6984
g173
(lp6985
(dp6986
g79
(dp6987
g81
I4
sg82
I101
sg83
I82
sg84
I421
sg85
I0
sg86
I91
sg87
I2
sg88
I349
ssg89
(dp6988
g91
(dp6989
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp6990
sg109
(lp6991
sg111
(lp6992
sg113
(dp6993
g76
I1
ssg88
(lp6994
(dp6995
g173
(lp6996
(dp6997
g79
(dp6998
g81
I1
sg82
I100
sg83
I79
sg84
I421
sg85
I0
sg86
I90
sg87
I0
sg88
I343
ssg89
(dp6999
g91
(dp7000
g81
I1
sg82
I0
sg83
I5
sg84
I12
sg85
I0
sg93
I1
sg86
I2
sg87
I0
ssg94
(lp7001
sg109
(lp7002
sg111
(lp7003
sg113
(dp7004
g38
I1
sg39
I1
ssg88
(lp7005
(dp7006
g173
(lp7007
(dp7008
g79
(dp7009
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7010
g91
(dp7011
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7012
sg109
(lp7013
sg111
(lp7014
sg113
(dp7015
sg88
(lp7016
ssg116
S'genxcmp if: 5 option: 1 if: 1 option: 1 if: 1 option: 1'
p7017
sg118
g4597
sasg185
S'if (test_annot.anntyp != ref_annot.anntyp || test_annot.subtyp != ref_annot.subtyp'
p7018
sa(dp7019
g173
(lp7020
(dp7021
g79
(dp7022
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7023
g91
(dp7024
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7025
sg109
(lp7026
sg111
(lp7027
sg113
(dp7028
sg88
(lp7029
ssg116
S'genxcmp if: 5 option: 1 if: 1 option: 1 if: 2 option: 1'
p7030
sg118
g4597
sasg185
S'if (test_annot.subtyp != ref_annot.subtyp || test_annot.chan != ref_annot.chan'
p7031
sa(dp7032
g173
(lp7033
(dp7034
g79
(dp7035
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7036
g91
(dp7037
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7038
sg109
(lp7039
sg111
(lp7040
sg113
(dp7041
sg88
(lp7042
ssg116
S'genxcmp if: 5 option: 1 if: 1 option: 1 if: 3 option: 1'
p7043
sg118
g4597
sasg185
S'if (*ref_annot.aux)'
p7044
sa(dp7045
g173
(lp7046
(dp7047
g79
(dp7048
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7049
g91
(dp7050
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7051
sg109
(lp7052
sg111
(lp7053
sg113
(dp7054
sg88
(lp7055
ssg116
S'genxcmp if: 5 option: 1 if: 1 option: 1 if: 4 option: 1'
p7056
sg118
g4597
sasg185
S'if (*test_annot.aux)'
p7057
sa(dp7058
g173
(lp7059
(dp7060
g79
(dp7061
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7062
g91
(dp7063
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7064
sg109
(lp7065
sg111
(lp7066
sg113
(dp7067
sg88
(lp7068
ssg116
S'genxcmp if: 5 option: 1 if: 1 option: 1 if: 5 option: 1'
p7069
sg118
g4597
sasg185
S'if (alen > 254)'
p7070
sa(dp7071
g173
(lp7072
(dp7073
g79
(dp7074
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7075
g91
(dp7076
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7077
sg109
(lp7078
sg111
(lp7079
sg113
(dp7080
sg88
(lp7081
ssg116
S'genxcmp if: 5 option: 1 if: 1 option: 1 if: 6 option: 1'
p7082
sg118
g4597
sasg185
S'if (!ref_annot.aux)'
p7083
sa(dp7084
g173
(lp7085
(dp7086
g79
(dp7087
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7088
g91
(dp7089
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7090
sg109
(lp7091
sg111
(lp7092
sg113
(dp7093
sg88
(lp7094
ssg116
S'genxcmp if: 5 option: 1 if: 1 option: 1 if: 7 option: 1'
p7095
sg118
g4597
sasg185
S'if (!test_annot.aux)'
p7096
sassg116
S'genxcmp if: 5 option: 1 if: 1 option: 1'
p7097
sg118
g4597
sa(dp7098
g79
(dp7099
g81
I4
sg82
I69
sg83
I72
sg84
I282
sg85
I0
sg86
I62
sg87
I2
sg88
I247
ssg89
(dp7100
g91
(dp7101
g81
I1
sg82
I0
sg83
I3
sg84
I6
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp7102
sg109
(lp7103
sg111
(lp7104
sg113
(dp7105
g40
I1
sg39
I1
ssg88
(lp7106
(dp7107
g173
(lp7108
(dp7109
g79
(dp7110
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7111
g91
(dp7112
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7113
sg109
(lp7114
sg111
(lp7115
sg113
(dp7116
sg88
(lp7117
ssg116
S'genxcmp if: 5 option: 1 if: 1 option: 2 if: 1 option: 1'
p7118
sg118
g4597
sasg185
S'if (*test_annot.aux)'
p7119
sa(dp7120
g173
(lp7121
(dp7122
g79
(dp7123
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7124
g91
(dp7125
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7126
sg109
(lp7127
sg111
(lp7128
sg113
(dp7129
sg88
(lp7130
ssg116
S'genxcmp if: 5 option: 1 if: 1 option: 2 if: 2 option: 1'
p7131
sg118
g4597
sasg185
S'if (alen > 254)'
p7132
sa(dp7133
g173
(lp7134
(dp7135
g79
(dp7136
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7137
g91
(dp7138
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7139
sg109
(lp7140
sg111
(lp7141
sg113
(dp7142
sg88
(lp7143
ssg116
S'genxcmp if: 5 option: 1 if: 1 option: 2 if: 3 option: 1'
p7144
sg118
g4597
sasg185
S'if (!test_annot.aux)'
p7145
sassg116
S'genxcmp if: 5 option: 1 if: 1 option: 2'
p7146
sg118
g4597
sasg185
S"if (T - t <= match_dt && (T - t < abs(T - tprime) || aprime == 'O'))"
p7147
sassg116
S'genxcmp if: 5 option: 1'
p7148
sg118
g4597
sa(dp7149
g79
(dp7150
g81
I1
sg82
I101
sg83
I82
sg84
I421
sg85
I0
sg86
I91
sg87
I0
sg88
I349
ssg89
(dp7151
g91
(dp7152
g81
I0
sg82
I0
sg83
I3
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7153
sg109
(lp7154
sg111
(lp7155
sg113
(dp7156
g76
I1
ssg88
(lp7157
(dp7158
g173
(lp7159
(dp7160
g79
(dp7161
g81
I1
sg82
I100
sg83
I79
sg84
I421
sg85
I0
sg86
I90
sg87
I0
sg88
I343
ssg89
(dp7162
g91
(dp7163
g81
I1
sg82
I0
sg83
I5
sg84
I12
sg85
I0
sg93
I1
sg86
I2
sg87
I0
ssg94
(lp7164
sg109
(lp7165
sg111
(lp7166
sg113
(dp7167
g38
I1
sg39
I1
ssg88
(lp7168
(dp7169
g173
(lp7170
(dp7171
g79
(dp7172
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7173
g91
(dp7174
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7175
sg109
(lp7176
sg111
(lp7177
sg113
(dp7178
sg88
(lp7179
ssg116
S'genxcmp if: 5 option: 2 if: 1 option: 1 if: 1 option: 1'
p7180
sg118
g4597
sasg185
S'if (test_annot.anntyp != ref_annot.anntyp || test_annot.subtyp != ref_annot.subtyp'
p7181
sa(dp7182
g173
(lp7183
(dp7184
g79
(dp7185
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7186
g91
(dp7187
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7188
sg109
(lp7189
sg111
(lp7190
sg113
(dp7191
sg88
(lp7192
ssg116
S'genxcmp if: 5 option: 2 if: 1 option: 1 if: 2 option: 1'
p7193
sg118
g4597
sasg185
S'if (test_annot.subtyp != ref_annot.subtyp || test_annot.chan != ref_annot.chan'
p7194
sa(dp7195
g173
(lp7196
(dp7197
g79
(dp7198
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7199
g91
(dp7200
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7201
sg109
(lp7202
sg111
(lp7203
sg113
(dp7204
sg88
(lp7205
ssg116
S'genxcmp if: 5 option: 2 if: 1 option: 1 if: 3 option: 1'
p7206
sg118
g4597
sasg185
S'if (*ref_annot.aux)'
p7207
sa(dp7208
g173
(lp7209
(dp7210
g79
(dp7211
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7212
g91
(dp7213
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7214
sg109
(lp7215
sg111
(lp7216
sg113
(dp7217
sg88
(lp7218
ssg116
S'genxcmp if: 5 option: 2 if: 1 option: 1 if: 4 option: 1'
p7219
sg118
g4597
sasg185
S'if (*test_annot.aux)'
p7220
sa(dp7221
g173
(lp7222
(dp7223
g79
(dp7224
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7225
g91
(dp7226
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7227
sg109
(lp7228
sg111
(lp7229
sg113
(dp7230
sg88
(lp7231
ssg116
S'genxcmp if: 5 option: 2 if: 1 option: 1 if: 5 option: 1'
p7232
sg118
g4597
sasg185
S'if (alen > 254)'
p7233
sa(dp7234
g173
(lp7235
(dp7236
g79
(dp7237
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7238
g91
(dp7239
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7240
sg109
(lp7241
sg111
(lp7242
sg113
(dp7243
sg88
(lp7244
ssg116
S'genxcmp if: 5 option: 2 if: 1 option: 1 if: 6 option: 1'
p7245
sg118
g4597
sasg185
S'if (!ref_annot.aux)'
p7246
sa(dp7247
g173
(lp7248
(dp7249
g79
(dp7250
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7251
g91
(dp7252
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7253
sg109
(lp7254
sg111
(lp7255
sg113
(dp7256
sg88
(lp7257
ssg116
S'genxcmp if: 5 option: 2 if: 1 option: 1 if: 7 option: 1'
p7258
sg118
g4597
sasg185
S'if (!test_annot.aux)'
p7259
sassg116
S'genxcmp if: 5 option: 2 if: 1 option: 1'
p7260
sg118
g4597
sa(dp7261
g79
(dp7262
g81
I1
sg82
I37
sg83
I30
sg84
I167
sg85
I0
sg86
I32
sg87
I0
sg88
I134
ssg89
(dp7263
g91
(dp7264
g81
I1
sg82
I0
sg83
I3
sg84
I6
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp7265
sg109
(lp7266
sg111
(lp7267
sg113
(dp7268
g41
I1
sg38
I1
ssg88
(lp7269
(dp7270
g173
(lp7271
(dp7272
g79
(dp7273
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7274
g91
(dp7275
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7276
sg109
(lp7277
sg111
(lp7278
sg113
(dp7279
sg88
(lp7280
ssg116
S'genxcmp if: 5 option: 2 if: 1 option: 2 if: 1 option: 1'
p7281
sg118
g4597
sasg185
S'if (*ref_annot.aux)'
p7282
sa(dp7283
g173
(lp7284
(dp7285
g79
(dp7286
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7287
g91
(dp7288
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7289
sg109
(lp7290
sg111
(lp7291
sg113
(dp7292
sg88
(lp7293
ssg116
S'genxcmp if: 5 option: 2 if: 1 option: 2 if: 2 option: 1'
p7294
sg118
g4597
sasg185
S'if (alen > 254)'
p7295
sa(dp7296
g173
(lp7297
(dp7298
g79
(dp7299
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7300
g91
(dp7301
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7302
sg109
(lp7303
sg111
(lp7304
sg113
(dp7305
sg88
(lp7306
ssg116
S'genxcmp if: 5 option: 2 if: 1 option: 2 if: 3 option: 1'
p7307
sg118
g4597
sasg185
S'if (!ref_annot.aux)'
p7308
sassg116
S'genxcmp if: 5 option: 2 if: 1 option: 2'
p7309
sg118
g4597
sasg185
S"if (t - T <= match_dt && (t - T < abs(t - Tprime) || Aprime == 'O'))"
p7310
sassg116
S'genxcmp if: 5 option: 2'
p7311
sg118
g4597
sasg185
S'if (t < T)'
p7312
sassg116
g48
sg118
g4597
sa(dp7313
g79
(dp7314
g81
I0
sg82
I0
sg83
I1
sg84
I59
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp7315
g91
(dp7316
g81
I0
sg82
I0
sg83
I1
sg84
I59
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7317
sg109
(lp7318
sg111
(lp7319
sg113
(dp7320
sg88
(lp7321
(dp7322
g173
(lp7323
(dp7324
g79
(dp7325
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7326
g91
(dp7327
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7328
sg109
(lp7329
sg111
(lp7330
sg113
(dp7331
sg88
(lp7332
ssg116
S'NewInit if: 1 option: 1'
p7333
sg118
g4597
sasg185
S'if (annopen(record, an, 2) < 0)'
p7334
sassg116
g49
sg118
g4597
sa(dp7335
g79
(dp7336
g81
I0
sg82
I0
sg83
I73
sg84
I8
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp7337
g91
(dp7338
g81
I0
sg82
I0
sg83
I73
sg84
I8
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp7339
sg109
(lp7340
sg111
(lp7341
sg113
(dp7342
sg88
(lp7343
ssg116
g50
sg118
g4597
sa(dp7344
g79
(dp7345
g81
F0.0
sg82
F0.0
sg83
F0.0
sg84
F90.0
sg85
F0.0
sg86
F0.0
sg87
F72.0
sg88
F72.0
ssg89
(dp7346
g91
(dp7347
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7348
(dp7349
g97
(dp7350
g79
(dp7351
g81
F0.0
sg82
F0.0
sg83
F0.0
sg84
F11.0
sg85
F0.0
sg86
F0.0
sg87
F8.0
sg88
F8.0
ssg89
(dp7352
g91
(dp7353
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7354
(dp7355
g97
(dp7356
g79
(dp7357
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7358
g91
(dp7359
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7360
sg109
(lp7361
sg111
(lp7362
sg113
(dp7363
sg88
(lp7364
ssg116
S'ResetMatch for: 1 for: 1'
p7365
sg118
S'MATCH.CPP'
p7366
ssg120
F8.0
sg121
g122
sg79
(dp7367
g81
F0.0
sg82
F0.0
sg83
F0.0
sg84
F9.0
sg85
F0.0
sg86
F0.0
sg87
F8.0
sg88
F8.0
ssg124
S'tor (j = 0; j < 8; ++j)'
p7368
sg126
(dp7369
g79
(dp7370
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7371
g91
(dp7372
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7373
sg109
(lp7374
sg111
(lp7375
sg113
(dp7376
sg88
(lp7377
ssg116
g136
sg118
g7366
ssasg109
(lp7378
sg111
(lp7379
sg113
(dp7380
sg88
(lp7381
ssg116
S'ResetMatch for: 1'
p7382
sg118
g7366
ssg120
I8
sg121
g122
sg79
(dp7383
g81
F0.0
sg82
F0.0
sg83
F0.0
sg84
F89.0
sg85
F0.0
sg86
F0.0
sg87
F72.0
sg88
F72.0
ssg124
S'tor (i = 0; i < MAXTYPES; ++i)'
p7384
sg126
(dp7385
g79
(dp7386
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7387
g91
(dp7388
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7389
sg109
(lp7390
sg111
(lp7391
sg113
(dp7392
sg88
(lp7393
ssg116
g136
sg118
g7366
ssasg109
(lp7394
sg111
(lp7395
sg113
(dp7396
sg88
(lp7397
ssg116
g51
sg118
g7366
sa(dp7398
g79
(dp7399
g81
I11
sg82
I9
sg83
I2062
sg84
I241
sg85
I1920
sg86
I27
sg87
I1028
sg88
I1180
ssg89
(dp7400
g91
(dp7401
g81
I3
sg82
I1
sg83
I2
sg84
I14
sg85
I0
sg93
I1
sg86
I3
sg87
I0
ssg94
(lp7402
(dp7403
g97
(dp7404
g79
(dp7405
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp7406
g91
(dp7407
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7408
sg109
(lp7409
sg111
(lp7410
sg113
(dp7411
sg88
(lp7412
(dp7413
g173
(lp7414
(dp7415
g79
(dp7416
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7417
g91
(dp7418
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7419
sg109
(lp7420
sg111
(lp7421
sg113
(dp7422
sg88
(lp7423
ssg116
S'CompareBeats for: 1 if: 1 option: 1'
p7424
sg118
g7366
sa(dp7425
g79
(dp7426
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7427
g91
(dp7428
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7429
sg109
(lp7430
sg111
(lp7431
sg113
(dp7432
sg88
(lp7433
ssg116
S'CompareBeats for: 1 if: 1 option: 2'
p7434
sg118
g7366
sasg185
S'if (beat1[i] > max)'
p7435
sassg116
S'CompareBeats for: 1'
p7436
sg118
g7366
ssg120
I30
sg121
g122
sg79
(dp7437
g81
I0
sg82
I0
sg83
I30
sg84
I61
sg85
I0
sg86
I0
sg87
I30
sg88
I90
ssg124
S'tor (i = MATCH_START + 1; i < MATCH_END; ++i)'
p7438
sg126
(dp7439
g79
(dp7440
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7441
g91
(dp7442
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7443
sg109
(lp7444
sg111
(lp7445
sg113
(dp7446
sg88
(lp7447
ssg116
g136
sg118
g7366
ssa(dp7448
g97
(dp7449
g79
(dp7450
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp7451
g91
(dp7452
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7453
sg109
(lp7454
sg111
(lp7455
sg113
(dp7456
sg88
(lp7457
(dp7458
g173
(lp7459
(dp7460
g79
(dp7461
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7462
g91
(dp7463
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7464
sg109
(lp7465
sg111
(lp7466
sg113
(dp7467
sg88
(lp7468
ssg116
S'CompareBeats for: 2 if: 1 option: 1'
p7469
sg118
g7366
sa(dp7470
g79
(dp7471
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7472
g91
(dp7473
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7474
sg109
(lp7475
sg111
(lp7476
sg113
(dp7477
sg88
(lp7478
ssg116
S'CompareBeats for: 2 if: 1 option: 2'
p7479
sg118
g7366
sasg185
S'if (beat2[i] > max)'
p7480
sassg116
S'CompareBeats for: 2'
p7481
sg118
g7366
ssg120
I30
sg121
g122
sg79
(dp7482
g81
I0
sg82
I0
sg83
I30
sg84
I61
sg85
I0
sg86
I0
sg87
I30
sg88
I90
ssg124
S'tor (i = MATCH_START + 1; i < MATCH_END; ++i)'
p7483
sg126
(dp7484
g79
(dp7485
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7486
g91
(dp7487
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7488
sg109
(lp7489
sg111
(lp7490
sg113
(dp7491
sg88
(lp7492
ssg116
g136
sg118
g7366
ssa(dp7493
g97
(dp7494
g79
(dp7495
g81
I1
sg82
I1
sg83
I249
sg84
I13
sg85
I240
sg86
I3
sg87
I120
sg88
I124
ssg89
(dp7496
g91
(dp7497
g81
I1
sg82
I0
sg83
I8
sg84
I7
sg85
I0
sg93
I1
sg86
I2
sg87
I0
ssg94
(lp7498
(dp7499
g97
(dp7500
g79
(dp7501
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7502
g91
(dp7503
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7504
sg109
(lp7505
sg111
(lp7506
sg113
(dp7507
sg88
(lp7508
ssg116
S'CompareBeats for: 3 for: 1'
p7509
sg118
g7366
ssg120
I60
sg121
g122
sg79
(dp7510
g81
I0
sg82
I0
sg83
I120
sg84
I2
sg85
I120
sg86
I0
sg87
I60
sg88
I60
ssg124
S'tor (i = FIDMARK - (MATCH_LENGTH >> 1), meanDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p7511
sg126
(dp7512
g79
(dp7513
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I2
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7514
g91
(dp7515
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I2
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7516
sg109
(lp7517
sg111
(lp7518
sg113
(dp7519
sg88
(lp7520
ssg116
g136
sg118
g7366
ssa(dp7521
g97
(dp7522
g79
(dp7523
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7524
g91
(dp7525
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7526
sg109
(lp7527
sg111
(lp7528
sg113
(dp7529
sg88
(lp7530
ssg116
S'CompareBeats for: 3 for: 2'
p7531
sg118
g7366
ssg120
I60
sg121
g122
sg79
(dp7532
g81
I0
sg82
I0
sg83
I120
sg84
I2
sg85
I120
sg86
I0
sg87
I60
sg88
I60
ssg124
S'tor (i = FIDMARK - (MATCH_LENGTH >> 1), beatDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p7533
sg126
(dp7534
g79
(dp7535
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I2
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7536
g91
(dp7537
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I2
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7538
sg109
(lp7539
sg111
(lp7540
sg113
(dp7541
sg88
(lp7542
ssg116
g136
sg118
g7366
ssasg109
(lp7543
sg111
(lp7544
sg113
(dp7545
g76
I1
ssg88
(lp7546
(dp7547
g173
(lp7548
(dp7549
g79
(dp7550
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7551
g91
(dp7552
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7553
sg109
(lp7554
sg111
(lp7555
sg113
(dp7556
sg88
(lp7557
ssg116
S'CompareBeats for: 3 if: 1 option: 1'
p7558
sg118
g7366
sa(dp7559
g79
(dp7560
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7561
g91
(dp7562
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7563
sg109
(lp7564
sg111
(lp7565
sg113
(dp7566
sg88
(lp7567
ssg116
S'CompareBeats for: 3 if: 1 option: 2'
p7568
sg118
g7366
sasg185
S'if (shift == -MAX_SHIFT)'
p7569
sassg116
S'CompareBeats for: 3'
p7570
sg118
g7366
ssg120
I8
sg121
g122
sg79
(dp7571
g81
I8
sg82
I8
sg83
I2000
sg84
I105
sg85
I1920
sg86
I24
sg87
I968
sg88
I1000
ssg124
S'tor (shift = -MAX_SHIFT; shift <= MAX_SHIFT; ++shift)'
p7572
sg126
(dp7573
g79
(dp7574
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7575
g91
(dp7576
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7577
sg109
(lp7578
sg111
(lp7579
sg113
(dp7580
sg88
(lp7581
ssg116
g136
sg118
g7366
ssasg109
(lp7582
sg111
(lp7583
sg113
(dp7584
sg88
(lp7585
ssg116
g52
sg118
g7366
sa(dp7586
g79
(dp7587
g81
I11
sg82
I10
sg83
I2313
sg84
I216
sg85
I2160
sg86
I11
sg87
I1149
sg88
I1305
ssg89
(dp7588
g91
(dp7589
g81
I2
sg82
I1
sg83
I3
sg84
I12
sg85
I0
sg93
I1
sg86
I2
sg87
I0
ssg94
(lp7590
(dp7591
g97
(dp7592
g79
(dp7593
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp7594
g91
(dp7595
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7596
sg109
(lp7597
sg111
(lp7598
sg113
(dp7599
sg88
(lp7600
(dp7601
g173
(lp7602
(dp7603
g79
(dp7604
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7605
g91
(dp7606
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7607
sg109
(lp7608
sg111
(lp7609
sg113
(dp7610
sg88
(lp7611
ssg116
S'CompareBeats2 for: 1 if: 1 option: 1'
p7612
sg118
g7366
sa(dp7613
g79
(dp7614
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7615
g91
(dp7616
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7617
sg109
(lp7618
sg111
(lp7619
sg113
(dp7620
sg88
(lp7621
ssg116
S'CompareBeats2 for: 1 if: 1 option: 2'
p7622
sg118
g7366
sasg185
S'if (beat1[i] > max)'
p7623
sassg116
S'CompareBeats2 for: 1'
p7624
sg118
g7366
ssg120
I30
sg121
g122
sg79
(dp7625
g81
I0
sg82
I0
sg83
I30
sg84
I61
sg85
I0
sg86
I0
sg87
I30
sg88
I90
ssg124
S'tor (i = MATCH_START + 1; i < MATCH_END; ++i)'
p7626
sg126
(dp7627
g79
(dp7628
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7629
g91
(dp7630
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7631
sg109
(lp7632
sg111
(lp7633
sg113
(dp7634
sg88
(lp7635
ssg116
g136
sg118
g7366
ssa(dp7636
g97
(dp7637
g79
(dp7638
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp7639
g91
(dp7640
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7641
sg109
(lp7642
sg111
(lp7643
sg113
(dp7644
sg88
(lp7645
(dp7646
g173
(lp7647
(dp7648
g79
(dp7649
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7650
g91
(dp7651
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7652
sg109
(lp7653
sg111
(lp7654
sg113
(dp7655
sg88
(lp7656
ssg116
S'CompareBeats2 for: 2 if: 1 option: 1'
p7657
sg118
g7366
sa(dp7658
g79
(dp7659
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7660
g91
(dp7661
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7662
sg109
(lp7663
sg111
(lp7664
sg113
(dp7665
sg88
(lp7666
ssg116
S'CompareBeats2 for: 2 if: 1 option: 2'
p7667
sg118
g7366
sasg185
S'if (beat2[i] > max)'
p7668
sassg116
S'CompareBeats2 for: 2'
p7669
sg118
g7366
ssg120
I30
sg121
g122
sg79
(dp7670
g81
I0
sg82
I0
sg83
I30
sg84
I61
sg85
I0
sg86
I0
sg87
I30
sg88
I90
ssg124
S'tor (i = MATCH_START + 1; i < MATCH_END; ++i)'
p7671
sg126
(dp7672
g79
(dp7673
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7674
g91
(dp7675
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7676
sg109
(lp7677
sg111
(lp7678
sg113
(dp7679
sg88
(lp7680
ssg116
g136
sg118
g7366
ssa(dp7681
g97
(dp7682
g79
(dp7683
g81
I1
sg82
I1
sg83
I249
sg84
I9
sg85
I240
sg86
I1
sg87
I120
sg88
I124
ssg89
(dp7684
g91
(dp7685
g81
I1
sg82
I0
sg83
I8
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7686
(dp7687
g97
(dp7688
g79
(dp7689
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7690
g91
(dp7691
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7692
sg109
(lp7693
sg111
(lp7694
sg113
(dp7695
sg88
(lp7696
ssg116
S'CompareBeats2 for: 3 for: 1'
p7697
sg118
g7366
ssg120
I60
sg121
g122
sg79
(dp7698
g81
I0
sg82
I0
sg83
I120
sg84
I2
sg85
I120
sg86
I0
sg87
I60
sg88
I60
ssg124
S'tor (i = FIDMARK - (MATCH_LENGTH >> 1), meanDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p7699
sg126
(dp7700
g79
(dp7701
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I2
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7702
g91
(dp7703
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I2
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7704
sg109
(lp7705
sg111
(lp7706
sg113
(dp7707
sg88
(lp7708
ssg116
g136
sg118
g7366
ssa(dp7709
g97
(dp7710
g79
(dp7711
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7712
g91
(dp7713
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7714
sg109
(lp7715
sg111
(lp7716
sg113
(dp7717
sg88
(lp7718
ssg116
S'CompareBeats2 for: 3 for: 2'
p7719
sg118
g7366
ssg120
I60
sg121
g122
sg79
(dp7720
g81
I0
sg82
I0
sg83
I120
sg84
I2
sg85
I120
sg86
I0
sg87
I60
sg88
I60
ssg124
S'tor (i = FIDMARK - (MATCH_LENGTH >> 1), beatDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p7721
sg126
(dp7722
g79
(dp7723
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I2
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7724
g91
(dp7725
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I2
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7726
sg109
(lp7727
sg111
(lp7728
sg113
(dp7729
sg88
(lp7730
ssg116
g136
sg118
g7366
ssasg109
(lp7731
sg111
(lp7732
sg113
(dp7733
g76
I1
ssg88
(lp7734
(dp7735
g173
(lp7736
(dp7737
g79
(dp7738
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7739
g91
(dp7740
g81
I0
sg82
I0
sg83
I1
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7741
sg109
(lp7742
sg111
(lp7743
sg113
(dp7744
sg88
(lp7745
ssg116
S'CompareBeats2 for: 3 if: 1 option: 1'
p7746
sg118
g7366
sa(dp7747
g79
(dp7748
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7749
g91
(dp7750
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7751
sg109
(lp7752
sg111
(lp7753
sg113
(dp7754
sg88
(lp7755
ssg116
S'CompareBeats2 for: 3 if: 1 option: 2'
p7756
sg118
g7366
sasg185
S'if (shift == -MAX_SHIFT)'
p7757
sassg116
S'CompareBeats2 for: 3'
p7758
sg118
g7366
ssg120
I9
sg121
g122
sg79
(dp7759
g81
I9
sg82
I9
sg83
I2250
sg84
I82
sg85
I2160
sg86
I9
sg87
I1089
sg88
I1125
ssg124
S'tor (shift = -MAX_SHIFT; shift <= MAX_SHIFT; ++shift)'
p7760
sg126
(dp7761
g79
(dp7762
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7763
g91
(dp7764
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7765
sg109
(lp7766
sg111
(lp7767
sg113
(dp7768
sg88
(lp7769
ssg116
g136
sg118
g7366
ssasg109
(lp7770
sg111
(lp7771
sg113
(dp7772
sg88
(lp7773
ssg116
g53
sg118
g7366
sa(dp7774
g79
(dp7775
g81
I0
sg82
I0
sg83
I400
sg84
I401
sg85
I100
sg86
I100
sg87
I100
sg88
I300
ssg89
(dp7776
g91
(dp7777
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7778
(dp7779
g97
(dp7780
g79
(dp7781
g81
I0
sg82
I0
sg83
I4
sg84
I4
sg85
I1
sg86
I1
sg87
I0
sg88
I2
ssg89
(dp7782
g91
(dp7783
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7784
sg109
(lp7785
sg111
(lp7786
sg113
(dp7787
sg88
(lp7788
(dp7789
g173
(lp7790
(dp7791
g79
(dp7792
g81
I0
sg82
I0
sg83
I2
sg84
I4
sg85
I1
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp7793
g91
(dp7794
g81
I0
sg82
I0
sg83
I2
sg84
I4
sg85
I1
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp7795
sg109
(lp7796
sg111
(lp7797
sg113
(dp7798
sg88
(lp7799
ssg116
S'UpdateBeat for: 1 if: 1 option: 1'
p7800
sg118
g7366
sasg185
S'if ((i + shift >= 0) && (i + shift < BEATLGTH))'
p7801
sassg116
S'UpdateBeat for: 1'
p7802
sg118
g7366
ssg120
I100
sg121
g122
sg79
(dp7803
g81
I0
sg82
I0
sg83
I400
sg84
I401
sg85
I100
sg86
I100
sg87
I100
sg88
I300
ssg124
S'tor (i = 0; i < BEATLGTH; ++i)'
p7804
sg126
(dp7805
g79
(dp7806
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7807
g91
(dp7808
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7809
sg109
(lp7810
sg111
(lp7811
sg113
(dp7812
sg88
(lp7813
ssg116
g136
sg118
g7366
ssasg109
(lp7814
sg111
(lp7815
sg113
(dp7816
sg88
(lp7817
ssg116
g54
sg118
g7366
sa(dp7818
g79
(dp7819
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7820
g91
(dp7821
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7822
sg109
(lp7823
sg111
(lp7824
sg113
(dp7825
sg88
(lp7826
ssg116
g55
sg118
g7366
sa(dp7827
g79
(dp7828
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7829
g91
(dp7830
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7831
sg109
(lp7832
sg111
(lp7833
sg113
(dp7834
sg88
(lp7835
ssg116
g56
sg118
g7366
sa(dp7836
g79
(dp7837
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7838
g91
(dp7839
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7840
sg109
(lp7841
sg111
(lp7842
sg113
(dp7843
sg88
(lp7844
ssg116
g57
sg118
g7366
sa(dp7845
g79
(dp7846
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7847
g91
(dp7848
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7849
sg109
(lp7850
sg111
(lp7851
sg113
(dp7852
sg88
(lp7853
ssg116
g58
sg118
g7366
sa(dp7854
g79
(dp7855
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp7856
g91
(dp7857
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7858
sg109
(lp7859
sg111
(lp7860
sg113
(dp7861
sg88
(lp7862
(dp7863
g173
(lp7864
(dp7865
g79
(dp7866
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7867
g91
(dp7868
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7869
sg109
(lp7870
sg111
(lp7871
sg113
(dp7872
sg88
(lp7873
ssg116
S'GetBeatClass if: 1 option: 1'
p7874
sg118
g7366
sasg185
S'if (type == MAXTYPES)'
p7875
sassg116
g59
sg118
g7366
sa(dp7876
g79
(dp7877
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7878
g91
(dp7879
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7880
sg109
(lp7881
sg111
(lp7882
sg113
(dp7883
sg88
(lp7884
ssg116
g60
sg118
g7366
sa(dp7885
g79
(dp7886
g81
I2
sg82
I82
sg83
I881
sg84
I554
sg85
I234
sg86
I302
sg87
I1063
sg88
I1299
ssg89
(dp7887
g91
(dp7888
g81
I1
sg82
I1
sg83
I4
sg84
I9
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7889
(dp7890
g97
(dp7891
g79
(dp7892
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7893
g91
(dp7894
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7895
sg109
(lp7896
sg111
(lp7897
sg113
(dp7898
sg88
(lp7899
ssg116
S'NewBeatType for: 1'
p7900
sg118
g7366
ssg120
I8
sg121
g122
sg79
(dp7901
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I16
sg88
I8
ssg124
S'tor (i = 0; i < TypeCount; ++i)'
p7902
sg126
(dp7903
g79
(dp7904
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7905
g91
(dp7906
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7907
sg109
(lp7908
sg111
(lp7909
sg113
(dp7910
sg88
(lp7911
ssg116
g136
sg118
g7366
ssa(dp7912
g97
(dp7913
g79
(dp7914
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7915
g91
(dp7916
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7917
sg109
(lp7918
sg111
(lp7919
sg113
(dp7920
sg88
(lp7921
ssg116
S'NewBeatType for: 2'
p7922
sg118
g7366
ssg120
I8
sg121
g122
sg79
(dp7923
g81
I0
sg82
I0
sg83
I0
sg84
I9
sg85
I0
sg86
I0
sg87
I8
sg88
I8
ssg124
S'tor (i = 0; i < BEATLGTH; ++i)'
p7924
sg126
(dp7925
g79
(dp7926
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7927
g91
(dp7928
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7929
sg109
(lp7930
sg111
(lp7931
sg113
(dp7932
sg88
(lp7933
ssg116
g136
sg118
g7366
ssasg109
(lp7934
sg111
(lp7935
sg113
(dp7936
g20
I1
sg26
I1
ssg88
(lp7937
(dp7938
g173
(lp7939
(dp7940
g79
(dp7941
g81
I1
sg82
I41
sg83
I440
sg84
I216
sg85
I117
sg86
I151
sg87
I476
sg88
I494
ssg89
(dp7942
g91
(dp7943
g81
I1
sg82
I1
sg83
I3
sg84
I8
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7944
(dp7945
g97
(dp7946
g79
(dp7947
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7948
g91
(dp7949
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7950
sg109
(lp7951
sg111
(lp7952
sg113
(dp7953
sg88
(lp7954
ssg116
S'NewBeatType if: 1 option: 1 for: 1'
p7955
sg118
g7366
ssg120
I100
sg121
g122
sg79
(dp7956
g81
I0
sg82
I0
sg83
I0
sg84
I101
sg85
I0
sg86
I0
sg87
I100
sg88
I100
ssg124
S'tor (i = 0; i < BEATLGTH; ++i)'
p7957
sg126
(dp7958
g79
(dp7959
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp7960
g91
(dp7961
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp7962
sg109
(lp7963
sg111
(lp7964
sg113
(dp7965
sg88
(lp7966
ssg116
g136
sg118
g7366
ssasg109
(lp7967
sg111
(lp7968
sg113
(dp7969
g26
I1
ssg88
(lp7970
ssg116
S'NewBeatType if: 1 option: 1'
p7971
sg118
g7366
sasg185
S'if (TypeCount < MAXTYPES)'
p7972
sa(dp7973
g173
(lp7974
(dp7975
g79
(dp7976
g81
I0
sg82
I0
sg83
I0
sg84
I26
sg85
I0
sg86
I0
sg87
I8
sg88
I32
ssg89
(dp7977
g91
(dp7978
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7979
(dp7980
g97
(dp7981
g79
(dp7982
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg86
I0
sg87
I0
sg88
I3
ssg89
(dp7983
g91
(dp7984
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7985
sg109
(lp7986
sg111
(lp7987
sg113
(dp7988
sg88
(lp7989
(dp7990
g173
(lp7991
(dp7992
g79
(dp7993
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp7994
g91
(dp7995
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp7996
sg109
(lp7997
sg111
(lp7998
sg113
(dp7999
sg88
(lp8000
ssg116
S'NewBeatType if: 2 option: 1 for: 1 if: 1 option: 1'
p8001
sg118
g7366
sa(dp8002
g79
(dp8003
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8004
g91
(dp8005
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8006
sg109
(lp8007
sg111
(lp8008
sg113
(dp8009
sg88
(lp8010
ssg116
S'NewBeatType if: 2 option: 1 for: 1 if: 1 option: 2'
p8011
sg118
g7366
sasg185
S'if (BeatCounts[i] < BeatCounts[mcType])'
p8012
sa(dp8013
g173
(lp8014
(dp8015
g79
(dp8016
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8017
g91
(dp8018
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8019
sg109
(lp8020
sg111
(lp8021
sg113
(dp8022
sg88
(lp8023
ssg116
S'NewBeatType if: 2 option: 1 for: 1 if: 2 option: 1'
p8024
sg118
g7366
sasg185
S'if (BeatsSinceLastMatch[i] > BeatsSinceLastMatch[mcType])'
p8025
sassg116
S'NewBeatType if: 2 option: 1 for: 1'
p8026
sg118
g7366
ssg120
I8
sg121
g122
sg79
(dp8027
g81
I0
sg82
I0
sg83
I0
sg84
I25
sg85
I0
sg86
I0
sg87
I8
sg88
I32
ssg124
S'tor (i = 1; i < MAXTYPES; ++i)'
p8028
sg126
(dp8029
g79
(dp8030
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8031
g91
(dp8032
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8033
sg109
(lp8034
sg111
(lp8035
sg113
(dp8036
sg88
(lp8037
ssg116
g136
sg118
g7366
ssasg109
(lp8038
sg111
(lp8039
sg113
(dp8040
sg88
(lp8041
ssg116
S'NewBeatType if: 2 option: 1'
p8042
sg118
g7366
sasg185
S'if (mcType == -1)'
p8043
sassg116
g61
sg118
g7366
sa(dp8044
g79
(dp8045
g81
I132
sg82
I113
sg83
I26039
sg84
I6566
sg85
I23960
sg86
I285
sg87
I16034
sg88
I21021
ssg89
(dp8046
g91
(dp8047
g81
I0
sg82
I0
sg83
I0
sg84
I5
sg85
I0
sg93
I1
sg86
I4
sg87
I0
ssg94
(lp8048
(dp8049
g97
(dp8050
g79
(dp8051
g81
I11
sg82
I9
sg83
I2062
sg84
I247
sg85
I1920
sg86
I27
sg87
I1028
sg88
I1184
ssg89
(dp8052
g91
(dp8053
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8054
sg109
(lp8055
sg111
(lp8056
sg113
(dp8057
g52
I1
ssg88
(lp8058
(dp8059
g173
(lp8060
(dp8061
g79
(dp8062
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8063
g91
(dp8064
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8065
sg109
(lp8066
sg111
(lp8067
sg113
(dp8068
sg88
(lp8069
ssg116
S'BestMorphMatch for: 1 if: 1 option: 1'
p8070
sg118
g7366
sa(dp8071
g79
(dp8072
g81
I0
sg82
I0
sg83
I0
sg84
I5
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8073
g91
(dp8074
g81
I0
sg82
I0
sg83
I0
sg84
I5
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8075
sg109
(lp8076
sg111
(lp8077
sg113
(dp8078
sg88
(lp8079
ssg116
S'BestMorphMatch for: 1 if: 1 option: 2'
p8080
sg118
g7366
sa(dp8081
g79
(dp8082
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8083
g91
(dp8084
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8085
sg109
(lp8086
sg111
(lp8087
sg113
(dp8088
sg88
(lp8089
ssg116
S'BestMorphMatch for: 1 if: 1 option: 3'
p8090
sg118
g7366
sa(dp8091
g79
(dp8092
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8093
g91
(dp8094
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8095
sg109
(lp8096
sg111
(lp8097
sg113
(dp8098
sg88
(lp8099
ssg116
S'BestMorphMatch for: 1 if: 1 option: 4'
p8100
sg118
g7366
sasg185
S'if (type == 0)'
p8101
sassg116
S'BestMorphMatch for: 1'
p8102
sg118
g7366
ssg120
I8
sg121
g122
sg79
(dp8103
g81
I88
sg82
I72
sg83
I16496
sg84
I1977
sg85
I15360
sg86
I216
sg87
I8232
sg88
I9480
ssg124
S'tor (type = 0; type < TypeCount; ++type)'
p8104
sg126
(dp8105
g79
(dp8106
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8107
g91
(dp8108
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8109
sg109
(lp8110
sg111
(lp8111
sg113
(dp8112
sg88
(lp8113
ssg116
g136
sg118
g7366
ssasg109
(lp8114
sg111
(lp8115
sg113
(dp8116
g53
I1
ssg88
(lp8117
(dp8118
g173
(lp8119
(dp8120
g79
(dp8121
g81
I0
sg82
I1
sg83
I0
sg84
I3
sg85
I0
sg86
I3
sg87
I0
sg88
I0
ssg89
(dp8122
g91
(dp8123
g81
I0
sg82
I1
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I3
sg87
I0
ssg94
(lp8124
sg109
(lp8125
sg111
(lp8126
sg113
(dp8127
sg88
(lp8128
ssg116
S'BestMorphMatch if: 1 option: 1'
p8129
sg118
g7366
sasg185
S'if (TypeCount == 0)'
p8130
sa(dp8131
g173
(lp8132
(dp8133
g79
(dp8134
g81
I33
sg82
I30
sg83
I7230
sg84
I4365
sg85
I6440
sg86
I51
sg87
I6653
sg88
I10232
ssg89
(dp8135
g91
(dp8136
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp8137
sg109
(lp8138
sg111
(lp8139
sg113
(dp8140
g72
I1
sg52
I1
sg53
I2
ssg88
(lp8141
(dp8142
g173
(lp8143
(dp8144
g79
(dp8145
g81
I0
sg82
I0
sg83
I0
sg84
I8
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp8146
g91
(dp8147
g81
I0
sg82
I0
sg83
I0
sg84
I8
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp8148
sg109
(lp8149
sg111
(lp8150
sg113
(dp8151
sg88
(lp8152
ssg116
S'BestMorphMatch if: 2 option: 1 if: 1 option: 1'
p8153
sg118
g7366
sa(dp8154
g79
(dp8155
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp8156
g91
(dp8157
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp8158
sg109
(lp8159
sg111
(lp8160
sg113
(dp8161
sg88
(lp8162
ssg116
S'BestMorphMatch if: 2 option: 1 if: 1 option: 2'
p8163
sg118
g7366
sasg185
S'if (nextDiff2 < bestDiff2)'
p8164
sa(dp8165
g173
(lp8166
(dp8167
g79
(dp8168
g81
I0
sg82
I0
sg83
I534
sg84
I3672
sg85
I200
sg86
I0
sg87
I3319
sg88
I6419
ssg89
(dp8169
g91
(dp8170
g81
I0
sg82
I0
sg83
I1
sg84
I5
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8171
(dp8172
g97
(dp8173
g79
(dp8174
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I1
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8175
g91
(dp8176
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I1
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8177
sg109
(lp8178
sg111
(lp8179
sg113
(dp8180
sg88
(lp8181
ssg116
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 for: 1'
p8182
sg118
g7366
ssg120
I100
sg121
g122
sg79
(dp8183
g81
I0
sg82
I0
sg83
I100
sg84
I101
sg85
I100
sg86
I0
sg87
I100
sg88
I100
ssg124
S'tor (i = 0; i < BEATLGTH; ++i)'
p8184
sg126
(dp8185
g79
(dp8186
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8187
g91
(dp8188
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8189
sg109
(lp8190
sg111
(lp8191
sg113
(dp8192
sg88
(lp8193
ssg116
g136
sg118
g7366
ssa(dp8194
g97
(dp8195
g79
(dp8196
g81
I0
sg82
I0
sg83
I1
sg84
I220
sg85
I0
sg86
I0
sg87
I196
sg88
I377
ssg89
(dp8197
g91
(dp8198
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8199
sg109
(lp8200
sg111
(lp8201
sg113
(dp8202
g71
I1
ssg88
(lp8203
ssg116
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 for: 2'
p8204
sg118
g7366
ssg120
I7
sg121
g122
sg79
(dp8205
g81
I0
sg82
I0
sg83
I14
sg84
I1541
sg85
I0
sg86
I0
sg87
I1379
sg88
I2646
ssg124
S'tor (type = bestMatch; type < TypeCount - 1; ++type)'
p8206
sg126
(dp8207
g79
(dp8208
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8209
g91
(dp8210
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8211
sg109
(lp8212
sg111
(lp8213
sg113
(dp8214
sg88
(lp8215
ssg116
g136
sg118
g7366
ssasg109
(lp8216
sg111
(lp8217
sg113
(dp8218
g21
I1
ssg88
(lp8219
(dp8220
g173
(lp8221
(dp8222
g79
(dp8223
g81
I0
sg82
I0
sg83
I417
sg84
I1835
sg85
I100
sg86
I0
sg87
I1659
sg88
I3309
ssg89
(dp8224
g91
(dp8225
g81
I0
sg82
I0
sg83
I1
sg84
I3
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8226
(dp8227
g97
(dp8228
g79
(dp8229
g81
I0
sg82
I0
sg83
I4
sg84
I1
sg85
I1
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp8230
g91
(dp8231
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8232
sg109
(lp8233
sg111
(lp8234
sg113
(dp8235
sg88
(lp8236
(dp8237
g173
(lp8238
(dp8239
g79
(dp8240
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I1
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8241
g91
(dp8242
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I1
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8243
sg109
(lp8244
sg111
(lp8245
sg113
(dp8246
sg88
(lp8247
ssg116
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 1 option: 1 for: 1 if: 1 option: 1'
p8248
sg118
g7366
sasg185
S'if ((i + shift > 0) && (i + shift < BEATLGTH))'
p8249
sassg116
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 1 option: 1 for: 1'
p8250
sg118
g7366
ssg120
I100
sg121
g122
sg79
(dp8251
g81
I0
sg82
I0
sg83
I400
sg84
I101
sg85
I100
sg86
I0
sg87
I100
sg88
I300
ssg124
S'tor (i = 0; i < BEATLGTH; ++i)'
p8252
sg126
(dp8253
g79
(dp8254
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8255
g91
(dp8256
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8257
sg109
(lp8258
sg111
(lp8259
sg113
(dp8260
sg88
(lp8261
ssg116
g136
sg118
g7366
ssa(dp8262
g97
(dp8263
g79
(dp8264
g81
I0
sg82
I0
sg83
I1
sg84
I220
sg85
I0
sg86
I0
sg87
I196
sg88
I377
ssg89
(dp8265
g91
(dp8266
g81
I0
sg82
I0
sg83
I1
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8267
sg109
(lp8268
sg111
(lp8269
sg113
(dp8270
g71
I1
ssg88
(lp8271
ssg116
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 1 option: 1 for: 2'
p8272
sg118
g7366
ssg120
I7
sg121
g122
sg79
(dp8273
g81
I0
sg82
I0
sg83
I14
sg84
I1541
sg85
I0
sg86
I0
sg87
I1379
sg88
I2646
ssg124
S'tor (type = nextBest; type < TypeCount - 1; ++type)'
p8274
sg126
(dp8275
g79
(dp8276
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8277
g91
(dp8278
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8279
sg109
(lp8280
sg111
(lp8281
sg113
(dp8282
sg88
(lp8283
ssg116
g136
sg118
g7366
ssasg109
(lp8284
sg111
(lp8285
sg113
(dp8286
g21
I1
ssg88
(lp8287
(dp8288
g173
(lp8289
(dp8290
g79
(dp8291
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8292
g91
(dp8293
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8294
sg109
(lp8295
sg111
(lp8296
sg113
(dp8297
sg88
(lp8298
ssg116
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 1 option: 1 if: 1 option: 1'
p8299
sg118
g7366
sasg185
S'if ((BeatClassifications[bestMatch] == NORMAL)'
p8300
sa(dp8301
g173
(lp8302
(dp8303
g79
(dp8304
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8305
g91
(dp8306
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8307
sg109
(lp8308
sg111
(lp8309
sg113
(dp8310
sg88
(lp8311
ssg116
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 1 option: 1 if: 2 option: 1'
p8312
sg118
g7366
sasg185
S'else if ((BeatClassifications[bestMatch] == PVC)'
p8313
sassg116
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 1 option: 1'
p8314
sg118
g7366
sasg185
S'if (bestMatch < nextBest)'
p8315
sa(dp8316
g173
(lp8317
(dp8318
g79
(dp8319
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8320
g91
(dp8321
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8322
sg109
(lp8323
sg111
(lp8324
sg113
(dp8325
sg88
(lp8326
ssg116
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 2 option: 1'
p8327
sg118
g7366
sasg185
S'if ((BeatClassifications[bestMatch] == NORMAL)'
p8328
sa(dp8329
g173
(lp8330
(dp8331
g79
(dp8332
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8333
g91
(dp8334
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8335
sg109
(lp8336
sg111
(lp8337
sg113
(dp8338
sg88
(lp8339
ssg116
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1 if: 3 option: 1'
p8340
sg118
g7366
sasg185
S'else if ((BeatClassifications[bestMatch] == PVC)'
p8341
sassg116
S'BestMorphMatch if: 2 option: 1 if: 2 option: 1'
p8342
sg118
g7366
sasg185
S'if ((beatDiff < COMBINE_LIMIT) && ((*mi2 < 1.0) || (!MinimumBeatVariation(nextBest))))'
p8343
sassg116
S'BestMorphMatch if: 2 option: 1'
p8344
sg118
g7366
sasg185
S'if ((minDiff < MATCH_LIMIT) && (nextDiff < MATCH_LIMIT) && (TypeCount > 1))'
p8345
sassg116
g62
sg118
g7366
sa(dp8346
g79
(dp8347
g81
F1.0
sg82
F40.0
sg83
F859.0
sg84
F533.0
sg85
F218.0
sg86
F251.0
sg87
F483.0
sg88
F720.0
ssg89
(dp8348
g91
(dp8349
g81
I1
sg82
I0
sg83
I6
sg84
I7
sg85
I1
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8350
(dp8351
g97
(dp8352
g79
(dp8353
g81
I0
sg82
I0
sg83
I2
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp8354
g91
(dp8355
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8356
sg109
(lp8357
sg111
(lp8358
sg113
(dp8359
sg88
(lp8360
(dp8361
g173
(lp8362
(dp8363
g79
(dp8364
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8365
g91
(dp8366
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8367
sg109
(lp8368
sg111
(lp8369
sg113
(dp8370
sg88
(lp8371
ssg116
S'UpdateBeatType for: 1 if: 1 option: 1'
p8372
sg118
g7366
sa(dp8373
g79
(dp8374
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8375
g91
(dp8376
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8377
sg109
(lp8378
sg111
(lp8379
sg113
(dp8380
sg88
(lp8381
ssg116
S'UpdateBeatType for: 1 if: 1 option: 2'
p8382
sg118
g7366
sasg185
S'if (i != matchType)'
p8383
sassg116
S'UpdateBeatType for: 1'
p8384
sg118
g7366
ssg120
I8
sg121
g122
sg79
(dp8385
g81
I0
sg82
I0
sg83
I16
sg84
I17
sg85
I0
sg86
I0
sg87
I8
sg88
I24
ssg124
S'tor (i = 0; i < TypeCount; ++i)'
p8386
sg126
(dp8387
g79
(dp8388
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8389
g91
(dp8390
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8391
sg109
(lp8392
sg111
(lp8393
sg113
(dp8394
sg88
(lp8395
ssg116
g136
sg118
g7366
ssa(dp8396
g97
(dp8397
g79
(dp8398
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8399
g91
(dp8400
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8401
sg109
(lp8402
sg111
(lp8403
sg113
(dp8404
sg88
(lp8405
ssg116
S'UpdateBeatType for: 2'
p8406
sg118
g7366
ssg120
F-1.0
sg121
g122
sg79
(dp8407
g81
F-0.0
sg82
F-0.0
sg83
F-2.0
sg84
F0.0
sg85
F-0.0
sg86
F-0.0
sg87
F-1.0
sg88
F-1.0
ssg124
S'tor (i = MAXPREV - 1; i > 0; --i)'
p8408
sg126
(dp8409
g79
(dp8410
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8411
g91
(dp8412
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8413
sg109
(lp8414
sg111
(lp8415
sg113
(dp8416
sg88
(lp8417
ssg116
g136
sg118
g7366
ssasg109
(lp8418
sg111
(lp8419
sg113
(dp8420
g54
I1
sg26
I1
ssg88
(lp8421
(dp8422
g173
(lp8423
(dp8424
g79
(dp8425
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8426
g91
(dp8427
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8428
sg109
(lp8429
sg111
(lp8430
sg113
(dp8431
sg88
(lp8432
ssg116
S'UpdateBeatType if: 1 option: 1'
p8433
sg118
g7366
sasg185
S'if (BeatCounts[matchType] == 1)'
p8434
sa(dp8435
g173
(lp8436
(dp8437
g79
(dp8438
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8439
g91
(dp8440
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8441
sg109
(lp8442
sg111
(lp8443
sg113
(dp8444
sg88
(lp8445
ssg116
S'UpdateBeatType if: 2 option: 1'
p8446
sg118
g7366
sasg185
S'if ((i + shiftAdj >= 0) && (i + shiftAdj < BEATLGTH))'
p8447
sassg116
g63
sg118
g7366
sa(dp8448
g79
(dp8449
g81
I0
sg82
I1
sg83
I12
sg84
I32
sg85
I0
sg86
I0
sg87
I16
sg88
I35
ssg89
(dp8450
g91
(dp8451
g81
I0
sg82
I1
sg83
I2
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8452
(dp8453
g97
(dp8454
g79
(dp8455
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I2
ssg89
(dp8456
g91
(dp8457
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8458
sg109
(lp8459
sg111
(lp8460
sg113
(dp8461
sg88
(lp8462
(dp8463
g173
(lp8464
(dp8465
g79
(dp8466
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8467
g91
(dp8468
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8469
sg109
(lp8470
sg111
(lp8471
sg113
(dp8472
sg88
(lp8473
ssg116
S'GetDominantType for: 1 if: 1 option: 1'
p8474
sg118
g7366
sasg185
S'if ((BeatClassifications[type] == NORMAL) && (BeatCounts[type] > maxCount))'
p8475
sassg116
S'GetDominantType for: 1'
p8476
sg118
g7366
ssg120
I8
sg121
g122
sg79
(dp8477
g81
I0
sg82
I0
sg83
I0
sg84
I17
sg85
I0
sg86
I0
sg87
I8
sg88
I24
ssg124
S'tor (type = 0; type < MAXTYPES; ++type)'
p8478
sg126
(dp8479
g79
(dp8480
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8481
g91
(dp8482
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8483
sg109
(lp8484
sg111
(lp8485
sg113
(dp8486
sg88
(lp8487
ssg116
g136
sg118
g7366
ssasg109
(lp8488
sg111
(lp8489
sg113
(dp8490
sg88
(lp8491
(dp8492
g173
(lp8493
(dp8494
g79
(dp8495
g81
I0
sg82
I0
sg83
I10
sg84
I13
sg85
I0
sg86
I0
sg87
I8
sg88
I10
ssg89
(dp8496
g91
(dp8497
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8498
(dp8499
g97
(dp8500
g79
(dp8501
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8502
g91
(dp8503
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8504
sg109
(lp8505
sg111
(lp8506
sg113
(dp8507
sg88
(lp8508
ssg116
S'GetDominantType if: 1 option: 1 for: 1'
p8509
sg118
g7366
ssg120
I8
sg121
g122
sg79
(dp8510
g81
I0
sg82
I0
sg83
I8
sg84
I10
sg85
I0
sg86
I0
sg87
I8
sg88
I8
ssg124
S'tor (type = 0, totalCount = 0; type < TypeCount; ++type)'
p8511
sg126
(dp8512
g79
(dp8513
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8514
g91
(dp8515
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8516
sg109
(lp8517
sg111
(lp8518
sg113
(dp8519
sg88
(lp8520
ssg116
g136
sg118
g7366
ssasg109
(lp8521
sg111
(lp8522
sg113
(dp8523
sg88
(lp8524
(dp8525
g173
(lp8526
(dp8527
g79
(dp8528
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8529
g91
(dp8530
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8531
sg109
(lp8532
sg111
(lp8533
sg113
(dp8534
sg88
(lp8535
ssg116
S'GetDominantType if: 1 option: 1 if: 1 option: 1'
p8536
sg118
g7366
sasg185
S'if (totalCount > 300)'
p8537
sa(dp8538
g173
(lp8539
(dp8540
g79
(dp8541
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8542
g91
(dp8543
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8544
sg109
(lp8545
sg111
(lp8546
sg113
(dp8547
sg88
(lp8548
ssg116
S'GetDominantType if: 1 option: 1 if: 2 option: 1'
p8549
sg118
g7366
sasg185
S'if (BeatCounts[type] > maxCount)'
p8550
sassg116
S'GetDominantType if: 1 option: 1'
p8551
sg118
g7366
sasg185
S'if (maxType == -1)'
p8552
sassg116
g64
sg118
g7366
sa(dp8553
g79
(dp8554
g81
I0
sg82
I0
sg83
I2
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp8555
g91
(dp8556
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8557
sg109
(lp8558
sg111
(lp8559
sg113
(dp8560
sg88
(lp8561
(dp8562
g173
(lp8563
(dp8564
g79
(dp8565
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8566
g91
(dp8567
g81
I0
sg82
I0
sg83
I2
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8568
sg109
(lp8569
sg111
(lp8570
sg113
(dp8571
sg88
(lp8572
ssg116
S'ClearLastNewType if: 1 option: 1'
p8573
sg118
g7366
sasg185
S'if (TypeCount != 0)'
p8574
sassg116
g65
sg118
g7366
sa(dp8575
g79
(dp8576
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8577
g91
(dp8578
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8579
sg109
(lp8580
sg111
(lp8581
sg113
(dp8582
sg88
(lp8583
ssg116
g66
sg118
g7366
sa(dp8584
g79
(dp8585
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8586
g91
(dp8587
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8588
sg109
(lp8589
sg111
(lp8590
sg113
(dp8591
sg88
(lp8592
ssg116
g67
sg118
g7366
sa(dp8593
g79
(dp8594
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8595
g91
(dp8596
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8597
sg109
(lp8598
sg111
(lp8599
sg113
(dp8600
sg88
(lp8601
ssg116
g68
sg118
g7366
sa(dp8602
g79
(dp8603
g81
I11
sg82
I11
sg83
I2313
sg84
I216
sg85
I2160
sg86
I11
sg87
I1149
sg88
I1305
ssg89
(dp8604
g91
(dp8605
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8606
sg109
(lp8607
sg111
(lp8608
sg113
(dp8609
g53
I1
ssg88
(lp8610
ssg116
g69
sg118
g7366
sa(dp8611
g79
(dp8612
g81
I11
sg82
I11
sg83
I2313
sg84
I216
sg85
I2160
sg86
I11
sg87
I1149
sg88
I1305
ssg89
(dp8613
g91
(dp8614
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8615
sg109
(lp8616
sg111
(lp8617
sg113
(dp8618
g53
I1
ssg88
(lp8619
ssg116
g70
sg118
g7366
sa(dp8620
g79
(dp8621
g81
I0
sg82
I0
sg83
I0
sg84
I220
sg85
I0
sg86
I0
sg87
I196
sg88
I377
ssg89
(dp8622
g91
(dp8623
g81
I0
sg82
I0
sg83
I0
sg84
I8
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8624
(dp8625
g97
(dp8626
g79
(dp8627
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8628
g91
(dp8629
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8630
sg109
(lp8631
sg111
(lp8632
sg113
(dp8633
sg88
(lp8634
ssg116
S'BeatCopy for: 1'
p8635
sg118
g7366
ssg120
I8
sg121
g122
sg79
(dp8636
g81
I0
sg82
I0
sg83
I0
sg84
I9
sg85
I0
sg86
I0
sg87
I8
sg88
I8
ssg124
S'tor (i = 0; i < BEATLGTH; ++i)'
p8637
sg126
(dp8638
g79
(dp8639
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8640
g91
(dp8641
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8642
sg109
(lp8643
sg111
(lp8644
sg113
(dp8645
sg88
(lp8646
ssg116
g136
sg118
g7366
ssa(dp8647
g97
(dp8648
g79
(dp8649
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8650
g91
(dp8651
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8652
sg109
(lp8653
sg111
(lp8654
sg113
(dp8655
sg88
(lp8656
ssg116
S'BeatCopy for: 2'
p8657
sg118
g7366
ssg120
I8
sg121
g122
sg79
(dp8658
g81
I0
sg82
I0
sg83
I0
sg84
I17
sg85
I0
sg86
I0
sg87
I8
sg88
I8
ssg124
S'tor (i = 0; i < MAXPREV; ++i)'
p8659
sg126
(dp8660
g79
(dp8661
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8662
g91
(dp8663
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8664
sg109
(lp8665
sg111
(lp8666
sg113
(dp8667
sg88
(lp8668
ssg116
g136
sg118
g7366
ssasg109
(lp8669
sg111
(lp8670
sg113
(dp8671
g20
I1
ssg88
(lp8672
ssg116
g71
sg118
g7366
sa(dp8673
g79
(dp8674
g81
I0
sg82
I1
sg83
I8
sg84
I9
sg85
I0
sg86
I0
sg87
I8
sg88
I18
ssg89
(dp8675
g91
(dp8676
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8677
(dp8678
g97
(dp8679
g79
(dp8680
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I1
ssg89
(dp8681
g91
(dp8682
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8683
sg109
(lp8684
sg111
(lp8685
sg113
(dp8686
sg88
(lp8687
(dp8688
g173
(lp8689
(dp8690
g79
(dp8691
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8692
g91
(dp8693
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8694
sg109
(lp8695
sg111
(lp8696
sg113
(dp8697
sg88
(lp8698
ssg116
S'MinimumBeatVariation for: 1 if: 1 option: 1'
p8699
sg118
g7366
sasg185
S'if (MIs[type][i] > 0.5)'
p8700
sassg116
S'MinimumBeatVariation for: 1'
p8701
sg118
g7366
ssg120
I8
sg121
g122
sg79
(dp8702
g81
I0
sg82
I0
sg83
I8
sg84
I9
sg85
I0
sg86
I0
sg87
I8
sg88
I16
ssg124
S'tor (i = 0; i < MAXTYPES; ++i)'
p8703
sg126
(dp8704
g79
(dp8705
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8706
g91
(dp8707
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8708
sg109
(lp8709
sg111
(lp8710
sg113
(dp8711
sg88
(lp8712
ssg116
g136
sg118
g7366
ssasg109
(lp8713
sg111
(lp8714
sg113
(dp8715
sg88
(lp8716
(dp8717
g173
(lp8718
(dp8719
g79
(dp8720
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8721
g91
(dp8722
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8723
sg109
(lp8724
sg111
(lp8725
sg113
(dp8726
sg88
(lp8727
ssg116
S'MinimumBeatVariation if: 1 option: 1'
p8728
sg118
g7366
sa(dp8729
g79
(dp8730
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8731
g91
(dp8732
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8733
sg109
(lp8734
sg111
(lp8735
sg113
(dp8736
sg88
(lp8737
ssg116
S'MinimumBeatVariation if: 1 option: 2'
p8738
sg118
g7366
sasg185
S'if (i == MAXTYPES)'
p8739
sassg116
g72
sg118
g7366
sa(dp8740
g79
(dp8741
g81
I1
sg82
I1
sg83
I8
sg84
I13
sg85
I0
sg86
I0
sg87
I8
sg88
I11
ssg89
(dp8742
g91
(dp8743
g81
I1
sg82
I1
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8744
(dp8745
g97
(dp8746
g79
(dp8747
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8748
g91
(dp8749
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8750
sg109
(lp8751
sg111
(lp8752
sg113
(dp8753
sg88
(lp8754
ssg116
S'WideBeatVariation for: 1'
p8755
sg118
g7366
ssg120
I8
sg121
g122
sg79
(dp8756
g81
I0
sg82
I0
sg83
I8
sg84
I10
sg85
I0
sg86
I0
sg87
I8
sg88
I8
ssg124
S'tor (i = 0, aveMI = 0; i < n; ++i)'
p8757
sg126
(dp8758
g79
(dp8759
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8760
g91
(dp8761
g81
I0
sg82
I0
sg83
I0
sg84
I2
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8762
sg109
(lp8763
sg111
(lp8764
sg113
(dp8765
sg88
(lp8766
ssg116
g136
sg118
g7366
ssasg109
(lp8767
sg111
(lp8768
sg113
(dp8769
sg88
(lp8770
(dp8771
g173
(lp8772
(dp8773
g79
(dp8774
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8775
g91
(dp8776
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8777
sg109
(lp8778
sg111
(lp8779
sg113
(dp8780
sg88
(lp8781
ssg116
S'WideBeatVariation if: 1 option: 1'
p8782
sg118
g7366
sasg185
S'if (n > 8)'
p8783
sa(dp8784
g173
(lp8785
(dp8786
g79
(dp8787
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8788
g91
(dp8789
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8790
sg109
(lp8791
sg111
(lp8792
sg113
(dp8793
sg88
(lp8794
ssg116
S'WideBeatVariation if: 2 option: 1'
p8795
sg118
g7366
sa(dp8796
g79
(dp8797
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8798
g91
(dp8799
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8800
sg109
(lp8801
sg111
(lp8802
sg113
(dp8803
sg88
(lp8804
ssg116
S'WideBeatVariation if: 2 option: 2'
p8805
sg118
g7366
sasg185
S'if (aveMI > WIDE_VAR_LIMIT)'
p8806
sassg116
g73
sg118
g7366
sa(dp8807
g79
(dp8808
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8809
g91
(dp8810
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8811
sg109
(lp8812
sg111
(lp8813
sg113
(dp8814
sg88
(lp8815
ssg116
g74
sg118
S'NOISECHK.CPP'
p8816
sa(dp8817
g79
(dp8818
g81
I1
sg82
I1
sg83
I59
sg84
I164
sg85
I0
sg86
I1
sg87
I101
sg88
I207
ssg89
(dp8819
g91
(dp8820
g81
I0
sg82
I1
sg83
I4
sg84
I4
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8821
sg109
(lp8822
sg111
(lp8823
sg113
(dp8824
sg88
(lp8825
(dp8826
g173
(lp8827
(dp8828
g79
(dp8829
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8830
g91
(dp8831
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8832
sg109
(lp8833
sg111
(lp8834
sg113
(dp8835
sg88
(lp8836
ssg116
S'NoiseCheck if: 1 option: 1'
p8837
sg118
g8816
sasg185
S'if (++NBPtr == NB_LENGTH)'
p8838
sa(dp8839
g173
(lp8840
(dp8841
g79
(dp8842
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8843
g91
(dp8844
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8845
sg109
(lp8846
sg111
(lp8847
sg113
(dp8848
sg88
(lp8849
ssg116
S'NoiseCheck if: 2 option: 1'
p8850
sg118
g8816
sasg185
S'if (ncStart > ncEnd + MS250)'
p8851
sa(dp8852
g173
(lp8853
(dp8854
g79
(dp8855
g81
I1
sg82
I0
sg83
I54
sg84
I158
sg85
I0
sg86
I1
sg87
I100
sg88
I201
ssg89
(dp8856
g91
(dp8857
g81
I1
sg82
I0
sg83
I3
sg84
I6
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp8858
(dp8859
g97
(dp8860
g79
(dp8861
g81
I0
sg82
I0
sg83
I0
sg84
I3
sg85
I0
sg86
I0
sg87
I1
sg88
I3
ssg89
(dp8862
g91
(dp8863
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8864
sg109
(lp8865
sg111
(lp8866
sg113
(dp8867
sg88
(lp8868
(dp8869
g173
(lp8870
(dp8871
g79
(dp8872
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8873
g91
(dp8874
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8875
sg109
(lp8876
sg111
(lp8877
sg113
(dp8878
sg88
(lp8879
ssg116
S'NoiseCheck if: 3 option: 1 for: 1 if: 1 option: 1'
p8880
sg118
g8816
sa(dp8881
g79
(dp8882
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8883
g91
(dp8884
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8885
sg109
(lp8886
sg111
(lp8887
sg113
(dp8888
sg88
(lp8889
ssg116
S'NoiseCheck if: 3 option: 1 for: 1 if: 1 option: 2'
p8890
sg118
g8816
sasg185
S'if (NoiseBuffer[ptr] > ncMax)'
p8891
sa(dp8892
g173
(lp8893
(dp8894
g79
(dp8895
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8896
g91
(dp8897
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8898
sg109
(lp8899
sg111
(lp8900
sg113
(dp8901
sg88
(lp8902
ssg116
S'NoiseCheck if: 3 option: 1 for: 1 if: 2 option: 1'
p8903
sg118
g8816
sasg185
S'if (++ptr == NB_LENGTH)'
p8904
sassg116
S'NoiseCheck if: 3 option: 1 for: 1'
p8905
sg118
g8816
ssg120
I50
sg121
g122
sg79
(dp8906
g81
I0
sg82
I0
sg83
I50
sg84
I151
sg85
I0
sg86
I0
sg87
I100
sg88
I200
ssg124
S'tor (i = 0; i < ncStart - ncEnd; ++i)'
p8907
sg126
(dp8908
g79
(dp8909
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I1
sg88
I0
ssg89
(dp8910
g91
(dp8911
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I1
ssg94
(lp8912
sg109
(lp8913
sg111
(lp8914
sg113
(dp8915
sg88
(lp8916
ssg116
g136
sg118
g8816
ssasg109
(lp8917
sg111
(lp8918
sg113
(dp8919
sg88
(lp8920
(dp8921
g173
(lp8922
(dp8923
g79
(dp8924
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8925
g91
(dp8926
g81
I0
sg82
I0
sg83
I1
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8927
sg109
(lp8928
sg111
(lp8929
sg113
(dp8930
sg88
(lp8931
ssg116
S'NoiseCheck if: 3 option: 1 if: 1 option: 1'
p8932
sg118
g8816
sasg185
S'if (ptr < 0) '
p8933
sassg116
S'NoiseCheck if: 3 option: 1'
p8934
sg118
g8816
sa(dp8935
g79
(dp8936
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8937
g91
(dp8938
g81
I0
sg82
I0
sg83
I0
sg84
I1
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8939
sg109
(lp8940
sg111
(lp8941
sg113
(dp8942
sg88
(lp8943
ssg116
S'NoiseCheck if: 3 option: 2'
p8944
sg118
g8816
sasg185
S'if ((delay != 0) && (ncStart < NB_LENGTH) && (ncStart > ncEnd))'
p8945
sassg116
g75
sg118
g8816
sa(dp8946
g79
(dp8947
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I1
sg87
I0
sg88
I2
ssg89
(dp8948
g91
(dp8949
g81
I0
sg82
I0
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8950
sg109
(lp8951
sg111
(lp8952
sg113
(dp8953
sg88
(lp8954
(dp8955
g173
(lp8956
(dp8957
g79
(dp8958
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I0
sg87
I0
sg88
I0
ssg89
(dp8959
g91
(dp8960
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I0
sg87
I0
ssg94
(lp8961
sg109
(lp8962
sg111
(lp8963
sg113
(dp8964
sg88
(lp8965
ssg116
S'abs if: 1 option: 1'
p8966
sg118
S'absdefinition.cpp'
p8967
sa(dp8968
g79
(dp8969
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg86
I1
sg87
I0
sg88
I0
ssg89
(dp8970
g91
(dp8971
g81
I0
sg82
I1
sg83
I0
sg84
I0
sg85
I0
sg93
I1
sg86
I1
sg87
I0
ssg94
(lp8972
sg109
(lp8973
sg111
(lp8974
sg113
(dp8975
sg88
(lp8976
ssg116
S'abs if: 1 option: 2'
p8977
sg118
g8967
sasg185
S'if (a > 0)'
p8978
sassg116
g76
sg118
g8967
saa(lp8979
S''
p8980
aS'postclas.h'
p8981
aS'WFDB.H'
p8982
aS'wfdb.h'
p8983
aS'RHYTHMCHK.CPP'
p8984
ag119
aS'qrsdet.h'
p8985
aS'rythmchk.h'
p8986
aS'ecgcodes.h'
p8987
aS'RHYTHMCHK.H'
p8988
ag407
aS'match.h'
p8989
ag1509
aS'hackery.cpp'
p8990
ag2473
aS'ECGMAP.H'
p8991
ag2738
aS'stdio.h'
p8992
aS'ECGCODES.H'
p8993
aS'analbeat.h'
p8994
ag3942
ag4207
ag4597
aS'ecgmap.h'
p8995
aS'bdac.h'
p8996
aS'POSTCLAS.H'
p8997
ag7366
aS'MATCH.H'
p8998
aS'ANALBEAT.H'
p8999
ag8816
aS'QRSDET.H'
p9000
ag8967
aa(lp9001
(lp9002
g8980
aa(lp9003
S'void ResetPostClassify();'
p9004
aS'void PostClassify('
p9005
aS'int* recentTypes, int domType, int* recentRRs, int width, double mi2, int rhythmClass);'
p9006
aS'int CheckPostClass(int type);'
p9007
aS'int CheckPCRhythm(int type);'
p9008
ag8980
aS'// yo yo yo stuff'
p9009
aa(lp9010
S'/* file: wfdb.h\t\tG. Moody\t13 June 1983'
p9011
aS'Last revised:   28 February 2001\twfdblib 10.1.6'
p9012
aS'WFDB library type, constant, structure, and function interface definitions'
p9013
ag8980
aS'_______________________________________________________________________________'
p9014
aS'wfdb: a library for reading and writing annotated waveforms (time series data)'
p9015
aS'Copyright (C) 2001 George B. Moody'
p9016
ag8980
aS'This library is free software; you can redistribute it and/or modify it under'
p9017
aS'the terms of the GNU Library General Public License as published by the Free'
p9018
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p9019
aS'later version.'
p9020
ag8980
aS'This library is distributed in the hope that it will be useful, but WITHOUT ANY'
p9021
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p9022
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p9023
aS'details.'
p9024
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p9025
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p9026
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p9027
ag8980
aS'You may contact the author by e-mail (george@mit.edu) or postal mail'
p9028
aS'(MIT Room E25-505A, Cambridge, MA 02139 USA).  For updates to this software,'
p9029
aS'please visit PhysioNet (http://www.physionet.org/).'
p9030
aS'_______________________________________________________________________________'
p9031
ag8980
aS'*/'
p9032
ag8980
aS'#ifndef wfdb_WFDB_H /* avoid multiple definitions */'
p9033
aS'#define wfdb_WFDB_H'
p9034
ag8980
aS'/* WFDB library version. */'
p9035
aS'#define WFDB_MAJOR 10'
p9036
aS'#define WFDB_MINOR 1'
p9037
aS'#define WFDB_RELEASE 6'
p9038
aS'#define WFDB_NETFILES 0 /* if 1, library includes code for HTTP, FTP clients */'
p9039
ag8980
aS'/* Determine what type of compiler is being used. */'
p9040
aS'#ifdef __STDC__ /* true for ANSI C compilers only */'
p9041
aS'#define wfdb_PROTO /* function prototypes will be needed */'
p9042
aS"#undef _WINDOWS /* we don't want MS-Windows API in this case */"
p9043
aS'#undef _WIN32 /* ... or 32-bit MS-Windows API either */'
p9044
aS'#endif'
p9045
ag8980
aS'#ifdef __cplusplus /* true for some C++ compilers */'
p9046
aS'#define wfdb_CPP'
p9047
aS'#define wfdb_PROTO'
p9048
aS'#endif'
p9049
ag8980
aS'#ifdef c_plusplus /* true for some other C++ compilers */'
p9050
aS'#define wfdb_CPP'
p9051
aS'#define wfdb_PROTO'
p9052
aS'#endif'
p9053
ag8980
aS'#ifdef _WIN32 /* true when compiling for 32-bit MS Windows */'
p9054
aS'#ifndef _WINDOWS'
p9055
aS'#define _WINDOWS'
p9056
aS'#endif'
p9057
aS'#endif'
p9058
ag8980
aS'#ifdef _WINDOWS /* true when compiling for MS Windows */'
p9059
aS'#define wfdb_PROTO'
p9060
aS'#endif'
p9061
ag8980
aS'#ifndef wfdb_PROTO /* should be true for K&R C compilers only */'
p9062
aS'#define wfdb_KRC'
p9063
aS'#define signed'
p9064
aS'#endif'
p9065
ag8980
aS'/* Simple data types */'
p9066
aS'typedef int WFDB_Sample; /* units are adus */'
p9067
aS'typedef long WFDB_Time; /* units are sample intervals */'
p9068
aS'typedef long WFDB_Date; /* units are days */'
p9069
aS'typedef double WFDB_Frequency; /* units are Hz (samples/second/signal) */'
p9070
aS'typedef double WFDB_Gain; /* units are adus per physical unit */'
p9071
aS'typedef unsigned int WFDB_Group; /* signal group number */'
p9072
aS'typedef unsigned int WFDB_Signal; /* signal number */'
p9073
aS'typedef unsigned int WFDB_Annotator; /* annotator number */'
p9074
ag8980
aS'/* Array sizes */'
p9075
aS'#define WFDB_MAXANN 2 /* maximum number of input or output annotators */'
p9076
aS'#define WFDB_MAXSIG 32 /* maximum number of input or output signals */'
p9077
aS'#define WFDB_MAXSPF 4 /* maximum number of samples per signal per frame */'
p9078
aS'#define WFDB_MAXRNL 11 /* maximum length of record name */'
p9079
aS"#define WFDB_MAXUSL 20 /* maximum length of WFDB_siginfo `.units' string */"
p9080
aS"#define WFDB_MAXDSL 60 /* maximum length of WFDB_siginfo `.desc' string */"
p9081
ag8980
aS"/* WFDB_anninfo '.stat' values */"
p9082
aS'#define WFDB_READ 0 /* standard input annotation file */'
p9083
aS'#define WFDB_WRITE 1 /* standard output annotation file */'
p9084
aS'#define WFDB_AHA_READ 2 /* AHA-format input annotation file */'
p9085
aS'#define WFDB_AHA_WRITE 3 /* AHA-format output annotation file */'
p9086
ag8980
aS"/* WFDB_siginfo '.fmt' values"
p9087
aS'FMT_LIST is suitable as an initializer for a static array; it lists all of'
p9088
aS'the legal values for the format field in a WFDB_siginfo structure.'
p9089
aS'fmt    meaning'
p9090
aS'0\tnull signal (nothing read or written)'
p9091
aS'8\t8-bit first differences'
p9092
aS"16\t16-bit 2's complement amplitudes, low byte first"
p9093
aS"61\t16-bit 2's complement amplitudes, high byte first"
p9094
aS'80\t8-bit offset binary amplitudes'
p9095
aS'160\t16-bit offset binary amplitudes'
p9096
aS'212\t2 12-bit amplitudes bit-packed in 3 bytes'
p9097
aS'310\t3 10-bit amplitudes bit-packed in 4 bytes'
p9098
aS'311    3 10-bit amplitudes bit-packed in 4 bytes'
p9099
aS'*/'
p9100
aS'#define WFDB_FMT_LIST                                                                              \\'
p9101
aS'{                                                                                              \\'
p9102
aS'0, 8, 16, 61, 80, 160, 212, 310, 311                                                       \\'
p9103
aS'}'
p9104
aS'#define WFDB_NFMTS 9 /* number of items in FMT_LIST */'
p9105
ag8980
aS'/* Default signal specifications */'
p9106
aS'#define WFDB_DEFFREQ 250.0 /* default sampling frequency (Hz) */'
p9107
aS'#define WFDB_DEFGAIN 200.0 /* default value for gain (adu/physical unit) */'
p9108
aS'#define WFDB_DEFRES 12 /* default value for ADC resolution (bits) */'
p9109
ag8980
aS'/* getvec operating modes */'
p9110
aS'#define WFDB_LOWRES 0 /* return one sample per signal per frame */'
p9111
aS'#define WFDB_HIGHRES                                                                               \\'
p9112
aS'1 /* return each sample of oversampled signals,                                                \\'
p9113
aS'duplicating samples of other signals */'
p9114
aS"/* calinfo '.caltype' values"
p9115
aS'WFDB_AC_COUPLED and WFDB_DC_COUPLED are used in combination with the pulse'
p9116
aS'shape definitions below to characterize calibration pulses. */'
p9117
aS'#define WFDB_AC_COUPLED 0 /* AC coupled signal */'
p9118
aS'#define WFDB_DC_COUPLED 1 /* DC coupled signal */'
p9119
aS'#define WFDB_CAL_SQUARE 2 /* square wave pulse */'
p9120
aS'#define WFDB_CAL_SINE 4 /* sine wave pulse */'
p9121
aS'#define WFDB_CAL_SAWTOOTH 6 /* sawtooth pulse */'
p9122
aS'#define WFDB_CAL_UNDEF 8 /* undefined pulse shape */'
p9123
ag8980
aS'/* Structure definitions */'
p9124
aS'struct WFDB_siginfo'
p9125
aS'{ /* signal information structure */'
p9126
aS'char* fname; /* filename of signal file */'
p9127
aS'char* desc; /* signal description */'
p9128
aS'char* units; /* physical units (mV unless otherwise specified) */'
p9129
aS'WFDB_Gain gain; /* gain (ADC units/physical unit, 0: uncalibrated) */'
p9130
aS'WFDB_Sample initval; /* initial value (that of sample number 0) */'
p9131
aS'WFDB_Group group; /* signal group number */'
p9132
aS'int fmt; /* format (8, 16, etc.) */'
p9133
aS'int spf; /* samples per frame (>1 for oversampled signals) */'
p9134
aS'int bsize; /* block size (for character special files only) */'
p9135
aS'int adcres; /* ADC resolution in bits */'
p9136
aS'int adczero; /* ADC output given 0 VDC input */'
p9137
aS'int baseline; /* ADC output given 0 physical units input */'
p9138
aS'long nsamp; /* number of samples (0: unspecified) */'
p9139
aS'int cksum; /* 16-bit checksum of all samples */'
p9140
aS'};'
p9141
ag8980
aS'struct WFDB_calinfo'
p9142
aS'{ /* calibration information structure */'
p9143
aS'double low; /* low level of calibration pulse in physical units */'
p9144
aS'double high; /* high level of calibration pulse in physical units */'
p9145
aS'double scale; /* customary plotting scale (physical units per cm) */'
p9146
aS'char* sigtype; /* signal type */'
p9147
aS'char* units; /* physical units */'
p9148
aS'int caltype; /* calibration pulse type (see definitions above) */'
p9149
aS'};'
p9150
ag8980
aS'struct WFDB_anninfo'
p9151
aS'{ /* annotator information structure */'
p9152
aS'char* name; /* annotator name */'
p9153
aS'int stat; /* file type/access code (READ, WRITE, etc.) */'
p9154
aS'};'
p9155
ag8980
aS'struct WFDB_ann'
p9156
aS'{ /* annotation structure */'
p9157
aS'WFDB_Time time; /* annotation time, in sample intervals from'
p9158
aS'the beginning of the record */'
p9159
aS'char anntyp; /* annotation type (< ACMAX, see <wfdb/ecgcodes.h> */'
p9160
aS'signed char subtyp; /* annotation subtype */'
p9161
aS'signed char chan; /* channel number */'
p9162
aS'signed char num; /* annotator number */'
p9163
aS'char* aux; /* pointer to auxiliary information */'
p9164
aS'};'
p9165
ag8980
aS'/* Composite data types */'
p9166
aS'typedef struct WFDB_siginfo WFDB_Siginfo;'
p9167
aS'typedef struct WFDB_calinfo WFDB_Calinfo;'
p9168
aS'typedef struct WFDB_anninfo WFDB_Anninfo;'
p9169
aS'typedef struct WFDB_ann WFDB_Annotation;'
p9170
ag8980
aS'/* Function types */'
p9171
aS'#ifndef _WINDOWS /* for everything *except* MS Windows applications */'
p9172
aS'typedef char* FSTRING;'
p9173
aS'typedef WFDB_Date FDATE;'
p9174
aS'typedef double FDOUBLE;'
p9175
aS'typedef WFDB_Frequency FFREQUENCY;'
p9176
aS'typedef int FINT;'
p9177
aS'typedef long FLONGINT;'
p9178
aS'typedef WFDB_Sample FSAMPLE;'
p9179
aS'typedef WFDB_Time FSITIME;'
p9180
aS'typedef void FVOID;'
p9181
aS'#else'
p9182
aS'#ifndef _WIN32 /* for 16-bit MS Windows applications using the WFDB DLL */'
p9183
aS"/* typedefs don't work properly with _far or _pascal -- must use #defines */"
p9184
aS'#define FSTRING char _far* _pascal'
p9185
aS'#define FDATE WFDB_Date _far _pascal'
p9186
aS'#define FDOUBLE double _far _pascal'
p9187
aS'#define FFREQUENCY WFDB_Frequency _far _pascal'
p9188
aS'#define FINT int _far _pascal'
p9189
aS'#define FLONGINT long _far _pascal'
p9190
aS'#define FSAMPLE WFDB_Sample _far _pascal'
p9191
aS'#define FSITIME WFDB_Time _far _pascal'
p9192
aS'#define FVOID void _far _pascal'
p9193
aS'#else /* for 32-bit MS Windows applications using the WFDB DLL */'
p9194
aS'#ifndef CALLBACK'
p9195
aS'#define CALLBACK __stdcall /* from windef.h */'
p9196
aS'#endif'
p9197
aS'#define FSTRING __declspec(dllexport) char* CALLBACK'
p9198
aS'#define FDATE __declspec(dllexport) WFDB_Date CALLBACK'
p9199
aS'#define FDOUBLE __declspec(dllexport) double CALLBACK'
p9200
aS'#define FFREQUENCY __declspec(dllexport) WFDB_Frequency CALLBACK'
p9201
aS'#define FINT __declspec(dllexport) int CALLBACK'
p9202
aS'#define FLONGINT __declspec(dllexport) long CALLBACK'
p9203
aS'#define FSAMPLE __declspec(dllexport) WFDB_Sample CALLBACK'
p9204
aS'#define FSITIME __declspec(dllexport) WFDB_Time CALLBACK'
p9205
aS'#define FVOID __declspec(dllexport) void CALLBACK'
p9206
aS'#endif'
p9207
aS'#endif'
p9208
ag8980
aS'/* Specify C linkage for C++ compilers. */'
p9209
aS'#ifdef wfdb_CPP'
p9210
aS'extern "C" {'
p9211
aS'#endif'
p9212
ag8980
aS'/* Define function prototypes for ANSI C compilers and C++ compilers */'
p9213
aS'#ifdef wfdb_PROTO'
p9214
aS'extern FINT annopen(char* record, WFDB_Anninfo* aiarray, unsigned int nann);'
p9215
aS'extern FINT isigopen(char* record, WFDB_Siginfo* siarray, int nsig);'
p9216
aS'extern FINT osigopen(char* record, WFDB_Siginfo* siarray, unsigned int nsig);'
p9217
aS'extern FINT osigfopen(WFDB_Siginfo* siarray, unsigned int nsig);'
p9218
aS'extern FINT wfdbinit(char* record, WFDB_Anninfo* aiarray, unsigned int nann, WFDB_Siginfo* siarray,'
p9219
aS'unsigned int nsig);'
p9220
aS'extern FINT getspf(void);'
p9221
aS'extern FVOID setgvmode(int mode);'
p9222
aS'extern FINT getvec(WFDB_Sample* vector);'
p9223
aS'extern FINT getframe(WFDB_Sample* vector);'
p9224
aS'extern FINT putvec(WFDB_Sample* vector);'
p9225
aS'extern FINT getann(WFDB_Annotator a, WFDB_Annotation* annot);'
p9226
aS'extern FINT ungetann(WFDB_Annotator a, WFDB_Annotation* annot);'
p9227
aS'extern FINT putann(WFDB_Annotator a, WFDB_Annotation* annot);'
p9228
aS'extern FINT isigsettime(WFDB_Time t);'
p9229
aS'extern FINT isgsettime(WFDB_Group g, WFDB_Time t);'
p9230
aS'extern FINT iannsettime(WFDB_Time t);'
p9231
aS'extern FSTRING ecgstr(int annotation_code);'
p9232
aS'extern FINT strecg(char* annotation_mnemonic_string);'
p9233
aS'extern FINT setecgstr(int annotation_code, char* annotation_mnemonic_string);'
p9234
aS'extern FSTRING annstr(int annotation_code);'
p9235
aS'extern FINT strann(char* annotation_mnemonic_string);'
p9236
aS'extern FINT setannstr(int annotation_code, char* annotation_mnemonic_string);'
p9237
aS'extern FSTRING anndesc(int annotation_code);'
p9238
aS'extern FINT setanndesc(int annotation_code, char* annotation_description);'
p9239
aS'extern FVOID iannclose(WFDB_Annotator a);'
p9240
aS'extern FVOID oannclose(WFDB_Annotator a);'
p9241
aS'extern FSTRING timstr(WFDB_Time t);'
p9242
aS'extern FSTRING mstimstr(WFDB_Time t);'
p9243
aS'extern FSITIME strtim(char* time_string);'
p9244
aS'extern FSTRING datstr(WFDB_Date d);'
p9245
aS'extern FDATE strdat(char* date_string);'
p9246
aS'extern FINT adumuv(WFDB_Signal s, WFDB_Sample a);'
p9247
aS'extern FSAMPLE muvadu(WFDB_Signal s, int microvolts);'
p9248
aS'extern FDOUBLE aduphys(WFDB_Signal s, WFDB_Sample a);'
p9249
aS'extern FSAMPLE physadu(WFDB_Signal s, double v);'
p9250
aS'extern FINT calopen(char* calibration_filename);'
p9251
aS'extern FINT getcal(char* description, char* units, WFDB_Calinfo* cal);'
p9252
aS'extern FINT putcal(WFDB_Calinfo* cal);'
p9253
aS'extern FINT newcal(char* calibration_filename);'
p9254
aS'extern FVOID flushcal(void);'
p9255
aS'extern FSTRING getinfo(char* record);'
p9256
aS'extern FINT putinfo(char* info);'
p9257
aS'extern FINT newheader(char* record);'
p9258
aS'extern FINT setheader(char* record, WFDB_Siginfo* siarray, unsigned int nsig);'
p9259
aS'extern FINT setmsheader(char* record, char** seg_names, unsigned int nsegments);'
p9260
aS'extern FINT wfdbgetskew(WFDB_Signal s);'
p9261
aS'extern FVOID wfdbsetskew(WFDB_Signal s, int skew);'
p9262
aS'extern FLONGINT wfdbgetstart(WFDB_Signal s);'
p9263
aS'extern FVOID wfdbsetstart(WFDB_Signal s, long bytes);'
p9264
aS'extern FVOID wfdbquit(void);'
p9265
aS'extern FFREQUENCY sampfreq(char* record);'
p9266
aS'extern FINT setsampfreq(WFDB_Frequency sampling_frequency);'
p9267
aS'extern FFREQUENCY getcfreq(void);'
p9268
aS'extern FVOID setcfreq(WFDB_Frequency counter_frequency);'
p9269
aS'extern FDOUBLE getbasecount(void);'
p9270
aS'extern FVOID setbasecount(double count);'
p9271
aS'extern FINT setbasetime(char* time_string);'
p9272
aS'extern FVOID wfdbquiet(void);'
p9273
aS'extern FVOID wfdbverbose(void);'
p9274
aS'extern FSTRING wfdberror(void);'
p9275
aS'extern FVOID setwfdb(char* database_path_string);'
p9276
aS'extern FSTRING getwfdb(void);'
p9277
aS'extern FINT setibsize(int input_buffer_size);'
p9278
aS'extern FINT setobsize(int output_buffer_size);'
p9279
aS'extern FSTRING wfdbfile(char* file_type, char* record);'
p9280
aS'extern FVOID wfdbflush(void);'
p9281
aS'#endif'
p9282
ag8980
aS'#ifdef wfdb_CPP'
p9283
ag9104
aS'#endif'
p9284
ag8980
aS'#ifdef wfdb_KRC /* declare only function return types for K&R C compilers */'
p9285
aS'extern FINT annopen(), isigopen(), osigopen(), wfdbinit(), getspf(), getvec(), getframe(), putvec(),'
p9286
aS'getann(), ungetann(), putann(), isigsettime(), isgsettime(), iannsettime(), strecg(),'
p9287
aS'setecgstr(), strann(), setannstr(), setanndesc(), adumuv(), newheader(), setheader(),'
p9288
aS'setmsheader(), setsampfreq(), setbasetime(), putinfo(), setibsize(), setobsize(), calopen(),'
p9289
aS'getcal(), putcal(), newcal(), wfdbgetskew();'
p9290
aS'extern FLONGINT wfdbgetstart();'
p9291
aS'extern FSAMPLE muvadu(), physadu();'
p9292
aS'extern FSTRING ecgstr(), annstr(), anndesc(), timstr(), mstimstr(), datstr(), getwfdb(), getinfo(),'
p9293
aS'wfdberror(), wfdbfile();'
p9294
aS'extern FSITIME strtim();'
p9295
aS'extern FDATE strdat();'
p9296
aS'extern FVOID setgvmode(), wfdbquit(), wfdbquiet(), dbverbose(), setdb(), wfdbflush(), setcfreq(),'
p9297
aS'setbasecount(), flushcal(), wfdbsetskew(), wfdbsetstart();'
p9298
aS'extern FFREQUENCY sampfreq(), getcfreq();'
p9299
aS'extern FDOUBLE aduphys(), getbasecount();'
p9300
aS'#endif'
p9301
ag8980
aS'/* Remove local preprocessor definitions. */'
p9302
aS'#ifdef wfdb_PROTO'
p9303
aS'#undef wfdb_PROTO'
p9304
aS'#endif'
p9305
ag8980
aS'#ifdef wfdb_CPP'
p9306
aS'#undef wfdb_CPP'
p9307
aS'#endif'
p9308
ag8980
aS'#ifdef wfdb_KRC'
p9309
aS'#undef wfdb_KRC'
p9310
aS'#undef signed'
p9311
aS'#endif'
p9312
ag8980
aS'#endif'
p9313
aa(lp9314
S'/* file: wfdb.h\t\tG. Moody\t13 June 1983'
p9315
aS'Last revised:   28 February 2001\twfdblib 10.1.6'
p9316
aS'WFDB library type, constant, structure, and function interface definitions'
p9317
ag8980
aS'_______________________________________________________________________________'
p9318
aS'wfdb: a library for reading and writing annotated waveforms (time series data)'
p9319
aS'Copyright (C) 2001 George B. Moody'
p9320
ag8980
aS'This library is free software; you can redistribute it and/or modify it under'
p9321
aS'the terms of the GNU Library General Public License as published by the Free'
p9322
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p9323
aS'later version.'
p9324
ag8980
aS'This library is distributed in the hope that it will be useful, but WITHOUT ANY'
p9325
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p9326
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p9327
aS'details.'
p9328
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p9329
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p9330
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p9331
ag8980
aS'You may contact the author by e-mail (george@mit.edu) or postal mail'
p9332
aS'(MIT Room E25-505A, Cambridge, MA 02139 USA).  For updates to this software,'
p9333
aS'please visit PhysioNet (http://www.physionet.org/).'
p9334
aS'_______________________________________________________________________________'
p9335
ag8980
aS'*/'
p9336
ag8980
aS'#ifndef wfdb_WFDB_H /* avoid multiple definitions */'
p9337
aS'#define wfdb_WFDB_H'
p9338
ag8980
aS'/* WFDB library version. */'
p9339
aS'#define WFDB_MAJOR 10'
p9340
aS'#define WFDB_MINOR 1'
p9341
aS'#define WFDB_RELEASE 6'
p9342
aS'#define WFDB_NETFILES 0 /* if 1, library includes code for HTTP, FTP clients */'
p9343
ag8980
aS'/* Determine what type of compiler is being used. */'
p9344
aS'#ifdef __STDC__ /* true for ANSI C compilers only */'
p9345
aS'#define wfdb_PROTO /* function prototypes will be needed */'
p9346
aS"#undef _WINDOWS /* we don't want MS-Windows API in this case */"
p9347
aS'#undef _WIN32 /* ... or 32-bit MS-Windows API either */'
p9348
aS'#endif'
p9349
ag8980
aS'#ifdef __cplusplus /* true for some C++ compilers */'
p9350
aS'#define wfdb_CPP'
p9351
aS'#define wfdb_PROTO'
p9352
aS'#endif'
p9353
ag8980
aS'#ifdef c_plusplus /* true for some other C++ compilers */'
p9354
aS'#define wfdb_CPP'
p9355
aS'#define wfdb_PROTO'
p9356
aS'#endif'
p9357
ag8980
aS'#ifdef _WIN32 /* true when compiling for 32-bit MS Windows */'
p9358
aS'#ifndef _WINDOWS'
p9359
aS'#define _WINDOWS'
p9360
aS'#endif'
p9361
aS'#endif'
p9362
ag8980
aS'#ifdef _WINDOWS /* true when compiling for MS Windows */'
p9363
aS'#define wfdb_PROTO'
p9364
aS'#endif'
p9365
ag8980
aS'#ifndef wfdb_PROTO /* should be true for K&R C compilers only */'
p9366
aS'#define wfdb_KRC'
p9367
aS'#define signed'
p9368
aS'#endif'
p9369
ag8980
aS'/* Simple data types */'
p9370
aS'typedef int WFDB_Sample; /* units are adus */'
p9371
aS'typedef long WFDB_Time; /* units are sample intervals */'
p9372
aS'typedef long WFDB_Date; /* units are days */'
p9373
aS'typedef double WFDB_Frequency; /* units are Hz (samples/second/signal) */'
p9374
aS'typedef double WFDB_Gain; /* units are adus per physical unit */'
p9375
aS'typedef unsigned int WFDB_Group; /* signal group number */'
p9376
aS'typedef unsigned int WFDB_Signal; /* signal number */'
p9377
aS'typedef unsigned int WFDB_Annotator; /* annotator number */'
p9378
ag8980
aS'/* Array sizes */'
p9379
aS'#define WFDB_MAXANN 2 /* maximum number of input or output annotators */'
p9380
aS'#define WFDB_MAXSIG 32 /* maximum number of input or output signals */'
p9381
aS'#define WFDB_MAXSPF 4 /* maximum number of samples per signal per frame */'
p9382
aS'#define WFDB_MAXRNL 11 /* maximum length of record name */'
p9383
aS"#define WFDB_MAXUSL 20 /* maximum length of WFDB_siginfo `.units' string */"
p9384
aS"#define WFDB_MAXDSL 60 /* maximum length of WFDB_siginfo `.desc' string */"
p9385
ag8980
aS"/* WFDB_anninfo '.stat' values */"
p9386
aS'#define WFDB_READ 0 /* standard input annotation file */'
p9387
aS'#define WFDB_WRITE 1 /* standard output annotation file */'
p9388
aS'#define WFDB_AHA_READ 2 /* AHA-format input annotation file */'
p9389
aS'#define WFDB_AHA_WRITE 3 /* AHA-format output annotation file */'
p9390
ag8980
aS"/* WFDB_siginfo '.fmt' values"
p9391
aS'FMT_LIST is suitable as an initializer for a static array; it lists all of'
p9392
aS'the legal values for the format field in a WFDB_siginfo structure.'
p9393
aS'fmt    meaning'
p9394
aS'0\tnull signal (nothing read or written)'
p9395
aS'8\t8-bit first differences'
p9396
aS"16\t16-bit 2's complement amplitudes, low byte first"
p9397
aS"61\t16-bit 2's complement amplitudes, high byte first"
p9398
aS'80\t8-bit offset binary amplitudes'
p9399
aS'160\t16-bit offset binary amplitudes'
p9400
aS'212\t2 12-bit amplitudes bit-packed in 3 bytes'
p9401
aS'310\t3 10-bit amplitudes bit-packed in 4 bytes'
p9402
aS'311    3 10-bit amplitudes bit-packed in 4 bytes'
p9403
aS'*/'
p9404
aS'#define WFDB_FMT_LIST                                                                              \\'
p9405
aS'{                                                                                              \\'
p9406
aS'0, 8, 16, 61, 80, 160, 212, 310, 311                                                       \\'
p9407
ag9104
aS'#define WFDB_NFMTS 9 /* number of items in FMT_LIST */'
p9408
ag8980
aS'/* Default signal specifications */'
p9409
aS'#define WFDB_DEFFREQ 250.0 /* default sampling frequency (Hz) */'
p9410
aS'#define WFDB_DEFGAIN 200.0 /* default value for gain (adu/physical unit) */'
p9411
aS'#define WFDB_DEFRES 12 /* default value for ADC resolution (bits) */'
p9412
ag8980
aS'/* getvec operating modes */'
p9413
aS'#define WFDB_LOWRES 0 /* return one sample per signal per frame */'
p9414
aS'#define WFDB_HIGHRES                                                                               \\'
p9415
aS'1 /* return each sample of oversampled signals,                                                \\'
p9416
aS'duplicating samples of other signals */'
p9417
aS"/* calinfo '.caltype' values"
p9418
aS'WFDB_AC_COUPLED and WFDB_DC_COUPLED are used in combination with the pulse'
p9419
aS'shape definitions below to characterize calibration pulses. */'
p9420
aS'#define WFDB_AC_COUPLED 0 /* AC coupled signal */'
p9421
aS'#define WFDB_DC_COUPLED 1 /* DC coupled signal */'
p9422
aS'#define WFDB_CAL_SQUARE 2 /* square wave pulse */'
p9423
aS'#define WFDB_CAL_SINE 4 /* sine wave pulse */'
p9424
aS'#define WFDB_CAL_SAWTOOTH 6 /* sawtooth pulse */'
p9425
aS'#define WFDB_CAL_UNDEF 8 /* undefined pulse shape */'
p9426
ag8980
aS'/* Structure definitions */'
p9427
aS'struct WFDB_siginfo'
p9428
aS'{ /* signal information structure */'
p9429
aS'char* fname; /* filename of signal file */'
p9430
aS'char* desc; /* signal description */'
p9431
aS'char* units; /* physical units (mV unless otherwise specified) */'
p9432
aS'WFDB_Gain gain; /* gain (ADC units/physical unit, 0: uncalibrated) */'
p9433
aS'WFDB_Sample initval; /* initial value (that of sample number 0) */'
p9434
aS'WFDB_Group group; /* signal group number */'
p9435
aS'int fmt; /* format (8, 16, etc.) */'
p9436
aS'int spf; /* samples per frame (>1 for oversampled signals) */'
p9437
aS'int bsize; /* block size (for character special files only) */'
p9438
aS'int adcres; /* ADC resolution in bits */'
p9439
aS'int adczero; /* ADC output given 0 VDC input */'
p9440
aS'int baseline; /* ADC output given 0 physical units input */'
p9441
aS'long nsamp; /* number of samples (0: unspecified) */'
p9442
aS'int cksum; /* 16-bit checksum of all samples */'
p9443
aS'};'
p9444
ag8980
aS'struct WFDB_calinfo'
p9445
aS'{ /* calibration information structure */'
p9446
aS'double low; /* low level of calibration pulse in physical units */'
p9447
aS'double high; /* high level of calibration pulse in physical units */'
p9448
aS'double scale; /* customary plotting scale (physical units per cm) */'
p9449
aS'char* sigtype; /* signal type */'
p9450
aS'char* units; /* physical units */'
p9451
aS'int caltype; /* calibration pulse type (see definitions above) */'
p9452
aS'};'
p9453
ag8980
aS'struct WFDB_anninfo'
p9454
aS'{ /* annotator information structure */'
p9455
aS'char* name; /* annotator name */'
p9456
aS'int stat; /* file type/access code (READ, WRITE, etc.) */'
p9457
aS'};'
p9458
ag8980
aS'struct WFDB_ann'
p9459
aS'{ /* annotation structure */'
p9460
aS'WFDB_Time time; /* annotation time, in sample intervals from'
p9461
aS'the beginning of the record */'
p9462
aS'char anntyp; /* annotation type (< ACMAX, see <wfdb/ecgcodes.h> */'
p9463
aS'signed char subtyp; /* annotation subtype */'
p9464
aS'signed char chan; /* channel number */'
p9465
aS'signed char num; /* annotator number */'
p9466
aS'char* aux; /* pointer to auxiliary information */'
p9467
aS'};'
p9468
ag8980
aS'/* Composite data types */'
p9469
aS'typedef struct WFDB_siginfo WFDB_Siginfo;'
p9470
aS'typedef struct WFDB_calinfo WFDB_Calinfo;'
p9471
aS'typedef struct WFDB_anninfo WFDB_Anninfo;'
p9472
aS'typedef struct WFDB_ann WFDB_Annotation;'
p9473
ag8980
aS'/* Function types */'
p9474
aS'#ifndef _WINDOWS /* for everything *except* MS Windows applications */'
p9475
aS'typedef char* FSTRING;'
p9476
aS'typedef WFDB_Date FDATE;'
p9477
aS'typedef double FDOUBLE;'
p9478
aS'typedef WFDB_Frequency FFREQUENCY;'
p9479
aS'typedef int FINT;'
p9480
aS'typedef long FLONGINT;'
p9481
aS'typedef WFDB_Sample FSAMPLE;'
p9482
aS'typedef WFDB_Time FSITIME;'
p9483
aS'typedef void FVOID;'
p9484
aS'#else'
p9485
aS'#ifndef _WIN32 /* for 16-bit MS Windows applications using the WFDB DLL */'
p9486
aS"/* typedefs don't work properly with _far or _pascal -- must use #defines */"
p9487
aS'#define FSTRING char _far* _pascal'
p9488
aS'#define FDATE WFDB_Date _far _pascal'
p9489
aS'#define FDOUBLE double _far _pascal'
p9490
aS'#define FFREQUENCY WFDB_Frequency _far _pascal'
p9491
aS'#define FINT int _far _pascal'
p9492
aS'#define FLONGINT long _far _pascal'
p9493
aS'#define FSAMPLE WFDB_Sample _far _pascal'
p9494
aS'#define FSITIME WFDB_Time _far _pascal'
p9495
aS'#define FVOID void _far _pascal'
p9496
aS'#else /* for 32-bit MS Windows applications using the WFDB DLL */'
p9497
aS'#ifndef CALLBACK'
p9498
aS'#define CALLBACK __stdcall /* from windef.h */'
p9499
aS'#endif'
p9500
aS'#define FSTRING __declspec(dllexport) char* CALLBACK'
p9501
aS'#define FDATE __declspec(dllexport) WFDB_Date CALLBACK'
p9502
aS'#define FDOUBLE __declspec(dllexport) double CALLBACK'
p9503
aS'#define FFREQUENCY __declspec(dllexport) WFDB_Frequency CALLBACK'
p9504
aS'#define FINT __declspec(dllexport) int CALLBACK'
p9505
aS'#define FLONGINT __declspec(dllexport) long CALLBACK'
p9506
aS'#define FSAMPLE __declspec(dllexport) WFDB_Sample CALLBACK'
p9507
aS'#define FSITIME __declspec(dllexport) WFDB_Time CALLBACK'
p9508
aS'#define FVOID __declspec(dllexport) void CALLBACK'
p9509
aS'#endif'
p9510
aS'#endif'
p9511
ag8980
aS'/* Specify C linkage for C++ compilers. */'
p9512
aS'#ifdef wfdb_CPP'
p9513
aS'extern "C" {'
p9514
aS'#endif'
p9515
ag8980
aS'/* Define function prototypes for ANSI C compilers and C++ compilers */'
p9516
aS'#ifdef wfdb_PROTO'
p9517
aS'extern FINT annopen(char* record, WFDB_Anninfo* aiarray, unsigned int nann);'
p9518
aS'extern FINT isigopen(char* record, WFDB_Siginfo* siarray, int nsig);'
p9519
aS'extern FINT osigopen(char* record, WFDB_Siginfo* siarray, unsigned int nsig);'
p9520
aS'extern FINT osigfopen(WFDB_Siginfo* siarray, unsigned int nsig);'
p9521
aS'extern FINT wfdbinit(char* record, WFDB_Anninfo* aiarray, unsigned int nann, WFDB_Siginfo* siarray,'
p9522
aS'unsigned int nsig);'
p9523
aS'extern FINT getspf(void);'
p9524
aS'extern FVOID setgvmode(int mode);'
p9525
aS'extern FINT getvec(WFDB_Sample* vector);'
p9526
aS'extern FINT getframe(WFDB_Sample* vector);'
p9527
aS'extern FINT putvec(WFDB_Sample* vector);'
p9528
aS'extern FINT getann(WFDB_Annotator a, WFDB_Annotation* annot);'
p9529
aS'extern FINT ungetann(WFDB_Annotator a, WFDB_Annotation* annot);'
p9530
aS'extern FINT putann(WFDB_Annotator a, WFDB_Annotation* annot);'
p9531
aS'extern FINT isigsettime(WFDB_Time t);'
p9532
aS'extern FINT isgsettime(WFDB_Group g, WFDB_Time t);'
p9533
aS'extern FINT iannsettime(WFDB_Time t);'
p9534
aS'extern FSTRING ecgstr(int annotation_code);'
p9535
aS'extern FINT strecg(char* annotation_mnemonic_string);'
p9536
aS'extern FINT setecgstr(int annotation_code, char* annotation_mnemonic_string);'
p9537
aS'extern FSTRING annstr(int annotation_code);'
p9538
aS'extern FINT strann(char* annotation_mnemonic_string);'
p9539
aS'extern FINT setannstr(int annotation_code, char* annotation_mnemonic_string);'
p9540
aS'extern FSTRING anndesc(int annotation_code);'
p9541
aS'extern FINT setanndesc(int annotation_code, char* annotation_description);'
p9542
aS'extern FVOID iannclose(WFDB_Annotator a);'
p9543
aS'extern FVOID oannclose(WFDB_Annotator a);'
p9544
aS'extern FSTRING timstr(WFDB_Time t);'
p9545
aS'extern FSTRING mstimstr(WFDB_Time t);'
p9546
aS'extern FSITIME strtim(char* time_string);'
p9547
aS'extern FSTRING datstr(WFDB_Date d);'
p9548
aS'extern FDATE strdat(char* date_string);'
p9549
aS'extern FINT adumuv(WFDB_Signal s, WFDB_Sample a);'
p9550
aS'extern FSAMPLE muvadu(WFDB_Signal s, int microvolts);'
p9551
aS'extern FDOUBLE aduphys(WFDB_Signal s, WFDB_Sample a);'
p9552
aS'extern FSAMPLE physadu(WFDB_Signal s, double v);'
p9553
aS'extern FINT calopen(char* calibration_filename);'
p9554
aS'extern FINT getcal(char* description, char* units, WFDB_Calinfo* cal);'
p9555
aS'extern FINT putcal(WFDB_Calinfo* cal);'
p9556
aS'extern FINT newcal(char* calibration_filename);'
p9557
aS'extern FVOID flushcal(void);'
p9558
aS'extern FSTRING getinfo(char* record);'
p9559
aS'extern FINT putinfo(char* info);'
p9560
aS'extern FINT newheader(char* record);'
p9561
aS'extern FINT setheader(char* record, WFDB_Siginfo* siarray, unsigned int nsig);'
p9562
aS'extern FINT setmsheader(char* record, char** seg_names, unsigned int nsegments);'
p9563
aS'extern FINT wfdbgetskew(WFDB_Signal s);'
p9564
aS'extern FVOID wfdbsetskew(WFDB_Signal s, int skew);'
p9565
aS'extern FLONGINT wfdbgetstart(WFDB_Signal s);'
p9566
aS'extern FVOID wfdbsetstart(WFDB_Signal s, long bytes);'
p9567
aS'extern FVOID wfdbquit(void);'
p9568
aS'extern FFREQUENCY sampfreq(char* record);'
p9569
aS'extern FINT setsampfreq(WFDB_Frequency sampling_frequency);'
p9570
aS'extern FFREQUENCY getcfreq(void);'
p9571
aS'extern FVOID setcfreq(WFDB_Frequency counter_frequency);'
p9572
aS'extern FDOUBLE getbasecount(void);'
p9573
aS'extern FVOID setbasecount(double count);'
p9574
aS'extern FINT setbasetime(char* time_string);'
p9575
aS'extern FVOID wfdbquiet(void);'
p9576
aS'extern FVOID wfdbverbose(void);'
p9577
aS'extern FSTRING wfdberror(void);'
p9578
aS'extern FVOID setwfdb(char* database_path_string);'
p9579
aS'extern FSTRING getwfdb(void);'
p9580
aS'extern FINT setibsize(int input_buffer_size);'
p9581
aS'extern FINT setobsize(int output_buffer_size);'
p9582
aS'extern FSTRING wfdbfile(char* file_type, char* record);'
p9583
aS'extern FVOID wfdbflush(void);'
p9584
aS'#endif'
p9585
ag8980
aS'#ifdef wfdb_CPP'
p9586
ag9104
aS'#endif'
p9587
ag8980
aS'#ifdef wfdb_KRC /* declare only function return types for K&R C compilers */'
p9588
aS'extern FINT annopen(), isigopen(), osigopen(), wfdbinit(), getspf(), getvec(), getframe(), putvec(),'
p9589
aS'getann(), ungetann(), putann(), isigsettime(), isgsettime(), iannsettime(), strecg(),'
p9590
aS'setecgstr(), strann(), setannstr(), setanndesc(), adumuv(), newheader(), setheader(),'
p9591
aS'setmsheader(), setsampfreq(), setbasetime(), putinfo(), setibsize(), setobsize(), calopen(),'
p9592
aS'getcal(), putcal(), newcal(), wfdbgetskew();'
p9593
aS'extern FLONGINT wfdbgetstart();'
p9594
aS'extern FSAMPLE muvadu(), physadu();'
p9595
aS'extern FSTRING ecgstr(), annstr(), anndesc(), timstr(), mstimstr(), datstr(), getwfdb(), getinfo(),'
p9596
aS'wfdberror(), wfdbfile();'
p9597
aS'extern FSITIME strtim();'
p9598
aS'extern FDATE strdat();'
p9599
aS'extern FVOID setgvmode(), wfdbquit(), wfdbquiet(), dbverbose(), setdb(), wfdbflush(), setcfreq(),'
p9600
aS'setbasecount(), flushcal(), wfdbsetskew(), wfdbsetstart();'
p9601
aS'extern FFREQUENCY sampfreq(), getcfreq();'
p9602
aS'extern FDOUBLE aduphys(), getbasecount();'
p9603
aS'#endif'
p9604
ag8980
aS'/* Remove local preprocessor definitions. */'
p9605
aS'#ifdef wfdb_PROTO'
p9606
aS'#undef wfdb_PROTO'
p9607
aS'#endif'
p9608
ag8980
aS'#ifdef wfdb_CPP'
p9609
aS'#undef wfdb_CPP'
p9610
aS'#endif'
p9611
ag8980
aS'#ifdef wfdb_KRC'
p9612
aS'#undef wfdb_KRC'
p9613
aS'#undef signed'
p9614
aS'#endif'
p9615
ag8980
aS'#endif'
p9616
aa(lp9617
g8980
aa(lp9618
S'/*****************************************************************************'
p9619
aS'FILE:  postclas.cpp'
p9620
aS'AUTHOR:\tPatrick S. Hamilton'
p9621
aS'REVISED:\t5/13/2002'
p9622
aS'___________________________________________________________________________'
p9623
ag8980
aS'postclas.cpp: Post classifier'
p9624
aS'Copywrite (C) 2002 Patrick S. Hamilton'
p9625
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p9626
aS'the terms of the GNU Library General Public License as published by the Free'
p9627
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p9628
aS'later version.'
p9629
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p9630
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p9631
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p9632
aS'details.'
p9633
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p9634
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p9635
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p9636
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p9637
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p9638
aS'MA 02143 USA).  For updates to this software, please visit our website'
p9639
aS'(http://www.eplimited.com).'
p9640
aS'__________________________________________________________________________'
p9641
ag8980
aS'This file contains functions for classifying beats based after the'
p9642
aS'following beat is detected.'
p9643
ag8980
aS'ResetPostClassify() -- Resets static variables used by'
p9644
aS'PostClassify()'
p9645
aS'PostClassify() -- classifies each beat based on six preceding'
p9646
aS'beats and the following beat.'
p9647
aS'CheckPostClass() --  classifys beat type based on the last'
p9648
aS'eight post classifications of that beat.'
p9649
aS'CheckPCRhythm() -- returns the classification of the RR interval'
p9650
aS'for this type of beat based its previous eight RR intervals.'
p9651
ag8980
aS'****************************************************************/'
p9652
ag8980
aS'#include "bdac.h"'
p9653
aS'#include "ecgcodes.h"'
p9654
ag8980
aS'// External Prototypes.'
p9655
ag8980
aS'double DomCompare(int newType, int domType);'
p9656
aS'int GetBeatTypeCount(int type);'
p9657
ag8980
aS'// Records of post classifications.'
p9658
ag8980
aS'int PostClass[MAXTYPES][8], PCInitCount = 0;'
p9659
aS'int PCRhythm[MAXTYPES][8];'
p9660
ag8980
aS'/**********************************************************************'
p9661
aS'Resets post classifications for beats.'
p9662
aS'**********************************************************************/'
p9663
ag8980
aS'void ResetPostClassify()'
p9664
aS'{'
p9665
aS'int i, j;'
p9666
aS'for (i = 0; i < MAXTYPES; ++i)'
p9667
ag9665
aS'for (j = 0; j < 8; ++j)'
p9668
ag9665
aS'PostClass[i][j] = 0;'
p9669
aS'PCRhythm[i][j] = 0;'
p9670
ag9104
ag9104
aS'PCInitCount = 0;'
p9671
ag9104
ag8980
aS'/***********************************************************************'
p9672
aS'Classify the previous beat type and rhythm type based on this beat'
p9673
aS'and the preceding beat.  This classifier is more sensitive'
p9674
aS'to detecting premature beats followed by compensitory pauses.'
p9675
aS'************************************************************************/'
p9676
ag8980
aS'void PostClassify('
p9677
aS'int* recentTypes, int domType, int* recentRRs, int width, double mi2, int rhythmClass)'
p9678
ag9665
aS'static int lastRC, lastWidth;'
p9679
aS'static double lastMI2;'
p9680
aS'int i, regCount, pvcCount, normRR;'
p9681
aS'double mi3;'
p9682
ag8980
aS'// If the preceeding and following beats are the same type,'
p9683
aS'// they are generally regular, and reasonably close in shape'
p9684
aS'// to the dominant type, consider them to be dominant.'
p9685
ag8980
aS'if ((recentTypes[0] == recentTypes[2]) && (recentTypes[0] != domType)'
p9686
aS'&& (recentTypes[0] != recentTypes[1]))'
p9687
ag9665
aS'mi3 = DomCompare(recentTypes[0], domType);'
p9688
aS'for (i = regCount = 0; i < 8; ++i)'
p9689
aS'if (PCRhythm[recentTypes[0]][i] == NORMAL)'
p9690
aS'++regCount;'
p9691
aS'if ((mi3 < 2.0) && (regCount > 6))'
p9692
aS'domType = recentTypes[0];'
p9693
ag9104
ag8980
aS"// Don't do anything until four beats have gone by."
p9694
ag8980
aS'if (PCInitCount < 3)'
p9695
ag9665
aS'++PCInitCount;'
p9696
aS'lastWidth = width;'
p9697
aS'lastMI2 = 0;'
p9698
aS'lastRC = 0;'
p9699
aS'return;'
p9700
ag9104
ag8980
aS'if (recentTypes[1] < MAXTYPES)'
p9701
ag9665
ag8980
aS'// Find first NN interval.'
p9702
aS'for (i = 2; (i < 7) && (recentTypes[i] != recentTypes[i + 1]); ++i)'
p9703
aS';'
p9704
aS'if (i == 7)'
p9705
aS'normRR = 0;'
p9706
aS'else'
p9707
aS'normRR = recentRRs[i];'
p9708
ag8980
aS'// Shift the previous beat classifications to make room for the'
p9709
aS'// new classification.'
p9710
aS'for (i = pvcCount = 0; i < 8; ++i)'
p9711
aS'if (PostClass[recentTypes[1]][i] == PVC)'
p9712
aS'++pvcCount;'
p9713
ag8980
aS'for (i = 7; i > 0; --i)'
p9714
ag9665
aS'PostClass[recentTypes[1]][i] = PostClass[recentTypes[1]][i - 1];'
p9715
aS'PCRhythm[recentTypes[1]][i] = PCRhythm[recentTypes[1]][i - 1];'
p9716
ag9104
ag8980
aS'// If the beat is premature followed by a compensitory pause and the'
p9717
aS'// previous and following beats are normal, post classify as'
p9718
aS'// a PVC.'
p9719
ag8980
aS'if (((normRR - (normRR >> 3)) >= recentRRs[1])'
p9720
aS'&& ((recentRRs[0] - (recentRRs[0] >> 3)) >= normRR) // && (lastMI2 > 3)'
p9721
aS'&& (recentTypes[0] == domType) && (recentTypes[2] == domType)'
p9722
aS'&& (recentTypes[1] != domType))'
p9723
aS'PostClass[recentTypes[1]][0] = PVC;'
p9724
ag8980
aS'// If previous two were classified as PVCs, and this is at least slightly'
p9725
aS'// premature, classify as a PVC.'
p9726
ag8980
aS'else if (((normRR - (normRR >> 4)) > recentRRs[1])'
p9727
aS'&& ((normRR + (normRR >> 4)) < recentRRs[0])'
p9728
aS'&& (((PostClass[recentTypes[1]][1] == PVC) && (PostClass[recentTypes[1]][2] == PVC))'
p9729
aS'|| (pvcCount >= 6))'
p9730
aS'&& (recentTypes[0] == domType) && (recentTypes[2] == domType)'
p9731
aS'&& (recentTypes[1] != domType))'
p9732
aS'PostClass[recentTypes[1]][0] = PVC;'
p9733
ag8980
aS'// If the previous and following beats are the dominant beat type,'
p9734
aS'// and this beat is significantly different from the dominant,'
p9735
aS'// call it a PVC.'
p9736
ag8980
aS'else if ((recentTypes[0] == domType) && (recentTypes[2] == domType) && (lastMI2 > 2.5))'
p9737
aS'PostClass[recentTypes[1]][0] = PVC;'
p9738
ag8980
aS'// Otherwise post classify this beat as UNKNOWN.'
p9739
ag8980
aS'else'
p9740
aS'PostClass[recentTypes[1]][0] = UNKNOWN;'
p9741
ag8980
aS'// If the beat is premature followed by a compensitory pause, post'
p9742
aS'// classify the rhythm as PVC.'
p9743
ag8980
aS'if (((normRR - (normRR >> 3)) > recentRRs[1])'
p9744
aS'&& ((recentRRs[0] - (recentRRs[0] >> 3)) > normRR))'
p9745
aS'PCRhythm[recentTypes[1]][0] = PVC;'
p9746
ag8980
aS'// Otherwise, post classify the rhythm as the same as the'
p9747
aS'// regular rhythm classification.'
p9748
ag8980
aS'else'
p9749
aS'PCRhythm[recentTypes[1]][0] = lastRC;'
p9750
ag9104
ag8980
aS'lastWidth = width;'
p9751
aS'lastMI2 = mi2;'
p9752
aS'lastRC = rhythmClass;'
p9753
ag9104
ag8980
ag8980
aS'/*************************************************************************'
p9754
aS'CheckPostClass checks to see if three of the last four or six of the'
p9755
aS'last eight of a given beat type have been post classified as PVC.'
p9756
aS'*************************************************************************/'
p9757
ag8980
aS'int CheckPostClass(int type)'
p9758
ag9665
aS'int i, pvcs4 = 0, pvcs8;'
p9759
ag8980
ag250
aS'return (UNKNOWN);'
p9760
ag8980
aS'for (i = 0; i < 4; ++i)'
p9761
ag9665
ag186
aS'++pvcs4;'
p9762
ag9104
aS'for (pvcs8 = pvcs4; i < 8; ++i)'
p9763
ag9665
ag221
aS'++pvcs8;'
p9764
ag9104
ag273
aS'return (PVC);'
p9765
aS'else'
p9766
aS'return (UNKNOWN);'
p9767
ag9104
ag8980
aS'/****************************************************************************'
p9768
aS"Check classification of previous beats' rhythms based on post beat"
p9769
aS'classification.  If 7 of 8 previous beats were classified as NORMAL'
p9770
aS'(regular) classify the beat type as NORMAL (regular).'
p9771
aS'Call it a PVC if 2 of the last 8 were regular.'
p9772
aS'****************************************************************************/'
p9773
ag8980
aS'int CheckPCRhythm(int type)'
p9774
ag9665
aS'int i, normCount, n;'
p9775
ag8980
ag8980
ag330
aS'return (UNKNOWN);'
p9776
ag8980
ag353
aS'n = GetBeatTypeCount(type) - 1;'
p9777
aS'else'
p9778
aS'n = 8;'
p9779
ag8980
aS'for (i = normCount = 0; i < n; ++i)'
p9780
ag9665
ag301
aS'++normCount;'
p9781
ag9104
ag366
aS'return (NORMAL);'
p9782
ag379
aS'return (PVC);'
p9783
aS'return (UNKNOWN);'
p9784
aS'}'
p9785
aa(lp9786
S'/*****************************************************************************'
p9787
aS'FILE:  qrsdet.h'
p9788
aS'AUTHOR:\tPatrick S. Hamilton'
p9789
aS'REVISED:\t4/16/2002'
p9790
aS'___________________________________________________________________________'
p9791
ag8980
aS'qrsdet.h QRS detector parameter definitions'
p9792
aS'Copywrite (C) 2000 Patrick S. Hamilton'
p9793
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p9794
aS'the terms of the GNU Library General Public License as published by the Free'
p9795
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p9796
aS'later version.'
p9797
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p9798
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p9799
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p9800
aS'details.'
p9801
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p9802
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p9803
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p9804
ag8980
aS'You may contact the author by e-mail (pat@eplimited.com) or postal mail'
p9805
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p9806
aS'MA 02143 USA).  For updates to this software, please visit our website'
p9807
aS'(http://www.eplimited.com).'
p9808
aS'__________________________________________________________________________'
p9809
aS'Revisions:'
p9810
aS'4/16: Modified to allow simplified modification of digital filters in'
p9811
aS'qrsfilt().'
p9812
aS'*****************************************************************************/'
p9813
ag8980
ag8980
aS'#define SAMPLE_RATE 200 /* Sample rate in Hz. */'
p9814
aS'#define MS_PER_SAMPLE ((double)1000 / (double)SAMPLE_RATE)'
p9815
aS'#define MS10 ((int)(10 / MS_PER_SAMPLE + 0.5))'
p9816
aS'#define MS25 ((int)(25 / MS_PER_SAMPLE + 0.5))'
p9817
aS'#define MS30 ((int)(30 / MS_PER_SAMPLE + 0.5))'
p9818
aS'#define MS80 ((int)(80 / MS_PER_SAMPLE + 0.5))'
p9819
aS'#define MS95 ((int)(95 / MS_PER_SAMPLE + 0.5))'
p9820
aS'#define MS100 ((int)(100 / MS_PER_SAMPLE + 0.5))'
p9821
aS'#define MS125 ((int)(125 / MS_PER_SAMPLE + 0.5))'
p9822
aS'#define MS150 ((int)(150 / MS_PER_SAMPLE + 0.5))'
p9823
aS'#define MS160 ((int)(160 / MS_PER_SAMPLE + 0.5))'
p9824
aS'#define MS175 ((int)(175 / MS_PER_SAMPLE + 0.5))'
p9825
aS'#define MS195 ((int)(195 / MS_PER_SAMPLE + 0.5))'
p9826
aS'#define MS200 ((int)(200 / MS_PER_SAMPLE + 0.5))'
p9827
aS'#define MS220 ((int)(220 / MS_PER_SAMPLE + 0.5))'
p9828
aS'#define MS250 ((int)(250 / MS_PER_SAMPLE + 0.5))'
p9829
aS'#define MS300 ((int)(300 / MS_PER_SAMPLE + 0.5))'
p9830
aS'#define MS360 ((int)(360 / MS_PER_SAMPLE + 0.5))'
p9831
aS'#define MS450 ((int)(450 / MS_PER_SAMPLE + 0.5))'
p9832
aS'#define MS1000 SAMPLE_RATE'
p9833
aS'#define MS1500 ((int)(1500 / MS_PER_SAMPLE))'
p9834
aS'#define DERIV_LENGTH MS10'
p9835
aS'#define LPBUFFER_LGTH ((int)(2 * MS25))'
p9836
aS'#define HPBUFFER_LGTH MS125'
p9837
ag8980
aS'#define WINDOW_WIDTH MS80 // Moving window integration width.'
p9838
aS'#define FILTER_DELAY                                                                               \\'
p9839
aS'(int)(((double)DERIV_LENGTH / 2) + ((double)LPBUFFER_LGTH / 2 - 1)                             \\'
p9840
aS'+ (((double)HPBUFFER_LGTH - 1) / 2)                                                        \\'
p9841
aS'+ PRE_BLANK) // filter delays plus 200 ms blanking delay'
p9842
aS'#define DER_DELAY WINDOW_WIDTH + FILTER_DELAY + MS100'
p9843
aa(lp9844
S'/*****************************************************************************'
p9845
aS'FILE:  rythmchk.h'
p9846
aS'AUTHOR:\tPatrick S. Hamilton'
p9847
aS'REVISED:\t9/25/2001'
p9848
aS'___________________________________________________________________________'
p9849
ag8980
aS'rythmchk.h: Prototype definitions for rythmchk.cpp'
p9850
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p9851
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p9852
aS'the terms of the GNU Library General Public License as published by the Free'
p9853
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p9854
aS'later version.'
p9855
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p9856
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p9857
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p9858
aS'details.'
p9859
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p9860
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p9861
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p9862
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p9863
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p9864
aS'MA 02143 USA).  For updates to this software, please visit our website'
p9865
aS'(http://www.eplimited.com).'
p9866
aS'******************************************************************************/'
p9867
ag8980
aS'// External prototypes for rythmchk.cpp'
p9868
ag8980
aS'void ResetRhythmChk(void);'
p9869
aS'int RhythmChk(int rr);'
p9870
aS'int IsBigeminy(void);'
p9871
ag8980
ag8980
aS"//Hey yo dudes I'm doing shit"
p9872
aa(lp9873
S'/* file: ecgcodes.h\tT. Baker and G. Moody\t  June 1981'
p9874
aS'Last revised:  19 March 1992\t\tdblib 7.0'
p9875
aS'ECG annotation codes'
p9876
ag8980
aS'Copyright (C) Massachusetts Institute of Technology 1992. All rights reserved.'
p9877
aS'*/'
p9878
ag8980
aS'#ifndef db_ECGCODES_H /* avoid multiple definitions */'
p9879
aS'#define db_ECGCODES_H'
p9880
ag8980
aS'#define NOTQRS 0 /* not-QRS (not a getann/putann code) */'
p9881
aS'#define NORMAL 1 /* normal beat */'
p9882
aS'#define LBBB 2 /* left bundle branch block beat */'
p9883
aS'#define RBBB 3 /* right bundle branch block beat */'
p9884
aS'#define ABERR 4 /* aberrated atrial premature beat */'
p9885
aS'#define PVC 5 /* premature ventricular contraction */'
p9886
aS'#define FUSION 6 /* fusion of ventricular and normal beat */'
p9887
aS'#define NPC 7 /* nodal (junctional) premature beat */'
p9888
aS'#define APC 8 /* atrial premature contraction */'
p9889
aS'#define SVPB 9 /* premature or ectopic supraventricular beat */'
p9890
aS'#define VESC 10 /* ventricular escape beat */'
p9891
aS'#define NESC 11 /* nodal (junctional) escape beat */'
p9892
aS'#define PACE 12 /* paced beat */'
p9893
aS'#define UNKNOWN 13 /* unclassifiable beat */'
p9894
aS'#define NOISE 14 /* signal quality change */'
p9895
aS'#define ARFCT 16 /* isolated QRS-like artifact */'
p9896
aS'#define STCH 18 /* ST change */'
p9897
aS'#define TCH 19 /* T-wave change */'
p9898
aS'#define SYSTOLE 20 /* systole */'
p9899
aS'#define DIASTOLE 21 /* diastole */'
p9900
aS'#define NOTE 22 /* comment annotation */'
p9901
aS'#define MEASURE 23 /* measurement annotation */'
p9902
aS'#define BBB 25 /* left or right bundle branch block */'
p9903
aS'#define PACESP 26 /* non-conducted pacer spike */'
p9904
aS'#define RHYTHM 28 /* rhythm change */'
p9905
aS'#define LEARN 30 /* learning */'
p9906
aS'#define FLWAV 31 /* ventricular flutter wave */'
p9907
aS'#define VFON 32 /* start of ventricular flutter/fibrillation */'
p9908
aS'#define VFOFF 33 /* end of ventricular flutter/fibrillation */'
p9909
aS'#define AESC 34 /* atrial escape beat */'
p9910
aS'#define SVESC 35 /* supraventricular escape beat */'
p9911
aS'#define NAPC 37 /* non-conducted P-wave (blocked APB) */'
p9912
aS'#define PFUS 38 /* fusion of paced and normal beat */'
p9913
aS'#define PQ 39 /* PQ junction (beginning of QRS) */'
p9914
aS'#define JPT 40 /* J point (end of QRS) */'
p9915
aS'#define RONT 41 /* R-on-T premature ventricular contraction */'
p9916
ag8980
aS'/* ... annotation codes between RONT+1 and ACMAX inclusive are user-defined */'
p9917
ag8980
aS'#define ACMAX 49 /* value of largest valid annot code (must be < 50) */'
p9918
ag8980
aS'#endif'
p9919
aa(lp9920
g8980
aa(lp9921
S'/*****************************************************************************'
p9922
aS'FILE:  qrsdet2.cpp'
p9923
aS'AUTHOR:\tPatrick S. Hamilton'
p9924
aS'REVISED:\t7/08/2002'
p9925
aS'___________________________________________________________________________'
p9926
ag8980
aS'qrsdet2.cpp: A QRS detector.'
p9927
aS'Copywrite (C) 2002 Patrick S. Hamilton'
p9928
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p9929
aS'the terms of the GNU Library General Public License as published by the Free'
p9930
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p9931
aS'later version.'
p9932
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p9933
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p9934
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p9935
aS'details.'
p9936
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p9937
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p9938
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p9939
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p9940
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p9941
aS'MA 02143 USA).  For updates to this software, please visit our website'
p9942
aS'(http://www.eplimited.com).'
p9943
aS'__________________________________________________________________________'
p9944
ag8980
aS'This file contains functions for detecting QRS complexes in an ECG.  The'
p9945
aS'QRS detector requires filter functions in qrsfilt.cpp and parameter'
p9946
aS'definitions in qrsdet.h.  QRSDet is the only function that needs to be'
p9947
aS'visable outside of these files.'
p9948
ag8980
aS'Syntax:'
p9949
aS'int QRSDet(int ecgSample, int init) ;'
p9950
ag8980
aS'Description:'
p9951
aS'QRSDet() implements a modified version of the QRS detection'
p9952
aS'algorithm described in:'
p9953
ag8980
aS'Hamilton, Tompkins, W. J., "Quantitative investigation of QRS'
p9954
aS'detection rules using the MIT/BIH arrhythmia database",'
p9955
aS'IEEE Trans. Biomed. Eng., BME-33, pp. 1158-1165, 1987.'
p9956
ag8980
aS'Consecutive ECG samples are passed to QRSDet.  QRSDet was'
p9957
aS'designed for a 200 Hz sample rate.  QRSDet contains a number'
p9958
aS'of static variables that it uses to adapt to different ECG'
p9959
aS'signals.  These variables can be reset by passing any value'
p9960
aS'not equal to 0 in init.'
p9961
ag8980
aS'Note: QRSDet() requires filters in QRSFilt.cpp'
p9962
ag8980
aS'Returns:'
p9963
aS'When a QRS complex is detected QRSDet returns the detection delay.'
p9964
ag8980
aS'****************************************************************/'
p9965
ag8980
aS'#include <mem.h> /* For memmov. */'
p9966
aS'#include <math.h>'
p9967
aS'#include "qrsdet.h"'
p9968
ag8980
aS'#define PRE_BLANK MS195'
p9969
aS'#define MIN_PEAK_AMP 7 // Prevents detections of peaks smaller than 150 uV.'
p9970
ag8980
aS'// External Prototypes.'
p9971
ag8980
aS'int QRSFilter(int datum, int init);'
p9972
aS'int deriv1(int x0, int init);'
p9973
ag8980
aS'// Local Prototypes.'
p9974
ag8980
aS'int Peak(int datum, int init);'
p9975
aS'int mean(int* array, int datnum);'
p9976
aS'int thresh(int qmean, int nmean);'
p9977
aS'int BLSCheck(int* dBuf, int dbPtr, int* maxder);'
p9978
ag8980
aS'double TH = .3125;'
p9979
ag8980
aS'int DDBuffer[DER_DELAY], DDPtr; /* Buffer holding derivative data. *//*****************************************************************************'
p9980
aS'FILE:  qrsdet2.cpp'
p9981
aS'AUTHOR:\tPatrick S. Hamilton'
p9982
aS'REVISED:\t7/08/2002'
p9983
aS'___________________________________________________________________________'
p9984
ag8980
aS'qrsdet2.cpp: A QRS detector.'
p9985
aS'Copywrite (C) 2002 Patrick S. Hamilton'
p9986
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p9987
aS'the terms of the GNU Library General Public License as published by the Free'
p9988
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p9989
aS'later version.'
p9990
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p9991
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p9992
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p9993
aS'details.'
p9994
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p9995
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p9996
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p9997
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p9998
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p9999
aS'MA 02143 USA).  For updates to this software, please visit our website'
p10000
aS'(http://www.eplimited.com).'
p10001
aS'__________________________________________________________________________'
p10002
ag8980
aS'This file contains functions for detecting QRS complexes in an ECG.  The'
p10003
aS'QRS detector requires filter functions in qrsfilt.cpp and parameter'
p10004
aS'definitions in qrsdet.h.  QRSDet is the only function that needs to be'
p10005
aS'visable outside of these files.'
p10006
ag8980
aS'Syntax:'
p10007
aS'int QRSDet(int ecgSample, int init) ;'
p10008
ag8980
aS'Description:'
p10009
aS'QRSDet() implements a modified version of the QRS detection'
p10010
aS'algorithm described in:'
p10011
ag8980
aS'Hamilton, Tompkins, W. J., "Quantitative investigation of QRS'
p10012
aS'detection rules using the MIT/BIH arrhythmia database",'
p10013
aS'IEEE Trans. Biomed. Eng., BME-33, pp. 1158-1165, 1987.'
p10014
ag8980
aS'Consecutive ECG samples are passed to QRSDet.  QRSDet was'
p10015
aS'designed for a 200 Hz sample rate.  QRSDet contains a number'
p10016
aS'of static variables that it uses to adapt to different ECG'
p10017
aS'signals.  These variables can be reset by passing any value'
p10018
aS'not equal to 0 in init.'
p10019
ag8980
aS'Note: QRSDet() requires filters in QRSFilt.cpp'
p10020
ag8980
aS'Returns:'
p10021
aS'When a QRS complex is detected QRSDet returns the detection delay.'
p10022
ag8980
aS'****************************************************************/'
p10023
ag8980
aS'#include <mem.h> /* For memmov. */'
p10024
aS'#include <math.h>'
p10025
aS'#include "qrsdet.h"'
p10026
ag8980
aS'#define PRE_BLANK MS195'
p10027
aS'#define MIN_PEAK_AMP 7 // Prevents detections of peaks smaller than 150 uV.'
p10028
ag8980
aS'// External Prototypes.'
p10029
ag8980
aS'int QRSFilter(int datum, int init);'
p10030
aS'int deriv1(int x0, int init);'
p10031
ag8980
aS'// Local Prototypes.'
p10032
ag8980
aS'int Peak(int datum, int init);'
p10033
aS'int mean(int* array, int datnum);'
p10034
aS'int thresh(int qmean, int nmean);'
p10035
aS'int BLSCheck(int* dBuf, int dbPtr, int* maxder);'
p10036
ag8980
aS'double TH = .3125;'
p10037
ag8980
aS'int DDBuffer[DER_DELAY], DDPtr; /* Buffer holding derivative data. */'
p10038
aS'int Dly = 0;'
p10039
ag8980
aS'const int MEMMOVELEN = 7 * sizeof(int);'
p10040
ag8980
aS'int QRSDet(int datum, int init)'
p10041
ag9665
aS'static int det_thresh, qpkcnt = 0;'
p10042
aS'static int qrsbuf[8], noise[8], rrbuf[8];'
p10043
aS'static int rsetBuff[8], rsetCount = 0;'
p10044
aS'static int nmean, qmean, rrmean;'
p10045
aS'static int count, sbpeak = 0, sbloc, sbcount = MS1500;'
p10046
aS'static int maxder, lastmax;'
p10047
aS'static int initBlank, initMax;'
p10048
aS'static int preBlankCnt, tempPeak;'
p10049
ag8980
aS'int fdatum, QrsDelay = 0;'
p10050
aS'int i, newPeak, aPeak;'
p10051
ag8980
aS'/*\tInitialize all buffers to 0 on the first call.\t*/'
p10052
ag8980
ag424
ag9665
aS'for (i = 0; i < 8; ++i)'
p10053
ag9665
aS'noise[i] = 0; /* Initialize noise buffer */'
p10054
aS'rrbuf[i] = MS1000; /* and R-to-R interval buffer. */'
p10055
ag9104
ag8980
aS'qpkcnt = maxder = lastmax = count = sbpeak = 0;'
p10056
aS'initBlank = initMax = preBlankCnt = DDPtr = 0;'
p10057
aS'sbcount = MS1500;'
p10058
aS'QRSFilter(0, 1); /* initialize filters. */'
p10059
aS'Peak(0, 1);'
p10060
ag9104
ag8980
aS'fdatum = QRSFilter(datum, 0); /* Filter data. */'
p10061
ag8980
ag8980
aS'/* Wait until normal detector is ready before calling early detections. */'
p10062
ag8980
aS'aPeak = Peak(fdatum, 0);'
p10063
ag437
aS'aPeak = 0;'
p10064
ag8980
aS'// Hold any peak that is detected for 200 ms'
p10065
aS'// in case a bigger one comes along.  There'
p10066
aS'// can only be one QRS complex in any 200 ms window.'
p10067
ag8980
aS'newPeak = 0;'
p10068
aS'if (aPeak && !preBlankCnt) // If there has been no peak for 200 ms'
p10069
aS'{ // save this one and start counting.'
p10070
aS'tempPeak = aPeak;'
p10071
aS'preBlankCnt = PRE_BLANK; // MS200'
p10072
ag9104
ag8980
aS'else if (!aPeak && preBlankCnt) // If we have held onto a peak for'
p10073
aS'{ // 200 ms pass it on for evaluation.'
p10074
ag474
aS'newPeak = tempPeak;'
p10075
ag9104
ag8980
aS'else if (aPeak) // If we were holding a peak, but'
p10076
aS'{ // this ones bigger, save it and'
p10077
aS'if (aPeak > tempPeak) // start counting to 200 ms again.'
p10078
ag9665
aS'tempPeak = aPeak;'
p10079
aS'preBlankCnt = PRE_BLANK; // MS200'
p10080
ag9104
aS'else if (--preBlankCnt == 0)'
p10081
aS'newPeak = tempPeak;'
p10082
ag9104
ag8980
aS'/* Save derivative of raw signal for T-wave and baseline'
p10083
aS'shift discrimination. */'
p10084
ag8980
aS'DDBuffer[DDPtr] = deriv1(datum, 0);'
p10085
ag525
aS'DDPtr = 0;'
p10086
ag8980
aS'/* Initialize the qrs peak buffer with the first eight \t*/'
p10087
aS'/* local maximum peaks detected.\t\t\t\t\t\t*/'
p10088
ag8980
ag590
ag9665
aS'++count;'
p10089
ag549
aS'count = WINDOW_WIDTH;'
p10090
ag575
ag9665
aS'initBlank = 0;'
p10091
aS'qrsbuf[qpkcnt] = initMax;'
p10092
aS'initMax = 0;'
p10093
aS'++qpkcnt;'
p10094
ag573
ag9665
aS'qmean = mean(qrsbuf, 8);'
p10095
aS'nmean = 0;'
p10096
aS'rrmean = MS1000;'
p10097
aS'sbcount = MS1500 + MS150;'
p10098
aS'det_thresh = thresh(qmean, nmean);'
p10099
ag9104
ag9104
ag588
aS'initMax = newPeak;'
p10100
ag9104
ag8980
aS'else /* Else test for a qrs. */'
p10101
ag9665
aS'++count;'
p10102
ag642
ag9665
ag8980
ag8980
aS'/* Check for maximum derivative and matching minima and maxima'
p10103
aS'for T-wave and baseline shift rejection.  Only consider this'
p10104
aS"peak if it doesn't seem to be a base line shift. */"
p10105
ag8980
ag640
ag9665
ag8980
ag8980
aS'// Classify the beat as a QRS complex'
p10106
aS'// if the peak is larger than the detection threshold.'
p10107
ag8980
ag625
ag9665
aS'memmove(&qrsbuf[1], qrsbuf, MEMMOVELEN);'
p10108
aS'qrsbuf[0] = newPeak;'
p10109
aS'qmean = mean(qrsbuf, 8);'
p10110
aS'det_thresh = thresh(qmean, nmean);'
p10111
aS'memmove(&rrbuf[1], rrbuf, MEMMOVELEN);'
p10112
aS'rrbuf[0] = count - WINDOW_WIDTH;'
p10113
aS'rrmean = mean(rrbuf, 8);'
p10114
aS'sbcount = rrmean + (rrmean >> 1) + WINDOW_WIDTH;'
p10115
aS'count = WINDOW_WIDTH;'
p10116
ag8980
aS'sbpeak = 0;'
p10117
ag8980
aS'lastmax = maxder;'
p10118
aS'maxder = 0;'
p10119
aS'QrsDelay = WINDOW_WIDTH + FILTER_DELAY;'
p10120
aS'initBlank = initMax = rsetCount = 0;'
p10121
ag9104
ag8980
aS"// If a peak isn't a QRS update noise buffer and estimate."
p10122
aS'// Store the peak for possible search back.'
p10123
ag8980
ag8980
aS'else'
p10124
ag9665
aS'memmove(&noise[1], noise, MEMMOVELEN);'
p10125
aS'noise[0] = newPeak;'
p10126
aS'nmean = mean(noise, 8);'
p10127
aS'det_thresh = thresh(qmean, nmean);'
p10128
ag8980
aS"// Don't include early peaks (which might be T-waves)"
p10129
aS'// in the search back process.  A T-wave can mask'
p10130
aS'// a small following QRS.'
p10131
ag8980
ag638
ag9665
aS'sbpeak = newPeak;'
p10132
aS'sbloc = count - WINDOW_WIDTH;'
p10133
ag9104
ag9104
ag9104
ag9104
ag8980
aS'/* Test for search back condition.  If a QRS is found in  */'
p10134
aS'/* search back update the QRS buffer and det_thresh.      */'
p10135
ag8980
ag655
ag9665
aS'memmove(&qrsbuf[1], qrsbuf, MEMMOVELEN);'
p10136
aS'qrsbuf[0] = sbpeak;'
p10137
aS'qmean = mean(qrsbuf, 8);'
p10138
aS'det_thresh = thresh(qmean, nmean);'
p10139
aS'memmove(&rrbuf[1], rrbuf, MEMMOVELEN);'
p10140
aS'rrbuf[0] = sbloc;'
p10141
aS'rrmean = mean(rrbuf, 8);'
p10142
aS'sbcount = rrmean + (rrmean >> 1) + WINDOW_WIDTH;'
p10143
aS'QrsDelay = count = count - sbloc;'
p10144
aS'QrsDelay += FILTER_DELAY;'
p10145
aS'sbpeak = 0;'
p10146
aS'lastmax = maxder;'
p10147
aS'maxder = 0;'
p10148
ag8980
aS'initBlank = initMax = rsetCount = 0;'
p10149
ag9104
ag9104
aS'we'
p10150
ag8980
aS'// In the background estimate threshold to replace adaptive threshold'
p10151
aS'// if eight seconds elapses without a QRS detection.'
p10152
ag8980
ag729
ag9665
ag714
ag9665
aS'initBlank = 0;'
p10153
aS'rsetBuff[rsetCount] = initMax;'
p10154
aS'initMax = 0;'
p10155
aS'++rsetCount;'
p10156
ag8980
aS'// Reset threshold if it has been 8 seconds without'
p10157
aS'// a detection.'
p10158
ag8980
ag712
ag9665
aS'for (i = 0; i < 8; ++i)'
p10159
ag9665
aS'qrsbuf[i] = rsetBuff[i];'
p10160
aS'noise[i] = 0;'
p10161
ag9104
aS'qmean = mean(rsetBuff, 8);'
p10162
aS'nmean = 0;'
p10163
aS'rrmean = MS1000;'
p10164
aS'sbcount = MS1500 + MS150;'
p10165
aS'det_thresh = thresh(qmean, nmean);'
p10166
aS'initBlank = initMax = rsetCount = 0;'
p10167
ag9104
ag9104
ag727
aS'initMax = newPeak;'
p10168
ag9104
ag8980
aS'return (QrsDelay);'
p10169
ag9104
ag8980
aS'/**************************************************************'
p10170
aS'* peak() takes a datum as input and returns a peak height'
p10171
aS'* when the signal returns to half its peak height, or'
p10172
aS'**************************************************************/'
p10173
ag8980
aS'int Peak(int datum, int init)'
p10174
ag9665
aS'static int max = 0, timeSinceMax = 0, lastDatum;'
p10175
aS'int pk = 0;'
p10176
ag8980
ag751
aS'max = timeSinceMax = 0;'
p10177
ag8980
ag764
aS'++timeSinceMax;'
p10178
ag8980
ag790
ag9665
aS'max = datum;'
p10179
ag788
aS'timeSinceMax = 1;'
p10180
ag9104
ag8980
ag803
ag9665
aS'pk = max;'
p10181
aS'max = 0;'
p10182
aS'timeSinceMax = 0;'
p10183
aS'Dly = 0;'
p10184
ag9104
ag8980
ag816
ag9665
aS'pk = max;'
p10185
aS'max = 0;'
p10186
aS'timeSinceMax = 0;'
p10187
aS'Dly = 3;'
p10188
ag9104
aS'lastDatum = datum;'
p10189
aS'return (pk);'
p10190
ag9104
ag8980
aS'/********************************************************************'
p10191
aS'mean returns the mean of an array of integers.  It uses a slow'
p10192
aS'sort algorithm, but these arrays are small, so it hardly matters.'
p10193
aS'********************************************************************/'
p10194
ag8980
aS'int mean(int* array, int datnum)'
p10195
ag9665
aS'long sum;'
p10196
aS'int i;'
p10197
ag8980
aS'for (i = 0, sum = 0; i < datnum; ++i)'
p10198
aS'sum += array[i];'
p10199
aS'sum /= datnum;'
p10200
aS'return (sum);'
p10201
ag9104
ag8980
aS'/****************************************************************************'
p10202
aS'thresh() calculates the detection threshold from the qrs mean and noise'
p10203
aS'mean estimates.'
p10204
aS'****************************************************************************/'
p10205
ag8980
aS'int thresh(int qmean, int nmean)'
p10206
ag9665
aS'int thrsh, dmed;'
p10207
aS'double temp;'
p10208
aS'dmed = qmean - nmean;'
p10209
aS'temp = dmed;'
p10210
aS'temp *= TH;'
p10211
aS'dmed = temp;'
p10212
aS'thrsh = nmean + dmed; /* dmed * THRESHOLD */'
p10213
aS'return (thrsh);'
p10214
ag9104
ag8980
aS'/***********************************************************************'
p10215
aS'BLSCheck() reviews data to see if a baseline shift has occurred.'
p10216
aS'This is done by looking for both positive and negative slopes of'
p10217
aS'roughly the same magnitude in a 220 ms window.'
p10218
aS'***********************************************************************/'
p10219
ag8980
aS'int BLSCheck(int* dBuf, int dbPtr, int* maxder)'
p10220
ag9665
aS'int max, min, maxt, mint, t, x;'
p10221
aS'max = min = 0;'
p10222
ag8980
aS'for (t = 0; t < MS220; ++t)'
p10223
ag9665
aS'x = dBuf[dbPtr];'
p10224
ag894
ag9665
aS'maxt = t;'
p10225
aS'max = x;'
p10226
ag9104
aS'else if (x < min)'
p10227
ag9665
aS'mint = t;'
p10228
aS'min = x;'
p10229
ag9104
ag907
aS'dbPtr = 0;'
p10230
ag9104
ag8980
aS'*maxder = max;'
p10231
aS'min = -min;'
p10232
ag8980
aS'/* Possible beat if a maximum and minimum pair are found'
p10233
aS'where the interval between them is less than 150 ms. */'
p10234
ag8980
ag936
aS'return (0);'
p10235
ag8980
aS'else'
p10236
aS'return (1);'
p10237
ag9104
ag8980
aS'int Dly = 0;'
p10238
ag8980
aS'const int MEMMOVELEN = 7 * sizeof(int);'
p10239
ag8980
aS'int QRSDet(int datum, int init)'
p10240
ag9665
aS'static int det_thresh, qpkcnt = 0;'
p10241
aS'static int qrsbuf[8], noise[8], rrbuf[8];'
p10242
aS'static int rsetBuff[8], rsetCount = 0;'
p10243
aS'static int nmean, qmean, rrmean;'
p10244
aS'static int count, sbpeak = 0, sbloc, sbcount = MS1500;'
p10245
aS'static int maxder, lastmax;'
p10246
aS'static int initBlank, initMax;'
p10247
aS'static int preBlankCnt, tempPeak;'
p10248
ag8980
aS'int fdatum, QrsDelay = 0;'
p10249
aS'int i, newPeak, aPeak;'
p10250
ag8980
aS'/*\tInitialize all buffers to 0 on the first call.\t*/'
p10251
ag8980
ag980
ag9665
aS'for (i = 0; i < 8; ++i)'
p10252
ag9665
aS'noise[i] = 0; /* Initialize noise buffer */'
p10253
aS'rrbuf[i] = MS1000; /* and R-to-R interval buffer. */'
p10254
ag9104
ag8980
aS'qpkcnt = maxder = lastmax = count = sbpeak = 0;'
p10255
aS'initBlank = initMax = preBlankCnt = DDPtr = 0;'
p10256
aS'sbcount = MS1500;'
p10257
aS'QRSFilter(0, 1); /* initialize filters. */'
p10258
aS'Peak(0, 1);'
p10259
ag9104
ag8980
aS'fdatum = QRSFilter(datum, 0); /* Filter data. */'
p10260
ag8980
ag8980
aS'/* Wait until normal detector is ready before calling early detections. */'
p10261
ag8980
aS'aPeak = Peak(fdatum, 0);'
p10262
ag993
aS'aPeak = 0;'
p10263
ag8980
aS'// Hold any peak that is detected for 200 ms'
p10264
aS'// in case a bigger one comes along.  There'
p10265
aS'// can only be one QRS complex in any 200 ms window.'
p10266
ag8980
aS'newPeak = 0;'
p10267
aS'if (aPeak && !preBlankCnt) // If there has been no peak for 200 ms'
p10268
aS'{ // save this one and start counting.'
p10269
aS'tempPeak = aPeak;'
p10270
aS'preBlankCnt = PRE_BLANK; // MS200'
p10271
ag9104
ag8980
aS'else if (!aPeak && preBlankCnt) // If we have held onto a peak for'
p10272
aS'{ // 200 ms pass it on for evaluation.'
p10273
ag1030
aS'newPeak = tempPeak;'
p10274
ag9104
ag8980
aS'else if (aPeak) // If we were holding a peak, but'
p10275
aS'{ // this ones bigger, save it and'
p10276
aS'if (aPeak > tempPeak) // start counting to 200 ms again.'
p10277
ag9665
aS'tempPeak = aPeak;'
p10278
aS'preBlankCnt = PRE_BLANK; // MS200'
p10279
ag9104
aS'else if (--preBlankCnt == 0)'
p10280
aS'newPeak = tempPeak;'
p10281
ag9104
ag8980
aS'/* Save derivative of raw signal for T-wave and baseline'
p10282
aS'shift discrimination. */'
p10283
ag8980
aS'DDBuffer[DDPtr] = deriv1(datum, 0);'
p10284
ag1081
aS'DDPtr = 0;'
p10285
ag8980
aS'/* Initialize the qrs peak buffer with the first eight \t*/'
p10286
aS'/* local maximum peaks detected.\t\t\t\t\t\t*/'
p10287
ag8980
ag1146
ag9665
aS'++count;'
p10288
ag1105
aS'count = WINDOW_WIDTH;'
p10289
ag1131
ag9665
aS'initBlank = 0;'
p10290
aS'qrsbuf[qpkcnt] = initMax;'
p10291
aS'initMax = 0;'
p10292
aS'++qpkcnt;'
p10293
ag1129
ag9665
aS'qmean = mean(qrsbuf, 8);'
p10294
aS'nmean = 0;'
p10295
aS'rrmean = MS1000;'
p10296
aS'sbcount = MS1500 + MS150;'
p10297
aS'det_thresh = thresh(qmean, nmean);'
p10298
ag9104
ag9104
ag1144
aS'initMax = newPeak;'
p10299
ag9104
ag8980
aS'else /* Else test for a qrs. */'
p10300
ag9665
aS'++count;'
p10301
ag1198
ag9665
ag8980
ag8980
aS'/* Check for maximum derivative and matching minima and maxima'
p10302
aS'for T-wave and baseline shift rejection.  Only consider this'
p10303
aS"peak if it doesn't seem to be a base line shift. */"
p10304
ag8980
ag1196
ag9665
ag8980
ag8980
aS'// Classify the beat as a QRS complex'
p10305
aS'// if the peak is larger than the detection threshold.'
p10306
ag8980
ag1181
ag9665
aS'memmove(&qrsbuf[1], qrsbuf, MEMMOVELEN);'
p10307
aS'qrsbuf[0] = newPeak;'
p10308
aS'qmean = mean(qrsbuf, 8);'
p10309
aS'det_thresh = thresh(qmean, nmean);'
p10310
aS'memmove(&rrbuf[1], rrbuf, MEMMOVELEN);'
p10311
aS'rrbuf[0] = count - WINDOW_WIDTH;'
p10312
aS'rrmean = mean(rrbuf, 8);'
p10313
aS'sbcount = rrmean + (rrmean >> 1) + WINDOW_WIDTH;'
p10314
aS'count = WINDOW_WIDTH;'
p10315
ag8980
aS'sbpeak = 0;'
p10316
ag8980
aS'lastmax = maxder;'
p10317
aS'maxder = 0;'
p10318
aS'QrsDelay = WINDOW_WIDTH + FILTER_DELAY;'
p10319
aS'initBlank = initMax = rsetCount = 0;'
p10320
ag9104
ag8980
aS"// If a peak isn't a QRS update noise buffer and estimate."
p10321
aS'// Store the peak for possible search back.'
p10322
ag8980
ag8980
aS'else'
p10323
ag9665
aS'memmove(&noise[1], noise, MEMMOVELEN);'
p10324
aS'noise[0] = newPeak;'
p10325
aS'nmean = mean(noise, 8);'
p10326
aS'det_thresh = thresh(qmean, nmean);'
p10327
ag8980
aS"// Don't include early peaks (which might be T-waves)"
p10328
aS'// in the search back process.  A T-wave can mask'
p10329
aS'// a small following QRS.'
p10330
ag8980
ag1194
ag9665
aS'sbpeak = newPeak;'
p10331
aS'sbloc = count - WINDOW_WIDTH;'
p10332
ag9104
ag9104
ag9104
ag9104
ag8980
aS'/* Test for search back condition.  If a QRS is found in  */'
p10333
aS'/* search back update the QRS buffer and det_thresh.      */'
p10334
ag8980
ag1211
ag9665
aS'memmove(&qrsbuf[1], qrsbuf, MEMMOVELEN);'
p10335
aS'qrsbuf[0] = sbpeak;'
p10336
aS'qmean = mean(qrsbuf, 8);'
p10337
aS'det_thresh = thresh(qmean, nmean);'
p10338
aS'memmove(&rrbuf[1], rrbuf, MEMMOVELEN);'
p10339
aS'rrbuf[0] = sbloc;'
p10340
aS'rrmean = mean(rrbuf, 8);'
p10341
aS'sbcount = rrmean + (rrmean >> 1) + WINDOW_WIDTH;'
p10342
aS'QrsDelay = count = count - sbloc;'
p10343
aS'QrsDelay += FILTER_DELAY;'
p10344
aS'sbpeak = 0;'
p10345
aS'lastmax = maxder;'
p10346
aS'maxder = 0;'
p10347
ag8980
aS'initBlank = initMax = rsetCount = 0;'
p10348
ag9104
ag9104
aS'we'
p10349
ag8980
aS'// In the background estimate threshold to replace adaptive threshold'
p10350
aS'// if eight seconds elapses without a QRS detection.'
p10351
ag8980
ag1285
ag9665
ag1270
ag9665
aS'initBlank = 0;'
p10352
aS'rsetBuff[rsetCount] = initMax;'
p10353
aS'initMax = 0;'
p10354
aS'++rsetCount;'
p10355
ag8980
aS'// Reset threshold if it has been 8 seconds without'
p10356
aS'// a detection.'
p10357
ag8980
ag1268
ag9665
aS'for (i = 0; i < 8; ++i)'
p10358
ag9665
aS'qrsbuf[i] = rsetBuff[i];'
p10359
aS'noise[i] = 0;'
p10360
ag9104
aS'qmean = mean(rsetBuff, 8);'
p10361
aS'nmean = 0;'
p10362
aS'rrmean = MS1000;'
p10363
aS'sbcount = MS1500 + MS150;'
p10364
aS'det_thresh = thresh(qmean, nmean);'
p10365
aS'initBlank = initMax = rsetCount = 0;'
p10366
ag9104
ag9104
ag1283
aS'initMax = newPeak;'
p10367
ag9104
ag8980
aS'return (QrsDelay);'
p10368
ag9104
ag8980
aS'/**************************************************************'
p10369
aS'* peak() takes a datum as input and returns a peak height'
p10370
aS'* when the signal returns to half its peak height, or'
p10371
aS'**************************************************************/'
p10372
ag8980
aS'int Peak(int datum, int init)'
p10373
ag9665
aS'static int max = 0, timeSinceMax = 0, lastDatum;'
p10374
aS'int pk = 0;'
p10375
ag8980
ag1307
aS'max = timeSinceMax = 0;'
p10376
ag8980
ag1320
aS'++timeSinceMax;'
p10377
ag8980
ag1346
ag9665
aS'max = datum;'
p10378
ag1344
aS'timeSinceMax = 1;'
p10379
ag9104
ag8980
ag1359
ag9665
aS'pk = max;'
p10380
aS'max = 0;'
p10381
aS'timeSinceMax = 0;'
p10382
aS'Dly = 0;'
p10383
ag9104
ag8980
ag1372
ag9665
aS'pk = max;'
p10384
aS'max = 0;'
p10385
aS'timeSinceMax = 0;'
p10386
aS'Dly = 3;'
p10387
ag9104
aS'lastDatum = datum;'
p10388
aS'return (pk);'
p10389
ag9104
ag8980
aS'/********************************************************************'
p10390
aS'mean returns the mean of an array of integers.  It uses a slow'
p10391
aS'sort algorithm, but these arrays are small, so it hardly matters.'
p10392
aS'********************************************************************/'
p10393
ag8980
aS'int mean(int* array, int datnum)'
p10394
ag9665
aS'long sum;'
p10395
aS'int i;'
p10396
ag8980
aS'for (i = 0, sum = 0; i < datnum; ++i)'
p10397
aS'sum += array[i];'
p10398
aS'sum /= datnum;'
p10399
aS'return (sum);'
p10400
ag9104
ag8980
aS'/****************************************************************************'
p10401
aS'thresh() calculates the detection threshold from the qrs mean and noise'
p10402
aS'mean estimates.'
p10403
aS'****************************************************************************/'
p10404
ag8980
aS'int thresh(int qmean, int nmean)'
p10405
ag9665
aS'int thrsh, dmed;'
p10406
aS'double temp;'
p10407
aS'dmed = qmean - nmean;'
p10408
aS'temp = dmed;'
p10409
aS'temp *= TH;'
p10410
aS'dmed = temp;'
p10411
aS'thrsh = nmean + dmed; /* dmed * THRESHOLD */'
p10412
aS'return (thrsh);'
p10413
ag9104
ag8980
aS'/***********************************************************************'
p10414
aS'BLSCheck() reviews data to see if a baseline shift has occurred.'
p10415
aS'This is done by looking for both positive and negative slopes of'
p10416
aS'roughly the same magnitude in a 220 ms window.'
p10417
aS'***********************************************************************/'
p10418
ag8980
aS'int BLSCheck(int* dBuf, int dbPtr, int* maxder)'
p10419
ag9665
aS'int max, min, maxt, mint, t, x;'
p10420
aS'max = min = 0;'
p10421
ag8980
aS'for (t = 0; t < MS220; ++t)'
p10422
ag9665
aS'x = dBuf[dbPtr];'
p10423
ag1450
ag9665
aS'maxt = t;'
p10424
aS'max = x;'
p10425
ag9104
aS'else if (x < min)'
p10426
ag9665
aS'mint = t;'
p10427
aS'min = x;'
p10428
ag9104
ag1463
aS'dbPtr = 0;'
p10429
ag9104
ag8980
aS'*maxder = max;'
p10430
aS'min = -min;'
p10431
ag8980
aS'/* Possible beat if a maximum and minimum pair are found'
p10432
aS'where the interval between them is less than 150 ms. */'
p10433
ag8980
ag1492
aS'return (0);'
p10434
ag8980
aS'else'
p10435
aS'return (1);'
p10436
ag9104
aa(lp10437
S'/*****************************************************************************'
p10438
aS'FILE:  match.h'
p10439
aS'AUTHOR:\tPatrick S. Hamilton'
p10440
aS'REVISED:\t12/4/2001'
p10441
aS'___________________________________________________________________________'
p10442
ag8980
aS'match.h: Beat matching prototype definitions.'
p10443
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p10444
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p10445
aS'the terms of the GNU Library General Public License as published by the Free'
p10446
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p10447
aS'later version.'
p10448
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p10449
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p10450
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p10451
aS'details.'
p10452
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p10453
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p10454
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p10455
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p10456
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p10457
aS'MA 02143 USA).  For updates to this software, please visit our website'
p10458
aS'(http://www.eplimited.com).'
p10459
aS'******************************************************************************/'
p10460
ag8980
aS'int NewBeatType(int* beat);'
p10461
aS'void BestMorphMatch(int* newBeat, int* matchType, double* matchIndex, double* mi2, int* shiftAdj);'
p10462
aS'void UpdateBeatType(int matchType, int* newBeat, double mi2, int shiftAdj);'
p10463
aS'int GetTypesCount(void);'
p10464
aS'int GetBeatTypeCount(int type);'
p10465
aS'int IsTypeIsolated(int type);'
p10466
aS'void SetBeatClass(int type, int beatClass);'
p10467
aS'int GetBeatClass(int type);'
p10468
aS'int GetDominantType(void);'
p10469
aS'int GetBeatWidth(int type);'
p10470
aS'int GetPolarity(int type);'
p10471
aS'int GetRhythmIndex(int type);'
p10472
aS'void ResetMatch(void);'
p10473
aS'void ClearLastNewType(void);'
p10474
aS'int GetBeatBegin(int type);'
p10475
aS'int GetBeatEnd(int type);'
p10476
aS'int GetBeatAmp(int type);'
p10477
aS'int MinimumBeatVariation(int type);'
p10478
aS'int GetBeatCenter(int type);'
p10479
aS'int WideBeatVariation(int type);'
p10480
aS'double DomCompare2(int* newBeat, int domType);'
p10481
aS'double DomCompare(int newType, int domType);'
p10482
ag8980
aS'// hey yo'
p10483
aa(lp10484
S'/*****************************************************************************'
p10485
aS'FILE:  classify.cpp'
p10486
aS'AUTHOR:\tPatrick S. Hamilton'
p10487
aS'REVISED:\t5/13/2001'
p10488
aS'___________________________________________________________________________'
p10489
ag8980
aS'classify.cpp: Classify a given beat.'
p10490
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p10491
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p10492
aS'the terms of the GNU Library General Public License as published by the Free'
p10493
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p10494
aS'later version.'
p10495
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p10496
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p10497
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p10498
aS'details.'
p10499
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p10500
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p10501
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p10502
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p10503
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p10504
aS'MA 02143 USA).  For updates to this software, please visit our website'
p10505
aS'(http://www.eplimited.com).'
p10506
aS'__________________________________________________________________________'
p10507
ag8980
aS'Classify.cpp contains functions for classifying beats.  The only'
p10508
aS'function that needs to be called externally from this file is Classify().'
p10509
ag8980
aS'Functions in classify.cpp require functions in the following files:'
p10510
aS'match.cpp'
p10511
aS'rythmchk.cpp'
p10512
aS'classify.cpp'
p10513
aS'rythmchk.cpp'
p10514
aS'analbeat.cpp'
p10515
aS'postclas.cpp'
p10516
ag8980
aS'__________________________________________________________________________'
p10517
ag8980
aS'Revisions:'
p10518
aS'5/13/02:'
p10519
aS'Width constants tied to BEAT_SAMPLE_RATE in bdac.h'
p10520
ag8980
aS'Arrays added to track the classifications and RR intervals for the'
p10521
aS'most recent 8 beats, allowing GetRunCount to become a local function.'
p10522
aS'RR intervals and classifications are now passed to PostClassify.'
p10523
ag8980
aS'Determination of whether the dominant rhythm is regular is now made'
p10524
aS'by examining the number of RR intervals classified as UNKNOWN in the'
p10525
aS'last DM_BUFFER_LENGTH beats (180).  If more than 60 are UNKNOWN'
p10526
aS'the rhythm is too irregular to give any weight to whether the beat'
p10527
aS'was premature or not.'
p10528
ag8980
aS'*******************************************************************************/'
p10529
ag8980
aS'#include "ecgcodes.h"'
p10530
aS'#include <stdlib.h> // For abs()'
p10531
aS'#include <stdio.h>'
p10532
aS'#include "qrsdet.h" // For base sample rate.'
p10533
aS'#include "bdac.h"'
p10534
aS'#include "match.h"'
p10535
aS'#include "rythmchk.h"'
p10536
aS'#include "analbeat.h"'
p10537
aS'#include "postclas.h"'
p10538
ag8980
aS'// Detection Rule Parameters.'
p10539
ag8980
aS'#define MATCH_LIMIT 1.3 // Threshold for template matching'
p10540
aS'// without amplitude sensitivity.'
p10541
aS'#define MATCH_WITH_AMP_LIMIT 2.5 // Threshold for matching index that'
p10542
aS'// is amplitude sensitive.'
p10543
aS'#define PVC_MATCH_WITH_AMP_LIMIT 0.9 // Amplitude sensitive limit for'
p10544
aS'// matching premature beats'
p10545
aS'#define BL_SHIFT_LIMIT 100 // Threshold for assuming a baseline shift.'
p10546
aS'#define NEW_TYPE_NOISE_THRESHOLD 18 // Above this noise level, do not create'
p10547
aS'// new beat types.'
p10548
aS'#define NEW_TYPE_HF_NOISE_LIMIT 75 // Above this noise level, do not crate'
p10549
aS'// new beat types.'
p10550
ag8980
aS'#define MATCH_NOISE_THRESHOLD 0.7 // Match threshold below which noise'
p10551
aS'// indications are ignored.'
p10552
ag8980
aS'// TempClass classification rule parameters.'
p10553
ag8980
aS'#define R2_DI_THRESHOLD 1.0 // Rule 2 dominant similarity index threshold'
p10554
aS'#define R3_WIDTH_THRESHOLD BEAT_MS90 // Rule 3 width threshold.'
p10555
aS'#define R7_DI_THRESHOLD 1.2 // Rule 7 dominant similarity index threshold'
p10556
aS'#define R8_DI_THRESHOLD 1.5 // Rule 8 dominant similarity index threshold'
p10557
aS'#define R9_DI_THRESHOLD 2.0 // Rule 9 dominant similarity index threshold'
p10558
aS'#define R10_BC_LIM 3 // Rule 10 beat count limit.'
p10559
aS'#define R10_DI_THRESHOLD 2.5 // Rule 10 dominant similarity index threshold'
p10560
aS'#define R11_MIN_WIDTH BEAT_MS110 // Rule 11 minimum width threshold.'
p10561
aS'#define R11_WIDTH_BREAK BEAT_MS140 // Rule 11 width break.'
p10562
aS'#define R11_WIDTH_DIFF1 BEAT_MS40 // Rule 11 width difference threshold 1'
p10563
aS'#define R11_WIDTH_DIFF2 BEAT_MS60 // Rule 11 width difference threshold 2'
p10564
aS'#define R11_HF_THRESHOLD 45 // Rule 11 high frequency noise threshold.'
p10565
aS'#define R11_MA_THRESHOLD 14 // Rule 11 motion artifact threshold.'
p10566
aS'#define R11_BC_LIM 1 // Rule 11 beat count limit.'
p10567
aS'#define R15_DI_THRESHOLD 3.5 // Rule 15 dominant similarity index threshold'
p10568
aS'#define R15_WIDTH_THRESHOLD BEAT_MS100 // Rule 15 width threshold.'
p10569
aS'#define R16_WIDTH_THRESHOLD BEAT_MS100 // Rule 16 width threshold.'
p10570
aS'#define R17_WIDTH_DELTA BEAT_MS20 // Rule 17 difference threshold.'
p10571
aS'#define R18_DI_THRESHOLD 1.5 // Rule 18 dominant similarity index threshold.'
p10572
aS'#define R19_HF_THRESHOLD 75 // Rule 19 high frequency noise threshold.'
p10573
ag8980
aS'// Dominant monitor constants.'
p10574
ag8980
aS'#define DM_BUFFER_LENGTH 180'
p10575
aS'#define IRREG_RR_LIMIT 60'
p10576
ag8980
aS'// Local prototypes.'
p10577
ag8980
aS'int HFNoiseCheck(int* beat);'
p10578
aS'int TempClass(int rhythmClass, int morphType, int beatWidth, int domWidth, int domType, int hfNoise,int noiseLevel, int blShift, double domIndex);'
p10579
aS'int DomMonitor(int morphType, int rhythmClass, int beatWidth, int rr, int reset);'
p10580
aS'int GetDomRhythm(void);'
p10581
aS'int GetRunCount(void);'
p10582
ag8980
aS'// Local Global variables'
p10583
ag8980
aS'int DomType;'
p10584
aS'int RecentRRs[8], RecentTypes[8];'
p10585
ag8980
aS'/***************************************************************************'
p10586
aS'*  Classify() takes a beat buffer, the previous rr interval, and the present'
p10587
aS'*  noise level estimate and returns a beat classification of NORMAL, PVC, or'
p10588
aS'*  UNKNOWN.  The UNKNOWN classification is only returned.  The beat template'
p10589
aS'*  type that the beat has been matched to is returned through the pointer'
p10590
aS'*  *beatMatch for debugging display.  Passing anything other than 0 in init'
p10591
aS'*  resets the static variables used by Classify.'
p10592
aS'****************************************************************************/'
p10593
ag8980
aS'int Classify(int* newBeat, int rr, int noiseLevel, int* beatMatch, int* fidAdj, int init)'
p10594
ag9665
aS'int rhythmClass, beatClass, i, beatWidth, blShift;'
p10595
aS'static int morphType, runCount = 0;'
p10596
aS'double matchIndex, domIndex, mi2;'
p10597
aS'int shiftAdj;'
p10598
aS'int domType, domWidth, onset, offset, amp;'
p10599
aS'int beatBegin, beatEnd, tempClass;'
p10600
aS'int hfNoise, isoLevel;'
p10601
aS'static int lastIsoLevel = 0, lastRhythmClass = UNKNOWN, lastBeatWasNew = 0;'
p10602
ag8980
aS'// If initializing...'
p10603
ag8980
ag1559
ag9665
aS'ResetRhythmChk();'
p10604
aS'ResetMatch();'
p10605
aS'ResetPostClassify();'
p10606
aS'runCount = 0;'
p10607
aS'DomMonitor(0, 0, 0, 0, 1);'
p10608
aS'return (0);'
p10609
ag9104
ag8980
aS'hfNoise = HFNoiseCheck(newBeat); // Check for muscle noise.'
p10610
aS'rhythmClass = RhythmChk(rr); // Check the rhythm.'
p10611
ag8980
aS'// Estimate beat features.'
p10612
ag8980
aS'AnalyzeBeat(newBeat, &onset, &offset, &isoLevel, &beatBegin, &beatEnd, &amp);'
p10613
ag8980
aS'blShift = abs(lastIsoLevel - isoLevel);'
p10614
aS'lastIsoLevel = isoLevel;'
p10615
ag8980
aS'// Make isoelectric level 0.'
p10616
ag8980
aS'for (i = 0; i < BEATLGTH; ++i)'
p10617
aS'newBeat[i] -= isoLevel;'
p10618
ag8980
aS'// If there was a significant baseline shift since'
p10619
aS'// the last beat and the last beat was a new type,'
p10620
aS'// delete the new type because it might have resulted'
p10621
aS'// from a baseline shift.'
p10622
ag8980
ag1572
aS'ClearLastNewType();'
p10623
ag8980
aS'lastBeatWasNew = 0;'
p10624
ag8980
aS'// Find the template that best matches this beat.'
p10625
ag8980
aS'BestMorphMatch(newBeat, &morphType, &matchIndex, &mi2, &shiftAdj);'
p10626
ag8980
aS'// Disregard noise if the match is good. (New)'
p10627
ag8980
ag1585
aS'hfNoise = noiseLevel = blShift = 0;'
p10628
ag8980
aS'// Apply a stricter match limit to premature beats.'
p10629
ag8980
ag1598
ag9665
aS'morphType = NewBeatType(newBeat);'
p10630
aS'lastBeatWasNew = 1;'
p10631
ag9104
ag8980
aS'// Match if within standard match limits.'
p10632
ag8980
ag1611
ag8980
aS"// If the beat isn't noisy but doesn't match, start a new beat."
p10633
ag8980
ag1624
ag9665
aS'morphType = NewBeatType(newBeat);'
p10634
aS'lastBeatWasNew = 1;'
p10635
ag9104
ag8980
aS'// Even if it is a noisy, start new beat if it was an irregular beat.'
p10636
ag8980
ag1637
ag9665
aS'morphType = NewBeatType(newBeat);'
p10637
aS'lastBeatWasNew = 1;'
p10638
ag9104
ag8980
aS"// If its noisy and regular, don't waste space starting a new beat."
p10639
ag8980
aS'else'
p10640
aS'morphType = MAXTYPES;'
p10641
ag8980
aS'// Update recent rr and type arrays.'
p10642
ag8980
aS'for (i = 7; i > 0; --i)'
p10643
ag9665
aS'RecentRRs[i] = RecentRRs[i - 1];'
p10644
aS'RecentTypes[i] = RecentTypes[i - 1];'
p10645
ag9104
aS'RecentRRs[0] = rr;'
p10646
aS'RecentTypes[0] = morphType;'
p10647
ag8980
aS'lastRhythmClass = rhythmClass;'
p10648
aS'lastIsoLevel = isoLevel;'
p10649
ag8980
aS'// Fetch beat features needed for classification.'
p10650
aS'// Get features from average beat if it matched.'
p10651
ag8980
ag1663
ag9665
aS'beatClass = GetBeatClass(morphType);'
p10652
aS'beatWidth = GetBeatWidth(morphType);'
p10653
aS'*fidAdj = GetBeatCenter(morphType) - FIDMARK;'
p10654
ag8980
aS'// If the width seems large and there have only been a few'
p10655
aS'// beats of this type, use the actual beat for width'
p10656
aS'// estimate.'
p10657
ag8980
ag1661
ag9665
aS'beatWidth = offset - onset;'
p10658
aS'*fidAdj = ((offset + onset) / 2) - FIDMARK;'
p10659
ag9104
ag9104
ag8980
aS"// If this beat didn't match get beat features directly"
p10660
aS'// from this beat.'
p10661
ag8980
aS'else'
p10662
ag9665
aS'beatWidth = offset - onset;'
p10663
aS'beatClass = UNKNOWN;'
p10664
aS'*fidAdj = ((offset + onset) / 2) - FIDMARK;'
p10665
ag9104
ag8980
aS'// Fetch dominant type beat features.'
p10666
ag8980
aS'DomType = domType = DomMonitor(morphType, rhythmClass, beatWidth, rr, 0);'
p10667
aS'domWidth = GetBeatWidth(domType);'
p10668
ag8980
aS'// Compare the beat type, or actual beat to the dominant beat.'
p10669
ag8980
ag1686
aS'domIndex = DomCompare(morphType, domType);'
p10670
aS'else if (morphType == 8)'
p10671
aS'domIndex = DomCompare2(newBeat, domType);'
p10672
aS'else'
p10673
aS'domIndex = matchIndex;'
p10674
ag8980
aS'// Update post classificaton of the previous beat.'
p10675
ag8980
aS'PostClassify(RecentTypes, domType, RecentRRs, beatWidth, domIndex, rhythmClass);'
p10676
ag8980
aS'// Classify regardless of how the morphology'
p10677
aS'// was previously classified.'
p10678
ag8980
aS'tempClass = TempClass(rhythmClass, morphType, beatWidth, domWidth, domType, hfNoise, noiseLevel,blShift, domIndex);'
p10679
ag8980
aS'// If this morphology has not been classified yet, attempt to classify'
p10680
aS'// it.'
p10681
ag8980
ag1761
ag9665
ag8980
aS'// Classify as normal if there are 6 in a row'
p10682
aS'// or at least two in a row that meet rhythm'
p10683
aS'// rules for normal.'
p10684
ag8980
aS'runCount = GetRunCount();'
p10685
ag8980
aS'// Classify a morphology as NORMAL if it is not too wide, and there'
p10686
aS'// are three in a row.  The width criterion prevents ventricular beats'
p10687
aS'// from being classified as normal during VTACH (MIT/BIH 205).'
p10688
ag8980
ag1710
aS'SetBeatClass(morphType, NORMAL);'
p10689
ag8980
aS'// If there is no dominant type established yet, classify any type'
p10690
aS'// with six in a row as NORMAL.'
p10691
ag8980
ag1723
aS'SetBeatClass(morphType, NORMAL);'
p10692
ag8980
aS'// During bigeminy, classify the premature beats as ventricular if'
p10693
aS'// they are not too narrow.'
p10694
ag8980
ag1759
ag9665
ag1757
aS'SetBeatClass(morphType, PVC);'
p10695
aS'else if (rhythmClass == NORMAL)'
p10696
aS'SetBeatClass(morphType, NORMAL);'
p10697
ag9104
ag9104
ag8980
aS'// Save morphology type of this beat for next classification.'
p10698
ag8980
aS'*beatMatch = morphType;'
p10699
ag8980
aS'beatClass = GetBeatClass(morphType);'
p10700
ag8980
aS'// If the morphology has been previously classified.'
p10701
aS'// use that classification.'
p10702
aS'//\treturn(rhythmClass) ;'
p10703
ag8980
ag1774
aS'return (beatClass);'
p10704
ag8980
ag1787
aS'return (PVC);'
p10705
ag8980
aS'// Otherwise use the temporary classification.'
p10706
ag8980
aS'return (tempClass);'
p10707
ag9104
ag8980
aS'/**************************************************************************'
p10708
aS'*  HFNoiseCheck() gauges the high frequency (muscle noise) present in the'
p10709
aS'*  beat template.  The high frequency noise level is estimated by highpass'
p10710
aS'*  filtering the beat (y[n] = x[n] - 2*x[n-1] + x[n-2]), averaging the'
p10711
aS'*  highpass filtered signal over five samples, and finding the maximum of'
p10712
aS'*  this averaged highpass filtered signal.  The high frequency noise metric'
p10713
aS'*  is then taken to be the ratio of the maximum averaged highpassed signal'
p10714
aS'*  to the QRS amplitude.'
p10715
aS'**************************************************************************/'
p10716
ag8980
aS'#define AVELENGTH BEAT_MS50'
p10717
ag8980
aS'int HFNoiseCheck(int* beat)'
p10718
ag9665
aS'int maxNoiseAve = 0, i;'
p10719
aS'int sum = 0, aveBuff[AVELENGTH], avePtr = 0;'
p10720
aS'int qrsMax = 0, qrsMin = 0;'
p10721
ag8980
aS'// Determine the QRS amplitude.'
p10722
ag8980
aS'for (i = FIDMARK - BEAT_MS70; i < FIDMARK + BEAT_MS80; ++i)'
p10723
ag9665
ag1825
aS'qrsMax = beat[i];'
p10724
aS'else if (beat[i] < qrsMin)'
p10725
aS'qrsMin = beat[i];'
p10726
ag9104
aS'for (i = 0; i < AVELENGTH; ++i)'
p10727
aS'aveBuff[i] = 0;'
p10728
ag8980
aS'for (i = FIDMARK - BEAT_MS280; i < FIDMARK + BEAT_MS280; ++i)'
p10729
ag9665
aS'sum -= aveBuff[avePtr];'
p10730
aS'aveBuff[avePtr] = abs(beat[i] - (beat[i - BEAT_MS10] << 1) + beat[i - 2 * BEAT_MS10]);'
p10731
aS'sum += aveBuff[avePtr];'
p10732
ag1882
aS'avePtr = 0;'
p10733
ag1895
aS'if (sum > maxNoiseAve)'
p10734
aS'maxNoiseAve = sum;'
p10735
ag9104
ag1934
aS'return ((maxNoiseAve * (50 / AVELENGTH)) / ((qrsMax - qrsMin) >> 2));'
p10736
aS'else'
p10737
aS'return (0);'
p10738
ag9104
ag8980
aS'/************************************************************************'
p10739
aS'*  TempClass() classifies beats based on their beat features, relative'
p10740
aS'*  to the features of the dominant beat and the present noise level.'
p10741
aS'*************************************************************************/'
p10742
ag8980
aS'int TempClass(int rhythmClass, int morphType, int beatWidth, int domWidth, int domType, int hfNoise,'
p10743
aS'int noiseLevel, int blShift, double domIndex)'
p10744
ag9665
ag8980
aS'// Rule 1:  If no dominant type has been detected classify all'
p10745
aS'// beats as UNKNOWN.'
p10746
ag8980
aS'if (domType < 0)'
p10747
aS'return (UNKNOWN);'
p10748
ag8980
aS'// Rule 2:  If the dominant rhythm is normal, the dominant'
p10749
aS"// beat type doesn't vary much, this beat is premature"
p10750
aS'// and looks sufficiently different than the dominant beat'
p10751
aS'// classify as PVC.'
p10752
ag8980
aS'if (MinimumBeatVariation(domType) && (rhythmClass == PVC) && (domIndex > R2_DI_THRESHOLD)&& (GetDomRhythm() == 1))'
p10753
aS'return (PVC);'
p10754
ag8980
aS'// Rule 3:  If the beat is sufficiently narrow, classify as normal.'
p10755
ag8980
aS'if (beatWidth < R3_WIDTH_THRESHOLD)'
p10756
aS'return (NORMAL);'
p10757
ag8980
aS'// Rule 5:  If the beat cannot be matched to any previously'
p10758
aS'// detected morphology and it is not premature, consider it normal'
p10759
aS'// (probably noisy).'
p10760
ag8980
aS'if ((morphType == MAXTYPES) && (rhythmClass != PVC)) // == UNKNOWN'
p10761
aS'return (NORMAL);'
p10762
ag8980
aS'// Rule 6:  If the maximum number of beat types have been stored,'
p10763
aS'// this beat is not regular or premature and only one'
p10764
aS'// beat of this morphology has been seen, call it normal (probably'
p10765
aS'// noisy).'
p10766
ag8980
aS'if ((GetTypesCount() == MAXTYPES) && (GetBeatTypeCount(morphType) == 1)&& (rhythmClass == UNKNOWN))'
p10767
aS'return (NORMAL);'
p10768
ag8980
aS'// Rule 7:  If this beat looks like the dominant beat and the'
p10769
aS'// rhythm is regular, call it normal.'
p10770
ag8980
aS'if ((domIndex < R7_DI_THRESHOLD) && (rhythmClass == NORMAL))'
p10771
aS'return (NORMAL);'
p10772
ag8980
aS'// Rule 8:  If post classification rhythm is normal for this'
p10773
aS'// type and its shape is close to the dominant shape, classify'
p10774
aS'// as normal.'
p10775
ag8980
aS'if ((domIndex < R8_DI_THRESHOLD) && (CheckPCRhythm(morphType) == NORMAL))'
p10776
aS'return (NORMAL);'
p10777
ag8980
aS'// Rule 9:  If the beat is not premature, it looks similar to the dominant'
p10778
aS'// beat type, and the dominant beat type is variable (noisy), classify as'
p10779
aS'// normal.'
p10780
ag8980
aS'if ((domIndex < R9_DI_THRESHOLD) && (rhythmClass != PVC) && WideBeatVariation(domType))'
p10781
aS'return (NORMAL);'
p10782
ag8980
aS'// Rule 10:  If this beat is significantly different from the dominant beat'
p10783
aS'// there have previously been matching beats, the post rhythm classification'
p10784
aS'// of this type is PVC, and the dominant rhythm is regular, classify as PVC.'
p10785
ag8980
aS'if ((domIndex > R10_DI_THRESHOLD) && (GetBeatTypeCount(morphType) >= R10_BC_LIM)&& (CheckPCRhythm(morphType) == PVC) && (GetDomRhythm() == 1))'
p10786
aS'return (PVC);'
p10787
ag8980
aS"// Rule 11: if the beat is wide, wider than the dominant beat, doesn't"
p10788
aS'// appear to be noisy, and matches a previous type, classify it as'
p10789
aS'// a PVC.'
p10790
ag8980
aS'if ((beatWidth >= R11_MIN_WIDTH)&& (((beatWidth - domWidth >= R11_WIDTH_DIFF1) && (domWidth < R11_WIDTH_BREAK))|| (beatWidth - domWidth >= R11_WIDTH_DIFF2)) && (hfNoise < R11_HF_THRESHOLD) && (noiseLevel < R11_MA_THRESHOLD)  && (blShift < BL_SHIFT_LIMIT) && (morphType < MAXTYPES)&& (GetBeatTypeCount(morphType) > R11_BC_LIM)) // Rev 1.1'
p10791
aS'return (PVC);'
p10792
ag8980
aS'// Rule 12:  If the dominant rhythm is regular and this beat is premature'
p10793
aS'// then classify as PVC.'
p10794
ag8980
aS'if ((rhythmClass == PVC) && (GetDomRhythm() == 1))'
p10795
aS'return (PVC);'
p10796
ag8980
aS'// Rule 14:  If the beat is regular and the dominant rhythm is regular'
p10797
aS'// call the beat normal.'
p10798
ag8980
aS'if ((rhythmClass == NORMAL) && (GetDomRhythm() == 1))'
p10799
aS'return (NORMAL);'
p10800
ag8980
aS'// By this point, we know that rhythm will not help us, so we'
p10801
aS'// have to classify based on width and similarity to the dominant'
p10802
aS'// beat type.'
p10803
ag8980
aS'// Rule 15: If the beat is wider than normal, wide on an'
p10804
aS'// absolute scale, and significantly different from the'
p10805
aS'// dominant beat, call it a PVC.'
p10806
ag8980
aS'if ((beatWidth > domWidth) && (domIndex > R15_DI_THRESHOLD) && (beatWidth >= R15_WIDTH_THRESHOLD))'
p10807
aS'return (PVC);'
p10808
ag8980
aS'// Rule 16:  If the beat is sufficiently narrow, call it normal.'
p10809
ag8980
aS'if (beatWidth < R16_WIDTH_THRESHOLD)'
p10810
aS'return (NORMAL);'
p10811
ag8980
aS"// Rule 17:  If the beat isn't much wider than the dominant beat"
p10812
aS'// call it normal.'
p10813
ag8980
aS'if (beatWidth < domWidth + R17_WIDTH_DELTA)'
p10814
aS'return (NORMAL);'
p10815
ag8980
aS'// If the beat is noisy but reasonably close to dominant,'
p10816
aS'// call it normal.'
p10817
ag8980
aS'// Rule 18:  If the beat is similar to the dominant beat, call it normal.'
p10818
ag8980
aS'if (domIndex < R18_DI_THRESHOLD)'
p10819
aS'return (NORMAL);'
p10820
ag8980
aS"// If it's noisy don't trust the width."
p10821
ag8980
aS"// Rule 19:  If the beat is noisy, we can't trust our width estimate"
p10822
aS'// and we have no useful rhythm information, so guess normal.'
p10823
ag8980
aS'if (hfNoise > R19_HF_THRESHOLD)'
p10824
aS'return (NORMAL);'
p10825
ag8980
aS'// Rule 20:  By this point, we have no rhythm information, the beat'
p10826
aS"// isn't particularly narrow, the beat isn't particulary similar to"
p10827
aS'// the dominant beat, so guess a PVC.'
p10828
ag8980
aS'return (PVC);'
p10829
ag9104
ag8980
ag8980
aS'/****************************************************************************'
p10830
aS'*  DomMonitor, monitors which beat morphology is considered to be dominant.'
p10831
aS'*  The dominant morphology is the beat morphology that has been most frequently'
p10832
aS'*  classified as normal over the course of the last 120 beats.  The dominant'
p10833
aS'*  beat rhythm is classified as regular if at least 3/4 of the dominant beats'
p10834
aS'*  have been classified as regular.'
p10835
aS'*******************************************************************************/'
p10836
ag8980
aS'#define DM_BUFFER_LENGTH 180'
p10837
ag8980
aS'int NewDom, DomRhythm;'
p10838
aS'int DMBeatTypes[DM_BUFFER_LENGTH], DMBeatClasses[DM_BUFFER_LENGTH];'
p10839
aS'int DMBeatRhythms[DM_BUFFER_LENGTH];'
p10840
aS'int DMNormCounts[8], DMBeatCounts[8], DMIrregCount = 0;'
p10841
ag8980
aS'int DomMonitor(int morphType, int rhythmClass, int beatWidth, int rr, int reset)'
p10842
ag9665
aS'static int brIndex = 0;'
p10843
aS'int i, oldType, runCount, dom, max;'
p10844
ag8980
aS'// Fetch the type of the beat before the last beat.'
p10845
ag8980
aS'i = brIndex - 2;'
p10846
ag2061
aS'i += DM_BUFFER_LENGTH;'
p10847
aS'oldType = DMBeatTypes[i];'
p10848
ag8980
aS'// If reset flag is set, reset beat type counts and'
p10849
aS'// beat information buffers.'
p10850
ag8980
ag2118
ag9665
aS'for (i = 0; i < DM_BUFFER_LENGTH; ++i)'
p10851
ag9665
aS'DMBeatTypes[i] = -1;'
p10852
aS'DMBeatClasses[i] = 0;'
p10853
ag9104
ag8980
aS'for (i = 0; i < 8; ++i)'
p10854
ag9665
aS'DMNormCounts[i] = 0;'
p10855
aS'DMBeatCounts[i] = 0;'
p10856
ag9104
aS'DMIrregCount = 0;'
p10857
aS'return (0);'
p10858
ag9104
ag8980
aS'// Once we have wrapped around, subtract old beat types from'
p10859
aS'// the beat counts.'
p10860
ag8980
ag2144
ag9665
aS'--DMBeatCounts[DMBeatTypes[brIndex]];'
p10861
aS'DMNormCounts[DMBeatTypes[brIndex]] -= DMBeatClasses[brIndex];'
p10862
ag2142
aS'--DMIrregCount;'
p10863
ag9104
ag8980
aS'// If this is a morphology that has been detected before, decide'
p10864
aS'// (for the purposes of selecting the dominant normal beattype)'
p10865
aS'// whether it is normal or not and update the approporiate counts.'
p10866
ag8980
ag2244
ag9665
ag8980
aS'// Update the buffers of previous beats and increment the'
p10867
aS'// count for this beat type.'
p10868
ag8980
aS'DMBeatTypes[brIndex] = morphType;'
p10869
aS'++DMBeatCounts[morphType];'
p10870
aS'DMBeatRhythms[brIndex] = rhythmClass;'
p10871
ag8980
aS'// If the rhythm appears regular, update the regular rhythm'
p10872
aS'// count.'
p10873
ag8980
ag2203
aS'++DMIrregCount;'
p10874
ag8980
aS'// Check to see how many beats of this type have occurred in'
p10875
aS'// a row (stop counting at six).'
p10876
ag8980
aS'i = brIndex - 1;'
p10877
ag2216
aS'i += DM_BUFFER_LENGTH;'
p10878
aS'for (runCount = 0; (DMBeatTypes[i] == morphType) && (runCount < 6); ++runCount)'
p10879
ag9665
ag2174
aS'i += DM_BUFFER_LENGTH;'
p10880
ag9104
aS'// If the rhythm is regular, the beat width is less than 130 ms, and'
p10881
aS'// there have been at least two in a row, consider the beat to be'
p10882
aS'// normal.'
p10883
ag8980
ag2229
ag9665
aS'DMBeatClasses[brIndex] = 1;'
p10884
aS'++DMNormCounts[morphType];'
p10885
ag9104
ag8980
aS'// If the last beat was within the normal P-R interval for this beat,'
p10886
aS'// and the one before that was this beat type, assume the last beat'
p10887
aS'// was noise and this beat is normal.'
p10888
ag8980
ag2242
ag9665
aS'DMBeatClasses[brIndex] = 1;'
p10889
aS'++DMNormCounts[morphType];'
p10890
ag9104
ag8980
aS'// Otherwise assume that this is not a normal beat.'
p10891
ag8980
aS'else'
p10892
aS'DMBeatClasses[brIndex] = 0;'
p10893
ag9104
ag8980
aS'// If the beat does not match any of the beat types, store'
p10894
aS'// an indication that the beat does not match.'
p10895
ag8980
aS'else'
p10896
ag9665
aS'DMBeatClasses[brIndex] = 0;'
p10897
aS'DMBeatTypes[brIndex] = -1;'
p10898
ag9104
ag8980
aS'// Increment the index to the beginning of the circular buffers.'
p10899
ag8980
ag2257
aS'brIndex = 0;'
p10900
ag8980
aS'// Determine which beat type has the most beats that seem'
p10901
aS'// normal.'
p10902
ag8980
aS'dom = 0;'
p10903
aS'for (i = 1; i < 8; ++i)'
p10904
ag9665
ag1962
aS'dom = i;'
p10905
ag9104
aS'max = 0;'
p10906
aS'for (i = 1; i < 8; ++i)'
p10907
ag9665
ag1997
aS'max = i;'
p10908
ag9104
aS'// If there are no normal looking beats, fall back on which beat'
p10909
aS'// has occurred most frequently since classification began.'
p10910
ag8980
aS'if ((DMNormCounts[dom] == 0) || (DMBeatCounts[max] / DMBeatCounts[dom] >= 2)) // == 0'
p10911
aS'dom = GetDominantType();'
p10912
ag8980
aS'// If at least half of the most frequently occuring normal'
p10913
aS'// type do not seem normal, fall back on choosing the most frequently'
p10914
aS'// occurring type since classification began.'
p10915
ag8980
ag2283
aS'dom = GetDominantType();'
p10916
ag8980
aS'// If there is any beat type that has been classfied as normal,'
p10917
aS"// but at least 10 don't seem normal, reclassify it to UNKNOWN."
p10918
ag8980
aS'for (i = 0; i < 8; ++i)'
p10919
ag9665
ag2032
aS'SetBeatClass(i, UNKNOWN);'
p10920
ag9104
aS'// Save the dominant type in a global variable so that it is'
p10921
aS'// accessable for debugging.'
p10922
ag8980
aS'NewDom = dom;'
p10923
aS'return (dom);'
p10924
ag9104
ag8980
aS'int GetNewDominantType(void)'
p10925
ag9665
aS'return (NewDom);'
p10926
ag9104
ag8980
aS'int GetDomRhythm(void)'
p10927
ag9665
ag2324
aS'return (0);'
p10928
aS'else'
p10929
aS'return (1);'
p10930
ag9104
ag8980
ag8980
aS'void AdjustDomData(int oldType, int newType)'
p10931
ag9665
aS'int i;'
p10932
ag8980
aS'for (i = 0; i < DM_BUFFER_LENGTH; ++i)'
p10933
ag9665
ag2352
aS'DMBeatTypes[i] = newType;'
p10934
ag9104
ag8980
ag2381
ag9665
aS'DMNormCounts[newType] = DMNormCounts[oldType];'
p10935
aS'DMBeatCounts[newType] = DMBeatCounts[oldType];'
p10936
ag9104
ag8980
aS'DMNormCounts[oldType] = DMBeatCounts[oldType] = 0;'
p10937
ag9104
ag8980
aS'void CombineDomData(int oldType, int newType)'
p10938
ag9665
aS'int i;'
p10939
ag8980
aS'for (i = 0; i < DM_BUFFER_LENGTH; ++i)'
p10940
ag9665
ag2409
aS'DMBeatTypes[i] = newType;'
p10941
ag9104
ag8980
ag2438
ag9665
aS'DMNormCounts[newType] += DMNormCounts[oldType];'
p10942
aS'DMBeatCounts[newType] += DMBeatCounts[oldType];'
p10943
ag9104
ag8980
aS'DMNormCounts[oldType] = DMBeatCounts[oldType] = 0;'
p10944
ag9104
ag8980
aS'/***********************************************************************'
p10945
aS'GetRunCount() checks how many of the present beat type have occurred'
p10946
aS'in a row.'
p10947
aS'***********************************************************************/'
p10948
ag8980
aS'GetRunCount()'
p10949
ag9665
aS'int i;'
p10950
aS'for (i = 1; (i < 8) && (RecentTypes[0] == RecentTypes[i]); ++i)'
p10951
ag9704
aS'return (i);'
p10952
ag9104
aa(lp10953
S'#include "absdefinition.cpp"'
p10954
aS'#include "ANALBEAT.CPP"'
p10955
aS'#include "ANALBEAT.H"'
p10956
aS'#include "BDAC.CPP"'
p10957
aS'#include "BXB.CPP"'
p10958
aS'#include "CLASSIFY.CPP"'
p10959
aS'#include "EASYTEST.CPP"'
p10960
aS'#include "ECGCODES.H"'
p10961
aS'#include "ECGMAP.H"'
p10962
aS'#include "MATCH.CPP"'
p10963
aS'#include "MATCH.H"'
p10964
aS'#include "NOISECHK.CPP"'
p10965
aS'#include "POSTCLAS.CPP"'
p10966
aS'#include "POSTCLAS.H"'
p10967
aS'#include "QRSDET.H"'
p10968
aS'#include "QRSDET2.CPP"'
p10969
aS'#include "QRSFILT.CPP"'
p10970
aS'#include "RHYTHMCHK.CPP"'
p10971
aS'#include "RHYTHMCHK.H"'
p10972
aS'#include "WFDB.H"'
p10973
ag8980
ag8980
aa(lp10974
S'/*****************************************************************************'
p10975
aS'FILE:  easytest.cpp'
p10976
aS'AUTHOR:\tPatrick S. Hamilton'
p10977
aS'REVISED:\t5/13/2002'
p10978
aS'___________________________________________________________________________'
p10979
ag8980
aS'easytest.cpp: Use bdac to generate an annotation file.'
p10980
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p10981
aS'Copywrite (C) 1999 George B. Moody'
p10982
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p10983
aS'the terms of the GNU Library General Public License as published by the Free'
p10984
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p10985
aS'later version.'
p10986
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p10987
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p10988
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p10989
aS'details.'
p10990
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p10991
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p10992
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p10993
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p10994
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p10995
aS'MA 02143 USA).  For updates to this software, please visit our website'
p10996
aS'(http://www.eplimited.com).'
p10997
aS'__________________________________________________________________________'
p10998
ag8980
aS'Easytest.exe is a simple program to help test the performance of our'
p10999
aS'beat detection and classification software. Data is read from the'
p11000
aS'indicated ECG file, the channel 1 signal is fed to bdac.c, and the'
p11001
aS'resulting detections are saved in the annotation file <record>.ate.'
p11002
aS'<record>.ate may then be compared to <record>.atr to using bxb to'
p11003
aS'analyze the performance of the the beat detector and classifier detector.'
p11004
ag8980
aS'Note that data in the MIT/BIH Arrythmia database file has been sampled'
p11005
aS'at 360 samples-per-second, but the beat detection and classification'
p11006
aS'software has been written for data sampled at 200 samples-per-second.'
p11007
aS'Date is converterted from 360 sps to 200 sps with the function NextSample.'
p11008
aS"Code for resampling was copied from George Moody's xform utility.  The beat"
p11009
aS'locations are then adjusted back to coincide with the original sample'
p11010
aS'rate of 360 samples/second so that the annotation files generated by'
p11011
aS'easytest can be compared to the "atruth" annotation files.'
p11012
ag8980
aS'This file must be linked with object files produced from:'
p11013
aS'wfdb software library (source available at www.physionet.org)'
p11014
aS'analbeat.cpp'
p11015
aS'match.cpp'
p11016
aS'rythmchk.cpp'
p11017
aS'classify.cpp'
p11018
aS'bdac.cpp'
p11019
aS'qrsfilt.cpp'
p11020
aS'qrsdet.cpp'
p11021
aS'__________________________________________________________________________'
p11022
ag8980
aS'Revisions'
p11023
aS'4/13/02:'
p11024
aS'Added conditional define statements that allow MIT/BIH or AHA'
p11025
aS'records to be processed.'
p11026
aS'Normalize input to 5 mV/LSB (200 A-to-D units/mV).'
p11027
ag8980
aS'*******************************************************************************/'
p11028
ag8980
aS'#include "wfdb.h"'
p11029
aS'#include "ecgcodes.h"'
p11030
aS'#include "ecgmap.h"'
p11031
aS'#include "stdio.h"'
p11032
aS'#include "qrsdet.h" // For sample rate.'
p11033
ag8980
aS'#define MITDB // Comment this line out to process AHA data.'
p11034
aS'#ifdef MITDB'
p11035
aS'#define ECG_DB_PATH "C:\\\\MITDB\\\\" // Path to where MIT/BIH data.'
p11036
aS'#define REC_COUNT 48'
p11037
aS'int Records[REC_COUNT] = { 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114,'
p11038
aS'115, 116, 117, 118, 119, 121, 122, 123, 124, 200, 201, 202, 203, 205, 207, 208, 209, 210, 212,'
p11039
aS'213, 214, 215, 217, 219, 220, 221, 222, 223, 228, 230, 231, 232, 233, 234 };'
p11040
ag8980
aS'#else'
p11041
aS'#define ECG_DB_PATH "C:\\\\AHADAT~1\\\\" // Path to where AHA data.'
p11042
aS'#define REC_COUNT 69'
p11043
aS'int Records[REC_COUNT] = { 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 2201, 2203,'
p11044
aS'2204, 2205, 2206, 2207, 2208, 2209, 2210, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209,'
p11045
aS'3210, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 5201, 5202, 5203, 5204, 5205,'
p11046
aS'5206, 5207, 5208, 5209, 5210, 6201, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 7201,'
p11047
aS'7202, 7203, 7204, 7205, 7206, 7207, 7208, 7209, 7210 };'
p11048
aS'#endif'
p11049
aS'// External function prototypes.'
p11050
aS'void ResetBDAC(void);'
p11051
aS'int BeatDetectAndClassify(int ecgSample, int* beatType, int* beatMatch);'
p11052
ag8980
aS'// Local Prototypes.'
p11053
aS'int NextSample(int* vout, int nosig, int ifreq, int ofreq, int init);'
p11054
aS'int gcd(int x, int y);'
p11055
ag8980
aS'// Global variables.'
p11056
ag8980
aS'int ADCZero, ADCUnit, InputFileSampleFrequency;'
p11057
ag8980
aS'void main()'
p11058
ag9665
aS'char record[10], fname[20];'
p11059
aS'int i, ecg[2], delay, recNum;'
p11060
aS'WFDB_Siginfo s[2];'
p11061
aS'WFDB_Anninfo a[2];'
p11062
aS'WFDB_Annotation annot;'
p11063
ag8980
aS'unsigned char byte;'
p11064
aS'FILE *newAnn0, *newAnn1;'
p11065
aS'long SampleCount = 0, lTemp, DetectionTime;'
p11066
aS'int beatType, beatMatch;'
p11067
ag8980
aS'// Set up path to database directory'
p11068
ag8980
aS'setwfdb(ECG_DB_PATH);'
p11069
ag8980
aS'// Analyze all 48 MIT/BIH Records.'
p11070
ag8980
aS'for (recNum = 0; recNum < REC_COUNT; ++recNum)'
p11071
ag9665
aS'sprintf(record, "%d", Records[recNum]);'
p11072
aS'printf("Record %d\\n", Records[recNum]);'
p11073
ag8980
aS'// Open a 2 channel record'
p11074
ag8980
ag2526
ag9665
aS'printf("Couldn\'t open %s\\n", record);'
p11075
aS'return;'
p11076
ag9104
ag8980
aS'ADCZero = s[0].adczero;'
p11077
aS'ADCUnit = s[0].gain;'
p11078
aS'InputFileSampleFrequency = sampfreq(record);'
p11079
ag8980
aS'// Setup for output annotations'
p11080
ag8980
aS'a[0].name = "atest";'
p11081
aS'a[0].stat = WFDB_WRITE;'
p11082
ag8980
ag2539
aS'return;'
p11083
ag8980
aS'// Initialize sampling frequency adjustment.'
p11084
ag8980
aS'NextSample(ecg, 2, InputFileSampleFrequency, SAMPLE_RATE, 1);'
p11085
ag8980
aS'// Initialize beat detection and classification.'
p11086
ag8980
aS'ResetBDAC();'
p11087
aS'SampleCount = 0;'
p11088
ag8980
aS'// Read data from MIT/BIH file until there is none left.'
p11089
ag8980
aS'while (NextSample(ecg, 2, InputFileSampleFrequency, SAMPLE_RATE, 0) >= 0)'
p11090
ag9665
aS'++SampleCount;'
p11091
ag8980
aS'// Set baseline to 0 and resolution to 5 mV/lsb (200 units/mV)'
p11092
ag8980
aS'lTemp = ecg[0] - ADCZero;'
p11093
aS'lTemp *= 200;'
p11094
aS'lTemp /= ADCUnit;'
p11095
aS'ecg[0] = lTemp;'
p11096
ag8980
aS'// Pass sample to beat detection and classification.'
p11097
ag8980
aS'delay = BeatDetectAndClassify(ecg[0], &beatType, &beatMatch);'
p11098
ag8980
aS'// If a beat was detected, annotate the beat location'
p11099
aS'// and type.'
p11100
ag8980
ag2474
ag9665
aS'DetectionTime = SampleCount - delay;'
p11101
ag8980
aS'// Convert sample count to input file sample'
p11102
aS'// rate.'
p11103
ag8980
aS'DetectionTime *= InputFileSampleFrequency;'
p11104
aS'DetectionTime /= SAMPLE_RATE;'
p11105
aS'annot.time = DetectionTime;'
p11106
aS'annot.anntyp = beatType;'
p11107
aS'annot.aux = NULL;'
p11108
aS'putann(0, &annot);'
p11109
ag9104
ag9104
ag8980
aS'// Reset database after record is done.'
p11110
ag8980
aS'wfdbquit();'
p11111
ag8980
aS'// Copy "atest.<record>" to "<record>.ate" for future ascess.'
p11112
aS'// (This is necessary for PC files)'
p11113
ag8980
aS'sprintf(fname, "%s.ate", record);'
p11114
aS'newAnn0 = fopen(fname, "rb");'
p11115
aS'sprintf(fname, "%s%s.ate", ECG_DB_PATH, record);'
p11116
aS'newAnn1 = fopen(fname, "wb");'
p11117
ag8980
aS'// Copy byte image of annotation file in this'
p11118
aS'// directory to a correctly named file in the'
p11119
aS'// database directory.'
p11120
ag8980
aS'while (fread(&byte, sizeof(char), 1, newAnn0) == 1)'
p11121
aS'fwrite(&byte, sizeof(char), 1, newAnn1);'
p11122
ag8980
aS'fclose(newAnn0);'
p11123
aS'fclose(newAnn1);'
p11124
ag9104
ag9104
ag8980
aS'/**********************************************************************'
p11125
aS'NextSample reads MIT/BIH Arrhythmia data from a file of data'
p11126
aS'sampled at ifreq and returns data sampled at ofreq.  Data is'
p11127
aS'returned in vout via *vout.  NextSample must be initialized by'
p11128
aS'passing in a nonzero value in init.  NextSample returns -1 when'
p11129
aS'there is no more data left.'
p11130
aS'***********************************************************************/'
p11131
ag8980
aS'int NextSample(int* vout, int nosig, int ifreq, int ofreq, int init)'
p11132
ag9665
aS'int i;'
p11133
aS'static int m, n, mn, ot, it, vv[WFDB_MAXSIG], v[WFDB_MAXSIG], rval;'
p11134
ag8980
ag2656
ag9665
aS'i = gcd(ifreq, ofreq);'
p11135
aS'm = ifreq / i;'
p11136
aS'n = ofreq / i;'
p11137
aS'mn = m * n;'
p11138
aS'ot = it = 0;'
p11139
aS'getvec(vv);'
p11140
aS'rval = getvec(v);'
p11141
ag9104
ag8980
aS'else'
p11142
ag9665
aS'while (ot > it)'
p11143
ag9665
aS'for (i = 0; i < nosig; ++i)'
p11144
aS'vv[i] = v[i];'
p11145
aS'rval = getvec(v);'
p11146
ag2628
ag9665
aS'it -= mn;'
p11147
aS'ot -= mn;'
p11148
ag9104
aS'it += n;'
p11149
ag9104
aS'for (i = 0; i < nosig; ++i)'
p11150
aS'vout[i] = vv[i] + (ot % n) * (v[i] - vv[i]) / n;'
p11151
aS'ot += m;'
p11152
ag9104
ag8980
aS'return (rval);'
p11153
ag9104
ag8980
aS"// Greatest common divisor of x and y (Euclid's algorithm)"
p11154
ag8980
aS'int gcd(int x, int y)'
p11155
ag9665
aS'while (x != y)'
p11156
ag9665
ag2695
aS'x -= y;'
p11157
aS'else'
p11158
aS'y -= x;'
p11159
ag9104
aS'return (x);'
p11160
ag9104
aa(lp11161
S'/* file: ecgmap.h\tG. Moody        8 June 1983'
p11162
aS'Last revised:\t4 May 1999\twfdblib 10.0.0'
p11163
aS'ECG annotation code mapping macros'
p11164
ag8980
aS'_______________________________________________________________________________'
p11165
aS'wfdb: a library for reading and writing annotated waveforms (time series data)'
p11166
aS'Copyright (C) 1999 George B. Moody'
p11167
ag8980
aS'This library is free software; you can redistribute it and/or modify it under'
p11168
aS'the terms of the GNU Library General Public License as published by the Free'
p11169
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p11170
aS'later version.'
p11171
ag8980
aS'This library is distributed in the hope that it will be useful, but WITHOUT ANY'
p11172
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p11173
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p11174
aS'details.'
p11175
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p11176
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p11177
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p11178
ag8980
aS'You may contact the author by e-mail (george@mit.edu) or postal mail'
p11179
aS'(MIT Room E25-505A, Cambridge, MA 02139 USA).  For updates to this software,'
p11180
aS'please visit PhysioNet (http://www.physionet.org/).'
p11181
aS'_______________________________________________________________________________'
p11182
ag8980
aS'These macros evaluate their arguments only once, so that they behave like'
p11183
aS"functions with respect to side-effects (e.g., `isqrs(x++)' is safe).  With"
p11184
aS'the exception of isann(), each macro uses a table;  to avoid wasting space'
p11185
aS'in programs compiled from more than one source, try to keep all references'
p11186
aS'to these macros in a single source file so that multiple instances of the'
p11187
aS'tables are not required.  To save even more space, simply define the unneeded'
p11188
aS"macros before including this file (e.g., `#define map1').*/"
p11189
ag8980
aS'#ifndef wfdb_ECGMAP_H /* avoid multiple definitions */'
p11190
aS'#define wfdb_ECGMAP_H'
p11191
ag8980
aS'#ifndef wfdb_ECGCODES_H'
p11192
aS'#include "ecgcodes.h"'
p11193
aS'#endif'
p11194
ag8980
aS'/* isann(A) is true if A is a legal annotation code, false otherwise */'
p11195
aS'#define isann(A) (0 < (wfdb_mt = (A)) && wfdb_mt <= ACMAX)'
p11196
aS'static int wfdb_mt; /* macro temporary variable */'
p11197
ag8980
aS'/* isqrs(A) is true (1) if A denotes a QRS complex, false (0) otherwise */'
p11198
aS'#ifndef isqrs'
p11199
aS'#define isqrs(A) (isann(A) ? wfdb_qrs[wfdb_mt] : 0)'
p11200
aS'#define setisqrs(A, X) (isann(A) ? (wfdb_qrs[wfdb_mt] = (X)) : 0)'
p11201
aS'static char wfdb_qrs[] = {'
p11202
aS'0, 1, 1, 1, 1, 1, 1, 1, 1, 1, /* 0 - 9 */'
p11203
aS'1, 1, 1, 1, 0, 0, 0, 0, 0, 0, /* 10 - 19 */'
p11204
aS'0, 0, 0, 0, 0, 1, 0, 0, 0, 0, /* 20 - 29 */'
p11205
aS'1, 1, 0, 0, 1, 1, 0, 0, 1, 0, /* 30 - 39 */'
p11206
aS'0, 1, 0, 0, 0, 0, 0, 0, 0, 0 /* 40 - 49 */'
p11207
aS'};'
p11208
aS'#endif'
p11209
ag8980
aS'/* map1(A) maps A into one of {NOTQRS, NORMAL, PVC, FUSION, LEARN} */'
p11210
aS'#ifndef map1'
p11211
aS'#define map1(A) (isann(A) ? wfdb_mp1[wfdb_mt] : NOTQRS)'
p11212
aS'#define setmap1(A, X) (isann(A) ? (wfdb_mp1[wfdb_mt] = (X)) : NOTQRS)'
p11213
aS'static char wfdb_mp1[] = {'
p11214
aS'NOTQRS, NORMAL, NORMAL, NORMAL, NORMAL, /* 0 - 4 */'
p11215
aS'PVC, FUSION, NORMAL, NORMAL, NORMAL, /* 5 - 9 */'
p11216
aS'PVC, NORMAL, NORMAL, NORMAL, NOTQRS, /* 10 - 14 */'
p11217
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 15 - 19 */'
p11218
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 20 - 24 */'
p11219
aS'NORMAL, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 25 - 29 */'
p11220
aS'LEARN, PVC, NOTQRS, NOTQRS, NORMAL, /* 30 - 34 */'
p11221
aS'NORMAL, NOTQRS, NOTQRS, NORMAL, NOTQRS, /* 35 - 39 */'
p11222
aS'NOTQRS, PVC, NOTQRS, NOTQRS, NOTQRS, /* 40 - 44 */'
p11223
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS /* 45 - 49 */'
p11224
aS'};'
p11225
aS'#endif'
p11226
ag8980
aS'/* map2(A) maps A into one of {NOTQRS, NORMAL, SVPB, PVC, FUSION, LEARN} */'
p11227
aS'#ifndef map2'
p11228
aS'#define map2(A) (isann(A) ? wfdb_mp2[wfdb_mt] : NOTQRS)'
p11229
aS'#define setmap2(A, X) (isann(A) ? (wfdb_mp2[wfdb_mt] = (X)) : NOTQRS)'
p11230
aS'static char wfdb_mp2[] = {'
p11231
aS'NOTQRS, NORMAL, NORMAL, NORMAL, SVPB, /* 0 - 4 */'
p11232
aS'PVC, FUSION, SVPB, SVPB, SVPB, /* 5 - 9 */'
p11233
aS'PVC, NORMAL, NORMAL, NORMAL, NOTQRS, /* 10 - 14 */'
p11234
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 15 - 19 */'
p11235
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 20 - 24 */'
p11236
aS'NORMAL, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 25 - 29 */'
p11237
aS'LEARN, PVC, NOTQRS, NOTQRS, NORMAL, /* 30 - 34 */'
p11238
aS'NORMAL, NOTQRS, NOTQRS, NORMAL, NOTQRS, /* 35 - 39 */'
p11239
aS'NOTQRS, PVC, NOTQRS, NOTQRS, NOTQRS, /* 40 - 44 */'
p11240
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS /* 45 - 49 */'
p11241
aS'};'
p11242
aS'#endif'
p11243
ag8980
aS'/* ammap(A) maps an AHA annotation code, A, into an MIT annotation code */'
p11244
aS'#ifndef ammap'
p11245
aS"#define ammap(A) (('D' < (wfdb_mt = (A)) && wfdb_mt <= ']') ? wfdb_ammp[wfdb_mt - 'E'] : NOTQRS)"
p11246
aS'static char wfdb_ammp[] = {'
p11247
aS"VESC, FUSION, NOTQRS, NOTQRS, NOTQRS, /* 'E' - 'I' */"
p11248
aS"NOTQRS, NOTQRS, NOTQRS, NOTQRS, NORMAL, /* 'J' - 'N' */"
p11249
aS"NOTE, PACE, UNKNOWN, RONT, NOTQRS, /* 'O' - 'S' */"
p11250
aS"NOTQRS, NOISE, PVC, NOTQRS, NOTQRS, /* 'T' - 'X' */"
p11251
aS"NOTQRS, NOTQRS, VFON, NOTQRS, VFOFF /* 'Y' - ']' */"
p11252
aS'};'
p11253
aS'#endif'
p11254
ag8980
aS'/* mamap(A,S) maps MIT code A, subtype S, into an AHA annotation code */'
p11255
aS'#ifndef mamap'
p11256
aS'#define mamap(A, S)                                                                                \\'
p11257
aS"(isann(A) ? (((wfdb_mt = wfdb_mamp[wfdb_mt]) == 'U' && (S) != -1) ? 'O' : wfdb_mt) : 'O')"
p11258
aS'static char wfdb_mamp[] = {'
p11259
aS"'O', 'N', 'N', 'N', 'N', /* 0 - 4 */"
p11260
aS"'V', 'F', 'N', 'N', 'N', /* 5 - 9 */"
p11261
aS"'E', 'N', 'P', 'Q', 'U', /* 10 - 14 */"
p11262
aS"'O', 'O', 'O', 'O', 'O', /* 15 - 19 */"
p11263
aS"'O', 'O', 'O', 'O', 'O', /* 20 - 24 */"
p11264
aS"'N', 'O', 'O', 'O', 'O', /* 25 - 29 */"
p11265
aS"'Q', 'O', '[', ']', 'N', /* 30 - 34 */"
p11266
aS"'N', 'O', 'O', 'N', 'O', /* 35 - 39 */"
p11267
aS"'O', 'R', 'O', 'O', 'O', /* 40 - 44 */"
p11268
aS"'O', 'O', 'O', 'O', 'O' /* 45 - 49 */"
p11269
aS'};'
p11270
aS'#endif'
p11271
ag8980
aS'/* Annotation position codes.  These may be used by applications which plot'
p11272
aS'signals and annotations to determine where to print annotation mnemonics. */'
p11273
aS'#define APUNDEF 0 /* for undefined annotation types */'
p11274
aS'#define APSTD 1 /* standard position */'
p11275
aS'#define APHIGH 2 /* a level above APSTD */'
p11276
aS'#define APLOW 3 /* a level below APSTD */'
p11277
aS"#define APATT 4 /* attached to the signal specified by `chan' */"
p11278
aS'#define APAHIGH 5 /* a level above APATT */'
p11279
aS'#define APALOW 6 /* a level below APATT */'
p11280
ag8980
aS'/* annpos(A) returns the appropriate position code for A */'
p11281
aS'#ifndef annpos'
p11282
aS'#define annpos(A) (isann(A) ? wfdb_annp[wfdb_mt] : APUNDEF)'
p11283
aS'#define setannpos(A, X) (isann(A) ? (wfdb_annp[wfdb_mt] = (X)) : APUNDEF)'
p11284
aS'static char wfdb_annp[] = {'
p11285
aS'APUNDEF, APSTD, APSTD, APSTD, APSTD, /* 0 - 4 */'
p11286
aS'APSTD, APSTD, APSTD, APSTD, APSTD, /* 5 - 9 */'
p11287
aS'APSTD, APSTD, APSTD, APSTD, APHIGH, /* 10 - 14 */'
p11288
aS'APUNDEF, APHIGH, APUNDEF, APHIGH, APHIGH, /* 15 - 19 */'
p11289
aS'APHIGH, APHIGH, APHIGH, APHIGH, APHIGH, /* 20 - 24 */'
p11290
aS'APSTD, APHIGH, APHIGH, APLOW, APHIGH, /* 25 - 29 */'
p11291
aS'APSTD, APSTD, APSTD, APSTD, APSTD, /* 30 - 34 */'
p11292
aS'APSTD, APHIGH, APHIGH, APSTD, APHIGH, /* 35 - 39 */'
p11293
aS'APHIGH, APSTD, APUNDEF, APUNDEF, APUNDEF, /* 40 - 44 */'
p11294
aS'APUNDEF, APUNDEF, APUNDEF, APUNDEF, APUNDEF /* 45 - 49 */'
p11295
aS'};'
p11296
aS'#endif'
p11297
ag8980
aS'#endif'
p11298
aa(lp11299
S'/*****************************************************************************'
p11300
aS'FILE:  analbeat.cpp'
p11301
aS'AUTHOR:\tPatrick S. Hamilton'
p11302
aS'REVISED:\t5/13/2002'
p11303
aS'___________________________________________________________________________'
p11304
ag8980
aS'analbeat.cpp: Analyze Beat'
p11305
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p11306
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p11307
aS'the terms of the GNU Library General Public License as published by the Free'
p11308
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p11309
aS'later version.'
p11310
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p11311
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p11312
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p11313
aS'details.'
p11314
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p11315
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p11316
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p11317
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p11318
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p11319
aS'MA 02143 USA).  For updates to this software, please visit our website'
p11320
aS'(http://www.eplimited.com).'
p11321
aS'__________________________________________________________________________'
p11322
ag8980
aS'This file contains functions for determining the QRS onset, QRS offset,'
p11323
aS'beat onset, beat offset, polarity, and isoelectric level for a beat.'
p11324
ag8980
aS'Revisions:'
p11325
aS'4/16: Modified to prevent isoStart from being set to less than ISO_LENGTH1-1'
p11326
aS'5/13/2002: Time related constants are tied to BEAT_SAMPLE_RATE in bdac.h.'
p11327
ag8980
aS'*****************************************************************************/'
p11328
aS'#include "bdac.h"'
p11329
aS'#include <stdio.h>'
p11330
aS'#include <stdlib.h>'
p11331
ag8980
aS'#define ISO_LENGTH1 BEAT_MS50'
p11332
aS'#define ISO_LENGTH2 BEAT_MS80'
p11333
aS'#define ISO_LIMIT 20'
p11334
ag8980
aS'// Local prototypes.'
p11335
ag8980
aS'int IsoCheck(int* data, int isoLength);'
p11336
ag8980
aS'/****************************************************************'
p11337
aS'IsoCheck determines whether the amplitudes of a run'
p11338
aS'of data fall within a sufficiently small amplitude that'
p11339
aS'the run can be considered isoelectric.'
p11340
aS'*****************************************************************/'
p11341
ag8980
aS'int IsoCheck(int* data, int isoLength)'
p11342
ag9665
aS'int i, max, min;'
p11343
ag8980
aS'for (i = 1, max = min = data[0]; i < isoLength; ++i)'
p11344
ag9665
ag2749
aS'max = data[i];'
p11345
aS'else if (data[i] < min)'
p11346
aS'min = data[i];'
p11347
ag9104
ag8980
ag2778
aS'return (1);'
p11348
aS'return (0);'
p11349
ag9104
ag8980
aS'/**********************************************************************'
p11350
aS'AnalyzeBeat takes a beat buffer as input and returns (via pointers)'
p11351
aS'estimates of the QRS onset, QRS offset, polarity, isoelectric level'
p11352
aS'beat beginning (P-wave onset), and beat ending (T-wave offset).'
p11353
aS'Analyze Beat assumes that the beat has been sampled at 100 Hz, is'
p11354
aS'BEATLGTH long, and has an R-wave location of roughly FIDMARK.'
p11355
ag8980
aS'Note that beatBegin is the number of samples before FIDMARK that'
p11356
aS'the beat begins and beatEnd is the number of samples after the'
p11357
aS'FIDMARK that the beat ends.'
p11358
aS'************************************************************************/'
p11359
ag8980
aS'#define INF_CHK_N BEAT_MS40'
p11360
ag8980
aS'void AnalyzeBeat(int* beat, int* onset, int* offset, int* isoLevel, int* beatBegin, int* beatEnd, int* amp)'
p11361
ag9665
aS'int maxSlope = 0, maxSlopeI, minSlope = 0, minSlopeI;'
p11362
aS'int maxV, minV;'
p11363
aS'int isoStart, isoEnd;'
p11364
aS'int slope, i;'
p11365
ag8980
aS'// Search back from the fiducial mark to find the isoelectric'
p11366
aS'// region preceeding the QRS complex.'
p11367
ag8980
aS'for (i = FIDMARK - ISO_LENGTH2; (i > 0) && (IsoCheck(&beat[i], ISO_LENGTH2) == 0); --i)'
p11368
ag9704
ag8980
aS"// If the first search didn't turn up any isoelectric region, look for"
p11369
aS'// a shorter isoelectric region.'
p11370
ag8980
ag3187
ag9665
aS'for (i = FIDMARK - ISO_LENGTH1; (i > 0) && (IsoCheck(&beat[i], ISO_LENGTH1) == 0); --i)'
p11371
ag9704
aS'isoStart = i + (ISO_LENGTH1 - 1);'
p11372
ag9104
aS'else'
p11373
aS'isoStart = i + (ISO_LENGTH2 - 1);'
p11374
ag8980
aS'// Search forward from the R-wave to find an isoelectric region following'
p11375
aS'// the QRS complex.'
p11376
ag8980
aS'for (i = FIDMARK; (i < BEATLGTH) && (IsoCheck(&beat[i], ISO_LENGTH1) == 0); ++i)'
p11377
ag9704
aS'isoEnd = i;'
p11378
ag8980
aS'// Find the maximum and minimum slopes on the'
p11379
aS'// QRS complex.'
p11380
ag8980
aS'i = FIDMARK - BEAT_MS150;'
p11381
aS'maxSlope = maxSlope = beat[i] - beat[i - 1];'
p11382
aS'maxSlopeI = minSlopeI = i;'
p11383
ag8980
aS'for (; i < FIDMARK + BEAT_MS150; ++i)'
p11384
ag9665
aS'slope = beat[i] - beat[i - 1];'
p11385
ag2860
ag9665
aS'maxSlope = slope;'
p11386
aS'maxSlopeI = i;'
p11387
ag9104
aS'else if (slope < minSlope)'
p11388
ag9665
aS'minSlope = slope;'
p11389
aS'minSlopeI = i;'
p11390
ag9104
ag9104
ag8980
aS'// Use the smallest of max or min slope for search parameters.'
p11391
ag8980
ag3210
aS'maxSlope = -minSlope;'
p11392
aS'else'
p11393
aS'minSlope = -maxSlope;'
p11394
ag8980
ag3552
ag9665
ag8980
aS'// Search back from the maximum slope point for the QRS onset.'
p11395
ag8980
aS'for (i = maxSlopeI; (i > 0) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); --i)'
p11396
ag9704
aS'*onset = i - 1;'
p11397
ag8980
aS'// Check to see if this was just a brief inflection.'
p11398
ag8980
aS'for (; (i > *onset - INF_CHK_N) && ((beat[i] - beat[i - 1]) <= (maxSlope >> 2)); --i)'
p11399
ag9704
ag3388
ag9665
aS'for (; (i > 0) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); --i)'
p11400
ag9704
aS'*onset = i - 1;'
p11401
ag9104
aS'i = *onset + 1;'
p11402
ag8980
aS'// Check to see if a large negative slope follows an inflection.'
p11403
aS'// If so, extend the onset a little more.'
p11404
ag8980
aS'for (; (i > *onset - INF_CHK_N) && ((beat[i - 1] - beat[i]) < (maxSlope >> 2)); --i)'
p11405
ag9704
ag3423
ag9665
aS'for (; (i > 0) && ((beat[i - 1] - beat[i]) > (maxSlope >> 2)); --i)'
p11406
ag9704
aS'*onset = i - 1;'
p11407
ag9104
ag8980
aS'// Search forward from minimum slope point for QRS offset.'
p11408
ag8980
aS'for (i = minSlopeI; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); ++i)'
p11409
ag9704
aS'*offset = i;'
p11410
ag8980
aS"// Make sure this wasn't just an inflection."
p11411
ag8980
aS'for (; (i < *offset + INF_CHK_N) && ((beat[i] - beat[i - 1]) >= (minSlope >> 2)); ++i)'
p11412
ag9704
ag3458
ag9665
aS'for (; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); ++i)'
p11413
ag9704
aS'*offset = i;'
p11414
ag9104
aS'i = *offset;'
p11415
ag8980
aS'// Check to see if there is a significant upslope following'
p11416
aS'// the end of the down slope.'
p11417
ag8980
aS'for (; (i < *offset + BEAT_MS40) && ((beat[i - 1] - beat[i]) > (minSlope >> 2)); ++i)'
p11418
ag9704
ag3550
ag9665
aS'for (; (i < BEATLGTH) && ((beat[i - 1] - beat[i]) < (minSlope >> 2)); ++i)'
p11419
ag9704
aS'*offset = i;'
p11420
ag8980
aS'// One more search motivated by PVC shape in 123.'
p11421
ag8980
aS'for (; (i < *offset + BEAT_MS60) && (beat[i] - beat[i - 1] > (minSlope >> 2)); ++i)'
p11422
ag9704
ag3548
ag9665
aS'for (; (i < BEATLGTH) && (beat[i] - beat[i - 1] < (minSlope >> 2)); ++i)'
p11423
ag9704
aS'*offset = i;'
p11424
ag9104
ag9104
ag9104
ag8980
aS'else'
p11425
ag9665
ag8980
aS'// Search back from the minimum slope point for the QRS onset.'
p11426
ag8980
aS'for (i = minSlopeI; (i > 0) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); --i)'
p11427
ag9704
aS'*onset = i - 1;'
p11428
ag8980
aS'// Check to see if this was just a brief inflection.'
p11429
ag8980
aS'for (; (i > *onset - INF_CHK_N) && ((beat[i] - beat[i - 1]) >= (minSlope >> 2)); --i)'
p11430
ag9704
ag3587
ag9665
aS'for (; (i > 0) && ((beat[i] - beat[i - 1]) < (minSlope >> 2)); --i)'
p11431
ag9704
aS'*onset = i - 1;'
p11432
ag9104
aS'i = *onset + 1;'
p11433
ag8980
aS'// Check for significant positive slope after a turning point.'
p11434
ag8980
aS'for (; (i > *onset - INF_CHK_N) && ((beat[i - 1] - beat[i]) > (minSlope >> 2)); --i)'
p11435
ag9704
ag3622
ag9665
aS'for (; (i > 0) && ((beat[i - 1] - beat[i]) < (minSlope >> 2)); --i)'
p11436
ag9704
aS'*onset = i - 1;'
p11437
ag9104
ag8980
aS'// Search forward from maximum slope point for QRS offset.'
p11438
ag8980
aS'for (i = maxSlopeI; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); ++i)'
p11439
ag9704
aS'*offset = i;'
p11440
ag8980
aS'// Check to see if this was just a brief inflection.'
p11441
ag8980
aS'for (; (i < *offset + INF_CHK_N) && ((beat[i] - beat[i - 1]) <= (maxSlope >> 2)); ++i)'
p11442
ag9704
ag3657
ag9665
aS'for (; (i < BEATLGTH) && ((beat[i] - beat[i - 1]) > (maxSlope >> 2)); ++i)'
p11443
ag9704
aS'*offset = i;'
p11444
ag9104
aS'i = *offset;'
p11445
ag8980
aS'// Check to see if there is a significant downslope following'
p11446
aS'// the end of the up slope.'
p11447
ag8980
aS'for (; (i < *offset + BEAT_MS40) && ((beat[i - 1] - beat[i]) < (maxSlope >> 2)); ++i)'
p11448
ag9704
ag3692
ag9665
aS'for (; (i < BEATLGTH) && ((beat[i - 1] - beat[i]) > (maxSlope >> 2)); ++i)'
p11449
ag9704
aS'*offset = i;'
p11450
ag9104
ag9104
ag8980
aS'// If the estimate of the beginning of the isoelectric level was'
p11451
aS'// at the beginning of the beat, use the slope based QRS onset point'
p11452
aS'// as the iso electric point.'
p11453
ag8980
aS'if ((isoStart == ISO_LENGTH1 - 1) && (*onset > isoStart)) // ** 4/19 **'
p11454
aS'isoStart = *onset;'
p11455
ag8980
aS'// Otherwise, if the isoelectric start and the slope based points'
p11456
aS'// are close, use the isoelectric start point.'
p11457
ag8980
ag3718
aS'*onset = isoStart;'
p11458
ag8980
aS'// If the isoelectric end and the slope based QRS offset are close'
p11459
aS'// use the isoelectic based point.'
p11460
ag8980
ag3731
aS'*offset = isoEnd;'
p11461
ag8980
aS'*isoLevel = beat[isoStart];'
p11462
ag8980
ag8980
aS'// Find the maximum and minimum values in the QRS.'
p11463
ag8980
aS'for (i = *onset, maxV = minV = beat[*onset]; i < *offset; ++i)'
p11464
ag9665
ag3037
aS'maxV = beat[i];'
p11465
aS'else if (beat[i] < minV)'
p11466
aS'minV = beat[i];'
p11467
ag9104
aS'// If the offset is significantly below the onset and the offset is'
p11468
aS'// on a negative slope, add the next up slope to the width.'
p11469
ag8980
ag3814
ag9665
ag8980
aS'// Find the maximum slope between the finish and the end of the buffer.'
p11470
ag8980
aS'for (i = maxSlopeI = *offset, maxSlope = beat[*offset] - beat[*offset - 1];(i < *offset + BEAT_MS100) && (i < BEATLGTH); ++i)'
p11471
ag9665
aS'slope = beat[i] - beat[i - 1];'
p11472
ag3761
ag9665
aS'maxSlope = slope;'
p11473
aS'maxSlopeI = i;'
p11474
ag9104
ag9104
ag8980
aS'// Find the new offset.'
p11475
ag8980
ag3812
ag9665
aS'for (i = maxSlopeI; (i < BEATLGTH) && (beat[i] - beat[i - 1] > (maxSlope >> 1)); ++i)'
p11476
ag9704
aS'*offset = i;'
p11477
ag9104
ag9104
ag8980
aS'// Determine beginning and ending of the beat.'
p11478
aS'// Search for an isoelectric region that precedes the R-wave.'
p11479
aS'// by at least 250 ms.'
p11480
ag8980
aS'for (i = FIDMARK - BEAT_MS250;(i >= BEAT_MS80) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 0); --i)'
p11481
ag9704
aS'*beatBegin = i;'
p11482
ag8980
aS'// If there was an isoelectric section at 250 ms before the'
p11483
aS'// R-wave, search forward for the isoelectric region closest'
p11484
aS'// to the R-wave.  But leave at least 50 ms between beat begin'
p11485
aS'// and onset, or else normal beat onset is within PVC QRS complexes.'
p11486
aS'// that screws up noise estimation.'
p11487
ag8980
ag3849
ag9665
aS'for (; (i < *onset - BEAT_MS50) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 1); ++i)'
p11488
ag9704
aS'*beatBegin = i - 1;'
p11489
ag9104
ag8980
aS'// Rev 1.1'
p11490
ag3932
ag9665
aS'for (; (i < *onset) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 0); ++i)'
p11491
ag9704
ag3930
ag9665
aS'for (; (i < *onset) && (IsoCheck(&beat[i - BEAT_MS80], BEAT_MS80) == 1); ++i)'
p11492
ag9704
ag3928
aS'*beatBegin = i - 1;'
p11493
ag9104
ag9104
ag8980
aS'// Search for the end of the beat as the first isoelectric'
p11494
aS'// segment that follows the beat by at least 300 ms.'
p11495
ag8980
aS'for (i = FIDMARK + BEAT_MS300; (i < BEATLGTH) && (IsoCheck(&beat[i], BEAT_MS80) == 0); ++i)'
p11496
ag9704
aS'*beatEnd = i;'
p11497
ag8980
ag8980
aS'maxV = minV = beat[*onset];'
p11498
aS'for (i = *onset; i < *offset; ++i)'
p11499
ag9665
ag3126
aS'maxV = beat[i];'
p11500
aS'else if (beat[i] < minV)'
p11501
aS'minV = beat[i];'
p11502
ag9104
aS'*amp = maxV - minV;'
p11503
ag9104
aa(lp11504
g8980
aa(lp11505
S'/* file: ecgcodes.h\tT. Baker and G. Moody\t  June 1981'
p11506
aS'Last revised:  19 March 1992\t\tdblib 7.0'
p11507
aS'ECG annotation codes'
p11508
ag8980
aS'Copyright (C) Massachusetts Institute of Technology 1992. All rights reserved.'
p11509
aS'*/'
p11510
ag8980
aS'#ifndef db_ECGCODES_H /* avoid multiple definitions */'
p11511
aS'#define db_ECGCODES_H'
p11512
ag8980
aS'#define NOTQRS 0 /* not-QRS (not a getann/putann code) */'
p11513
aS'#define NORMAL 1 /* normal beat */'
p11514
aS'#define LBBB 2 /* left bundle branch block beat */'
p11515
aS'#define RBBB 3 /* right bundle branch block beat */'
p11516
aS'#define ABERR 4 /* aberrated atrial premature beat */'
p11517
aS'#define PVC 5 /* premature ventricular contraction */'
p11518
aS'#define FUSION 6 /* fusion of ventricular and normal beat */'
p11519
aS'#define NPC 7 /* nodal (junctional) premature beat */'
p11520
aS'#define APC 8 /* atrial premature contraction */'
p11521
aS'#define SVPB 9 /* premature or ectopic supraventricular beat */'
p11522
aS'#define VESC 10 /* ventricular escape beat */'
p11523
aS'#define NESC 11 /* nodal (junctional) escape beat */'
p11524
aS'#define PACE 12 /* paced beat */'
p11525
aS'#define UNKNOWN 13 /* unclassifiable beat */'
p11526
aS'#define NOISE 14 /* signal quality change */'
p11527
aS'#define ARFCT 16 /* isolated QRS-like artifact */'
p11528
aS'#define STCH 18 /* ST change */'
p11529
aS'#define TCH 19 /* T-wave change */'
p11530
aS'#define SYSTOLE 20 /* systole */'
p11531
aS'#define DIASTOLE 21 /* diastole */'
p11532
aS'#define NOTE 22 /* comment annotation */'
p11533
aS'#define MEASURE 23 /* measurement annotation */'
p11534
aS'#define BBB 25 /* left or right bundle branch block */'
p11535
aS'#define PACESP 26 /* non-conducted pacer spike */'
p11536
aS'#define RHYTHM 28 /* rhythm change */'
p11537
aS'#define LEARN 30 /* learning */'
p11538
aS'#define FLWAV 31 /* ventricular flutter wave */'
p11539
aS'#define VFON 32 /* start of ventricular flutter/fibrillation */'
p11540
aS'#define VFOFF 33 /* end of ventricular flutter/fibrillation */'
p11541
aS'#define AESC 34 /* atrial escape beat */'
p11542
aS'#define SVESC 35 /* supraventricular escape beat */'
p11543
aS'#define NAPC 37 /* non-conducted P-wave (blocked APB) */'
p11544
aS'#define PFUS 38 /* fusion of paced and normal beat */'
p11545
aS'#define PQ 39 /* PQ junction (beginning of QRS) */'
p11546
aS'#define JPT 40 /* J point (end of QRS) */'
p11547
aS'#define RONT 41 /* R-on-T premature ventricular contraction */'
p11548
ag8980
aS'/* ... annotation codes between RONT+1 and ACMAX inclusive are user-defined */'
p11549
ag8980
aS'#define ACMAX 49 /* value of largest valid annot code (must be < 50) */'
p11550
ag8980
aS'#endif'
p11551
aa(lp11552
S'/*****************************************************************************'
p11553
aS'FILE:  analbeat.h'
p11554
aS'AUTHOR:\tPatrick S. Hamilton'
p11555
aS'REVISED:\t12/4/2001'
p11556
aS'___________________________________________________________________________'
p11557
ag8980
aS'analbeat.h: Beat analysis prototype definition.'
p11558
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p11559
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p11560
aS'the terms of the GNU Library General Public License as published by the Free'
p11561
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p11562
aS'later version.'
p11563
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p11564
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p11565
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p11566
aS'details.'
p11567
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p11568
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p11569
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p11570
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p11571
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p11572
aS'MA 02143 USA).  For updates to this software, please visit our website'
p11573
aS'(http://www.eplimited.com).'
p11574
aS'******************************************************************************/'
p11575
ag8980
aS'// External prototypes for analbeat.cpp'
p11576
ag8980
aS'void AnalyzeBeat(int* beat, int* onset, int* offset, int* isoLevel, int* beatBegin, int* beatEnd, int* amp);'
p11577
aS'// hey yo'
p11578
aa(lp11579
S'/*****************************************************************************'
p11580
aS'FILE:  bdac.cpp'
p11581
aS'AUTHOR:\tPatrick S. Hamilton'
p11582
aS'REVISED:\t5/13/2002'
p11583
aS'___________________________________________________________________________'
p11584
ag8980
aS'bdac.cpp: Beat Detection And Classification'
p11585
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p11586
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p11587
aS'the terms of the GNU Library General Public License as published by the Free'
p11588
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p11589
aS'later version.'
p11590
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p11591
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p11592
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p11593
aS'details.'
p11594
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p11595
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p11596
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p11597
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p11598
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p11599
aS'MA 02143 USA).  For updates to this software, please visit our website'
p11600
aS'(http://www.eplimited.com).'
p11601
aS'__________________________________________________________________________'
p11602
ag8980
aS'bdac.cpp contains functions for handling Beat Detection And Classification.'
p11603
aS'The primary function calls a qrs detector.  When a beat is detected it waits'
p11604
aS'until a sufficient number of samples from the beat have occurred.  When the'
p11605
aS'beat is ready, BeatDetectAndClassify passes the beat and the timing'
p11606
aS'information on to the functions that actually classify the beat.'
p11607
ag8980
aS'Functions in bdac.cpp require functions in the following files:'
p11608
aS'qrsfilt.cpp'
p11609
aS'qrsdet.cpp'
p11610
aS'classify.cpp'
p11611
aS'rythmchk.cpp'
p11612
aS'noisechk.cpp'
p11613
aS'analbeat.cpp'
p11614
aS'match.cpp'
p11615
aS'postclas.cpp'
p11616
ag8980
aS'__________________________________________________________________________'
p11617
ag8980
aS'Revisions:'
p11618
aS'5/13/02:'
p11619
aS'Encapsulated down sampling from input stream to beat template in'
p11620
aS'the function DownSampleBeat.'
p11621
ag8980
aS'Constants related to time are derived from SAMPLE_RATE in qrsdet'
p11622
aS'and BEAT_SAMPLE_RATE in bcac.h.'
p11623
ag8980
aS'*******************************************************************************/'
p11624
aS'#include "qrsdet.h" // For base SAMPLE_RATE'
p11625
aS'#include "bdac.h"'
p11626
ag8980
aS'#define ECG_BUFFER_LENGTH 1000 // Should be long enough for a beat'
p11627
aS'// plus extra space to accommodate'
p11628
aS'// the maximum detection delay.'
p11629
aS'#define BEAT_QUE_LENGTH 10 // Length of que for beats awaiting'
p11630
aS'// classification.  Because of'
p11631
aS'// detection delays, Multiple beats'
p11632
aS'// can occur before there is enough data'
p11633
aS'// to classify the first beat in the que.'
p11634
ag8980
aS'// Internal function prototypes.'
p11635
ag8980
aS'void DownSampleBeat(int* beatOut, int* beatIn);'
p11636
ag8980
aS'// External function prototypes.'
p11637
ag8980
aS'int QRSDet(int datum, int init);'
p11638
aS'int NoiseCheck(int datum, int delay, int RR, int beatBegin, int beatEnd);'
p11639
aS'int Classify(int* newBeat, int rr, int noiseLevel, int* beatMatch, int* fidAdj, int init);'
p11640
aS'int GetDominantType(void);'
p11641
aS'int GetBeatEnd(int type);'
p11642
aS'int GetBeatBegin(int type);'
p11643
aS'int gcd(int x, int y);'
p11644
ag8980
aS'// Global Variables'
p11645
ag8980
aS'int ECGBuffer[ECG_BUFFER_LENGTH], ECGBufferIndex = 0; // Circular data buffer.'
p11646
aS'int BeatBuffer[BEATLGTH];'
p11647
aS'int BeatQue[BEAT_QUE_LENGTH], BeatQueCount = 0; // Buffer of detection delays.'
p11648
aS'int RRCount = 0;'
p11649
aS'int InitBeatFlag = 1;'
p11650
ag8980
aS'/******************************************************************************'
p11651
aS'ResetBDAC() resets static variables required for beat detection and'
p11652
aS'classification.'
p11653
aS'*******************************************************************************/'
p11654
ag8980
aS'void ResetBDAC(void)'
p11655
ag9665
aS'int dummy;'
p11656
aS'QRSDet(0, 1); // Reset the qrs detector'
p11657
aS'RRCount = 0;'
p11658
aS'Classify(BeatBuffer, 0, 0, &dummy, &dummy, 1);'
p11659
aS'InitBeatFlag = 1;'
p11660
aS'BeatQueCount = 0; // Flush the beat que.'
p11661
ag9104
ag8980
aS'/*****************************************************************************'
p11662
aS'Syntax:'
p11663
aS'int BeatDetectAndClassify(int ecgSample, int *beatType, *beatMatch) ;'
p11664
ag8980
aS'Description:'
p11665
aS'BeatDetectAndClassify() implements a beat detector and classifier.'
p11666
aS'ECG samples are passed into BeatDetectAndClassify() one sample at a'
p11667
aS'time.  BeatDetectAndClassify has been designed for a sample rate of'
p11668
aS'200 Hz.  When a beat has been detected and classified the detection'
p11669
aS'delay is returned and the beat classification is returned through the'
p11670
aS'pointer *beatType.  For use in debugging, the number of the template'
p11671
aS'that the beat was matched to is returned in via *beatMatch.'
p11672
ag8980
aS'Returns'
p11673
aS'BeatDetectAndClassify() returns 0 if no new beat has been detected and'
p11674
aS'classified.  If a beat has been classified, BeatDetectAndClassify returns'
p11675
aS'the number of samples since the approximate location of the R-wave.'
p11676
ag8980
aS'****************************************************************************/'
p11677
ag8980
aS'int BeatDetectAndClassify(int ecgSample, int* beatType, int* beatMatch)'
p11678
ag9665
aS'int detectDelay, rr, i, j;'
p11679
aS'int noiseEst = 0, beatBegin, beatEnd;'
p11680
aS'int domType;'
p11681
aS'int fidAdj;'
p11682
aS'int tempBeat[(SAMPLE_RATE / BEAT_SAMPLE_RATE) * BEATLGTH];'
p11683
ag8980
aS'// Store new sample in the circular buffer.'
p11684
ag8980
aS'ECGBuffer[ECGBufferIndex] = ecgSample;'
p11685
ag4043
aS'ECGBufferIndex = 0;'
p11686
ag8980
aS'// Increment RRInterval count.'
p11687
ag8980
aS'++RRCount;'
p11688
ag8980
aS'// Increment detection delays for any beats in the que.'
p11689
ag8980
aS'for (i = 0; i < BeatQueCount; ++i)'
p11690
aS'++BeatQue[i];'
p11691
ag8980
aS'// Run the sample through the QRS detector.'
p11692
ag8980
aS'detectDelay = QRSDet(ecgSample, 0);'
p11693
ag4056
ag9665
aS'BeatQue[BeatQueCount] = detectDelay;'
p11694
aS'++BeatQueCount;'
p11695
ag9104
ag8980
aS'// Return if no beat is ready for classification.'
p11696
ag8980
ag4069
aS'|| (BeatQueCount == 0))'
p11697
ag9665
aS'NoiseCheck(ecgSample, 0, rr, beatBegin, beatEnd); // Update noise check buffer'
p11698
aS'return 0;'
p11699
ag9104
ag8980
aS'// Otherwise classify the beat at the head of the que.'
p11700
ag8980
aS'rr = RRCount - BeatQue[0]; // Calculate the R-to-R interval'
p11701
aS'detectDelay = RRCount = BeatQue[0];'
p11702
ag8980
aS'// Estimate low frequency noise in the beat.'
p11703
aS'// Might want to move this into classify().'
p11704
ag8980
aS'domType = GetDominantType();'
p11705
ag4092
ag9665
aS'beatBegin = MS250;'
p11706
aS'beatEnd = MS300;'
p11707
ag9104
aS'else'
p11708
ag9665
aS'beatBegin = (SAMPLE_RATE / BEAT_SAMPLE_RATE) * (FIDMARK - GetBeatBegin(domType));'
p11709
aS'beatEnd = (SAMPLE_RATE / BEAT_SAMPLE_RATE) * (GetBeatEnd(domType) - FIDMARK);'
p11710
ag9104
aS'noiseEst = NoiseCheck(ecgSample, detectDelay, rr, beatBegin, beatEnd);'
p11711
ag8980
aS'// Copy the beat from the circular buffer to the beat buffer'
p11712
aS'// and reduce the sample rate by averageing pairs of data'
p11713
aS'// points.'
p11714
ag8980
aS'j = ECGBufferIndex - detectDelay - (SAMPLE_RATE / BEAT_SAMPLE_RATE) * FIDMARK;'
p11715
ag4105
aS'j += ECG_BUFFER_LENGTH;'
p11716
ag8980
aS'for (i = 0; i < (SAMPLE_RATE / BEAT_SAMPLE_RATE) * BEATLGTH; ++i)'
p11717
ag9665
aS'tempBeat[i] = ECGBuffer[j];'
p11718
ag3992
aS'j = 0;'
p11719
ag9104
ag8980
aS'DownSampleBeat(BeatBuffer, tempBeat);'
p11720
ag8980
aS'// Update the QUE.'
p11721
ag8980
aS'for (i = 0; i < BeatQueCount - 1; ++i)'
p11722
aS'BeatQue[i] = BeatQue[i + 1];'
p11723
aS'--BeatQueCount;'
p11724
ag8980
ag8980
aS'// Skip the first beat.'
p11725
ag8980
ag4118
ag9665
aS'InitBeatFlag = 0;'
p11726
aS'*beatType = 13;'
p11727
aS'*beatMatch = 0;'
p11728
aS'fidAdj = 0;'
p11729
ag9104
ag8980
aS'// Classify all other beats.'
p11730
ag8980
aS'else'
p11731
ag9665
aS'*beatType = Classify(BeatBuffer, rr, noiseEst, beatMatch, &fidAdj, 0);'
p11732
aS'fidAdj *= SAMPLE_RATE / BEAT_SAMPLE_RATE;'
p11733
ag9104
ag8980
aS'// Ignore detection if the classifier decides that this'
p11734
aS'// was the trailing edge of a PVC.'
p11735
ag8980
ag4131
ag9665
aS'RRCount += rr;'
p11736
aS'return (0);'
p11737
ag9104
ag8980
aS'// Limit the fiducial mark adjustment in case of problems with'
p11738
aS'// beat onset and offset estimation.'
p11739
ag8980
ag4154
aS'fidAdj = MS80;'
p11740
aS'else if (fidAdj < -MS80)'
p11741
aS'fidAdj = -MS80;'
p11742
ag8980
aS'return (detectDelay - fidAdj);'
p11743
ag9104
ag8980
aS'void DownSampleBeat(int* beatOut, int* beatIn)'
p11744
ag9665
aS'int i;'
p11745
ag8980
aS'for (i = 0; i < BEATLGTH; ++i)'
p11746
aS'beatOut[i] = (beatIn[i << 1] + beatIn[(i << 1) + 1]) >> 1;'
p11747
ag9104
aa(lp11748
S'/*****************************************************************************'
p11749
aS'FILE:  qrsfilt.cpp'
p11750
aS'AUTHOR:\tPatrick S. Hamilton'
p11751
aS'REVISED:\t5/13/2002'
p11752
aS'___________________________________________________________________________'
p11753
ag8980
aS'qrsfilt.cpp filter functions to aid beat detecton in electrocardiograms.'
p11754
aS'Copywrite (C) 2000 Patrick S. Hamilton'
p11755
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p11756
aS'the terms of the GNU Library General Public License as published by the Free'
p11757
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p11758
aS'later version.'
p11759
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p11760
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p11761
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p11762
aS'details.'
p11763
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p11764
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p11765
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p11766
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p11767
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p11768
aS'MA 02143 USA).  For updates to this software, please visit our website'
p11769
aS'(http://www.eplimited.com).'
p11770
aS'__________________________________________________________________________'
p11771
ag8980
aS'This file includes QRSFilt() and associated filtering files used for QRS'
p11772
aS'detection.  Only QRSFilt() and deriv1() are called by the QRS detector'
p11773
aS'other functions can be hidden.'
p11774
ag8980
aS'Revisions:'
p11775
aS'5/13: Filter implementations have been modified to allow simplified'
p11776
aS'modification for different sample rates.'
p11777
ag8980
aS'*******************************************************************************/'
p11778
ag8980
aS'#include <math.h>'
p11779
aS'#include "qrsdet.h"'
p11780
ag8980
aS'// Local Prototypes.'
p11781
ag8980
aS'int lpfilt(int datum, int init);'
p11782
aS'int hpfilt(int datum, int init);'
p11783
aS'int deriv1(int x0, int init);'
p11784
aS'int deriv2(int x0, int init);'
p11785
aS'int mvwint(int datum, int init);'
p11786
ag8980
aS'/******************************************************************************'
p11787
aS'* Syntax:'
p11788
aS'*\tint QRSFilter(int datum, int init) ;'
p11789
aS'* Description:'
p11790
aS'*\tQRSFilter() takes samples of an ECG signal as input and returns a sample of'
p11791
aS'*\ta signal that is an estimate of the local energy in the QRS bandwidth.  In'
p11792
aS'*\tother words, the signal has a lump in it whenever a QRS complex, or QRS'
p11793
aS'*\tcomplex like artifact occurs.  The filters were originally designed for data'
p11794
aS'*  sampled at 200 samples per second, but they work nearly as well at sample'
p11795
aS'*\tfrequencies from 150 to 250 samples per second.'
p11796
aS'*'
p11797
aS'*\tThe filter buffers and static variables are reset if a value other than'
p11798
aS'*\t0 is passed to QRSFilter through init.'
p11799
aS'*******************************************************************************/'
p11800
ag8980
aS'int QRSFilter(int datum, int init)'
p11801
ag9665
aS'int fdatum;'
p11802
ag8980
ag4208
ag9665
aS'hpfilt(0, 1); // Initialize filters.'
p11803
aS'lpfilt(0, 1);'
p11804
aS'mvwint(0, 1);'
p11805
aS'deriv1(0, 1);'
p11806
aS'deriv2(0, 1);'
p11807
ag9104
ag8980
aS'fdatum = lpfilt(datum, 0); // Low pass filter data.'
p11808
aS'fdatum = hpfilt(fdatum, 0); // High pass filter data.'
p11809
aS'fdatum = deriv2(fdatum, 0); // Take the derivative.'
p11810
aS'fdatum = abs(fdatum); // Take the absolute value.'
p11811
aS'fdatum = mvwint(fdatum, 0); // Average over an 80 ms window .'
p11812
aS'return (fdatum);'
p11813
ag9104
ag8980
ag8980
aS'/*************************************************************************'
p11814
aS'*  lpfilt() implements the digital filter represented by the difference'
p11815
aS'*  equation:'
p11816
ag11797
aS'* \ty[n] = 2*y[n-1] - y[n-2] + x[n] - 2*x[t-24 ms] + x[t-48 ms]'
p11817
ag11797
aS'*\tNote that the filter delay is (LPBUFFER_LGTH/2)-1'
p11818
ag11797
aS'**************************************************************************/'
p11819
ag8980
aS'int lpfilt(int datum, int init)'
p11820
ag9665
aS'static long y1 = 0, y2 = 0;'
p11821
aS'static int data[LPBUFFER_LGTH], ptr = 0;'
p11822
aS'long y0;'
p11823
aS'int output, halfPtr;'
p11824
ag4252
ag9665
aS'for (ptr = 0; ptr < LPBUFFER_LGTH; ++ptr)'
p11825
aS'data[ptr] = 0;'
p11826
aS'y1 = y2 = 0;'
p11827
aS'ptr = 0;'
p11828
ag9104
aS'halfPtr = ptr - (LPBUFFER_LGTH / 2); // Use halfPtr to index'
p11829
aS'if (halfPtr < 0) // to x[n-6].'
p11830
aS'halfPtr += LPBUFFER_LGTH;'
p11831
aS'y0 = (y1 << 1) - y2 + datum - (data[halfPtr] << 1) + data[ptr];'
p11832
aS'y2 = y1;'
p11833
aS'y1 = y0;'
p11834
aS'output = y0 / ((LPBUFFER_LGTH * LPBUFFER_LGTH) / 4);'
p11835
aS'data[ptr] = datum; // Stick most recent sample into'
p11836
aS'if (++ptr == LPBUFFER_LGTH) // the circular buffer and update'
p11837
aS'ptr = 0; // the buffer pointer.'
p11838
aS'return (output);'
p11839
ag9104
ag8980
aS'int testfunction()'
p11840
ag9665
aS'for (int i = 0; i < 8; i++)'
p11841
ag9665
aS'asdf = 0'
p11842
ag9104
ag9104
aS'/******************************************************************************'
p11843
aS'*  hpfilt() implements the high pass filter represented by the following'
p11844
aS'*  difference equation:'
p11845
ag11797
aS'*\ty[n] = y[n-1] + x[n] - x[n-128 ms]'
p11846
aS'*\tz[n] = x[n-64 ms] - y[n] ;'
p11847
ag11797
aS'*  Filter delay is (HPBUFFER_LGTH-1)/2'
p11848
aS'******************************************************************************/'
p11849
ag8980
aS'int hpfilt(int datum, int init)'
p11850
ag9665
aS'static long y = 0;'
p11851
aS'static int data[HPBUFFER_LGTH], ptr = 0;'
p11852
aS'int z, halfPtr;'
p11853
ag8980
ag4353
ag9665
aS'for (ptr = 0; ptr < HPBUFFER_LGTH; ++ptr)'
p11854
aS'data[ptr] = 0;'
p11855
aS'ptr = 0;'
p11856
aS'y = 0;'
p11857
ag9104
ag8980
aS'y += datum - data[ptr];'
p11858
aS'halfPtr = ptr - (HPBUFFER_LGTH / 2);'
p11859
ag4366
aS'halfPtr += HPBUFFER_LGTH;'
p11860
aS'z = data[halfPtr] - (y / HPBUFFER_LGTH);'
p11861
ag8980
aS'data[ptr] = datum;'
p11862
ag4379
aS'ptr = 0;'
p11863
ag8980
aS'return (z);'
p11864
ag9104
ag8980
aS'/*****************************************************************************'
p11865
aS'*  deriv1 and deriv2 implement derivative approximations represented by'
p11866
aS'*  the difference equation:'
p11867
ag11797
aS'*\ty[n] = x[n] - x[n - 10ms]'
p11868
ag11797
aS'*  Filter delay is DERIV_LENGTH/2'
p11869
aS'*****************************************************************************/'
p11870
ag8980
aS'int deriv1(int x, int init)'
p11871
ag9665
aS'static int derBuff[DERIV_LENGTH], derI = 0;'
p11872
aS'int y;'
p11873
ag8980
ag4423
ag9665
aS'for (derI = 0; derI < DERIV_LENGTH; ++derI)'
p11874
aS'derBuff[derI] = 0;'
p11875
aS'derI = 0;'
p11876
aS'return (0);'
p11877
ag9104
ag8980
aS'y = x - derBuff[derI];'
p11878
aS'derBuff[derI] = x;'
p11879
ag4436
aS'derI = 0;'
p11880
aS'return (y);'
p11881
ag9104
ag8980
aS'int deriv2(int x, int init)'
p11882
ag9665
aS'static int derBuff[DERIV_LENGTH], derI = 0;'
p11883
aS'int y;'
p11884
ag8980
ag4480
ag9665
aS'for (derI = 0; derI < DERIV_LENGTH; ++derI)'
p11885
aS'derBuff[derI] = 0;'
p11886
aS'derI = 0;'
p11887
aS'return (0);'
p11888
ag9104
ag8980
aS'y = x - derBuff[derI];'
p11889
aS'derBuff[derI] = x;'
p11890
ag4493
aS'derI = 0;'
p11891
aS'return (y);'
p11892
ag9104
ag8980
ag8980
aS'/*****************************************************************************'
p11893
aS'* mvwint() implements a moving window integrator.  Actually, mvwint() averages'
p11894
aS'* the signal values over the last WINDOW_WIDTH samples.'
p11895
aS'*****************************************************************************/'
p11896
ag8980
aS'int mvwint(int datum, int init)'
p11897
ag9665
aS'static long sum = 0;'
p11898
aS'static int data[WINDOW_WIDTH], ptr = 0;'
p11899
aS'int output;'
p11900
ag4537
ag9665
aS'for (ptr = 0; ptr < WINDOW_WIDTH; ++ptr)'
p11901
aS'data[ptr] = 0;'
p11902
aS'sum = 0;'
p11903
aS'ptr = 0;'
p11904
ag9104
aS'sum += datum;'
p11905
aS'sum -= data[ptr];'
p11906
aS'data[ptr] = datum;'
p11907
ag4550
aS'ptr = 0;'
p11908
ag4573
aS'output = 32000;'
p11909
aS'else'
p11910
aS'output = sum / WINDOW_WIDTH;'
p11911
aS'return (output);'
p11912
ag9104
aa(lp11913
S'/* file: bxb.c\t\tG. Moody\t14 December 1987'
p11914
aS'Revised:\t 7 November 2001'
p11915
aS'Revised: 5/13/2002 -- Patrick Hamilton'
p11916
ag8980
aS'-------------------------------------------------------------------------------'
p11917
aS'bxb: ANSI/AAMI-standard beat-by-beat annotation file comparator'
p11918
aS'Copyright (C) 2001 George B. Moody'
p11919
ag8980
aS'This program is free software; you can redistribute it and/or modify it under'
p11920
aS'the terms of the GNU General Public License as published by the Free Software'
p11921
aS'Foundation; either version 2 of the License, or (at your option) any later'
p11922
aS'version.'
p11923
ag8980
aS'This program is distributed in the hope that it will be useful, but WITHOUT ANY'
p11924
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p11925
aS'PARTICULAR PURPOSE.  See the GNU General Public License for more details.'
p11926
ag8980
aS'You should have received a copy of the GNU General Public License along with'
p11927
aS'this program; if not, write to the Free Software Foundation, Inc., 59 Temple'
p11928
aS'Place - Suite 330, Boston, MA 02111-1307, USA.'
p11929
ag8980
aS'You may contact the author by e-mail (george@mit.edu) or postal mail'
p11930
aS'(MIT Room E25-505A, Cambridge, MA 02139 USA).  For updates to this software,'
p11931
aS'please visit PhysioNet (http://www.physionet.org/).'
p11932
aS'_______________________________________________________________________________'
p11933
ag8980
aS'This program implements the beat-by-beat comparison algorithms described in'
p11934
aS'AAMI/ANSI EC38:1998, the American National Standard for ambulatory ECGs, and'
p11935
aS'in AAMI EC57:1998, the American National Standard for Testing and Reporting'
p11936
aS'Performance Results of Cardiac Rhythm and ST Segment Measurement Algorithms.'
p11937
aS'These standards are available from AAMI, 1110 N Glebe Road, Suite 220,'
p11938
aS'Arlington, VA 22201 USA (http://www.aami.org/).'
p11939
ag8980
aS'The -f, -O, -t, and -w options modify the comparison algorithm used by bxb in'
p11940
aS'ways not permitted by EC38:1998 or EC57:1998.  These options are provided for'
p11941
aS'the use of developers, who may find them useful for obtaining a more detailed'
p11942
aS'understanding of algorithm errors.'
p11943
ag8980
aS'This version of bxb.cpp has been modified to run without command line input,'
p11944
aS'batch comparing .ate annotations to .atr annotations for MIT/BIH database'
p11945
aS'or AHA database files.  The test maticies are stored in "testrpt.txt".  The'
p11946
aS'Record #, QRS TP, QRS FN, QRS FP, PVC TP, PVC FN, and PVC FP are stored in'
p11947
aS'the file "adstat.txt".'
p11948
ag8980
aS'*/'
p11949
ag8980
aS'#define MITDB // Comment out to batch run AHA data instead of MIT/BIH data.'
p11950
aS'#ifdef MITDB'
p11951
aS'#define ECG_DB_PATH "C:\\\\MITDB\\\\" // MIT/BIH database directory.'
p11952
aS'#define REC_COUNT 48'
p11953
aS'int Records[REC_COUNT] = { 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114,'
p11954
aS'115, 116, 117, 118, 119, 121, 122, 123, 124, 200, 201, 202, 203, 205, 207, 208, 209, 210, 212,'
p11955
aS'213, 214, 215, 217, 219, 220, 221, 222, 223, 228, 230, 231, 232, 233, 234 };'
p11956
aS'#else'
p11957
aS'#define ECG_DB_PATH "C:\\\\AHADAT~1\\\\" // AHA database directory'
p11958
aS'#define REC_COUNT 69'
p11959
aS'int Records[REC_COUNT] = { 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 2201, 2203,'
p11960
aS'2204, 2205, 2206, 2207, 2208, 2209, 2210, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209,'
p11961
aS'3210, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 5201, 5202, 5203, 5204, 5205,'
p11962
aS'5206, 5207, 5208, 5209, 5210, 6201, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 7201,'
p11963
aS'7202, 7203, 7204, 7205, 7206, 7207, 7208, 7209, 7210 };'
p11964
aS'#endif'
p11965
ag8980
aS'#include <stdio.h>'
p11966
aS'#include <stdlib.h> // For exit.'
p11967
aS'#include <math.h> /* for declaration of sqrt() */'
p11968
aS'#ifndef BSD'
p11969
aS'#include <string.h>'
p11970
aS'#else'
p11971
aS'#include <strings.h>'
p11972
aS'#endif'
p11973
aS'#ifndef __STDC__'
p11974
aS'extern void exit();'
p11975
aS'#endif'
p11976
ag8980
aS'#include "wfdb.h"'
p11977
aS'#define map1'
p11978
aS'#define map2'
p11979
aS'#define ammap'
p11980
aS'#define mamap'
p11981
aS'#define annpos'
p11982
aS'#include "ecgmap.h"'
p11983
ag8980
aS'#define abs(A) ((A) >= 0 ? (A) : -(A))'
p11984
ag8980
aS'// Local Prototypes.'
p11985
ag8980
aS'void NewInit(void);'
p11986
aS'int rpann(long t);'
p11987
aS'int tpann(long t);'
p11988
aS'void pair(int ref, int test);'
p11989
aS'void print_results(int fflag);'
p11990
aS'int amap(int a);'
p11991
aS'char* prog_name(char* s);'
p11992
aS'void pstat(char* s, char* f, long a, long b);'
p11993
aS'void sstat(char* s, char* f, long a, long b);'
p11994
aS'void NewPrintResults(void);'
p11995
ag8980
aS'// Global Variables'
p11996
ag8980
aS'char* pname; /* name by which this program was invoked */'
p11997
aS'int A, Aprime; /* types of the current & next reference annotations */'
p11998
aS'int a, aprime; /* types of the current & next test annotations */'
p11999
aS'int fflag = 3; /* report format (0: none; 1: compressed; 2: line;'
p12000
aS'3: standard; 4: compressed with SVEB;  5: line'
p12001
aS'with SVEB;  6: standard with SVEB) */'
p12002
aS'int match_dt = 0; /* match window duration in samples */'
p12003
aS'int Oflag = 0; /* if non-zero, produce an extended annotation file */'
p12004
aS"long shut_down; /* duration of test annotator's shutdown */"
p12005
aS'long start; /* time of the beginning of the test period */'
p12006
aS'long end_time; /* end of the test period (-1: end of reference annot'
p12007
aS'file; 0: end of either annot file) */'
p12008
aS'long huge_time = 0x7FFFFFFF; /* largest possible time */'
p12009
aS'long T, Tprime; /* times of the current & next reference annotations */'
p12010
aS'long t, tprime; /* times of the current & next test annotations */'
p12011
aS'char record[20]; /* record name */'
p12012
ag8980
ag8980
aS'void main()'
p12013
ag9665
aS'void genxcmp(), getref(), gettest(), init();'
p12014
aS'int recNum;'
p12015
ag8980
aS'/* Read and interpret command-line arguments. */'
p12016
ag8980
aS'// init(argc, argv);'
p12017
ag8980
aS'for (recNum = 0; recNum < REC_COUNT; ++recNum)'
p12018
ag9665
aS'sprintf(record, "%d", Records[recNum]);'
p12019
aS'printf("%s\\n", record);'
p12020
aS'NewInit();'
p12021
ag8980
ag8980
aS'/* Set A and T to the type and time of the first reference annotation after'
p12022
aS'the end of the learning period. */'
p12023
aS'do'
p12024
ag9665
aS'getref();'
p12025
aS'} while (T < start);'
p12026
ag8980
aS'/* Set aprime and tprime to the type and time of the first test annotation'
p12027
aS'after the end of the learning period, and a and t to the type and time'
p12028
aS'of the last test annotation in the learning period. */'
p12029
aS'do'
p12030
ag9665
aS'gettest();'
p12031
aS'} while (tprime < start);'
p12032
ag8980
aS'/* If an extended output annotation file was requested, produce it and'
p12033
aS'exit. */'
p12034
ag4718
ag9665
aS'genxcmp();'
p12035
aS'wfdbquit(); //**'
p12036
aS'exit(0);'
p12037
ag9104
ag8980
aS'/* If t matches the first reference annotation, count it and get the next'
p12038
aS'annotation from each file.  (Since T >= start and t < start, T-t must be'
p12039
aS'positive.) */'
p12040
ag8980
ag4744
ag9665
ag4742
aS'pair(A, a);'
p12041
aS'getref();'
p12042
aS'gettest();'
p12043
ag9104
ag8980
aS'/* If there is a test annotation within an interval equal to the match'
p12044
aS'window following the beginning of the test period, and there is no'
p12045
aS'match, go on to the next test annotation without counting the first'
p12046
aS'one. */'
p12047
ag8980
aS'else'
p12048
ag9665
aS'gettest();'
p12049
ag4757
aS'gettest();'
p12050
ag9104
ag8980
aS'/* Peform the comparison.  Each time through the loop below, a beat label'
p12051
aS'pair is identified and counted (or else a non-beat annotation is'
p12052
aS'discarded), and an annotation is read from each file from which an'
p12053
aS'annotation was paired or discarded.  Note that only one of the four'
p12054
aS'numbered actions is performed on each iteration.'
p12055
ag8980
aS'The complex loop termination condition is dependent on end_time, which'
p12056
aS'is not changed during execution of the loop.  There are three ways the'
p12057
aS'loop termination condition can be satisfied:'
p12058
aS'- If the length of the comparison is known, either because it was'
p12059
aS"specified using the `-t' option or because the header file specifies"
p12060
aS'the record length, the loop ends when both T and t are greater than'
p12061
aS'end_time.  This is the usual case.'
p12062
aS'- If the length of the comparison is unknown (end_time = -1), the loop'
p12063
aS'ends when EOF is reached in the reference annotation file (T ='
p12064
aS'huge_time).'
p12065
aS"- If the option `-t 0' was specified (end_time = 0), the loop ends when"
p12066
aS'EOF is first reached in either annotation file (T or t = huge_time).'
p12067
aS'*/'
p12068
aS'while ((end_time > 0L && (T <= end_time || t <= end_time))|| (end_time == -1L && T != huge_time)|| (end_time == 0L && T != huge_time && t != huge_time))'
p12069
ag9665
ag4690
aS'{ /* test annotation is earliest */'
p12070
aS'/* (1) If t is within the match window, and is a better match than'
p12071
aS'the next test annotation, pair it. */'
p12072
ag4665
ag9665
aS'pair(A, a);'
p12073
aS'getref();'
p12074
aS'gettest();'
p12075
ag9104
aS'/* (2) There is no match to the test annotation, so pair it with a'
p12076
aS'pseudo-beat annotation and get the next one. */'
p12077
aS'else'
p12078
ag9665
aS'pair(rpann(t), a);'
p12079
aS'gettest();'
p12080
ag9104
ag9104
aS'else'
p12081
aS'{ /* reference annotation is earliest */'
p12082
aS'/* (3) If T is within the match window, and is a better match than'
p12083
aS'the next reference annotation, pair it. */'
p12084
ag4688
ag9665
aS'pair(A, a);'
p12085
aS'gettest();'
p12086
aS'getref();'
p12087
ag9104
aS'/* (4) There is no match to the reference annotation, so pair it'
p12088
aS'with a pseudo-beat annotation and get the next one. */'
p12089
aS'else'
p12090
ag9665
aS'pair(A, tpann(T));'
p12091
aS'getref();'
p12092
ag9104
ag9104
ag9104
ag8980
aS'shut_down /= strtim("1"); /* convert from samples to seconds */'
p12093
ag8980
aS'/* Generate output. */'
p12094
aS'print_results(fflag);'
p12095
aS'NewPrintResults();'
p12096
ag8980
aS'wfdbquit(); /* close input files */'
p12097
ag9104
aS'exit(0); /*NOTREACHED*/'
p12098
ag9104
ag8980
aS'/* getref() and gettest() read the next beat annotations from their respective'
p12099
aS'files. */'
p12100
ag8980
ag8980
aS'struct WFDB_anninfo an[3];'
p12101
aS'unsigned int oflag = 0; /* if non-zero, produce an output annotation file */'
p12102
aS'long RR; /* reference RR interval, if non-zero */'
p12103
aS'long sdonref = -1L; /* start of reference shutdown */'
p12104
aS'long sdoffref = -1L; /* end of reference shutdown */'
p12105
aS'long vfonref = -1L; /* start of reference VF */'
p12106
aS'long vfoffref = -1L; /* end of reference VF */'
p12107
aS'long psdonref = -1L; /* start of previous reference shutdown */'
p12108
aS'long psdoffref = -1L; /* end of previous reference shutdown */'
p12109
aS'long pvfonref = -1L; /* start of previous reference VF */'
p12110
aS'long pvfoffref = -1L; /* end of previous reference VF */'
p12111
aS'struct WFDB_ann ref_annot;'
p12112
ag8980
aS'void getref() /* get next reference beat annotation */'
p12113
ag9665
aS'static long TT; /* time of previous reference beat annotation */'
p12114
aS'static struct WFDB_ann annot;'
p12115
ag8980
aS'TT = T;'
p12116
aS'T = Tprime;'
p12117
aS'A = Aprime;'
p12118
ag8980
aS'/* T-TT is not a valid RR interval if T is the time of the first beat,'
p12119
aS'if TT is the time of the last beat, or if a period of VF or shutdown'
p12120
aS'occurs between TT and T. */'
p12121
ag4986
aS'RR = 0L;'
p12122
aS'else'
p12123
aS'RR = T - TT;'
p12124
ag8980
ag4999
aS'ref_annot = annot;'
p12125
ag8980
aS'/* Read reference annotations until a beat annotation is read, or EOF.'
p12126
aS'If an expanded output annotation file is required, all annotations'
p12127
aS'are treated as if they were beat annotations. */'
p12128
aS'while (getann(0, &annot) == 0)'
p12129
ag9665
ag4802
aS'{ /* beat annotation */'
p12130
aS'Tprime = annot.time;'
p12131
aS'Aprime = amap(annot.anntyp);'
p12132
aS'return;'
p12133
ag9104
ag8980
aS'/* Shutdown occurs when neither signal is readable;  the beginning of'
p12134
aS'shutdown is indicated by a NOISE annotation in which bits 4 and 5'
p12135
aS'of the subtyp field are set, and the end of shutdown is indicated'
p12136
aS"by a NOISE annotation with any value of `subtyp' for which at least"
p12137
aS'one of bits 4 and 5 is zero.  In AHA DB reference annotation files,'
p12138
aS'shutdown is indicated by a single shutdown annotation placed roughly'
p12139
aS'in the middle of the shutdown interval;  in this case, shutdown is'
p12140
aS'assumed to begin match_dt samples after the previous beat annotation'
p12141
aS'or VFOFF annotation, and is assumed to end match_dt samples before'
p12142
aS'the next annotation.'
p12143
aS'*/'
p12144
ag4900
ag9665
ag4898
ag9665
aS'psdonref = sdonref;'
p12145
aS'psdoffref = sdoffref;'
p12146
aS'sdonref = annot.time;'
p12147
aS'/* Read next annotation, which should mark end of shutdown. */'
p12148
ag4837
aS'{ /* EOF before end of shutdown */'
p12149
aS'Tprime = sdoffref = huge_time;'
p12150
aS"Aprime = '*';"
p12151
aS'return;'
p12152
ag9104
ag4860
aS'sdoffref = annot.time;'
p12153
aS'else'
p12154
ag9665
ag4883
aS'sdonref = vfoffref + match_dt;'
p12155
aS'else'
p12156
aS'sdonref = T + match_dt;'
p12157
aS'sdoffref = annot.time - match_dt;'
p12158
ag4896
aS'sdonref = sdoffref;'
p12159
aS'(void)ungetann(0, &annot);'
p12160
ag9104
ag9104
ag9104
ag8980
aS'/* The beginning of ventricular fibrillation is indicated by a VFON'
p12161
aS'annotation, and its end by a VFOFF annotation;  any annotations'
p12162
aS'between VFON and VFOFF are read and ignored. */'
p12163
ag4948
ag9665
aS'pvfonref = vfonref;'
p12164
aS'pvfoffref = vfoffref;'
p12165
aS'vfonref = annot.time;'
p12166
aS'/* Read additional annotations, until end of VF or EOF. */'
p12167
aS'do'
p12168
ag9665
ag4931
aS'{ /* EOF before end of VF */'
p12169
aS'Tprime = huge_time;'
p12170
aS"Aprime = '*';"
p12171
aS'return;'
p12172
ag9104
aS'// stuff'
p12173
aS'} while (annot.anntyp != VFOFF);'
p12174
aS'vfoffref = annot.time;'
p12175
ag9104
ag9104
aS'/* When this statement is reached, there are no more annotations in the'
p12176
aS'reference annotation file. */'
p12177
aS'Tprime = huge_time;'
p12178
aS"Aprime = '*';"
p12179
ag9104
ag8980
aS'long rr; /* test RR interval, if non-zero */'
p12180
aS'long sdontest = -1L; /* start of test shutdown */'
p12181
aS'long sdofftest = -1L; /* end of test shutdown */'
p12182
aS'long vfontest = -1L; /* start of test VF */'
p12183
aS'long vfofftest = -1L; /* end of test VF */'
p12184
aS'long psdontest = -1L; /* start of previous test shutdown */'
p12185
aS'long psdofftest = -1L; /* end of previous test shutdown */'
p12186
aS'long pvfontest = -1L; /* start of previous test VF */'
p12187
aS'long pvfofftest = -1L; /* end of previous test VF */'
p12188
aS'struct WFDB_ann test_annot;'
p12189
ag8980
aS'void gettest() /* get next test annotation */'
p12190
ag9665
aS'static long tt; /* time of previous test beat annotation */'
p12191
aS'static struct WFDB_ann annot;'
p12192
ag8980
aS'tt = t;'
p12193
aS't = tprime;'
p12194
aS'a = aprime;'
p12195
ag8980
aS'/* See comments on the similar code in getref(), above. */'
p12196
ag5222
aS'|| (tt <= sdontest && sdontest < t) || (tt <= pvfontest && pvfontest < t)'
p12197
aS'|| (tt <= psdontest && psdontest < t))'
p12198
aS'rr = 0L;'
p12199
aS'else'
p12200
aS'rr = t - tt;'
p12201
ag8980
ag5235
aS'test_annot = annot;'
p12202
ag8980
aS'while (getann(1, &annot) == 0)'
p12203
ag9665
ag5028
ag9665
aS'tprime = annot.time;'
p12204
aS'aprime = amap(annot.anntyp);'
p12205
aS'return;'
p12206
ag9104
ag5194
ag9665
ag5147
ag9665
aS'psdontest = sdontest;'
p12207
aS'psdofftest = sdofftest;'
p12208
aS'sdontest = annot.time;'
p12209
ag5086
ag9665
aS'tprime = huge_time;'
p12210
aS"aprime = '*';"
p12211
ag5084
aS'shut_down += end_time - sdontest;'
p12212
aS'else'
p12213
ag9665
aS'(void)fprintf(stderr,'
p12214
aS'"%s: unterminated shutdown starting at %s in record %s, annotator %s\\n",'
p12215
aS'pname, timstr(sdontest), record, an[1].name);'
p12216
aS'(void)fprintf(stderr, " (not included in shutdown duration measurement)\\n");'
p12217
ag9104
aS'return;'
p12218
ag9104
ag5109
aS'sdofftest = annot.time;'
p12219
aS'else'
p12220
ag9665
ag5132
aS'sdontest = vfofftest + match_dt;'
p12221
aS'else'
p12222
aS'sdontest = t + match_dt;'
p12223
aS'sdofftest = annot.time - match_dt;'
p12224
ag5145
aS'sdontest = sdofftest;'
p12225
aS'(void)ungetann(0, &annot);'
p12226
ag9104
aS'/* update shutdown duration tally */'
p12227
aS'shut_down += sdofftest - sdontest;'
p12228
ag9104
ag9104
aS'else if (annot.anntyp == VFON)'
p12229
ag9665
aS'pvfontest = vfontest;'
p12230
aS'pvfofftest = vfofftest;'
p12231
aS'vfontest = annot.time;'
p12232
aS'do'
p12233
ag9665
ag5177
ag9665
aS'tprime = huge_time;'
p12234
aS"aprime = '*';"
p12235
aS'return;'
p12236
ag9104
ag8980
aS'} while (annot.anntyp != VFOFF);'
p12237
aS'vfofftest = annot.time;'
p12238
ag9104
ag9104
aS'tprime = huge_time;'
p12239
aS"aprime = '*';"
p12240
ag9104
ag8980
aS'/* Functions rpann() and tpann() return the appropriate pseudo-beat label'
p12241
aS'for the time specified by their argument.  They should be called only'
p12242
aS'with time arguments which match the times of the current test or reference'
p12243
aS'beat labels, since they depend on getref() and gettest() to locate the two'
p12244
aS'most recent VF and shutdown periods and have no information about earlier'
p12245
aS'or later VF or shutdown periods. */'
p12246
aS'int rpann(long t)'
p12247
ag9665
ag5257
aS'|| (pvfonref != -1L && pvfonref <= t && t <= pvfoffref))'
p12248
aS"return ('*'); /* test beat labels during reference-marked VF are"
p12249
aS"not to be counted;  since `*' is not recognized by"
p12250
aS"pair(), returning `*' accomplishes this */"
p12251
ag5270
aS'|| (psdonref != -1L && psdonref <= t && t <= psdoffref))'
p12252
aS"return ('X'); /* test beat labels during reference-marked shutdown"
p12253
aS'are paired with X pseudo-beat labels */'
p12254
aS'else'
p12255
aS"return ('O'); /* all other extra test beat labels are paired with"
p12256
aS'O pseudo-beat labels */'
p12257
ag9104
ag8980
aS'int tpann(long t)'
p12258
ag9665
aS'/* no special treatment for reference beat labels during test-marked VF */'
p12259
ag5292
aS'|| (psdontest != -1L && psdontest <= t && t <= psdoffref))'
p12260
aS"return ('X'); /* reference beat labels during test-marked shutdown"
p12261
aS'are paired with X pseudo-beat labels */'
p12262
aS'else'
p12263
aS"return ('O'); /* all other extra reference beat labels are paired"
p12264
aS'with O pseudo-beat labels */'
p12265
ag9104
ag8980
aS'/* Define counters for the elements of the confusion matrix.  Static variables'
p12266
aS'have initial values of zero.  */'
p12267
aS'static long Nn, Ns, Nv, Nf, Nq, No, Nx, Sn, Ss, Sv, Sf, Sq, So, Sx, Vn, Vs, Vv, Vf, Vq, Vo, Vx, Fn,'
p12268
aS'Fs, Fv, Ff, Fq, Fo, Fx, Qn, Qs, Qv, Qf, Qq, Qo, Qx, On, Os, Ov, Of, Oq, Xn, Xs, Xv, Xf, Xq;'
p12269
ag8980
aS'int verbose = 0; /* if non-zero, describe all mismatches */'
p12270
aS'long nrre = 0; /* number of RR errors tallied in ssrre */'
p12271
aS'double ssrre = 0.; /* sum of squares of RR errors */'
p12272
ag8980
aS'void pair(int ref, int test) /* count a beat label pair */'
p12273
ag9665
ag5844
ag9665
aS"case 'N':"
p12274
ag5382
ag9665
aS"case 'N':"
p12275
aS'Nn++;'
p12276
aS'break;'
p12277
aS"case 'S':"
p12278
aS'Ns++;'
p12279
aS'break;'
p12280
aS"case 'V':"
p12281
aS'Nv++;'
p12282
aS'break;'
p12283
aS"case 'F':"
p12284
aS'Nf++;'
p12285
aS'break;'
p12286
aS"case 'Q':"
p12287
aS'Nq++;'
p12288
aS'break;'
p12289
aS"case 'O':"
p12290
aS'No++;'
p12291
aS'break;'
p12292
aS"case 'X':"
p12293
aS'Nx++;'
p12294
aS'break;'
p12295
ag9104
aS'break;'
p12296
aS"case 'S':"
p12297
ag5465
ag9665
aS"case 'N':"
p12298
aS'Sn++;'
p12299
aS'break;'
p12300
aS"case 'S':"
p12301
aS'Ss++;'
p12302
aS'break;'
p12303
aS"case 'V':"
p12304
aS'Sv++;'
p12305
aS'break;'
p12306
aS"case 'F':"
p12307
aS'Sf++;'
p12308
aS'break;'
p12309
aS"case 'Q':"
p12310
aS'Sq++;'
p12311
aS'break;'
p12312
aS"case 'O':"
p12313
aS'So++;'
p12314
aS'break;'
p12315
aS"case 'X':"
p12316
aS'Sx++;'
p12317
aS'break;'
p12318
ag9104
aS'break;'
p12319
aS"case 'V':"
p12320
ag5548
ag9665
aS"case 'N':"
p12321
aS'Vn++;'
p12322
aS'break;'
p12323
aS"case 'S':"
p12324
aS'Vs++;'
p12325
aS'break;'
p12326
aS"case 'V':"
p12327
aS'Vv++;'
p12328
aS'break;'
p12329
aS"case 'F':"
p12330
aS'Vf++;'
p12331
aS'break;'
p12332
aS"case 'Q':"
p12333
aS'Vq++;'
p12334
aS'break;'
p12335
aS"case 'O':"
p12336
aS'Vo++;'
p12337
aS'break;'
p12338
aS"case 'X':"
p12339
aS'Vx++;'
p12340
aS'break;'
p12341
ag9104
aS'break;'
p12342
aS"case 'F':"
p12343
ag5631
ag9665
aS"case 'N':"
p12344
aS'Fn++;'
p12345
aS'break;'
p12346
aS"case 'S':"
p12347
aS'Fs++;'
p12348
aS'break;'
p12349
aS"case 'V':"
p12350
aS'Fv++;'
p12351
aS'break;'
p12352
aS"case 'F':"
p12353
aS'Ff++;'
p12354
aS'break;'
p12355
aS"case 'Q':"
p12356
aS'Fq++;'
p12357
aS'break;'
p12358
aS"case 'O':"
p12359
aS'Fo++;'
p12360
aS'break;'
p12361
aS"case 'X':"
p12362
aS'Fx++;'
p12363
aS'break;'
p12364
ag9104
aS'break;'
p12365
aS"case 'Q':"
p12366
ag5714
ag9665
aS"case 'N':"
p12367
aS'Qn++;'
p12368
aS'break;'
p12369
aS"case 'S':"
p12370
aS'Qs++;'
p12371
aS'break;'
p12372
aS"case 'V':"
p12373
aS'Qv++;'
p12374
aS'break;'
p12375
aS"case 'F':"
p12376
aS'Qf++;'
p12377
aS'break;'
p12378
aS"case 'Q':"
p12379
aS'Qq++;'
p12380
aS'break;'
p12381
aS"case 'O':"
p12382
aS'Qo++;'
p12383
aS'break;'
p12384
aS"case 'X':"
p12385
aS'Qx++;'
p12386
aS'break;'
p12387
ag9104
aS'break;'
p12388
aS"case 'O':"
p12389
ag5777
ag9665
aS"case 'N':"
p12390
aS'On++;'
p12391
aS'break;'
p12392
aS"case 'S':"
p12393
aS'Os++;'
p12394
aS'break;'
p12395
aS"case 'V':"
p12396
aS'Ov++;'
p12397
aS'break;'
p12398
aS"case 'F':"
p12399
aS'Of++;'
p12400
aS'break;'
p12401
aS"case 'Q':"
p12402
aS'Oq++;'
p12403
aS'break;'
p12404
ag9104
aS'break;'
p12405
aS"case 'X':"
p12406
ag5840
ag9665
aS"case 'N':"
p12407
aS'Xn++;'
p12408
aS'break;'
p12409
aS"case 'S':"
p12410
aS'Xs++;'
p12411
aS'break;'
p12412
aS"case 'V':"
p12413
aS'Xv++;'
p12414
aS'break;'
p12415
aS"case 'F':"
p12416
aS'Xf++;'
p12417
aS'break;'
p12418
aS"case 'Q':"
p12419
aS'Xq++;'
p12420
aS'break;'
p12421
ag9104
aS'break;'
p12422
ag9104
ag8980
aS'/* Compute the RR interval error and update the sum of squared errors. */'
p12423
ag5859
ag9665
aS'double rre = RR - rr;'
p12424
ag8980
aS'ssrre += rre * rre;'
p12425
aS'nrre++;'
p12426
ag9104
ag8980
ag5918
ag9665
ag5893
aS'(void)putann(0, &test_annot);'
p12427
aS'else'
p12428
ag9665
aS'struct WFDB_ann out_annot;'
p12429
aS'char auxp[3];'
p12430
ag8980
aS'auxp[0] = 2;'
p12431
aS'auxp[1] = ref;'
p12432
aS"auxp[2] = test - 'A' + 'a';"
p12433
ag5916
aS'out_annot.time = T;'
p12434
aS'else'
p12435
aS'out_annot.time = t;'
p12436
aS'out_annot.anntyp = NOTE;'
p12437
aS'out_annot.subtyp = out_annot.chan = out_annot.num = 0;'
p12438
aS'out_annot.aux = auxp;'
p12439
aS'(void)putann(0, &out_annot);'
p12440
ag9104
ag9104
ag5954
ag9665
ag5952
aS'(void)fprintf(stderr, "%c(%ld)/%c(%ld)\\n", ref, t, test, t);'
p12441
aS"else if (test == 'O' || test == 'X')"
p12442
aS'(void)fprintf(stderr, "%c(%ld)/%c(%ld)\\n", ref, T, test, T);'
p12443
aS'else'
p12444
aS'(void)fprintf(stderr, "%c(%ld)/%c(%ld)\\n", ref, T, test, t);'
p12445
ag9104
ag9104
ag8980
aS'FILE *ofile, *sfile; /* files for beat-by-beat and shutdown reports */'
p12446
ag8980
aS"/* `pstat' prints a statistic described by s, defined as the quotient of a and"
p12447
aS"b expressed in percentage units.  Undefined values are indicated by `-'. */"
p12448
ag8980
aS'void pstat(char* s, char* f, long a, long b)'
p12449
ag9665
ag6019
ag9665
aS'(void)fprintf(ofile, "%s: ", s);'
p12450
ag5997
aS'(void)fprintf(ofile, "     - ");'
p12451
aS'else'
p12452
ag9665
aS'(void)fprintf(ofile, f, (100. * a) / b);'
p12453
aS'(void)fprintf(ofile, "%%");'
p12454
ag9104
aS'(void)fprintf(ofile, " (%ld/%ld)\\n", a, b);'
p12455
ag9104
aS'else if (b <= 0)'
p12456
aS'(void)fprintf(ofile, "      -");'
p12457
aS'else'
p12458
ag9665
aS'(void)fprintf(ofile, " ");'
p12459
aS'(void)fprintf(ofile, f, (100. * a) / b);'
p12460
ag9104
ag9104
ag8980
aS"/* `sstat' prints a statistic as for `pstat', but the output goes to sfile. */"
p12461
ag8980
aS'void sstat(char* s, char* f, long a, long b)'
p12462
ag9665
ag6084
ag9665
aS'(void)fprintf(sfile, "%s: ", s);'
p12463
ag6062
aS'(void)fprintf(sfile, "     - ");'
p12464
aS'else'
p12465
ag9665
aS'(void)fprintf(sfile, f, (100. * a) / b);'
p12466
aS'(void)fprintf(sfile, "%%");'
p12467
ag9104
aS'(void)fprintf(sfile, " (%ld/%ld)\\n", a, b);'
p12468
ag9104
aS'else if (b <= 0)'
p12469
aS'(void)fprintf(sfile, "      -");'
p12470
aS'else'
p12471
ag9665
aS'(void)fprintf(sfile, " ");'
p12472
aS'(void)fprintf(sfile, f, (100. * a) / b);'
p12473
ag9104
ag9104
ag8980
aS'char *ofname = "-", *sfname; /* filenames for reports */'
p12474
ag8980
aS'/* Read and interpret command-line arguments. */'
p12475
aS'void init(int argc, char* argv[])'
p12476
ag9665
aS'int i;'
p12477
aS'void help();'
p12478
ag8980
aS'pname = prog_name(argv[0]);'
p12479
aS'for (i = 1; i < argc; i++)'
p12480
ag9665
ag6112
aS'switch (*(argv[i] + 1))'
p12481
ag9665
aS"case 'a': /* annotator names follow */"
p12482
ag6125
ag9665
aS'(void)fprintf(stderr,'
p12483
aS'"%s: reference and test annotator names must follow -a\\n", pname);'
p12484
aS'exit(0);'
p12485
ag9104
aS'an[0].name = argv[i];'
p12486
aS'an[1].name = argv[++i];'
p12487
aS'break;'
p12488
aS"case 'c': /* condensed output */"
p12489
ag6138
ag9665
aS'(void)fprintf(stderr, "%s: output file name must follow -c\\n", pname);'
p12490
aS'exit(0);'
p12491
ag9104
aS'ofname = argv[i];'
p12492
aS'fflag = 1;'
p12493
aS'break;'
p12494
aS"case 'C': /* condensed output with SVEB statistics */"
p12495
ag6151
ag9665
aS'(void)fprintf(stderr, "%s: output file name must follow -C\\n", pname);'
p12496
aS'exit(0);'
p12497
ag9104
aS'ofname = argv[i];'
p12498
aS'fflag = 4;'
p12499
aS'break;'
p12500
aS"case 'f': /* start time follows */"
p12501
ag6164
ag9665
aS'(void)fprintf(stderr, "%s: start time must follow -f\\n", pname);'
p12502
aS'exit(0);'
p12503
ag9104
aS'start = i; /* save arg index, convert to samples later, when'
p12504
aS'record has been opened and sampling frequency is'
p12505
aS'known */'
p12506
aS'break;'
p12507
aS"case 'h': /* print usage summary */"
p12508
aS'help();'
p12509
aS'exit(0);'
p12510
aS'break;'
p12511
aS"case 'l': /* line-format output */"
p12512
ag6177
ag9665
aS'(void)fprintf(stderr, "%s: two output file names must follow -l\\n", pname);'
p12513
aS'exit(0);'
p12514
ag9104
aS'ofname = argv[i];'
p12515
aS'sfname = argv[++i];'
p12516
aS'fflag = 2;'
p12517
aS'break;'
p12518
aS"case 'L': /* line-format output, with SVEB statistics */"
p12519
ag6190
ag9665
aS'(void)fprintf(stderr, "%s: two output file names must follow -L\\n", pname);'
p12520
aS'exit(0);'
p12521
ag9104
aS'ofname = argv[i];'
p12522
aS'sfname = argv[++i];'
p12523
aS'fflag = 5;'
p12524
aS'break;'
p12525
aS"case 'o': /* generate output annotation file */"
p12526
aS'oflag = 1;'
p12527
aS'break;'
p12528
aS"case 'O': /* generate expanded output annotation file */"
p12529
aS'oflag = 1;'
p12530
aS'Oflag = 1;'
p12531
aS'fflag = 0;'
p12532
aS'break;'
p12533
aS"case 'r': /* record name follows */"
p12534
ag6203
ag9665
aS'(void)fprintf(stderr, "%s: record name must follow -r\\n", pname);'
p12535
aS'exit(0);'
p12536
ag9104
aS'//\t record = argv[i];'
p12537
aS'break;'
p12538
aS"case 's': /* standard-format output */"
p12539
ag6216
ag9665
aS'(void)fprintf(stderr, "%s: output file name must follow -s\\n", pname);'
p12540
aS'exit(0);'
p12541
ag9104
aS'ofname = argv[i];'
p12542
aS'fflag = 3;'
p12543
aS'break;'
p12544
aS"case 'S': /* standard-format output, with SVEB statistics */"
p12545
ag6229
ag9665
aS'(void)fprintf(stderr, "%s: output file name must follow -S\\n", pname);'
p12546
aS'exit(0);'
p12547
ag9104
aS'ofname = argv[i];'
p12548
aS'fflag = 6;'
p12549
aS'break;'
p12550
aS"case 't': /* end time follows */"
p12551
ag6242
ag9665
aS'(void)fprintf(stderr, "%s: end time must follow -t\\n", pname);'
p12552
aS'exit(0);'
p12553
ag9104
aS'end_time = i;'
p12554
aS'break;'
p12555
aS"case 'v': /* verbose mode */"
p12556
aS'verbose = 1;'
p12557
aS'break;'
p12558
aS"case 'w': /* match window follows */"
p12559
ag6255
ag9665
aS'(void)fprintf(stderr, "%s: match window must follow -w\\n", pname);'
p12560
aS'exit(0);'
p12561
ag9104
aS'match_dt = i;'
p12562
aS'break;'
p12563
aS'default:'
p12564
aS'(void)fprintf(stderr, "%s: unrecognized option %s\\n", pname, argv[i]);'
p12565
aS'exit(0);'
p12566
ag9104
aS'else'
p12567
ag9665
aS'(void)fprintf(stderr, "%s: unrecognized argument %s\\n", pname, argv[i]);'
p12568
aS'exit(0);'
p12569
ag9104
ag9104
ag8980
ag6284
ag9665
aS'help();'
p12570
aS'exit(0);'
p12571
ag9104
ag8980
ag6297
aS'(void)fprintf(stderr, "%s: (warning) nonstandard comparison selected\\n", pname);'
p12572
ag8980
ag6310
ag9665
aS'(void)fprintf('
p12573
aS'stderr, "%s: (warning) %g Hz sampling frequency assumed\\n", pname, WFDB_DEFFREQ);'
p12574
aS'(void)setsampfreq(WFDB_DEFFREQ);'
p12575
ag9104
ag8980
aS'/* Set the match window and the times of the start and end of the test'
p12576
aS'period.  Initialize the shutdown tally to 1/2 second so that it will be'
p12577
aS'properly rounded to the nearest second at the end. */'
p12578
ag6333
aS'match_dt = (int)strtim(argv[match_dt]);'
p12579
aS'else'
p12580
aS'match_dt = (int)strtim(".15"); /* 150 milliseconds */'
p12581
ag6356
aS'start = strtim(argv[(int)start]);'
p12582
aS'else'
p12583
aS'start = strtim("5:0"); /* 5 minutes */'
p12584
ag6379
aS'end_time = strtim(argv[(int)end_time]);'
p12585
aS'else if ((end_time = strtim("e")) == 0L)'
p12586
aS'end_time = -1L; /* record length unavailable -- go to end of'
p12587
aS'reference annotation file */'
p12588
ag6392
ag9665
aS'(void)fprintf(stderr, "%s: improper interval specified\\n", pname);'
p12589
aS'exit(0);'
p12590
ag9104
aS'shut_down = strtim(".5"); /* 1/2 second */'
p12591
ag8980
aS'an[0].stat = an[1].stat = WFDB_READ;'
p12592
ag6405
ag9665
aS'an[2].name = "bxb";'
p12593
aS'an[2].stat = WFDB_WRITE;'
p12594
ag9104
ag6418
aS'exit(0);'
p12595
ag9104
ag8980
aS'void print_results(int fflag)'
p12596
ag9665
aS'long QTP, QFN, QFP, STP, SFN, SFP, VTP, VFN, VTN, VFP;'
p12597
ag8980
aS'/* Open output files.  If line-format output was selected, write column'
p12598
aS'headings only if the files must be created from scratch. */'
p12599
ag6585
ag9665
ag6573
ag9665
ag6525
ag9665
aS'(void)fprintf(stderr, "%s: can\'t create %s\\n", pname, ofname);'
p12600
aS'exit(0);'
p12601
ag9104
ag6548
ag9665
aS'(void)fprintf(ofile, "Record Nn\' Vn\' Fn\' On\'  Nv   Vv  Fv\' Ov\' No\'");'
p12602
aS'(void)fprintf(ofile, " Vo\' Fo\'  Q Se   Q +P   V Se   V +P  V FPR\\n");'
p12603
ag9104
aS'else if (fflag == 5)'
p12604
ag9665
aS'(void)fprintf(ofile, "Record Nn\' Sn\' Vn\' Fn\' On\'  Ns  Ss  Vs  Fs\'");'
p12605
aS'(void)fprintf(ofile, " Os\' Nv  Sv   Vv  Fv\' Ov\' No\' So\' Vo\' Fo\'");'
p12606
aS'(void)fprintf(ofile, "  Q Se   Q +P   V Se   V +P   S Se   S +P RR err\\n");'
p12607
ag9104
ag9104
aS'else'
p12608
ag9665
aS'(void)fclose(ofile);'
p12609
ag6571
ag9665
aS'(void)fprintf(stderr, "%s: can\'t modify %s\\n", pname, ofname);'
p12610
aS'exit(0);'
p12611
ag9104
ag9104
ag9104
aS'else'
p12612
aS'ofile = stdout;'
p12613
ag6703
ag9665
ag6691
ag9665
ag6679
ag9665
ag6631
ag9665
aS'(void)fprintf(stderr, "%s: can\'t create %s\\n", pname, sfname);'
p12614
aS'exit(0);'
p12615
ag9104
ag6654
ag9665
aS'(void)fprintf(sfile, "Record Nx   Vx   Fx   Qx  %% beats  %% N    ");'
p12616
aS'(void)fprintf(sfile, "%% V    %% F   Total Shutdown\\n");'
p12617
aS'(void)fprintf(sfile, "                           missed missed ");'
p12618
aS'(void)fprintf(sfile, "missed missed      Time\\n");'
p12619
ag9104
aS'else'
p12620
ag9665
aS'(void)fprintf(sfile, "Record Nx   Sx   Vx   Fx   Qx  %% beats  %% N    ");'
p12621
aS'(void)fprintf(sfile, "%% S    %% V    %% F   Total Shutdown\\n");'
p12622
aS'(void)fprintf(sfile, "                                missed missed ");'
p12623
aS'(void)fprintf(sfile, "missed missed missed      Time\\n");'
p12624
ag9104
ag9104
aS'else'
p12625
ag9665
aS'(void)fclose(sfile);'
p12626
ag6677
ag9665
aS'(void)fprintf(stderr, "%s: can\'t modify %s\\n", pname, sfname);'
p12627
aS'exit(0);'
p12628
ag9104
ag9104
ag9104
aS'else'
p12629
aS'sfile = stdout;'
p12630
ag9104
aS'else'
p12631
aS'sfile = stdout;'
p12632
ag8980
ag6716
ag9665
aS'(void)fprintf(ofile, "Beat-by-beat comparison results for record %s\\n", record);'
p12633
aS'(void)fprintf(ofile, "Reference annotator: %s\\n", an[0].name);'
p12634
aS'(void)fprintf(ofile, "     Test annotator: %s\\n\\n", an[1].name);'
p12635
ag9104
ag8980
ag6488
ag9665
aS'case 1: /* print condensed format summary tables */'
p12636
aS'(void)fprintf(ofile, "         Algorithm\\n");'
p12637
aS'(void)fprintf(ofile, "      n+f+q    v  o+x\\n");'
p12638
aS'(void)fprintf(ofile, "     ________________\\n");'
p12639
aS'(void)fprintf(ofile, "  N  | %4ld %4ld %4ld\\n", Nn + Ns + Nf + Nq + Sn + Ss + Sf + Sq,'
p12640
aS'Nv + Sv, No + Nx + So + Sx);'
p12641
aS'(void)fprintf(ofile, "  V  | %4ld %4ld %4ld\\n", Vn + Vs + Vf + Vq, Vv, Vo + Vx);'
p12642
aS'(void)fprintf(ofile, " F+Q | %4ld %4ld %4ld\\n", Fn + Fs + Ff + Fq + Qn + Qs + Qf + Qq,'
p12643
aS'Fv + Qv, Fo + Fx + Qo + Qx);'
p12644
aS'(void)fprintf('
p12645
aS'ofile, " O+X | %4ld %4ld\\n\\n", On + Os + Of + Oq + Xn + Xs + Xf + Xq, Ov + Xv);'
p12646
aS'break;'
p12647
aS'case 2: /* print line-format output */'
p12648
aS'(void)fprintf(ofile, "%4s %5ld %3ld %3ld %3ld %3ld %4ld %3ld %3ld %3ld %3ld %3ld",'
p12649
aS'record, Nn + Ns + Nf + Nq + Sn + Ss + Sf + Sq, Vn + Vs + Vf + Vq,'
p12650
aS'Fn + Fs + Ff + Fq + Qn + Qs + Qf + Qq, On + Os + Of + Oq + Xn + Xs + Xf + Xq,'
p12651
aS'Nv + Sv, Vv, Fv + Qv, Ov + Xv, No + Nx + So + Sx, Vo + Vx, Fo + Fx + Qo + Qx);'
p12652
aS'(void)fprintf(sfile, "%4s %4ld %4ld %4ld %4ld  ", record, Nx + Sx, Vx, Fx, Qx);'
p12653
aS'break;'
p12654
aS'case 3: /* print standard format summary tables */'
p12655
aS'(void)fprintf(ofile, "               Algorithm\\n");'
p12656
aS'(void)fprintf(ofile, "        n    v    f    q    o    x\\n");'
p12657
aS'(void)fprintf(ofile, "   _______________________________\\n");'
p12658
aS'(void)fprintf(ofile, " N | %4ld %4ld %4ld %4ld %4ld %4ld\\n", Nn + Ns + Sn + Ss, Nv + Sv,'
p12659
aS'Nf + Sf, Nq + Sq, No + So, Nx + Sx);'
p12660
aS'(void)fprintf('
p12661
aS'ofile, " V | %4ld %4ld %4ld %4ld %4ld %4ld\\n", Vn + Vs, Vv, Vf, Vq, Vo, Vx);'
p12662
aS'(void)fprintf('
p12663
aS'ofile, " F | %4ld %4ld %4ld %4ld %4ld %4ld\\n", Fn + Fs, Fv, Ff, Fq, Fo, Fx);'
p12664
aS'(void)fprintf('
p12665
aS'ofile, " Q | %4ld %4ld %4ld %4ld %4ld %4ld\\n", Qn + Qs, Qv, Qf, Qq, Qo, Qx);'
p12666
aS'(void)fprintf(ofile, " O | %4ld %4ld %4ld %4ld\\n", On + Os, Ov, Of, Oq);'
p12667
aS'(void)fprintf(ofile, " X | %4ld %4ld %4ld %4ld\\n\\n", Xn + Xs, Xv, Xf, Xq);'
p12668
aS'break;'
p12669
aS'case 4: /* print condensed format summary tables, with SVEBs */'
p12670
aS'(void)fprintf(ofile, "         Algorithm\\n");'
p12671
aS'(void)fprintf(ofile, "      n+f+q    s    v  o+x\\n");'
p12672
aS'(void)fprintf(ofile, "     _____________________\\n");'
p12673
aS'(void)fprintf(ofile, "  N  | %4ld %4ld %4ld %4ld\\n", Nn + Nf + Nq, Ns, Nv, No + Nx);'
p12674
aS'(void)fprintf(ofile, "  S  | %4ld %4ld %4ld %4ld\\n", Sn + Sf + Sq, Ss, Sv, So + Sx);'
p12675
aS'(void)fprintf(ofile, "  V  | %4ld %4ld %4ld %4ld\\n", Vn + Vf + Vq, Vs, Vv, Vo + Vx);'
p12676
aS'(void)fprintf(ofile, " F+Q | %4ld %4ld %4ld %4ld\\n", Fn + Ff + Fq + Qn + Qf + Qq,'
p12677
aS'Fs + Qs, Fv + Qv, Fo + Fx + Qo + Qx);'
p12678
aS'(void)fprintf('
p12679
aS'ofile, " O+X | %4ld %4ld %4ld\\n\\n", On + Of + Oq + Xn + Xf + Xq, Os + Xs, Ov + Xv);'
p12680
aS'break;'
p12681
aS'case 5: /* print line-format output, with SVEBs */'
p12682
aS'(void)fprintf(ofile, "%4s %5ld %3ld %3ld %3ld %3ld %3ld %3ld %3ld %3ld %3ld", record,'
p12683
aS'Nn + Nf + Nq, Sn + Sf + Sq, Vn + Vf + Vq, Fn + Ff + Fq + Qn + Qf + Qq,'
p12684
aS'On + Of + Oq + Xn + Xf + Xq, Ns, Ss, Vs, Fs + Qs, Os + Xs);'
p12685
aS'(void)fprintf(ofile, " %3ld %3ld %4ld %3ld %3ld %3ld %3ld %3ld %3ld", Nv, Sv, Vv,'
p12686
aS'Fv + Qv, Ov + Xv, No + Nx, So + Sx, Vo + Vx, Fo + Fx + Qo + Qx);'
p12687
aS'(void)fprintf(sfile, "%4s %4ld %4ld %4ld %4ld %4ld  ", record, Nx, Sx, Vx, Fx, Qx);'
p12688
aS'break;'
p12689
aS'case 6: /* print standard format summary tables, with SVEBs */'
p12690
aS'default:'
p12691
aS'(void)fprintf(ofile, "               Algorithm\\n");'
p12692
aS'(void)fprintf(ofile, "        n    s    v    f    q    o    x\\n");'
p12693
aS'(void)fprintf(ofile, "   ____________________________________\\n");'
p12694
aS'(void)fprintf('
p12695
aS'ofile, " N | %4ld %4ld %4ld %4ld %4ld %4ld %4ld\\n", Nn, Ns, Nv, Nf, Nq, No, Nx);'
p12696
aS'(void)fprintf('
p12697
aS'ofile, " S | %4ld %4ld %4ld %4ld %4ld %4ld %4ld\\n", Sn, Ss, Sv, Sf, Sq, So, Sx);'
p12698
aS'(void)fprintf('
p12699
aS'ofile, " V | %4ld %4ld %4ld %4ld %4ld %4ld %4ld\\n", Vn, Vs, Vv, Vf, Vq, Vo, Vx);'
p12700
aS'(void)fprintf('
p12701
aS'ofile, " F | %4ld %4ld %4ld %4ld %4ld %4ld %4ld\\n", Fn, Fs, Fv, Ff, Fq, Fo, Fx);'
p12702
aS'(void)fprintf('
p12703
aS'ofile, " Q | %4ld %4ld %4ld %4ld %4ld %4ld %4ld\\n", Qn, Qs, Qv, Qf, Qq, Qo, Qx);'
p12704
aS'(void)fprintf(ofile, " O | %4ld %4ld %4ld %4ld %4ld\\n", On, Os, Ov, Of, Oq);'
p12705
aS'(void)fprintf(ofile, " X | %4ld %4ld %4ld %4ld %4ld\\n\\n", Xn, Xs, Xv, Xf, Xq);'
p12706
aS'break;'
p12707
ag9104
aS'QTP = Nn + Ns + Nv + Nf + Nq + Sn + Ss + Sv + Sf + Sq + Vn + Vs + Vv + Vf + Vq + Fn + Fs + Fv'
p12708
aS'+ Ff + Fq + Qn + Qs + Qv + Qf + Qq;'
p12709
aS'QFN = No + Nx + So + Sx + Vo + Vx + Fo + Fx + Qo + Qx;'
p12710
aS'QFP = On + Os + Ov + Of + Oq + Xn + Xs + Xv + Xf + Xq;'
p12711
aS'VTP = Vv;'
p12712
aS'VFN = Vn + Vs + Vf + Vq + Vo + Vx;'
p12713
aS'VTN = Nn + Ns + Nf + Nq + Sn + Ss + Sf + Sq + Fn + Fs + Ff + Fq + Qn + Qs + Qf + Qq + On + Os'
p12714
aS'+ Of + Oq + Xn + Xs + Xf + Xq;'
p12715
aS'VFP = Nv + Sv + Ov + Xv;'
p12716
aS'STP = Ss;'
p12717
aS'SFN = Sn + Sv + Sf + Sq + So + Sx;'
p12718
aS'SFP = Ns + Vs + Fs + Os + Xs;'
p12719
aS'pstat("           QRS sensitivity", "%6.2f", QTP, QTP + QFN);'
p12720
aS'pstat(" QRS positive predictivity", "%6.2f", QTP, QTP + QFP);'
p12721
aS'pstat("           VEB sensitivity", "%6.2f", VTP, VTP + VFN);'
p12722
aS'pstat(" VEB positive predictivity", "%6.2f", VTP, VTP + VFP);'
p12723
ag6739
aS'pstat("   VEB false positive rate", "%6.3f", VFP, VTN + VFP);'
p12724
aS'else'
p12725
ag9665
aS'pstat("          SVEB sensitivity", "%6.2f", STP, STP + SFN);'
p12726
aS'pstat("SVEB positive predictivity", "%6.2f", STP, STP + SFP);'
p12727
ag9104
ag6808
ag9665
aS'(void)fprintf(ofile, "     RMS RR interval error: ");'
p12728
ag6773
aS'(void)fprintf(ofile, "%6.2f ms", sqrt(ssrre / nrre) * 1000. / strtim("1"));'
p12729
aS'else'
p12730
aS'(void)fprintf(ofile, "     -");'
p12731
ag9104
aS'else if (fflag == 5)'
p12732
ag9665
ag6806
aS'(void)fprintf(ofile, " %6.2f", sqrt(ssrre / nrre) * 1000. / strtim("1"));'
p12733
aS'else'
p12734
aS'(void)fprintf(ofile, "     -");'
p12735
ag9104
aS'(void)fprintf(ofile, "\\n");'
p12736
aS'sstat("\\n  Beats missed in shutdown", "%6.2f", Nx + Vx + Fx + Qx, QTP + QFN);'
p12737
aS'sstat("      N missed in shutdown", "%6.2f", Nx, Nn + Ns + Nv + Nf + Nq + No + Nx);'
p12738
ag6821
aS'sstat("      S missed in shutdown", "%6.2f", Sx, Sn + Ss + Sv + Sf + Sq + So + Sx);'
p12739
aS'sstat("      V missed in shutdown", "%6.2f", Vx, Vn + Vs + Vv + Vf + Vq + Vo + Vx);'
p12740
aS'sstat("      F missed in shutdown", "%6.2f", Fx, Fn + Fs + Fv + Ff + Fq + Fo + Fx);'
p12741
ag6834
aS'(void)fprintf(sfile, "       Total shutdown time: ");'
p12742
aS'(void)fprintf(sfile, "%5ld seconds\\n", shut_down);'
p12743
ag8980
ag6847
aS'fclose(ofile);'
p12744
ag9104
ag8980
aS'static char* help_strings[] = { "usage: %s -r RECORD -a REF TEST [OPTIONS ...]\\n",'
p12745
aS'"where RECORD is the record name;  REF is reference annotator name;  TEST is",'
p12746
aS'"the test annotator name; and OPTIONS may include any of:",'
p12747
aS'" -c FILE        append condensed reports (AAMI RP Table 6 format) to FILE",'
p12748
aS'" -C FILE        as for -c, but report SVEB statistics also",'
p12749
aS'" -f TIME        begin comparison at specified TIME (default: 5 minutes",'
p12750
aS'"                 after beginning of record)", " -h             print this usage summary",'
p12751
aS'" -l FILE1 FILE2 append line-format reports (AAMI RP Tables 7 and 8 format)",'
p12752
aS'"                 to FILE1 and FILE2 respectively",'
p12753
aS'" -L FILE1 FILE2 as for -l, but report SVEB statistics also",'
p12754
aS'" -o             generate an output annotation file",'
p12755
aS'" -O             generate an expanded output annotation file only",'
p12756
aS'" -s FILE        append standard reports (AAMI RP Table 3 format) to FILE",'
p12757
aS'" -S FILE        as for -s, but report SVEB statistics also",'
p12758
aS'" -t TIME        stop comparison at specified TIME (default: end of record",'
p12759
aS'"                 if defined, end of reference annotation file otherwise;",'
p12760
aS'"                 if TIME is 0, the comparison ends when the end of either",'
p12761
aS'"                 annotation file is reached)",'
p12762
aS'" -v             verbose mode:  list all beat label discrepancies",'
p12763
aS'" -w TIME        set match window (default: 0.15 seconds)", NULL };'
p12764
ag8980
aS'void help()'
p12765
ag9665
aS'int i;'
p12766
ag8980
aS'(void)fprintf(stderr, help_strings[0], pname);'
p12767
aS'for (i = 1; help_strings[i] != NULL; i++)'
p12768
aS'(void)fprintf(stderr, "%s\\n", help_strings[i]);'
p12769
ag9104
ag8980
aS'char* prog_name(char* s)'
p12770
ag9665
aS'char* p = s + strlen(s);'
p12771
ag8980
aS'#ifdef MSDOS'
p12772
aS"while (p >= s && *p != '\\\\' && *p != ':')"
p12773
ag9665
aS"if (*p == '.')"
p12774
aS"*p = '\\0'; /* strip off extension */"
p12775
aS"if ('A' <= *p && *p <= 'Z')"
p12776
aS"*p += 'a' - 'A'; /* convert to lower case */"
p12777
aS'p--;'
p12778
ag9104
aS'#else'
p12779
aS"while (p >= s && *p != '/')"
p12780
aS'p--;'
p12781
aS'#endif'
p12782
aS'return (p + 1);'
p12783
ag9104
ag8980
aS"/* Function `genxcmp' is used only when generating an expanded output"
p12784
aS'annotation file. */'
p12785
ag8980
aS'void genxcmp()'
p12786
ag9665
aS'int alen;'
p12787
aS'static char mstring[550], *p, nullaux[1];'
p12788
ag8980
ag6944
aS'getref();'
p12789
ag6957
aS'gettest();'
p12790
ag6970
aS'ref_annot.aux = nullaux;'
p12791
ag6983
aS'test_annot.aux = nullaux;'
p12792
aS'while ((end_time > 0L && (T <= end_time || t <= end_time))'
p12793
aS'|| (end_time == -1L && T != huge_time)'
p12794
aS'|| (end_time == 0L && T != huge_time && t != huge_time))'
p12795
ag9665
aS'for (p = mstring + 1; p < mstring + *mstring; p++)'
p12796
aS"*p = '\\0';"
p12797
ag7312
ag9665
aS'/* Test annotation precedes reference annotation. */'
p12798
ag7147
ag9665
aS'/* Annotation times match within the window. */'
p12799
ag7018
aS'|| test_annot.chan != ref_annot.chan || test_annot.num != ref_annot.num'
p12800
aS'|| strcmp(test_annot.aux, ref_annot.aux))'
p12801
ag9665
aS"/* Annotation types, subtypes, ..., don't match. */"
p12802
aS'p = mstring + 1;'
p12803
aS'(void)strcat(p, annstr(ref_annot.anntyp));'
p12804
aS'p += strlen(p);'
p12805
ag7031
aS'|| test_annot.num != ref_annot.num)'
p12806
ag9665
aS'(void)sprintf('
p12807
aS'p, "[%d,%d,%d]", ref_annot.subtyp, ref_annot.chan, ref_annot.num);'
p12808
aS'p += strlen(p);'
p12809
ag9104
ag7044
ag9665
aS'(void)sprintf(p, " (%s)", ref_annot.aux + 1);'
p12810
aS'p += strlen(p);'
p12811
ag9104
aS'(void)sprintf(p, "/%s", annstr(test_annot.anntyp));'
p12812
aS'p += strlen(p);'
p12813
ag7057
aS'(void)sprintf(p, " (%s)", test_annot.aux + 1);'
p12814
aS'alen = strlen(mstring + 1);'
p12815
ag7070
ag9665
aS'(void)fprintf(stderr, "aux string truncated at %s (%ld)\\n",'
p12816
aS'timstr(test_annot.time), test_annot.time);'
p12817
aS'alen = 254;'
p12818
aS"mstring[alen + 1] = '\\0';"
p12819
ag9104
aS'mstring[0] = alen;'
p12820
aS'test_annot.aux = mstring;'
p12821
aS'test_annot.anntyp = NOTE;'
p12822
ag9104
aS'(void)putann(0, &test_annot);'
p12823
aS'getref();'
p12824
aS'gettest();'
p12825
ag7083
aS'ref_annot.aux = nullaux;'
p12826
ag7096
aS'test_annot.aux = nullaux;'
p12827
ag9104
aS'else'
p12828
ag9665
aS'/* No matching reference annotation. */'
p12829
aS'p = mstring + 1;'
p12830
aS'(void)sprintf(p, "%c/%s", rpann(test_annot.time), annstr(test_annot.anntyp));'
p12831
aS'p += strlen(p);'
p12832
ag7119
aS'(void)sprintf(p, " (%s)", test_annot.aux + 1);'
p12833
aS'alen = strlen(mstring + 1);'
p12834
ag7132
ag9665
aS'(void)fprintf(stderr, "aux string truncated at %s (%ld)\\n",'
p12835
aS'timstr(test_annot.time), test_annot.time);'
p12836
aS'alen = 254;'
p12837
aS"mstring[alen + 1] = '\\0';"
p12838
ag9104
aS'mstring[0] = alen;'
p12839
aS'test_annot.aux = mstring;'
p12840
aS'test_annot.anntyp = NOTE;'
p12841
aS'(void)putann(0, &test_annot);'
p12842
aS'gettest();'
p12843
ag7145
aS'test_annot.aux = nullaux;'
p12844
ag9104
ag9104
aS'else'
p12845
ag9665
aS'/* Reference annotation precedes test annotation. */'
p12846
ag7310
ag9665
aS'/* Annotation times match within the window. */'
p12847
ag7181
aS'|| test_annot.chan != ref_annot.chan || test_annot.num != ref_annot.num'
p12848
aS'|| strcmp(test_annot.aux, ref_annot.aux))'
p12849
ag9665
aS"/* Annotation types, subtypes, ..., don't match. */"
p12850
aS'p = mstring + 1;'
p12851
aS'(void)strcat(p, annstr(ref_annot.anntyp));'
p12852
aS'p += strlen(p);'
p12853
ag7194
aS'|| test_annot.num != ref_annot.num)'
p12854
ag9665
aS'(void)sprintf('
p12855
aS'p, "[%d,%d,%d]", ref_annot.subtyp, ref_annot.chan, ref_annot.num);'
p12856
aS'p += strlen(p);'
p12857
ag9104
ag7207
ag9665
aS'(void)sprintf(p, " (%s)", ref_annot.aux + 1);'
p12858
aS'p += strlen(p);'
p12859
ag9104
aS'(void)sprintf(p, "/%s", annstr(test_annot.anntyp));'
p12860
aS'p += strlen(p);'
p12861
ag7220
aS'(void)sprintf(p, " (%s)", test_annot.aux + 1);'
p12862
aS'alen = strlen(mstring + 1);'
p12863
ag7233
ag9665
aS'(void)fprintf(stderr, "aux string truncated at %s (%ld)\\n",'
p12864
aS'timstr(test_annot.time), test_annot.time);'
p12865
aS'alen = 254;'
p12866
aS"mstring[alen + 1] = '\\0';"
p12867
ag9104
aS'mstring[0] = alen;'
p12868
aS'test_annot.aux = mstring;'
p12869
aS'test_annot.anntyp = NOTE;'
p12870
ag9104
aS'(void)putann(0, &test_annot);'
p12871
aS'getref();'
p12872
aS'gettest();'
p12873
ag7246
aS'ref_annot.aux = nullaux;'
p12874
ag7259
aS'test_annot.aux = nullaux;'
p12875
ag9104
aS'else'
p12876
ag9665
aS'/* No matching test annotation. */'
p12877
aS'p = mstring + 1;'
p12878
aS'(void)sprintf(p, "%s", annstr(ref_annot.anntyp));'
p12879
aS'p += strlen(p);'
p12880
ag7282
ag9665
aS'(void)sprintf(p, " (%s)", ref_annot.aux + 1);'
p12881
aS'p += strlen(p);'
p12882
ag9104
aS'(void)sprintf(p, "/%c", tpann(ref_annot.time));'
p12883
aS'alen = strlen(mstring + 1);'
p12884
ag7295
ag9665
aS'(void)fprintf(stderr, "aux string truncated at %s (%ld)\\n",'
p12885
aS'timstr(ref_annot.time), ref_annot.time);'
p12886
aS'alen = 254;'
p12887
aS"mstring[alen + 1] = '\\0';"
p12888
ag9104
aS'mstring[0] = alen;'
p12889
aS'ref_annot.aux = mstring;'
p12890
aS'ref_annot.anntyp = NOTE;'
p12891
aS'(void)putann(0, &ref_annot);'
p12892
aS'getref();'
p12893
ag7308
aS'ref_annot.aux = nullaux;'
p12894
ag9104
ag9104
ag9104
ag9104
ag8980
ag8980
aS'void NewInit(void)'
p12895
ag9665
aS'char testAnnName[20], rec;'
p12896
ag8980
aS'// Initialize counts.'
p12897
aS'Nn = Ns = Nv = Nf = Nq = No = Nx = 0;'
p12898
aS'Sn = Ss = Sv = Sf = Sq = So = Sx = 0;'
p12899
aS'Vn = Vs = Vv = Vf = Vq = Vo = Vx = 0;'
p12900
aS'Fn = Fs = Fv = Ff = Fq = Fo = Fx = 0;'
p12901
aS'Qn = Qs = Qv = Qf = Qq = Qo = Qx = 0;'
p12902
aS'On = Os = Ov = Of = Oq = 0;'
p12903
aS'Xn = Xs = Xv = Xf = Xq = 0;'
p12904
ag8980
aS'T = Tprime = 0;'
p12905
aS't = tprime = 0;'
p12906
ag8980
ag8980
aS'setwfdb(ECG_DB_PATH);'
p12907
ag8980
aS'//\tprintf("Enter record: ") ;'
p12908
aS'//\tgets(record) ;'
p12909
ag8980
aS'sampfreq(record);'
p12910
aS'an[0].name = "atruth";'
p12911
aS'an[1].name = "atest";'
p12912
aS'an[0].stat = an[1].stat = WFDB_READ;'
p12913
ag7334
ag9665
aS'printf("Couldn\'t open annotation files.\\n");'
p12914
aS'exit(0);'
p12915
ag9104
ag8980
aS'fflag = 3;'
p12916
ag8980
aS'ofname = "testrpt.txt"; // Name of file for report.'
p12917
aS'match_dt = (int)strtim(".15");'
p12918
aS'start = strtim("5:0");'
p12919
aS'end_time = -1L;'
p12920
aS'shut_down = (int)strtim(".5");'
p12921
ag9104
ag8980
aS'void NewPrintResults(void)'
p12922
ag9665
aS'int QTP, QFN, QFP, VTP, VFN, VTN, VFP;'
p12923
aS'FILE* results;'
p12924
ag8980
aS'QTP = Nn + Ns + Nv + Nf + Nq + Sn + Ss + Sv + Sf + Sq + Vn + Vs + Vv + Vf + Vq + Fn + Fs + Fv'
p12925
aS'+ Ff + Fq + Qn + Qs + Qv + Qf + Qq;'
p12926
aS'QFN = No + Nx + So + Sx + Vo + Vx + Fo + Fx + Qo + Qx;'
p12927
aS'QFP = On + Os + Ov + Of + Oq + Xn + Xs + Xv + Xf + Xq;'
p12928
aS'VTP = Vv;'
p12929
aS'VFN = Vn + Vs + Vf + Vq + Vo + Vx;'
p12930
aS'VTN = Nn + Ns + Nf + Nq + Sn + Ss + Sf + Sq + Fn + Fs + Ff + Fq + Qn + Qs + Qf + Qq + On + Os'
p12931
aS'+ Of + Oq + Xn + Xs + Xf + Xq;'
p12932
aS'VFP = Nv + Sv + Ov + Xv;'
p12933
aS'results = fopen("C:\\\\pcdeve~1\\\\arrhyt~1\\\\adtstat.txt", "a");'
p12934
aS'fprintf(results, "%s\\t%d\\t%d\\t%d\\t%d\\t%d\\t%d\\t\\n", record, QTP, QFN, QFP, VTP, VFN, VFP);'
p12935
aS'fclose(results);'
p12936
ag9104
aa(lp12937
S'/* file: ecgmap.h\tG. Moody        8 June 1983'
p12938
aS'Last revised:\t4 May 1999\twfdblib 10.0.0'
p12939
aS'ECG annotation code mapping macros'
p12940
ag8980
aS'_______________________________________________________________________________'
p12941
aS'wfdb: a library for reading and writing annotated waveforms (time series data)'
p12942
aS'Copyright (C) 1999 George B. Moody'
p12943
ag8980
aS'This library is free software; you can redistribute it and/or modify it under'
p12944
aS'the terms of the GNU Library General Public License as published by the Free'
p12945
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p12946
aS'later version.'
p12947
ag8980
aS'This library is distributed in the hope that it will be useful, but WITHOUT ANY'
p12948
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p12949
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p12950
aS'details.'
p12951
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p12952
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p12953
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p12954
ag8980
aS'You may contact the author by e-mail (george@mit.edu) or postal mail'
p12955
aS'(MIT Room E25-505A, Cambridge, MA 02139 USA).  For updates to this software,'
p12956
aS'please visit PhysioNet (http://www.physionet.org/).'
p12957
aS'_______________________________________________________________________________'
p12958
ag8980
aS'These macros evaluate their arguments only once, so that they behave like'
p12959
aS"functions with respect to side-effects (e.g., `isqrs(x++)' is safe).  With"
p12960
aS'the exception of isann(), each macro uses a table;  to avoid wasting space'
p12961
aS'in programs compiled from more than one source, try to keep all references'
p12962
aS'to these macros in a single source file so that multiple instances of the'
p12963
aS'tables are not required.  To save even more space, simply define the unneeded'
p12964
aS"macros before including this file (e.g., `#define map1').*/"
p12965
ag8980
aS'#ifndef wfdb_ECGMAP_H /* avoid multiple definitions */'
p12966
aS'#define wfdb_ECGMAP_H'
p12967
ag8980
aS'#ifndef wfdb_ECGCODES_H'
p12968
aS'#include "ecgcodes.h"'
p12969
aS'#endif'
p12970
ag8980
aS'/* isann(A) is true if A is a legal annotation code, false otherwise */'
p12971
aS'#define isann(A) (0 < (wfdb_mt = (A)) && wfdb_mt <= ACMAX)'
p12972
aS'static int wfdb_mt; /* macro temporary variable */'
p12973
ag8980
aS'/* isqrs(A) is true (1) if A denotes a QRS complex, false (0) otherwise */'
p12974
aS'#ifndef isqrs'
p12975
aS'#define isqrs(A) (isann(A) ? wfdb_qrs[wfdb_mt] : 0)'
p12976
aS'#define setisqrs(A, X) (isann(A) ? (wfdb_qrs[wfdb_mt] = (X)) : 0)'
p12977
aS'static char wfdb_qrs[] = {'
p12978
aS'0, 1, 1, 1, 1, 1, 1, 1, 1, 1, /* 0 - 9 */'
p12979
aS'1, 1, 1, 1, 0, 0, 0, 0, 0, 0, /* 10 - 19 */'
p12980
aS'0, 0, 0, 0, 0, 1, 0, 0, 0, 0, /* 20 - 29 */'
p12981
aS'1, 1, 0, 0, 1, 1, 0, 0, 1, 0, /* 30 - 39 */'
p12982
aS'0, 1, 0, 0, 0, 0, 0, 0, 0, 0 /* 40 - 49 */'
p12983
aS'};'
p12984
aS'#endif'
p12985
ag8980
aS'/* map1(A) maps A into one of {NOTQRS, NORMAL, PVC, FUSION, LEARN} */'
p12986
aS'#ifndef map1'
p12987
aS'#define map1(A) (isann(A) ? wfdb_mp1[wfdb_mt] : NOTQRS)'
p12988
aS'#define setmap1(A, X) (isann(A) ? (wfdb_mp1[wfdb_mt] = (X)) : NOTQRS)'
p12989
aS'static char wfdb_mp1[] = {'
p12990
aS'NOTQRS, NORMAL, NORMAL, NORMAL, NORMAL, /* 0 - 4 */'
p12991
aS'PVC, FUSION, NORMAL, NORMAL, NORMAL, /* 5 - 9 */'
p12992
aS'PVC, NORMAL, NORMAL, NORMAL, NOTQRS, /* 10 - 14 */'
p12993
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 15 - 19 */'
p12994
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 20 - 24 */'
p12995
aS'NORMAL, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 25 - 29 */'
p12996
aS'LEARN, PVC, NOTQRS, NOTQRS, NORMAL, /* 30 - 34 */'
p12997
aS'NORMAL, NOTQRS, NOTQRS, NORMAL, NOTQRS, /* 35 - 39 */'
p12998
aS'NOTQRS, PVC, NOTQRS, NOTQRS, NOTQRS, /* 40 - 44 */'
p12999
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS /* 45 - 49 */'
p13000
aS'};'
p13001
aS'#endif'
p13002
ag8980
aS'/* map2(A) maps A into one of {NOTQRS, NORMAL, SVPB, PVC, FUSION, LEARN} */'
p13003
aS'#ifndef map2'
p13004
aS'#define map2(A) (isann(A) ? wfdb_mp2[wfdb_mt] : NOTQRS)'
p13005
aS'#define setmap2(A, X) (isann(A) ? (wfdb_mp2[wfdb_mt] = (X)) : NOTQRS)'
p13006
aS'static char wfdb_mp2[] = {'
p13007
aS'NOTQRS, NORMAL, NORMAL, NORMAL, SVPB, /* 0 - 4 */'
p13008
aS'PVC, FUSION, SVPB, SVPB, SVPB, /* 5 - 9 */'
p13009
aS'PVC, NORMAL, NORMAL, NORMAL, NOTQRS, /* 10 - 14 */'
p13010
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 15 - 19 */'
p13011
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 20 - 24 */'
p13012
aS'NORMAL, NOTQRS, NOTQRS, NOTQRS, NOTQRS, /* 25 - 29 */'
p13013
aS'LEARN, PVC, NOTQRS, NOTQRS, NORMAL, /* 30 - 34 */'
p13014
aS'NORMAL, NOTQRS, NOTQRS, NORMAL, NOTQRS, /* 35 - 39 */'
p13015
aS'NOTQRS, PVC, NOTQRS, NOTQRS, NOTQRS, /* 40 - 44 */'
p13016
aS'NOTQRS, NOTQRS, NOTQRS, NOTQRS, NOTQRS /* 45 - 49 */'
p13017
aS'};'
p13018
aS'#endif'
p13019
ag8980
aS'/* ammap(A) maps an AHA annotation code, A, into an MIT annotation code */'
p13020
aS'#ifndef ammap'
p13021
aS"#define ammap(A) (('D' < (wfdb_mt = (A)) && wfdb_mt <= ']') ? wfdb_ammp[wfdb_mt - 'E'] : NOTQRS)"
p13022
aS'static char wfdb_ammp[] = {'
p13023
aS"VESC, FUSION, NOTQRS, NOTQRS, NOTQRS, /* 'E' - 'I' */"
p13024
aS"NOTQRS, NOTQRS, NOTQRS, NOTQRS, NORMAL, /* 'J' - 'N' */"
p13025
aS"NOTE, PACE, UNKNOWN, RONT, NOTQRS, /* 'O' - 'S' */"
p13026
aS"NOTQRS, NOISE, PVC, NOTQRS, NOTQRS, /* 'T' - 'X' */"
p13027
aS"NOTQRS, NOTQRS, VFON, NOTQRS, VFOFF /* 'Y' - ']' */"
p13028
aS'};'
p13029
aS'#endif'
p13030
ag8980
aS'/* mamap(A,S) maps MIT code A, subtype S, into an AHA annotation code */'
p13031
aS'#ifndef mamap'
p13032
aS'#define mamap(A, S)                                                                                \\'
p13033
aS"(isann(A) ? (((wfdb_mt = wfdb_mamp[wfdb_mt]) == 'U' && (S) != -1) ? 'O' : wfdb_mt) : 'O')"
p13034
aS'static char wfdb_mamp[] = {'
p13035
aS"'O', 'N', 'N', 'N', 'N', /* 0 - 4 */"
p13036
aS"'V', 'F', 'N', 'N', 'N', /* 5 - 9 */"
p13037
aS"'E', 'N', 'P', 'Q', 'U', /* 10 - 14 */"
p13038
aS"'O', 'O', 'O', 'O', 'O', /* 15 - 19 */"
p13039
aS"'O', 'O', 'O', 'O', 'O', /* 20 - 24 */"
p13040
aS"'N', 'O', 'O', 'O', 'O', /* 25 - 29 */"
p13041
aS"'Q', 'O', '[', ']', 'N', /* 30 - 34 */"
p13042
aS"'N', 'O', 'O', 'N', 'O', /* 35 - 39 */"
p13043
aS"'O', 'R', 'O', 'O', 'O', /* 40 - 44 */"
p13044
aS"'O', 'O', 'O', 'O', 'O' /* 45 - 49 */"
p13045
aS'};'
p13046
aS'#endif'
p13047
ag8980
aS'/* Annotation position codes.  These may be used by applications which plot'
p13048
aS'signals and annotations to determine where to print annotation mnemonics. */'
p13049
aS'#define APUNDEF 0 /* for undefined annotation types */'
p13050
aS'#define APSTD 1 /* standard position */'
p13051
aS'#define APHIGH 2 /* a level above APSTD */'
p13052
aS'#define APLOW 3 /* a level below APSTD */'
p13053
aS"#define APATT 4 /* attached to the signal specified by `chan' */"
p13054
aS'#define APAHIGH 5 /* a level above APATT */'
p13055
aS'#define APALOW 6 /* a level below APATT */'
p13056
ag8980
aS'/* annpos(A) returns the appropriate position code for A */'
p13057
aS'#ifndef annpos'
p13058
aS'#define annpos(A) (isann(A) ? wfdb_annp[wfdb_mt] : APUNDEF)'
p13059
aS'#define setannpos(A, X) (isann(A) ? (wfdb_annp[wfdb_mt] = (X)) : APUNDEF)'
p13060
aS'static char wfdb_annp[] = {'
p13061
aS'APUNDEF, APSTD, APSTD, APSTD, APSTD, /* 0 - 4 */'
p13062
aS'APSTD, APSTD, APSTD, APSTD, APSTD, /* 5 - 9 */'
p13063
aS'APSTD, APSTD, APSTD, APSTD, APHIGH, /* 10 - 14 */'
p13064
aS'APUNDEF, APHIGH, APUNDEF, APHIGH, APHIGH, /* 15 - 19 */'
p13065
aS'APHIGH, APHIGH, APHIGH, APHIGH, APHIGH, /* 20 - 24 */'
p13066
aS'APSTD, APHIGH, APHIGH, APLOW, APHIGH, /* 25 - 29 */'
p13067
aS'APSTD, APSTD, APSTD, APSTD, APSTD, /* 30 - 34 */'
p13068
aS'APSTD, APHIGH, APHIGH, APSTD, APHIGH, /* 35 - 39 */'
p13069
aS'APHIGH, APSTD, APUNDEF, APUNDEF, APUNDEF, /* 40 - 44 */'
p13070
aS'APUNDEF, APUNDEF, APUNDEF, APUNDEF, APUNDEF /* 45 - 49 */'
p13071
aS'};'
p13072
aS'#endif'
p13073
ag8980
aS'#endif'
p13074
aa(lp13075
S'/*****************************************************************************'
p13076
aS'FILE:  bdac.h'
p13077
aS'AUTHOR:\tPatrick S. Hamilton'
p13078
aS'REVISED:\t9/25/2001'
p13079
aS'___________________________________________________________________________'
p13080
ag8980
aS'bdac.h: Beat detection and classification parameter definitions.'
p13081
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p13082
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p13083
aS'the terms of the GNU Library General Public License as published by the Free'
p13084
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p13085
aS'later version.'
p13086
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p13087
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p13088
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p13089
aS'details.'
p13090
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p13091
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p13092
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p13093
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p13094
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p13095
aS'MA 02143 USA).  For updates to this software, please visit our website'
p13096
aS'(http://www.eplimited.com).'
p13097
aS'******************************************************************************/'
p13098
aS'#define BEAT_SAMPLE_RATE 100'
p13099
aS'#define BEAT_MS_PER_SAMPLE ((double)1000 / (double)BEAT_SAMPLE_RATE)'
p13100
ag8980
aS'#define BEAT_MS10 ((int)(10 / BEAT_MS_PER_SAMPLE + 0.5))'
p13101
aS'#define BEAT_MS20 ((int)(20 / BEAT_MS_PER_SAMPLE + 0.5))'
p13102
aS'#define BEAT_MS40 ((int)(40 / BEAT_MS_PER_SAMPLE + 0.5))'
p13103
aS'#define BEAT_MS50 ((int)(50 / BEAT_MS_PER_SAMPLE + 0.5))'
p13104
aS'#define BEAT_MS60 ((int)(60 / BEAT_MS_PER_SAMPLE + 0.5))'
p13105
aS'#define BEAT_MS70 ((int)(70 / BEAT_MS_PER_SAMPLE + 0.5))'
p13106
aS'#define BEAT_MS80 ((int)(80 / BEAT_MS_PER_SAMPLE + 0.5))'
p13107
aS'#define BEAT_MS90 ((int)(90 / BEAT_MS_PER_SAMPLE + 0.5))'
p13108
aS'#define BEAT_MS100 ((int)(100 / BEAT_MS_PER_SAMPLE + 0.5))'
p13109
aS'#define BEAT_MS110 ((int)(110 / BEAT_MS_PER_SAMPLE + 0.5))'
p13110
aS'#define BEAT_MS130 ((int)(130 / BEAT_MS_PER_SAMPLE + 0.5))'
p13111
aS'#define BEAT_MS140 ((int)(140 / BEAT_MS_PER_SAMPLE + 0.5))'
p13112
aS'#define BEAT_MS150 ((int)(150 / BEAT_MS_PER_SAMPLE + 0.5))'
p13113
aS'#define BEAT_MS250 ((int)(250 / BEAT_MS_PER_SAMPLE + 0.5))'
p13114
aS'#define BEAT_MS280 ((int)(280 / BEAT_MS_PER_SAMPLE + 0.5))'
p13115
aS'#define BEAT_MS300 ((int)(300 / BEAT_MS_PER_SAMPLE + 0.5))'
p13116
aS'#define BEAT_MS350 ((int)(350 / BEAT_MS_PER_SAMPLE + 0.5))'
p13117
aS'#define BEAT_MS400 ((int)(400 / BEAT_MS_PER_SAMPLE + 0.5))'
p13118
aS'#define BEAT_MS1000 BEAT_SAMPLE_RATE'
p13119
ag8980
aS'#define BEATLGTH BEAT_MS1000'
p13120
aS'#define MAXTYPES 8'
p13121
aS'#define FIDMARK BEAT_MS400'
p13122
aa(lp13123
S'void ResetPostClassify();'
p13124
aS'void PostClassify('
p13125
aS'int* recentTypes, int domType, int* recentRRs, int width, double mi2, int rhythmClass);'
p13126
aS'int CheckPostClass(int type);'
p13127
aS'int CheckPCRhythm(int type);'
p13128
ag8980
aS'// yo yo yo stuff'
p13129
aa(lp13130
S'/*****************************************************************************'
p13131
aS'FILE:  match.cpp'
p13132
aS'AUTHOR:\tPatrick S. Hamilton'
p13133
aS'REVISED:\t5/13/2002'
p13134
aS'___________________________________________________________________________'
p13135
ag8980
aS'match.cpp: Match beats to previous beats.'
p13136
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p13137
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p13138
aS'the terms of the GNU Library General Public License as published by the Free'
p13139
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p13140
aS'later version.'
p13141
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p13142
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p13143
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p13144
aS'details.'
p13145
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p13146
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p13147
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p13148
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p13149
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p13150
aS'MA 02143 USA).  For updates to this software, please visit our website'
p13151
aS'(http://www.eplimited.com).'
p13152
aS'__________________________________________________________________________'
p13153
ag8980
aS'Match.cpp contains functions for managing template matching of beats and'
p13154
aS'managing of feature data associated with each beat type.  These'
p13155
aS'functions are called functions in classify.cpp.  Beats are matched to'
p13156
aS'previoiusly detected beats types based on how well they match point by point'
p13157
aS'in a MATCH_LENGTH region centered on FIDMARK (R-wave location).  The following'
p13158
aS'is a list of functions that are available for calling by classify.'
p13159
ag8980
aS'ResetMatch -- Resets global variables used in template matching.'
p13160
aS'CompareBeats -- Measures the difference between two beats with'
p13161
aS'beats scaled to produce the best match.'
p13162
aS'CompareBeats2 -- Measures the difference between two beats without'
p13163
aS'beat scaling.'
p13164
aS'NewBeatType -- Start a new beat type with the present beat.'
p13165
aS'BestMorphMatch -- Finds the beat template that best matches a new beat.'
p13166
aS'UpdateBeatType -- Updates existing beat template and associated features'
p13167
aS'based on a new beat.'
p13168
aS'GetDominantType -- Returns the NORMAL beat type that has occorred most often.'
p13169
aS'ClearLastNewType -- Removes the last new beat type from the possible beat'
p13170
aS'types.'
p13171
aS'DomCompare -- Compares the template for a given beat type to the template'
p13172
aS'of the dominant normal beat type.'
p13173
aS'DomCompare2 -- Compares a given beat template to the templat of the'
p13174
aS'dominant normal beat type.'
p13175
ag8980
aS'PostClassify -- Classifies beats based on preceding and following beats'
p13176
aS'and R-to-R intervals.'
p13177
ag8980
aS'ResetPostClassify -- Resets variables used for post classification.'
p13178
ag8980
aS'CheckPostClass -- Check type classification based on last eight post'
p13179
aS'classifications.'
p13180
ag8980
aS'CheckPCClass -- Check post beat rhythm classification for the last eight'
p13181
aS'beats.'
p13182
ag8980
aS'A number of simple functions allow access to beat features while maintaining'
p13183
aS'some level of encapsulation:'
p13184
ag8980
aS'GetTypesCount -- Returns number of beat types that have been detected.'
p13185
aS'GetBeatTypeCount -- Returns the number of beats of a given type'
p13186
aS'that have been detected.'
p13187
aS'GetBeatWidth -- Returns the width estimate for a given beat type.'
p13188
aS'SetBeatClass -- Associates a beat classification with a beat type.'
p13189
aS'GetBeatBegin -- Returns the beginning point for a given beat type.'
p13190
aS'GetBeatEnd -- Returns the ending point for a given beat type.'
p13191
ag8980
aS'******************************************************************************/'
p13192
aS'#include <stdlib.h>'
p13193
aS'#include <stdio.h>'
p13194
aS'#include "ecgcodes.h"'
p13195
ag8980
aS'#include "bdac.h"'
p13196
aS'#define MATCH_LENGTH BEAT_MS300 // Number of points used for beat matching.'
p13197
aS'#define MATCH_LIMIT 1.2 // Match limit used testing whether two'
p13198
aS'// beat types might be combined.'
p13199
aS'#define COMBINE_LIMIT 0.8 // Limit used for deciding whether two types'
p13200
aS'// can be combined.'
p13201
ag8980
aS'#define MATCH_START (FIDMARK - (MATCH_LENGTH / 2)) // Starting point for beat matching'
p13202
aS'#define MATCH_END (FIDMARK + (MATCH_LENGTH / 2)) // End point for beat matching.'
p13203
aS'#define MAXPREV 8 // Number of preceeding beats used as beat features.'
p13204
aS'#define MAX_SHIFT BEAT_MS40'
p13205
ag8980
aS'// Local prototypes.'
p13206
ag8980
aS'int NoiseCheck(int* beat);'
p13207
aS'double CompareBeats(int* beat1, int* beat2, int* shiftAdj);'
p13208
aS'double CompareBeats2(int* beat1, int* beat2, int* shiftAdj);'
p13209
aS'void UpdateBeat(int* aveBeat, int* newBeat, int shift);'
p13210
aS'void BeatCopy(int srcBeat, int destBeat);'
p13211
aS'int MinimumBeatVariation(int type);'
p13212
ag8980
aS'// External prototypes.'
p13213
ag8980
aS'void AnalyzeBeat('
p13214
aS'int* beat, int* onset, int* offset, int* isoLevel, int* beatBegin, int* beatEnd, int* amp);'
p13215
aS'void AdjustDomData(int oldType, int newType);'
p13216
aS'void CombineDomData(int oldType, int newType);'
p13217
ag8980
aS'// Global variables.'
p13218
ag8980
aS'int BeatTemplates[MAXTYPES][BEATLGTH];'
p13219
aS'int BeatCounts[MAXTYPES];'
p13220
aS'int BeatWidths[MAXTYPES];'
p13221
aS'int BeatClassifications[MAXTYPES];'
p13222
aS'int BeatBegins[MAXTYPES];'
p13223
aS'int BeatEnds[MAXTYPES];'
p13224
aS'int BeatsSinceLastMatch[MAXTYPES];'
p13225
aS'int BeatAmps[MAXTYPES];'
p13226
aS'int BeatCenters[MAXTYPES];'
p13227
aS'double MIs[MAXTYPES][8];'
p13228
ag8980
aS'// Need access to these in postclas.cpp when beat types are combined'
p13229
aS'// and moved.'
p13230
ag8980
aS'extern int PostClass[MAXTYPES][8];'
p13231
aS'extern int PCRhythm[MAXTYPES][8];'
p13232
ag8980
aS'int TypeCount = 0;'
p13233
ag8980
aS'/***************************************************************************'
p13234
aS'ResetMatch() resets static variables involved with template matching.'
p13235
aS'****************************************************************************/'
p13236
ag8980
aS'void ResetMatch(void)'
p13237
ag9665
aS'int i, j;'
p13238
aS'TypeCount = 0;'
p13239
aS'for (i = 0; i < MAXTYPES; ++i)'
p13240
ag9665
aS'BeatCounts[i] = 0;'
p13241
aS'BeatClassifications[i] = UNKNOWN;'
p13242
aS'for (j = 0; j < 8; ++j)'
p13243
ag9665
aS'MIs[i][j] = 0;'
p13244
ag9104
ag9104
ag9104
ag8980
aS'/**************************************************************************'
p13245
aS'CompareBeats() takes two beat buffers and compares how well they match'
p13246
aS'point-by-point.  Beat2 is shifted and scaled to produce the closest'
p13247
aS'possible match.  The metric returned is the sum of the absolute'
p13248
aS'differences between beats divided by the amplitude of the beats.  The'
p13249
aS'shift used for the match is returned via the pointer *shiftAdj.'
p13250
aS'***************************************************************************/'
p13251
ag8980
aS'#define MATCH_START (FIDMARK - (MATCH_LENGTH / 2))'
p13252
aS'#define MATCH_END (FIDMARK + (MATCH_LENGTH / 2))'
p13253
ag8980
aS'double CompareBeats(int* beat1, int* beat2, int* shiftAdj)'
p13254
ag9665
aS'int i, max, min, magSum, shift;'
p13255
aS'long beatDiff, meanDiff, minDiff, minShift;'
p13256
aS'double metric, scaleFactor, tempD;'
p13257
ag8980
aS'// Calculate the magnitude of each beat.'
p13258
ag8980
aS'max = min = beat1[MATCH_START];'
p13259
aS'for (i = MATCH_START + 1; i < MATCH_END; ++i)'
p13260
ag9665
ag7435
aS'max = beat1[i];'
p13261
aS'else if (beat1[i] < min)'
p13262
aS'min = beat1[i];'
p13263
ag9104
aS'magSum = max - min;'
p13264
ag8980
aS'i = MATCH_START;'
p13265
aS'max = min = beat2[i];'
p13266
aS'for (i = MATCH_START + 1; i < MATCH_END; ++i)'
p13267
ag9665
ag7480
aS'max = beat2[i];'
p13268
aS'else if (beat2[i] < min)'
p13269
aS'min = beat2[i];'
p13270
ag9104
aS'// magSum += max - min ;'
p13271
aS'scaleFactor = magSum;'
p13272
aS'scaleFactor /= max - min;'
p13273
aS'magSum *= 2;'
p13274
ag8980
aS'// Calculate the sum of the point-by-point'
p13275
aS'// absolute differences for five possible shifts.'
p13276
ag8980
aS'for (shift = -MAX_SHIFT; shift <= MAX_SHIFT; ++shift)'
p13277
ag9665
aS'for (i = FIDMARK - (MATCH_LENGTH >> 1), meanDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p13278
aS'++i)'
p13279
ag9665
aS'tempD = beat2[i + shift];'
p13280
aS'tempD *= scaleFactor;'
p13281
aS'meanDiff += beat1[i] - tempD; // beat2[i+shift] ;'
p13282
ag9104
aS'meanDiff /= MATCH_LENGTH;'
p13283
ag8980
aS'for (i = FIDMARK - (MATCH_LENGTH >> 1), beatDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p13284
aS'++i)'
p13285
ag9665
aS'tempD = beat2[i + shift];'
p13286
aS'tempD *= scaleFactor;'
p13287
aS'beatDiff += abs(beat1[i] - meanDiff - tempD); // beat2[i+shift]  ) ;'
p13288
ag9104
ag8980
ag8980
ag7569
ag9665
aS'minDiff = beatDiff;'
p13289
aS'minShift = -MAX_SHIFT;'
p13290
ag9104
aS'else if (beatDiff < minDiff)'
p13291
ag9665
aS'minDiff = beatDiff;'
p13292
aS'minShift = shift;'
p13293
ag9104
ag9104
ag8980
aS'metric = minDiff;'
p13294
aS'*shiftAdj = minShift;'
p13295
aS'metric /= magSum;'
p13296
ag8980
aS'// Metric scales inversely with match length.'
p13297
aS'// algorithm was originally tuned with a match'
p13298
aS'// length of 30.'
p13299
ag8980
aS'metric *= 30;'
p13300
aS'metric /= MATCH_LENGTH;'
p13301
aS'return (metric);'
p13302
ag9104
ag8980
aS'/***************************************************************************'
p13303
aS'CompareBeats2 is nearly the same as CompareBeats above, but beat2 is'
p13304
aS'not scaled before calculating the match metric.  The match metric is'
p13305
aS'then the sum of the absolute differences divided by the average amplitude'
p13306
aS'of the two beats.'
p13307
aS'****************************************************************************/'
p13308
ag8980
aS'double CompareBeats2(int* beat1, int* beat2, int* shiftAdj)'
p13309
ag9665
aS'int i, max, min, shift;'
p13310
aS'int mag1, mag2;'
p13311
aS'long beatDiff, meanDiff, minDiff, minShift;'
p13312
aS'double metric;'
p13313
ag8980
aS'// Calculate the magnitude of each beat.'
p13314
ag8980
aS'max = min = beat1[MATCH_START];'
p13315
aS'for (i = MATCH_START + 1; i < MATCH_END; ++i)'
p13316
ag9665
ag7623
aS'max = beat1[i];'
p13317
aS'else if (beat1[i] < min)'
p13318
aS'min = beat1[i];'
p13319
ag9104
aS'mag1 = max - min;'
p13320
ag8980
aS'i = MATCH_START;'
p13321
aS'max = min = beat2[i];'
p13322
aS'for (i = MATCH_START + 1; i < MATCH_END; ++i)'
p13323
ag9665
ag7668
aS'max = beat2[i];'
p13324
aS'else if (beat2[i] < min)'
p13325
aS'min = beat2[i];'
p13326
ag9104
aS'mag2 = max - min;'
p13327
ag8980
aS'// Calculate the sum of the point-by-point'
p13328
aS'// absolute differences for five possible shifts.'
p13329
ag8980
aS'for (shift = -MAX_SHIFT; shift <= MAX_SHIFT; ++shift)'
p13330
ag9665
aS'for (i = FIDMARK - (MATCH_LENGTH >> 1), meanDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p13331
aS'++i)'
p13332
aS'meanDiff += beat1[i] - beat2[i + shift];'
p13333
aS'meanDiff /= MATCH_LENGTH;'
p13334
ag8980
aS'for (i = FIDMARK - (MATCH_LENGTH >> 1), beatDiff = 0; i < FIDMARK + (MATCH_LENGTH >> 1);'
p13335
aS'++i)'
p13336
aS'beatDiff += abs(beat1[i] - meanDiff - beat2[i + shift]);'
p13337
ag9704
ag8980
ag7757
ag9665
aS'minDiff = beatDiff;'
p13338
aS'minShift = -MAX_SHIFT;'
p13339
ag9104
aS'else if (beatDiff < minDiff)'
p13340
ag9665
aS'minDiff = beatDiff;'
p13341
aS'minShift = shift;'
p13342
ag9104
ag9104
ag8980
aS'metric = minDiff;'
p13343
aS'*shiftAdj = minShift;'
p13344
aS'metric /= (mag1 + mag2);'
p13345
ag8980
aS'// Metric scales inversely with match length.'
p13346
aS'// algorithm was originally tuned with a match'
p13347
aS'// length of 30.'
p13348
ag8980
aS'metric *= 30;'
p13349
aS'metric /= MATCH_LENGTH;'
p13350
ag8980
aS'return (metric);'
p13351
ag9104
ag8980
aS'/************************************************************************'
p13352
aS'UpdateBeat() averages a new beat into an average beat template by adding'
p13353
aS'1/8th of the new beat to 7/8ths of the average beat.'
p13354
aS'*************************************************************************/'
p13355
ag8980
aS'void UpdateBeat(int* aveBeat, int* newBeat, int shift)'
p13356
ag9665
aS'int i;'
p13357
aS'long tempLong;'
p13358
ag8980
aS'for (i = 0; i < BEATLGTH; ++i)'
p13359
ag9665
ag7801
ag9665
aS'tempLong = aveBeat[i];'
p13360
aS'tempLong *= 7;'
p13361
aS'tempLong += newBeat[i + shift];'
p13362
aS'tempLong >>= 3;'
p13363
aS'aveBeat[i] = tempLong;'
p13364
ag9104
ag9104
ag9104
ag8980
aS'/*******************************************************'
p13365
aS'GetTypesCount returns the number of types that have'
p13366
aS'been detected.'
p13367
aS'*******************************************************/'
p13368
ag8980
aS'int GetTypesCount(void)'
p13369
ag9665
aS'return (TypeCount);'
p13370
ag9104
ag8980
aS'/********************************************************'
p13371
aS'GetBeatTypeCount returns the number of beats of a'
p13372
aS'a particular type have been detected.'
p13373
aS'********************************************************/'
p13374
ag8980
aS'int GetBeatTypeCount(int type)'
p13375
ag9665
aS'return (BeatCounts[type]);'
p13376
ag9104
ag8980
aS'/*******************************************************'
p13377
aS'GetBeatWidth returns the QRS width estimate for'
p13378
aS'a given type of beat.'
p13379
aS'*******************************************************/'
p13380
aS'int GetBeatWidth(int type)'
p13381
ag9665
aS'return (BeatWidths[type]);'
p13382
ag9104
ag8980
aS'/*******************************************************'
p13383
aS'GetBeatCenter returns the point between the onset and'
p13384
aS'offset of a beat.'
p13385
aS'********************************************************/'
p13386
ag8980
aS'int GetBeatCenter(int type)'
p13387
ag9665
aS'return (BeatCenters[type]);'
p13388
ag9104
ag8980
aS'/*******************************************************'
p13389
aS'GetBeatClass returns the present classification for'
p13390
aS'a given beat type (NORMAL, PVC, or UNKNOWN).'
p13391
aS'********************************************************/'
p13392
ag8980
aS'int GetBeatClass(int type)'
p13393
ag9665
ag7875
aS'return (UNKNOWN);'
p13394
aS'return (BeatClassifications[type]);'
p13395
ag9104
ag8980
aS'/******************************************************'
p13396
aS'SetBeatClass sets up a beat classifation for a'
p13397
aS'given type.'
p13398
aS'******************************************************/'
p13399
ag8980
aS'void SetBeatClass(int type, int beatClass)'
p13400
ag9665
aS'BeatClassifications[type] = beatClass;'
p13401
ag9104
ag8980
aS'/******************************************************************************'
p13402
aS'NewBeatType starts a new beat type by storing the new beat and its'
p13403
aS'features as the next available beat type.'
p13404
aS'******************************************************************************/'
p13405
ag8980
aS'int NewBeatType(int* newBeat)'
p13406
ag9665
aS'int i, onset, offset, isoLevel, beatBegin, beatEnd;'
p13407
aS'int mcType, amp;'
p13408
ag8980
aS'// Update count of beats since each template was matched.'
p13409
ag8980
aS'for (i = 0; i < TypeCount; ++i)'
p13410
aS'++BeatsSinceLastMatch[i];'
p13411
ag8980
ag7972
ag9665
aS'for (i = 0; i < BEATLGTH; ++i)'
p13412
aS'BeatTemplates[TypeCount][i] = newBeat[i];'
p13413
ag8980
aS'BeatCounts[TypeCount] = 1;'
p13414
aS'BeatClassifications[TypeCount] = UNKNOWN;'
p13415
aS'AnalyzeBeat('
p13416
aS'&BeatTemplates[TypeCount][0], &onset, &offset, &isoLevel, &beatBegin, &beatEnd, &amp);'
p13417
aS'BeatWidths[TypeCount] = offset - onset;'
p13418
aS'BeatCenters[TypeCount] = (offset + onset) / 2;'
p13419
aS'BeatBegins[TypeCount] = beatBegin;'
p13420
aS'BeatEnds[TypeCount] = beatEnd;'
p13421
aS'BeatAmps[TypeCount] = amp;'
p13422
ag8980
aS'BeatsSinceLastMatch[TypeCount] = 0;'
p13423
ag8980
aS'++TypeCount;'
p13424
aS'return (TypeCount - 1);'
p13425
ag9104
ag8980
aS'// If we have used all the template space, replace the beat'
p13426
aS'// that has occurred the fewest number of times.'
p13427
ag8980
aS'else'
p13428
ag9665
aS'// Find the template with the fewest occurances,'
p13429
aS"// that hasn't been matched in at least 500 beats."
p13430
ag8980
aS'mcType = -1;'
p13431
ag8980
ag8043
ag9665
aS'mcType = 0;'
p13432
aS'for (i = 1; i < MAXTYPES; ++i)'
p13433
ag9665
ag8012
aS'mcType = i;'
p13434
aS'else if (BeatCounts[i] == BeatCounts[mcType])'
p13435
ag9665
ag8025
aS'mcType = i;'
p13436
ag9104
ag9104
ag9104
ag8980
aS'// Adjust dominant beat monitor data.'
p13437
ag8980
aS'AdjustDomData(mcType, MAXTYPES);'
p13438
ag8980
aS'// Substitute this beat.'
p13439
ag8980
aS'for (i = 0; i < BEATLGTH; ++i)'
p13440
aS'BeatTemplates[mcType][i] = newBeat[i];'
p13441
ag8980
aS'BeatCounts[mcType] = 1;'
p13442
aS'BeatClassifications[mcType] = UNKNOWN;'
p13443
aS'AnalyzeBeat('
p13444
aS'&BeatTemplates[mcType][0], &onset, &offset, &isoLevel, &beatBegin, &beatEnd, &amp);'
p13445
aS'BeatWidths[mcType] = offset - onset;'
p13446
aS'BeatCenters[mcType] = (offset + onset) / 2;'
p13447
aS'BeatBegins[mcType] = beatBegin;'
p13448
aS'BeatEnds[mcType] = beatEnd;'
p13449
aS'BeatsSinceLastMatch[mcType] = 0;'
p13450
aS'BeatAmps[mcType] = amp;'
p13451
aS'return (mcType);'
p13452
ag9104
ag9104
ag8980
aS'/***************************************************************************'
p13453
aS'BestMorphMatch tests a new beat against all available beat types and'
p13454
aS'returns (via pointers) the existing type that best matches, the match'
p13455
aS'metric for that type, and the shift used for that match.'
p13456
aS'***************************************************************************/'
p13457
ag8980
aS'void BestMorphMatch(int* newBeat, int* matchType, double* matchIndex, double* mi2, int* shiftAdj)'
p13458
ag9665
aS'int type, i, bestMatch, nextBest, minShift, shift, temp;'
p13459
aS'int bestShift2, nextShift2;'
p13460
aS'double bestDiff2, nextDiff2;'
p13461
aS'double beatDiff, minDiff, nextDiff = 10000;'
p13462
ag8980
ag8130
ag9665
aS'*matchType = 0;'
p13463
aS'*matchIndex = 1000; // Make sure there is no match so a new beat is'
p13464
aS'*shiftAdj = 0; // created.'
p13465
aS'return;'
p13466
ag9104
ag8980
aS'// Compare the new beat to all type beat'
p13467
aS'// types that have been saved.'
p13468
ag8980
aS'for (type = 0; type < TypeCount; ++type)'
p13469
ag9665
aS'beatDiff = CompareBeats(&BeatTemplates[type][0], newBeat, &shift);'
p13470
ag8101
ag9665
aS'bestMatch = 0;'
p13471
aS'minDiff = beatDiff;'
p13472
aS'minShift = shift;'
p13473
ag9104
aS'else if (beatDiff < minDiff)'
p13474
ag9665
aS'nextBest = bestMatch;'
p13475
aS'nextDiff = minDiff;'
p13476
aS'bestMatch = type;'
p13477
aS'minDiff = beatDiff;'
p13478
aS'minShift = shift;'
p13479
ag9104
aS'else if ((TypeCount > 1) && (type == 1))'
p13480
ag9665
aS'nextBest = type;'
p13481
aS'nextDiff = beatDiff;'
p13482
ag9104
aS'else if (beatDiff < nextDiff)'
p13483
ag9665
aS'nextBest = type;'
p13484
aS'nextDiff = beatDiff;'
p13485
ag9104
ag9104
ag8980
aS'// If this beat was close to two different'
p13486
aS'// templates, see if the templates which template'
p13487
aS'// is the best match when no scaling is used.'
p13488
aS'// Then check whether the two close types can be combined.'
p13489
ag8980
ag8345
ag9665
aS'// Compare without scaling.'
p13490
ag8980
aS'bestDiff2 = CompareBeats2(&BeatTemplates[bestMatch][0], newBeat, &bestShift2);'
p13491
aS'nextDiff2 = CompareBeats2(&BeatTemplates[nextBest][0], newBeat, &nextShift2);'
p13492
ag8164
ag9665
aS'temp = bestMatch;'
p13493
aS'bestMatch = nextBest;'
p13494
aS'nextBest = temp;'
p13495
aS'temp = minDiff;'
p13496
aS'minDiff = nextDiff;'
p13497
aS'nextDiff = temp;'
p13498
aS'minShift = nextShift2;'
p13499
aS'*mi2 = bestDiff2;'
p13500
ag9104
aS'else'
p13501
aS'*mi2 = nextDiff2;'
p13502
ag8980
aS'beatDiff = CompareBeats(&BeatTemplates[bestMatch][0], &BeatTemplates[nextBest][0], &shift);'
p13503
ag8980
ag8343
ag9665
ag8980
aS'// Combine beats into bestMatch'
p13504
ag8980
ag8315
ag9665
aS'for (i = 0; i < BEATLGTH; ++i)'
p13505
ag9665
ag8249
ag9665
aS'BeatTemplates[bestMatch][i] += BeatTemplates[nextBest][i + shift];'
p13506
aS'BeatTemplates[bestMatch][i] >>= 1;'
p13507
ag9104
ag9104
ag8980
ag8300
aS'|| (BeatClassifications[nextBest] == NORMAL))'
p13508
aS'BeatClassifications[bestMatch] = NORMAL;'
p13509
ag8313
aS'|| (BeatClassifications[nextBest] == PVC))'
p13510
aS'BeatClassifications[bestMatch] = PVC;'
p13511
ag8980
aS'BeatCounts[bestMatch] += BeatCounts[nextBest];'
p13512
ag8980
aS'CombineDomData(nextBest, bestMatch);'
p13513
ag8980
aS'// Shift other templates over.'
p13514
ag8980
aS'for (type = nextBest; type < TypeCount - 1; ++type)'
p13515
aS'BeatCopy(type + 1, type);'
p13516
ag9104
ag8980
aS'// Otherwise combine beats it nextBest.'
p13517
ag8980
aS'else'
p13518
ag9665
aS'for (i = 0; i < BEATLGTH; ++i)'
p13519
ag9665
aS'BeatTemplates[nextBest][i] += BeatTemplates[bestMatch][i];'
p13520
aS'BeatTemplates[nextBest][i] >>= 1;'
p13521
ag9104
ag8980
ag8328
aS'|| (BeatClassifications[nextBest] == NORMAL))'
p13522
aS'BeatClassifications[nextBest] = NORMAL;'
p13523
ag8341
aS'|| (BeatClassifications[nextBest] == PVC))'
p13524
aS'BeatClassifications[nextBest] = PVC;'
p13525
ag8980
aS'BeatCounts[nextBest] += BeatCounts[bestMatch];'
p13526
ag8980
aS'CombineDomData(bestMatch, nextBest);'
p13527
ag8980
aS'// Shift other templates over.'
p13528
ag8980
aS'for (type = bestMatch; type < TypeCount - 1; ++type)'
p13529
aS'BeatCopy(type + 1, type);'
p13530
ag8980
ag8980
aS'bestMatch = nextBest;'
p13531
ag9104
aS'--TypeCount;'
p13532
aS'BeatClassifications[TypeCount] = UNKNOWN;'
p13533
ag9104
ag9104
aS'*mi2 = CompareBeats2(&BeatTemplates[bestMatch][0], newBeat, &bestShift2);'
p13534
aS'*matchType = bestMatch;'
p13535
aS'*matchIndex = minDiff;'
p13536
aS'*shiftAdj = minShift;'
p13537
ag9104
ag8980
aS'/***************************************************************************'
p13538
aS'UpdateBeatType updates the beat template and features of a given beat type'
p13539
aS'using a new beat.'
p13540
aS'***************************************************************************/'
p13541
ag8980
aS'void UpdateBeatType(int matchType, int* newBeat, double mi2, int shiftAdj)'
p13542
ag9665
aS'int i, onset, offset, isoLevel, beatBegin, beatEnd;'
p13543
aS'int amp;'
p13544
ag8980
aS'// Update beats since templates were matched.'
p13545
ag8980
aS'for (i = 0; i < TypeCount; ++i)'
p13546
ag9665
ag8383
aS'++BeatsSinceLastMatch[i];'
p13547
aS'else'
p13548
aS'BeatsSinceLastMatch[i] = 0;'
p13549
ag9104
ag8980
aS'// If this is only the second beat, average it with the existing'
p13550
aS'// template.'
p13551
ag8980
ag8434
aS'for (i = 0; i < BEATLGTH; ++i)'
p13552
ag9665
ag8447
aS'BeatTemplates[matchType][i]'
p13553
aS'= (BeatTemplates[matchType][i] + newBeat[i + shiftAdj]) >> 1;'
p13554
ag9104
ag8980
aS'// Otherwise do a normal update.'
p13555
ag8980
aS'else'
p13556
aS'UpdateBeat(&BeatTemplates[matchType][0], newBeat, shiftAdj);'
p13557
ag8980
aS'// Determine beat features for the new average beat.'
p13558
ag8980
aS'AnalyzeBeat('
p13559
aS'&BeatTemplates[matchType][0], &onset, &offset, &isoLevel, &beatBegin, &beatEnd, &amp);'
p13560
ag8980
aS'BeatWidths[matchType] = offset - onset;'
p13561
aS'BeatCenters[matchType] = (offset + onset) / 2;'
p13562
aS'BeatBegins[matchType] = beatBegin;'
p13563
aS'BeatEnds[matchType] = beatEnd;'
p13564
aS'BeatAmps[matchType] = amp;'
p13565
ag8980
aS'++BeatCounts[matchType];'
p13566
ag8980
aS'for (i = MAXPREV - 1; i > 0; --i)'
p13567
aS'MIs[matchType][i] = MIs[matchType][i - 1];'
p13568
aS'MIs[matchType][0] = mi2;'
p13569
ag9104
ag8980
ag8980
aS'/****************************************************************************'
p13570
aS'GetDominantType returns the NORMAL beat type that has occurred most'
p13571
aS'frequently.'
p13572
aS'****************************************************************************/'
p13573
ag8980
aS'int GetDominantType(void)'
p13574
ag9665
aS'int maxCount = 0, maxType = -1;'
p13575
aS'int type, totalCount;'
p13576
ag8980
aS'for (type = 0; type < MAXTYPES; ++type)'
p13577
ag9665
ag8475
ag9665
aS'maxType = type;'
p13578
aS'maxCount = BeatCounts[type];'
p13579
ag9104
ag9104
ag8980
aS'// If no normals are found and at least 300 beats have occurred, just use'
p13580
aS'// the most frequently occurring beat.'
p13581
ag8980
ag8552
ag9665
aS'for (type = 0, totalCount = 0; type < TypeCount; ++type)'
p13582
aS'totalCount += BeatCounts[type];'
p13583
ag8537
aS'for (type = 0; type < TypeCount; ++type)'
p13584
ag8550
ag9665
aS'maxType = type;'
p13585
aS'maxCount = BeatCounts[type];'
p13586
ag9104
ag9104
ag8980
aS'return (maxType);'
p13587
ag9104
ag8980
ag8980
aS'/***********************************************************************'
p13588
aS'ClearLastNewType removes the last new type that was initiated'
p13589
aS'************************************************************************/'
p13590
ag8980
aS'void ClearLastNewType(void)'
p13591
ag9665
ag8574
aS'--TypeCount;'
p13592
ag9104
ag8980
aS'/****************************************************************'
p13593
aS'GetBeatBegin returns the offset from the R-wave for the'
p13594
aS'beginning of the beat (P-wave onset if a P-wave is found).'
p13595
aS'*****************************************************************/'
p13596
ag8980
aS'int GetBeatBegin(int type)'
p13597
ag9665
aS'return (BeatBegins[type]);'
p13598
ag9104
ag8980
aS'/****************************************************************'
p13599
aS'GetBeatEnd returns the offset from the R-wave for the end of'
p13600
aS'a beat (T-wave offset).'
p13601
aS'*****************************************************************/'
p13602
ag8980
aS'int GetBeatEnd(int type)'
p13603
ag9665
aS'return (BeatEnds[type]);'
p13604
ag9104
ag8980
aS'int GetBeatAmp(int type)'
p13605
ag9665
aS'return (BeatAmps[type]);'
p13606
ag9104
ag8980
ag8980
aS'/************************************************************************'
p13607
aS'DomCompare2 and DomCompare return similarity indexes between a given'
p13608
aS'beat and the dominant normal type or a given type and the dominant'
p13609
aS'normal type.'
p13610
aS'************************************************************************/'
p13611
ag8980
aS'double DomCompare2(int* newBeat, int domType)'
p13612
ag9665
aS'int shift;'
p13613
aS'return (CompareBeats2(&BeatTemplates[domType][0], newBeat, &shift));'
p13614
ag9104
ag8980
aS'double DomCompare(int newType, int domType)'
p13615
ag9665
aS'int shift;'
p13616
aS'return (CompareBeats2(&BeatTemplates[domType][0], &BeatTemplates[newType][0], &shift));'
p13617
ag9104
ag8980
aS'/*************************************************************************'
p13618
aS'BeatCopy copies beat data from a source beat to a destination beat.'
p13619
aS'*************************************************************************/'
p13620
ag8980
aS'void BeatCopy(int srcBeat, int destBeat)'
p13621
ag9665
aS'int i;'
p13622
ag8980
aS'// Copy template.'
p13623
ag8980
aS'for (i = 0; i < BEATLGTH; ++i)'
p13624
aS'BeatTemplates[destBeat][i] = BeatTemplates[srcBeat][i];'
p13625
ag8980
aS'// Move feature information.'
p13626
ag8980
aS'BeatCounts[destBeat] = BeatCounts[srcBeat];'
p13627
aS'BeatWidths[destBeat] = BeatWidths[srcBeat];'
p13628
aS'BeatCenters[destBeat] = BeatCenters[srcBeat];'
p13629
aS'for (i = 0; i < MAXPREV; ++i)'
p13630
ag9665
aS'PostClass[destBeat][i] = PostClass[srcBeat][i];'
p13631
aS'PCRhythm[destBeat][i] = PCRhythm[srcBeat][i];'
p13632
ag9104
ag8980
aS'BeatClassifications[destBeat] = BeatClassifications[srcBeat];'
p13633
aS'BeatBegins[destBeat] = BeatBegins[srcBeat];'
p13634
aS'BeatEnds[destBeat] = BeatBegins[srcBeat];'
p13635
aS'BeatsSinceLastMatch[destBeat] = BeatsSinceLastMatch[srcBeat];'
p13636
aS'BeatAmps[destBeat] = BeatAmps[srcBeat];'
p13637
ag8980
aS'// Adjust data in dominant beat monitor.'
p13638
ag8980
aS'AdjustDomData(srcBeat, destBeat);'
p13639
ag9104
ag8980
aS'/********************************************************************'
p13640
aS'Minimum beat variation returns a 1 if the previous eight beats'
p13641
aS'have all had similarity indexes less than 0.5.'
p13642
aS'*********************************************************************/'
p13643
ag8980
aS'int MinimumBeatVariation(int type)'
p13644
ag9665
aS'int i;'
p13645
aS'for (i = 0; i < MAXTYPES; ++i)'
p13646
ag9665
ag8700
aS'i = MAXTYPES + 2;'
p13647
ag9104
ag8739
aS'return (1);'
p13648
aS'else'
p13649
aS'return (0);'
p13650
ag9104
ag8980
aS'/**********************************************************************'
p13651
aS'WideBeatVariation returns true if the average similarity index'
p13652
aS'for a given beat type to its template is greater than WIDE_VAR_LIMIT.'
p13653
aS'***********************************************************************/'
p13654
ag8980
aS'#define WIDE_VAR_LIMIT 0.50'
p13655
ag8980
aS'int WideBeatVariation(int type)'
p13656
ag9665
aS'int i, n;'
p13657
aS'double aveMI;'
p13658
ag8980
aS'n = BeatCounts[type];'
p13659
ag8783
aS'n = 8;'
p13660
ag8980
aS'for (i = 0, aveMI = 0; i < n; ++i)'
p13661
aS'aveMI += MIs[type][i];'
p13662
ag8980
aS'aveMI /= n;'
p13663
ag8806
aS'return (1);'
p13664
aS'else'
p13665
aS'return (0);'
p13666
ag9104
aa(lp13667
S'/*****************************************************************************'
p13668
aS'FILE:  match.h'
p13669
aS'AUTHOR:\tPatrick S. Hamilton'
p13670
aS'REVISED:\t12/4/2001'
p13671
aS'___________________________________________________________________________'
p13672
ag8980
aS'match.h: Beat matching prototype definitions.'
p13673
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p13674
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p13675
aS'the terms of the GNU Library General Public License as published by the Free'
p13676
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p13677
aS'later version.'
p13678
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p13679
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p13680
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p13681
aS'details.'
p13682
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p13683
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p13684
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p13685
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p13686
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p13687
aS'MA 02143 USA).  For updates to this software, please visit our website'
p13688
aS'(http://www.eplimited.com).'
p13689
aS'******************************************************************************/'
p13690
ag8980
aS'int NewBeatType(int* beat);'
p13691
aS'void BestMorphMatch(int* newBeat, int* matchType, double* matchIndex, double* mi2, int* shiftAdj);'
p13692
aS'void UpdateBeatType(int matchType, int* newBeat, double mi2, int shiftAdj);'
p13693
aS'int GetTypesCount(void);'
p13694
aS'int GetBeatTypeCount(int type);'
p13695
aS'int IsTypeIsolated(int type);'
p13696
aS'void SetBeatClass(int type, int beatClass);'
p13697
aS'int GetBeatClass(int type);'
p13698
aS'int GetDominantType(void);'
p13699
aS'int GetBeatWidth(int type);'
p13700
aS'int GetPolarity(int type);'
p13701
aS'int GetRhythmIndex(int type);'
p13702
aS'void ResetMatch(void);'
p13703
aS'void ClearLastNewType(void);'
p13704
aS'int GetBeatBegin(int type);'
p13705
aS'int GetBeatEnd(int type);'
p13706
aS'int GetBeatAmp(int type);'
p13707
aS'int MinimumBeatVariation(int type);'
p13708
aS'int GetBeatCenter(int type);'
p13709
aS'int WideBeatVariation(int type);'
p13710
aS'double DomCompare2(int* newBeat, int domType);'
p13711
aS'double DomCompare(int newType, int domType);'
p13712
ag8980
aS'// hey yo'
p13713
aa(lp13714
S'/*****************************************************************************'
p13715
aS'FILE:  analbeat.h'
p13716
aS'AUTHOR:\tPatrick S. Hamilton'
p13717
aS'REVISED:\t12/4/2001'
p13718
aS'___________________________________________________________________________'
p13719
ag8980
aS'analbeat.h: Beat analysis prototype definition.'
p13720
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p13721
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p13722
aS'the terms of the GNU Library General Public License as published by the Free'
p13723
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p13724
aS'later version.'
p13725
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p13726
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p13727
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p13728
aS'details.'
p13729
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p13730
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p13731
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p13732
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p13733
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p13734
aS'MA 02143 USA).  For updates to this software, please visit our website'
p13735
aS'(http://www.eplimited.com).'
p13736
aS'******************************************************************************/'
p13737
ag8980
aS'// External prototypes for analbeat.cpp'
p13738
ag8980
aS'void AnalyzeBeat(int* beat, int* onset, int* offset, int* isoLevel, int* beatBegin, int* beatEnd, int* amp);'
p13739
aS'// hey yo'
p13740
aa(lp13741
S'/*****************************************************************************'
p13742
aS'FILE:  noisechk.cpp'
p13743
aS'AUTHOR:\tPatrick S. Hamilton'
p13744
aS'REVISED:\t5/13/2002'
p13745
aS'___________________________________________________________________________'
p13746
ag8980
aS'noisechk.cpp: Noise Check'
p13747
aS'Copywrite (C) 2001 Patrick S. Hamilton'
p13748
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p13749
aS'the terms of the GNU Library General Public License as published by the Free'
p13750
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p13751
aS'later version.'
p13752
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p13753
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p13754
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p13755
aS'details.'
p13756
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p13757
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p13758
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p13759
ag8980
aS'You may contact the author by e-mail (pat@eplimited.edu) or postal mail'
p13760
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p13761
aS'MA 02143 USA).  For updates to this software, please visit our website'
p13762
aS'(http://www.eplimited.com).'
p13763
aS'__________________________________________________________________________'
p13764
ag8980
aS'This file contains functions for evaluating the noise content of a beat.'
p13765
ag8980
aS'*****************************************************************************/'
p13766
ag8980
aS'#include <stdlib.h>'
p13767
aS'#include "qrsdet.h"'
p13768
ag8980
aS'#define NB_LENGTH MS1500'
p13769
aS'#define NS_LENGTH MS50'
p13770
ag8980
aS'int NoiseBuffer[NB_LENGTH], NBPtr = 0;'
p13771
aS'int NoiseEstimate;'
p13772
ag8980
aS'/************************************************************************'
p13773
aS'GetNoiseEstimate() allows external access the present noise estimate.'
p13774
aS'this function is only used for debugging.'
p13775
aS'*************************************************************************/'
p13776
ag8980
aS'int GetNoiseEstimate()'
p13777
ag9665
aS'return (NoiseEstimate);'
p13778
ag9104
ag8980
aS'/***********************************************************************'
p13779
aS'NoiseCheck() must be called for every sample of data.  The data is'
p13780
aS'stored in a circular buffer to facilitate noise analysis.  When a'
p13781
aS'beat is detected NoiseCheck() is passed the sample delay since the'
p13782
aS'R-wave of the beat occurred (delay), the RR interval between this'
p13783
aS'beat and the next most recent beat, the estimated offset from the'
p13784
aS'R-wave to the beginning of the beat (beatBegin), and the estimated'
p13785
aS'offset from the R-wave to the end of the beat.'
p13786
ag8980
aS'NoiseCheck() estimates the noise in the beat by the maximum and'
p13787
aS'minimum signal values in either a window from the end of the'
p13788
aS'previous beat to the beginning of the present beat, or a 250 ms'
p13789
aS'window preceding the present beat, which ever is shorter.'
p13790
ag8980
aS'NoiseCheck() returns ratio of the signal variation in the window'
p13791
aS'between beats to the length of the window between the beats.  If'
p13792
aS'the heart rate is too high and the beat durations are too long,'
p13793
aS'NoiseCheck() returns 0.'
p13794
ag8980
aS'***********************************************************************/'
p13795
ag8980
aS'int NoiseCheck(int datum, int delay, int RR, int beatBegin, int beatEnd)'
p13796
ag9665
aS'int ptr, i;'
p13797
aS'int ncStart, ncEnd, ncMax, ncMin;'
p13798
aS'double noiseIndex;'
p13799
ag8980
aS'NoiseBuffer[NBPtr] = datum;'
p13800
ag8838
aS'NBPtr = 0;'
p13801
ag8980
aS'// Check for noise in region that is 300 ms following'
p13802
aS'// last R-wave and 250 ms preceding present R-wave.'
p13803
ag8980
aS'ncStart = delay + RR - beatEnd; // Calculate offset to end of previous beat.'
p13804
aS'ncEnd = delay + beatBegin; // Calculate offset to beginning of this beat.'
p13805
ag8851
aS'ncStart = ncEnd + MS250;'
p13806
ag8980
ag8980
aS'// Estimate noise if delay indicates a beat has been detected,'
p13807
aS'// the delay is not to long for the data buffer, and there is'
p13808
aS'// some space between the end of the last beat and the beginning'
p13809
aS'// of this beat.'
p13810
ag8980
ag8945
ag9665
ag8980
aS'ptr = NBPtr - ncStart; // Find index to end of last beat in'
p13811
aS'if (ptr < 0) // the circular buffer.'
p13812
aS'ptr += NB_LENGTH;'
p13813
ag8980
aS'// Find the maximum and minimum values in the'
p13814
aS'// isoelectric region between beats.'
p13815
ag8980
aS'ncMax = ncMin = NoiseBuffer[ptr];'
p13816
aS'for (i = 0; i < ncStart - ncEnd; ++i)'
p13817
ag9665
ag8891
aS'ncMax = NoiseBuffer[ptr];'
p13818
aS'else if (NoiseBuffer[ptr] < ncMin)'
p13819
aS'ncMin = NoiseBuffer[ptr];'
p13820
ag8904
aS'ptr = 0;'
p13821
ag9104
ag8980
aS'// The noise index is the ratio of the signal variation'
p13822
aS'// over the isoelectric window length, scaled by 10.'
p13823
ag8980
aS'noiseIndex = (ncMax - ncMin);'
p13824
aS'noiseIndex /= (ncStart - ncEnd);'
p13825
aS'NoiseEstimate = noiseIndex * 10;'
p13826
ag9104
aS'else'
p13827
aS'NoiseEstimate = 0;'
p13828
aS'return (NoiseEstimate);'
p13829
ag9104
aa(lp13830
S'/*****************************************************************************'
p13831
aS'FILE:  qrsdet.h'
p13832
aS'AUTHOR:\tPatrick S. Hamilton'
p13833
aS'REVISED:\t4/16/2002'
p13834
aS'___________________________________________________________________________'
p13835
ag8980
aS'qrsdet.h QRS detector parameter definitions'
p13836
aS'Copywrite (C) 2000 Patrick S. Hamilton'
p13837
ag8980
aS'This file is free software; you can redistribute it and/or modify it under'
p13838
aS'the terms of the GNU Library General Public License as published by the Free'
p13839
aS'Software Foundation; either version 2 of the License, or (at your option) any'
p13840
aS'later version.'
p13841
ag8980
aS'This software is distributed in the hope that it will be useful, but WITHOUT ANY'
p13842
aS'WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A'
p13843
aS'PARTICULAR PURPOSE.  See the GNU Library General Public License for more'
p13844
aS'details.'
p13845
ag8980
aS'You should have received a copy of the GNU Library General Public License along'
p13846
aS'with this library; if not, write to the Free Software Foundation, Inc., 59'
p13847
aS'Temple Place - Suite 330, Boston, MA 02111-1307, USA.'
p13848
ag8980
aS'You may contact the author by e-mail (pat@eplimited.com) or postal mail'
p13849
aS'(Patrick Hamilton, E.P. Limited, 35 Medford St., Suite 204 Somerville,'
p13850
aS'MA 02143 USA).  For updates to this software, please visit our website'
p13851
aS'(http://www.eplimited.com).'
p13852
aS'__________________________________________________________________________'
p13853
aS'Revisions:'
p13854
aS'4/16: Modified to allow simplified modification of digital filters in'
p13855
aS'qrsfilt().'
p13856
aS'*****************************************************************************/'
p13857
ag8980
ag8980
aS'#define SAMPLE_RATE 200 /* Sample rate in Hz. */'
p13858
aS'#define MS_PER_SAMPLE ((double)1000 / (double)SAMPLE_RATE)'
p13859
aS'#define MS10 ((int)(10 / MS_PER_SAMPLE + 0.5))'
p13860
aS'#define MS25 ((int)(25 / MS_PER_SAMPLE + 0.5))'
p13861
aS'#define MS30 ((int)(30 / MS_PER_SAMPLE + 0.5))'
p13862
aS'#define MS80 ((int)(80 / MS_PER_SAMPLE + 0.5))'
p13863
aS'#define MS95 ((int)(95 / MS_PER_SAMPLE + 0.5))'
p13864
aS'#define MS100 ((int)(100 / MS_PER_SAMPLE + 0.5))'
p13865
aS'#define MS125 ((int)(125 / MS_PER_SAMPLE + 0.5))'
p13866
aS'#define MS150 ((int)(150 / MS_PER_SAMPLE + 0.5))'
p13867
aS'#define MS160 ((int)(160 / MS_PER_SAMPLE + 0.5))'
p13868
aS'#define MS175 ((int)(175 / MS_PER_SAMPLE + 0.5))'
p13869
aS'#define MS195 ((int)(195 / MS_PER_SAMPLE + 0.5))'
p13870
aS'#define MS200 ((int)(200 / MS_PER_SAMPLE + 0.5))'
p13871
aS'#define MS220 ((int)(220 / MS_PER_SAMPLE + 0.5))'
p13872
aS'#define MS250 ((int)(250 / MS_PER_SAMPLE + 0.5))'
p13873
aS'#define MS300 ((int)(300 / MS_PER_SAMPLE + 0.5))'
p13874
aS'#define MS360 ((int)(360 / MS_PER_SAMPLE + 0.5))'
p13875
aS'#define MS450 ((int)(450 / MS_PER_SAMPLE + 0.5))'
p13876
aS'#define MS1000 SAMPLE_RATE'
p13877
aS'#define MS1500 ((int)(1500 / MS_PER_SAMPLE))'
p13878
aS'#define DERIV_LENGTH MS10'
p13879
aS'#define LPBUFFER_LGTH ((int)(2 * MS25))'
p13880
aS'#define HPBUFFER_LGTH MS125'
p13881
ag8980
aS'#define WINDOW_WIDTH MS80 // Moving window integration width.'
p13882
aS'#define FILTER_DELAY                                                                               \\'
p13883
aS'(int)(((double)DERIV_LENGTH / 2) + ((double)LPBUFFER_LGTH / 2 - 1)                             \\'
p13884
aS'+ (((double)HPBUFFER_LGTH - 1) / 2)                                                        \\'
p13885
aS'+ PRE_BLANK) // filter delays plus 200 ms blanking delay'
p13886
aS'#define DER_DELAY WINDOW_WIDTH + FILTER_DELAY + MS100'
p13887
aa(lp13888
S'int abs(int a)'
p13889
ag9665
ag8978
ag9665
aS'return a'
p13890
ag9104
aS'else'
p13891
ag9665
aS'return *a'
p13892
ag9104
aS'}'
p13893
aaa(lp13894
(g2
(lp13895
g9666
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9671
ag9104
ag119
tp13896
a(g3
(lp13897
g9759
ag8980
ag8980
ag8980
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9767
ag9104
ag119
tp13898
a(g4
(lp13899
g9775
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9779
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9784
ag9785
ag119
tp13900
a(g5
(lp13901
g10042
ag10043
ag10044
ag10045
ag10046
ag10047
ag10048
ag10049
ag8980
ag10050
ag10051
ag8980
ag10052
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10061
ag8980
ag8980
ag10062
ag8980
ag10063
ag8980
ag8980
ag8980
ag10065
ag10066
ag10067
ag8980
ag10068
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10083
ag10084
ag8980
ag10085
ag8980
ag8980
ag8980
ag10087
ag10088
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10101
ag9665
ag10102
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10134
ag10135
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9104
ag10150
ag8980
ag10151
ag10152
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10169
ag9104
ag407
tp13902
a(g6
(lp13903
g10175
ag10176
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10189
ag10190
ag9104
ag407
tp13904
a(g7
(lp13905
g10196
ag10197
ag8980
ag8980
ag8980
ag10200
ag10201
ag9104
ag407
tp13906
a(g8
(lp13907
g10207
ag10208
ag10209
ag10210
ag10211
ag10212
ag10213
ag10214
ag9104
ag407
tp13908
a(g9
(lp13909
g10221
ag10222
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10231
ag10232
ag8980
ag10233
ag10234
ag8980
ag8980
ag8980
ag8980
ag10236
ag10237
ag9104
ag407
tp13910
a(g10
(lp13911
g10241
ag10242
ag10243
ag10244
ag10245
ag10246
ag10247
ag10248
ag8980
ag10249
ag10250
ag8980
ag10251
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10260
ag8980
ag8980
ag10261
ag8980
ag10262
ag8980
ag8980
ag8980
ag10264
ag10265
ag10266
ag8980
ag10267
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10282
ag10283
ag8980
ag10284
ag8980
ag8980
ag8980
ag10286
ag10287
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10300
ag9665
ag10301
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10333
ag10334
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9104
ag10349
ag8980
ag10350
ag10351
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10368
ag9104
ag407
tp13912
a(g11
(lp13913
g10374
ag10375
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10388
ag10389
ag9104
ag407
tp13914
a(g12
(lp13915
g10395
ag10396
ag8980
ag8980
ag8980
ag10399
ag10400
ag9104
ag407
tp13916
a(g13
(lp13917
g10406
ag10407
ag10408
ag10409
ag10410
ag10411
ag10412
ag10413
ag9104
ag407
tp13918
a(g14
(lp13919
g10420
ag10421
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10430
ag10431
ag8980
ag10432
ag10433
ag8980
ag8980
ag8980
ag8980
ag10435
ag10436
ag9104
ag407
tp13920
a(g15
(lp13921
g10595
ag10596
ag10597
ag10598
ag10599
ag10600
ag10601
ag10602
ag8980
ag10603
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10610
ag10611
ag8980
ag10612
ag8980
ag10613
ag8980
ag10614
ag10615
ag8980
ag10616
ag8980
ag8980
ag8980
ag8980
ag10619
ag10620
ag10621
ag10622
ag8980
ag8980
ag8980
ag8980
ag10624
ag8980
ag10625
ag8980
ag10626
ag8980
ag10627
ag8980
ag8980
ag8980
ag8980
ag10629
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10632
ag8980
ag8980
ag8980
ag10633
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10636
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10639
ag8980
ag10640
ag10641
ag8980
ag10642
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag10646
ag10647
ag8980
ag10648
ag10649
ag8980
ag10650
ag10651
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10660
ag10661
ag8980
ag10662
ag9665
ag10663
ag10664
ag10665
ag9104
ag8980
ag10666
ag8980
ag10667
ag10668
ag8980
ag10669
ag8980
ag8980
ag8980
ag8980
ag10672
ag10673
ag10674
ag8980
ag10675
ag8980
ag10676
ag8980
ag10677
ag10678
ag8980
ag10679
ag8980
ag10680
ag10681
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10698
ag8980
ag10699
ag8980
ag10700
ag8980
ag10701
ag10702
ag10703
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10706
ag8980
ag10707
ag9104
ag1509
tp13922
a(g16
(lp13923
g10719
ag10720
ag10721
ag8980
ag10722
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10738
ag9104
ag1509
tp13924
a(g17
(lp13925
g10843
ag10844
ag8980
ag10845
ag8980
ag10846
ag8980
ag8980
ag10848
ag8980
ag10849
ag10850
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10859
ag10860
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10864
ag10865
ag10866
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10894
ag10895
ag8980
ag10896
ag9665
ag10897
ag10898
ag9104
ag8980
ag10899
ag8980
ag8980
ag8980
ag8980
ag10901
ag10902
ag8980
ag10903
ag8980
ag9665
ag8980
ag8980
ag8980
ag10906
ag8980
ag9665
ag8980
ag8980
ag8980
ag10909
ag10910
ag8980
ag8980
ag8980
ag8980
ag10913
ag10914
ag10915
ag8980
ag8980
ag8980
ag8980
ag10917
ag10918
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag10921
ag10922
ag8980
ag10923
ag10924
ag9104
ag1509
tp13926
a(g18
(lp13927
g10926
ag9104
ag1509
tp13928
a(g19
(lp13929
g8980
ag8980
ag8980
ag10930
ag9104
ag1509
tp13930
a(g20
(lp13931
g10932
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10937
ag9104
ag1509
tp13932
a(g21
(lp13933
g10939
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag10944
ag9104
ag1509
tp13934
a(g22
(lp13935
g11059
ag11060
ag11061
ag11062
ag11063
ag8980
ag11064
ag11065
ag11066
ag11067
ag8980
ag11068
ag8980
ag11069
ag8980
ag11070
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9104
ag2473
tp13936
a(g23
(lp13937
g11133
ag11134
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11142
ag9665
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11152
ag9104
ag8980
ag11153
ag9104
ag2473
tp13938
a(g24
(lp13939
g8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag11160
ag9104
ag2473
tp13940
a(g25
(lp13941
g11343
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11349
ag9104
ag2738
tp13942
a(g26
(lp13943
g11362
ag11363
ag11364
ag11365
ag8980
ag11366
ag11367
ag8980
ag8980
ag8980
ag8980
ag11369
ag11370
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11375
ag11376
ag8980
ag8980
ag8980
ag11378
ag8980
ag11379
ag11380
ag8980
ag11381
ag11382
ag11383
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11391
ag8980
ag8980
ag8980
ag8980
ag11394
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11425
ag9665
ag8980
ag11426
ag8980
ag8980
ag8980
ag11428
ag8980
ag11429
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11433
ag8980
ag11434
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11438
ag8980
ag8980
ag8980
ag11440
ag8980
ag11441
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11445
ag8980
ag11446
ag11447
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9104
ag8980
ag11451
ag11452
ag11453
ag8980
ag8980
ag8980
ag8980
ag11456
ag11457
ag8980
ag8980
ag8980
ag8980
ag11459
ag11460
ag8980
ag8980
ag8980
ag8980
ag11462
ag8980
ag8980
ag11463
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag11468
ag11469
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11478
ag11479
ag11480
ag8980
ag8980
ag8980
ag11482
ag8980
ag11483
ag11484
ag11485
ag11486
ag11487
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11490
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11494
ag11495
ag8980
ag8980
ag8980
ag11497
ag8980
ag8980
ag11498
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag11503
ag9104
ag2738
tp13944
a(g27
(lp13945
g11656
ag11657
ag11658
ag11659
ag11660
ag11661
ag9104
ag3942
tp13946
a(g28
(lp13947
g11679
ag11680
ag11681
ag11682
ag11683
ag8980
ag11684
ag8980
ag11685
ag8980
ag8980
ag8980
ag11687
ag8980
ag11688
ag8980
ag11689
ag8980
ag8980
ag8980
ag8980
ag11692
ag8980
ag11693
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11696
ag8980
ag8980
ag8980
ag9665
ag11698
ag11699
ag9104
ag8980
ag11700
ag8980
ag11701
ag11702
ag8980
ag11703
ag11704
ag8980
ag11705
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11711
ag8980
ag11712
ag11713
ag11714
ag8980
ag11715
ag8980
ag8980
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag11720
ag8980
ag11721
ag8980
ag8980
ag8980
ag11724
ag8980
ag8980
ag11725
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11730
ag8980
ag11731
ag9665
ag11732
ag11733
ag9104
ag8980
ag11734
ag11735
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11738
ag11739
ag8980
ag8980
ag8980
ag8980
ag11742
ag8980
ag11743
ag9104
ag3942
tp13948
a(g29
(lp13949
g11745
ag8980
ag8980
ag8980
ag9104
ag3942
tp13950
a(g30
(lp13951
g11802
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11808
ag11809
ag11810
ag11811
ag11812
ag11813
ag9104
ag4207
tp13952
a(g31
(lp13953
g11821
ag11822
ag11823
ag11824
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11829
ag8980
ag8980
ag11832
ag11833
ag11834
ag11835
ag11836
ag8980
ag8980
ag11839
ag9104
ag4207
tp13954
a(g32
(lp13955
g8980
ag9665
ag8980
ag8980
ag9104
ag4207
tp13956
a(g33
(lp13957
g11851
ag11852
ag11853
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11858
ag11859
ag8980
ag8980
ag11861
ag8980
ag11862
ag8980
ag8980
ag8980
ag11864
ag9104
ag4207
tp13958
a(g34
(lp13959
g11872
ag11873
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11878
ag11879
ag8980
ag8980
ag11881
ag9104
ag4207
tp13960
a(g35
(lp13961
g11883
ag11884
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11889
ag11890
ag8980
ag8980
ag11892
ag9104
ag4207
tp13962
a(g36
(lp13963
g11898
ag11899
ag11900
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag11905
ag11906
ag11907
ag8980
ag8980
ag8980
ag8980
ag8980
ag11911
ag11912
ag9104
ag4207
tp13964
a(g37
(lp13965
g12014
ag12015
ag8980
ag12016
ag8980
ag12017
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag12098
ag9104
ag4597
tp13966
a(g38
(lp13967
g12114
ag12115
ag8980
ag12116
ag12117
ag12118
ag8980
ag12119
ag12120
ag12121
ag8980
ag8980
ag8980
ag12124
ag8980
ag8980
ag8980
ag8980
ag12126
ag12127
ag12128
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag12176
ag12177
ag12178
ag12179
ag9104
ag4597
tp13968
a(g39
(lp13969
g12191
ag12192
ag8980
ag12193
ag12194
ag12195
ag8980
ag12196
ag8980
ag8980
ag12198
ag12199
ag12200
ag12201
ag8980
ag8980
ag8980
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag12239
ag12240
ag9104
ag4597
tp13970
a(g40
(lp13971
g8980
ag8980
ag12249
ag12250
ag12251
ag8980
ag8980
ag12253
ag12254
ag12255
ag12256
ag12257
ag9104
ag4597
tp13972
a(g41
(lp13973
g12259
ag8980
ag8980
ag12261
ag12262
ag12263
ag12264
ag12265
ag9104
ag4597
tp13974
a(g42
(lp13975
g5844
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag12423
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9104
ag4597
tp13976
a(g43
(lp13977
g8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9665
ag12459
ag12460
ag9104
ag9104
ag4597
tp13978
a(g44
(lp13979
g8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9665
ag12472
ag12473
ag9104
ag9104
ag4597
tp13980
a(g45
(lp13981
g12477
ag12478
ag8980
ag12479
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag12576
ag12577
ag12578
ag8980
ag8980
ag8980
ag12581
ag8980
ag8980
ag8980
ag12584
ag8980
ag8980
ag8980
ag12587
ag12588
ag8980
ag8980
ag8980
ag8980
ag8980
ag12591
ag8980
ag12592
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9104
ag4597
tp13982
a(g46
(lp13983
g12597
ag8980
ag12598
ag12599
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag6488
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag12708
ag12709
ag12710
ag12711
ag12712
ag12713
ag12714
ag12715
ag12716
ag12717
ag12718
ag12719
ag12720
ag12721
ag12722
ag12723
ag8980
ag8980
ag8980
ag9665
ag12726
ag12727
ag9104
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag12736
ag12737
ag12738
ag8980
ag8980
ag12740
ag12741
ag8980
ag8980
ag12743
ag8980
ag8980
ag8980
ag9104
ag4597
tp13984
a(g47
(lp13985
g12766
ag8980
ag12767
ag8980
ag8980
ag9104
ag4597
tp13986
a(g48
(lp13987
g12787
ag12788
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag12795
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9104
ag9104
ag4597
tp13988
a(g49
(lp13989
g12896
ag8980
ag12897
ag12898
ag12899
ag12900
ag12901
ag12902
ag12903
ag12904
ag8980
ag12905
ag12906
ag8980
ag8980
ag12907
ag8980
ag12908
ag12909
ag8980
ag12910
ag12911
ag12912
ag12913
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag12916
ag8980
ag12917
ag12918
ag12919
ag12920
ag12921
ag9104
ag4597
tp13990
a(g50
(lp13991
g12923
ag12924
ag8980
ag12925
ag12926
ag12927
ag12928
ag12929
ag12930
ag12931
ag12932
ag12933
ag12934
ag12935
ag12936
ag9104
ag4597
tp13992
a(g51
(lp13993
g13238
ag13239
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9104
ag7366
tp13994
a(g52
(lp13995
g13255
ag13256
ag13257
ag8980
ag13258
ag8980
ag13259
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag13264
ag8980
ag13265
ag13266
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag13271
ag13272
ag13273
ag13274
ag8980
ag13275
ag13276
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag13294
ag13295
ag13296
ag8980
ag13297
ag13298
ag13299
ag8980
ag13300
ag13301
ag13302
ag9104
ag7366
tp13996
a(g53
(lp13997
g13310
ag13311
ag13312
ag13313
ag8980
ag13314
ag8980
ag13315
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag13320
ag8980
ag13321
ag13322
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag13327
ag8980
ag13328
ag13329
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag13343
ag13344
ag13345
ag8980
ag13346
ag13347
ag13348
ag8980
ag13349
ag13350
ag8980
ag13351
ag9104
ag7366
tp13998
a(g54
(lp13999
g13357
ag13358
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag9104
ag7366
tp14000
a(g55
(lp14001
g13370
ag9104
ag7366
tp14002
a(g56
(lp14003
g13376
ag9104
ag7366
tp14004
a(g57
(lp14005
g13382
ag9104
ag7366
tp14006
a(g58
(lp14007
g13388
ag9104
ag7366
tp14008
a(g59
(lp14009
g8980
ag8980
ag13395
ag9104
ag7366
tp14010
a(g60
(lp14011
g13401
ag9104
ag7366
tp14012
a(g61
(lp14013
g13407
ag13408
ag8980
ag13409
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag13426
ag13427
ag8980
ag13428
ag9665
ag13429
ag13430
ag8980
ag13431
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag13437
ag8980
ag13438
ag8980
ag13439
ag8980
ag8980
ag8980
ag8980
ag13442
ag13443
ag13444
ag13445
ag13446
ag13447
ag13448
ag13449
ag13450
ag13451
ag13452
ag9104
ag9104
ag7366
tp14014
a(g62
(lp14015
g13459
ag13460
ag13461
ag13462
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag13467
ag13468
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag13486
ag13487
ag13488
ag13489
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag13534
ag13535
ag13536
ag13537
ag9104
ag7366
tp14016
a(g63
(lp14017
g13543
ag13544
ag8980
ag13545
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag13550
ag13551
ag8980
ag8980
ag8980
ag9665
ag8980
ag8980
ag13554
ag9104
ag8980
ag13555
ag8980
ag13556
ag13557
ag8980
ag13558
ag8980
ag13559
ag13560
ag8980
ag13561
ag13562
ag13563
ag13564
ag13565
ag8980
ag13566
ag8980
ag8980
ag8980
ag13569
ag9104
ag7366
tp14018
a(g64
(lp14019
g13575
ag13576
ag8980
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag13580
ag13581
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag13587
ag9104
ag7366
tp14020
a(g65
(lp14021
g8980
ag8980
ag9104
ag7366
tp14022
a(g66
(lp14023
g13598
ag9104
ag7366
tp14024
a(g67
(lp14025
g13604
ag9104
ag7366
tp14026
a(g68
(lp14027
g13606
ag9104
ag7366
tp14028
a(g69
(lp14029
g13613
ag13614
ag9104
ag7366
tp14030
a(g70
(lp14031
g13616
ag13617
ag9104
ag7366
tp14032
a(g71
(lp14033
g13622
ag8980
ag13623
ag8980
ag8980
ag8980
ag8980
ag13626
ag8980
ag13627
ag13628
ag13629
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag13633
ag13634
ag13635
ag13636
ag13637
ag8980
ag13638
ag8980
ag13639
ag9104
ag7366
tp14034
a(g72
(lp14035
g13645
ag8980
ag9665
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag13650
ag9104
ag7366
tp14036
a(g73
(lp14037
g13657
ag13658
ag8980
ag13659
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag13663
ag8980
ag8980
ag8980
ag13666
ag9104
ag7366
tp14038
a(g74
(lp14039
g13778
ag9104
ag8816
tp14040
a(g75
(lp14041
g13797
ag13798
ag13799
ag8980
ag13800
ag8980
ag8980
ag8980
ag13802
ag13803
ag8980
ag13804
ag13805
ag8980
ag8980
ag8980
ag8980
ag13807
ag13808
ag13809
ag13810
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag13829
ag9104
ag8816
tp14042
a(g76
(lp14043
g8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag8980
ag13893
ag8967
tp14044
aag77
a.